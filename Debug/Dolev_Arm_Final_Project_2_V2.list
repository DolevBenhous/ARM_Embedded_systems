
Dolev_Arm_Final_Project_2_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000184fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e18  080186cc  080186cc  000286cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b4e4  0801b4e4  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b4e4  0801b4e4  0002b4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b4ec  0801b4ec  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b4ec  0801b4ec  0002b4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b4f0  0801b4f0  0002b4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801b4f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  0801b584  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  0801b624  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000096a8  200001d0  0801b6c4  000301d0  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20009878  0801b6c4  00039878  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037289  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000859a  00000000  00000000  00067489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002768  00000000  00000000  0006fa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002518  00000000  00000000  00072190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003abd7  00000000  00000000  000746a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004404d  00000000  00000000  000af27f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00114f44  00000000  00000000  000f32cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00208210  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000abe0  00000000  00000000  00208260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080186b4 	.word	0x080186b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	080186b4 	.word	0x080186b4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b70:	f000 b974 	b.w	8000e5c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9d08      	ldr	r5, [sp, #32]
 8000b92:	4604      	mov	r4, r0
 8000b94:	468e      	mov	lr, r1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d14d      	bne.n	8000c36 <__udivmoddi4+0xaa>
 8000b9a:	428a      	cmp	r2, r1
 8000b9c:	4694      	mov	ip, r2
 8000b9e:	d969      	bls.n	8000c74 <__udivmoddi4+0xe8>
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	b152      	cbz	r2, 8000bbc <__udivmoddi4+0x30>
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bba:	4094      	lsls	r4, r2
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	0c21      	lsrs	r1, r4, #16
 8000bc2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc6:	fa1f f78c 	uxth.w	r7, ip
 8000bca:	fb08 e316 	mls	r3, r8, r6, lr
 8000bce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bd2:	fb06 f107 	mul.w	r1, r6, r7
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000be2:	f080 811f 	bcs.w	8000e24 <__udivmoddi4+0x298>
 8000be6:	4299      	cmp	r1, r3
 8000be8:	f240 811c 	bls.w	8000e24 <__udivmoddi4+0x298>
 8000bec:	3e02      	subs	r6, #2
 8000bee:	4463      	add	r3, ip
 8000bf0:	1a5b      	subs	r3, r3, r1
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f707 	mul.w	r7, r0, r7
 8000c04:	42a7      	cmp	r7, r4
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x92>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c10:	f080 810a 	bcs.w	8000e28 <__udivmoddi4+0x29c>
 8000c14:	42a7      	cmp	r7, r4
 8000c16:	f240 8107 	bls.w	8000e28 <__udivmoddi4+0x29c>
 8000c1a:	4464      	add	r4, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	1be4      	subs	r4, r4, r7
 8000c24:	2600      	movs	r6, #0
 8000c26:	b11d      	cbz	r5, 8000c30 <__udivmoddi4+0xa4>
 8000c28:	40d4      	lsrs	r4, r2
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c30:	4631      	mov	r1, r6
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d909      	bls.n	8000c4e <__udivmoddi4+0xc2>
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	f000 80ef 	beq.w	8000e1e <__udivmoddi4+0x292>
 8000c40:	2600      	movs	r6, #0
 8000c42:	e9c5 0100 	strd	r0, r1, [r5]
 8000c46:	4630      	mov	r0, r6
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	fab3 f683 	clz	r6, r3
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d14a      	bne.n	8000cec <__udivmoddi4+0x160>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xd4>
 8000c5a:	4282      	cmp	r2, r0
 8000c5c:	f200 80f9 	bhi.w	8000e52 <__udivmoddi4+0x2c6>
 8000c60:	1a84      	subs	r4, r0, r2
 8000c62:	eb61 0303 	sbc.w	r3, r1, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	469e      	mov	lr, r3
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	d0e0      	beq.n	8000c30 <__udivmoddi4+0xa4>
 8000c6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c72:	e7dd      	b.n	8000c30 <__udivmoddi4+0xa4>
 8000c74:	b902      	cbnz	r2, 8000c78 <__udivmoddi4+0xec>
 8000c76:	deff      	udf	#255	; 0xff
 8000c78:	fab2 f282 	clz	r2, r2
 8000c7c:	2a00      	cmp	r2, #0
 8000c7e:	f040 8092 	bne.w	8000da6 <__udivmoddi4+0x21a>
 8000c82:	eba1 010c 	sub.w	r1, r1, ip
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2601      	movs	r6, #1
 8000c90:	0c20      	lsrs	r0, r4, #16
 8000c92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c96:	fb07 1113 	mls	r1, r7, r3, r1
 8000c9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ca2:	4288      	cmp	r0, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	eb1c 0101 	adds.w	r1, ip, r1
 8000caa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x12a>
 8000cb0:	4288      	cmp	r0, r1
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2c0>
 8000cb6:	4643      	mov	r3, r8
 8000cb8:	1a09      	subs	r1, r1, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x156>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x154>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2ca>
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cea:	e79c      	b.n	8000c26 <__udivmoddi4+0x9a>
 8000cec:	f1c6 0720 	rsb	r7, r6, #32
 8000cf0:	40b3      	lsls	r3, r6
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000d02:	431c      	orrs	r4, r3
 8000d04:	40f9      	lsrs	r1, r7
 8000d06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d12:	0c20      	lsrs	r0, r4, #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fb09 1118 	mls	r1, r9, r8, r1
 8000d1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d20:	fb08 f00e 	mul.w	r0, r8, lr
 8000d24:	4288      	cmp	r0, r1
 8000d26:	fa02 f206 	lsl.w	r2, r2, r6
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b8>
 8000d2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2bc>
 8000d38:	4288      	cmp	r0, r1
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2bc>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4461      	add	r1, ip
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d58:	458e      	cmp	lr, r1
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1e2>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2b4>
 8000d66:	458e      	cmp	lr, r1
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2b4>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4461      	add	r1, ip
 8000d6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d72:	fba0 9402 	umull	r9, r4, r0, r2
 8000d76:	eba1 010e 	sub.w	r1, r1, lr
 8000d7a:	42a1      	cmp	r1, r4
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46a6      	mov	lr, r4
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x2a4>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x2a0>
 8000d84:	b15d      	cbz	r5, 8000d9e <__udivmoddi4+0x212>
 8000d86:	ebb3 0208 	subs.w	r2, r3, r8
 8000d8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d92:	fa22 f306 	lsr.w	r3, r2, r6
 8000d96:	40f1      	lsrs	r1, r6
 8000d98:	431f      	orrs	r7, r3
 8000d9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9e:	2600      	movs	r6, #0
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	f1c2 0320 	rsb	r3, r2, #32
 8000daa:	40d8      	lsrs	r0, r3
 8000dac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db0:	fa21 f303 	lsr.w	r3, r1, r3
 8000db4:	4091      	lsls	r1, r2
 8000db6:	4301      	orrs	r1, r0
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc8:	0c0b      	lsrs	r3, r1, #16
 8000dca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dce:	fb00 f60e 	mul.w	r6, r0, lr
 8000dd2:	429e      	cmp	r6, r3
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x260>
 8000dda:	eb1c 0303 	adds.w	r3, ip, r3
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b8>
 8000de4:	429e      	cmp	r6, r3
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b8>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	1b9b      	subs	r3, r3, r6
 8000dee:	b289      	uxth	r1, r1
 8000df0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df4:	fb07 3316 	mls	r3, r7, r6, r3
 8000df8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000e00:	428b      	cmp	r3, r1
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x28a>
 8000e04:	eb1c 0101 	adds.w	r1, ip, r1
 8000e08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2b0>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2b0>
 8000e12:	3e02      	subs	r6, #2
 8000e14:	4461      	add	r1, ip
 8000e16:	1ac9      	subs	r1, r1, r3
 8000e18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0x104>
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e705      	b.n	8000c30 <__udivmoddi4+0xa4>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e3      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6f8      	b.n	8000c1e <__udivmoddi4+0x92>
 8000e2c:	454b      	cmp	r3, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f8>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f8>
 8000e3c:	4646      	mov	r6, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x28a>
 8000e40:	4620      	mov	r0, r4
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1e2>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x260>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b8>
 8000e4c:	3b02      	subs	r3, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x12c>
 8000e52:	4630      	mov	r0, r6
 8000e54:	e709      	b.n	8000c6a <__udivmoddi4+0xde>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x156>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e66:	463b      	mov	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000e74:	4a21      	ldr	r2, [pc, #132]	; (8000efc <MX_ADC1_Init+0x9c>)
 8000e76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e98:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <MX_ADC1_Init+0xa0>)
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	480e      	ldr	r0, [pc, #56]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000ec0:	f002 faf2 	bl	80034a8 <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000eca:	f000 fcad 	bl	8001828 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <MX_ADC1_Init+0x98>)
 8000ee0:	f002 fd30 	bl	8003944 <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eea:	f000 fc9d 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200001ec 	.word	0x200001ec
 8000efc:	40012000 	.word	0x40012000
 8000f00:	0f000001 	.word	0x0f000001

08000f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a35      	ldr	r2, [pc, #212]	; (8000ff8 <HAL_ADC_MspInit+0xf4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d163      	bne.n	8000fee <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f26:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b2f      	ldr	r3, [pc, #188]	; (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a2e      	ldr	r2, [pc, #184]	; (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f56:	2301      	movs	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4825      	ldr	r0, [pc, #148]	; (8001000 <HAL_ADC_MspInit+0xfc>)
 8000f6a:	f004 fe61 	bl	8005c30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000f70:	4a25      	ldr	r2, [pc, #148]	; (8001008 <HAL_ADC_MspInit+0x104>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000f98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000fac:	2204      	movs	r2, #4
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fc2:	4810      	ldr	r0, [pc, #64]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000fc4:	f003 f82a 	bl	800401c <HAL_DMA_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_ADC_MspInit+0xce>
    {
      Error_Handler();
 8000fce:	f000 fc2b 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000fd6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_ADC_MspInit+0x100>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2012      	movs	r0, #18
 8000fe4:	f002 ffe3 	bl	8003fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000fe8:	2012      	movs	r0, #18
 8000fea:	f002 fffc 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40012000 	.word	0x40012000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000
 8001004:	20000234 	.word	0x20000234
 8001008:	40026470 	.word	0x40026470

0800100c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001012:	4b42      	ldr	r3, [pc, #264]	; (800111c <MX_DMA_Init+0x110>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a41      	ldr	r2, [pc, #260]	; (800111c <MX_DMA_Init+0x110>)
 8001018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b3f      	ldr	r3, [pc, #252]	; (800111c <MX_DMA_Init+0x110>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800102a:	4b3c      	ldr	r3, [pc, #240]	; (800111c <MX_DMA_Init+0x110>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a3b      	ldr	r2, [pc, #236]	; (800111c <MX_DMA_Init+0x110>)
 8001030:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b39      	ldr	r3, [pc, #228]	; (800111c <MX_DMA_Init+0x110>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200b      	movs	r0, #11
 8001048:	f002 ffb1 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800104c:	200b      	movs	r0, #11
 800104e:	f002 ffca 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	200d      	movs	r0, #13
 8001058:	f002 ffa9 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800105c:	200d      	movs	r0, #13
 800105e:	f002 ffc2 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	200e      	movs	r0, #14
 8001068:	f002 ffa1 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800106c:	200e      	movs	r0, #14
 800106e:	f002 ffba 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	200f      	movs	r0, #15
 8001078:	f002 ff99 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800107c:	200f      	movs	r0, #15
 800107e:	f002 ffb2 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2011      	movs	r0, #17
 8001088:	f002 ff91 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800108c:	2011      	movs	r0, #17
 800108e:	f002 ffaa 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	202f      	movs	r0, #47	; 0x2f
 8001098:	f002 ff89 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800109c:	202f      	movs	r0, #47	; 0x2f
 800109e:	f002 ffa2 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	2038      	movs	r0, #56	; 0x38
 80010a8:	f002 ff81 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010ac:	2038      	movs	r0, #56	; 0x38
 80010ae:	f002 ff9a 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2039      	movs	r0, #57	; 0x39
 80010b8:	f002 ff79 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010bc:	2039      	movs	r0, #57	; 0x39
 80010be:	f002 ff92 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	203a      	movs	r0, #58	; 0x3a
 80010c8:	f002 ff71 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010cc:	203a      	movs	r0, #58	; 0x3a
 80010ce:	f002 ff8a 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	203b      	movs	r0, #59	; 0x3b
 80010d8:	f002 ff69 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010dc:	203b      	movs	r0, #59	; 0x3b
 80010de:	f002 ff82 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	203c      	movs	r0, #60	; 0x3c
 80010e8:	f002 ff61 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80010ec:	203c      	movs	r0, #60	; 0x3c
 80010ee:	f002 ff7a 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2044      	movs	r0, #68	; 0x44
 80010f8:	f002 ff59 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80010fc:	2044      	movs	r0, #68	; 0x44
 80010fe:	f002 ff72 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2045      	movs	r0, #69	; 0x45
 8001108:	f002 ff51 	bl	8003fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800110c:	2045      	movs	r0, #69	; 0x45
 800110e:	f002 ff6a 	bl	8003fe6 <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PD6   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001136:	4b55      	ldr	r3, [pc, #340]	; (800128c <MX_GPIO_Init+0x16c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a54      	ldr	r2, [pc, #336]	; (800128c <MX_GPIO_Init+0x16c>)
 800113c:	f043 0310 	orr.w	r3, r3, #16
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b52      	ldr	r3, [pc, #328]	; (800128c <MX_GPIO_Init+0x16c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	4b4f      	ldr	r3, [pc, #316]	; (800128c <MX_GPIO_Init+0x16c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a4e      	ldr	r2, [pc, #312]	; (800128c <MX_GPIO_Init+0x16c>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b4c      	ldr	r3, [pc, #304]	; (800128c <MX_GPIO_Init+0x16c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001166:	4b49      	ldr	r3, [pc, #292]	; (800128c <MX_GPIO_Init+0x16c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a48      	ldr	r2, [pc, #288]	; (800128c <MX_GPIO_Init+0x16c>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b46      	ldr	r3, [pc, #280]	; (800128c <MX_GPIO_Init+0x16c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b43      	ldr	r3, [pc, #268]	; (800128c <MX_GPIO_Init+0x16c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a42      	ldr	r2, [pc, #264]	; (800128c <MX_GPIO_Init+0x16c>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b40      	ldr	r3, [pc, #256]	; (800128c <MX_GPIO_Init+0x16c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <MX_GPIO_Init+0x16c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a3c      	ldr	r2, [pc, #240]	; (800128c <MX_GPIO_Init+0x16c>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b3a      	ldr	r3, [pc, #232]	; (800128c <MX_GPIO_Init+0x16c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	4b37      	ldr	r3, [pc, #220]	; (800128c <MX_GPIO_Init+0x16c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a36      	ldr	r2, [pc, #216]	; (800128c <MX_GPIO_Init+0x16c>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b34      	ldr	r3, [pc, #208]	; (800128c <MX_GPIO_Init+0x16c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <MX_GPIO_Init+0x16c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a30      	ldr	r2, [pc, #192]	; (800128c <MX_GPIO_Init+0x16c>)
 80011cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b2e      	ldr	r3, [pc, #184]	; (800128c <MX_GPIO_Init+0x16c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80011e4:	482a      	ldr	r0, [pc, #168]	; (8001290 <MX_GPIO_Init+0x170>)
 80011e6:	f004 fecf 	bl	8005f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2140      	movs	r1, #64	; 0x40
 80011ee:	4829      	ldr	r0, [pc, #164]	; (8001294 <MX_GPIO_Init+0x174>)
 80011f0:	f004 feca 	bl	8005f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	4823      	ldr	r0, [pc, #140]	; (8001298 <MX_GPIO_Init+0x178>)
 800120c:	f004 fd10 	bl	8005c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001210:	f244 0381 	movw	r3, #16513	; 0x4081
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	4819      	ldr	r0, [pc, #100]	; (8001290 <MX_GPIO_Init+0x170>)
 800122a:	f004 fd01 	bl	8005c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	4813      	ldr	r0, [pc, #76]	; (8001294 <MX_GPIO_Init+0x174>)
 8001246:	f004 fcf3 	bl	8005c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_GPIO_Init+0x174>)
 800125e:	f004 fce7 	bl	8005c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001262:	2340      	movs	r3, #64	; 0x40
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126a:	2301      	movs	r3, #1
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001272:	2307      	movs	r3, #7
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_GPIO_Init+0x17c>)
 800127e:	f004 fcd7 	bl	8005c30 <HAL_GPIO_Init>

}
 8001282:	bf00      	nop
 8001284:	3730      	adds	r7, #48	; 0x30
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40020400 	.word	0x40020400
 8001294:	40021800 	.word	0x40021800
 8001298:	40020800 	.word	0x40020800
 800129c:	40020c00 	.word	0x40020c00

080012a0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_I2C1_Init+0x74>)
 80012a6:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <MX_I2C1_Init+0x78>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_I2C1_Init+0x74>)
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <MX_I2C1_Init+0x7c>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_I2C1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_I2C1_Init+0x74>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_I2C1_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_I2C1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_I2C1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_I2C1_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_I2C1_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <MX_I2C1_Init+0x74>)
 80012dc:	f004 fe88 	bl	8005ff0 <HAL_I2C_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012e6:	f000 fa9f 	bl	8001828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <MX_I2C1_Init+0x74>)
 80012ee:	f006 fd57 	bl	8007da0 <HAL_I2CEx_ConfigAnalogFilter>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012f8:	f000 fa96 	bl	8001828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012fc:	2100      	movs	r1, #0
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_I2C1_Init+0x74>)
 8001300:	f006 fd99 	bl	8007e36 <HAL_I2CEx_ConfigDigitalFilter>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800130a:	f000 fa8d 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000294 	.word	0x20000294
 8001318:	40005400 	.word	0x40005400
 800131c:	00808cd2 	.word	0x00808cd2

08001320 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_I2C2_Init+0x74>)
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <MX_I2C2_Init+0x78>)
 8001328:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_I2C2_Init+0x74>)
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <MX_I2C2_Init+0x7c>)
 800132e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 154;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_I2C2_Init+0x74>)
 8001332:	229a      	movs	r2, #154	; 0x9a
 8001334:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_I2C2_Init+0x74>)
 8001338:	2201      	movs	r2, #1
 800133a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_I2C2_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_I2C2_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_I2C2_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_I2C2_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_I2C2_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <MX_I2C2_Init+0x74>)
 800135c:	f004 fe48 	bl	8005ff0 <HAL_I2C_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001366:	f000 fa5f 	bl	8001828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <MX_I2C2_Init+0x74>)
 800136e:	f006 fd17 	bl	8007da0 <HAL_I2CEx_ConfigAnalogFilter>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001378:	f000 fa56 	bl	8001828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_I2C2_Init+0x74>)
 8001380:	f006 fd59 	bl	8007e36 <HAL_I2CEx_ConfigDigitalFilter>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800138a:	f000 fa4d 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200002e8 	.word	0x200002e8
 8001398:	40005800 	.word	0x40005800
 800139c:	00808cd2 	.word	0x00808cd2

080013a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b0ac      	sub	sp, #176	; 0xb0
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	f107 0318 	add.w	r3, r7, #24
 80013bc:	2284      	movs	r2, #132	; 0x84
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f016 f8a9 	bl	8017518 <memset>
  if(i2cHandle->Instance==I2C1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a5c      	ldr	r2, [pc, #368]	; (800153c <HAL_I2C_MspInit+0x19c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	f040 80c3 	bne.w	8001558 <HAL_I2C_MspInit+0x1b8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013d8:	2300      	movs	r3, #0
 80013da:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	4618      	mov	r0, r3
 80013e2:	f007 fb97 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80013ec:	f000 fa1c 	bl	8001828 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	4b53      	ldr	r3, [pc, #332]	; (8001540 <HAL_I2C_MspInit+0x1a0>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	4a52      	ldr	r2, [pc, #328]	; (8001540 <HAL_I2C_MspInit+0x1a0>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
 80013fc:	4b50      	ldr	r3, [pc, #320]	; (8001540 <HAL_I2C_MspInit+0x1a0>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001408:	f44f 7310 	mov.w	r3, #576	; 0x240
 800140c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001410:	2312      	movs	r3, #18
 8001412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001422:	2304      	movs	r3, #4
 8001424:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800142c:	4619      	mov	r1, r3
 800142e:	4845      	ldr	r0, [pc, #276]	; (8001544 <HAL_I2C_MspInit+0x1a4>)
 8001430:	f004 fbfe 	bl	8005c30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001434:	4b42      	ldr	r3, [pc, #264]	; (8001540 <HAL_I2C_MspInit+0x1a0>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	4a41      	ldr	r2, [pc, #260]	; (8001540 <HAL_I2C_MspInit+0x1a0>)
 800143a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800143e:	6413      	str	r3, [r2, #64]	; 0x40
 8001440:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <HAL_I2C_MspInit+0x1a0>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800144c:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 800144e:	4a3f      	ldr	r2, [pc, #252]	; (800154c <HAL_I2C_MspInit+0x1ac>)
 8001450:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001452:	4b3d      	ldr	r3, [pc, #244]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 8001454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001458:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800145a:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001460:	4b39      	ldr	r3, [pc, #228]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001466:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 8001468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800146e:	4b36      	ldr	r3, [pc, #216]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800147a:	4b33      	ldr	r3, [pc, #204]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 800147c:	2200      	movs	r2, #0
 800147e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001480:	4b31      	ldr	r3, [pc, #196]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 8001488:	2204      	movs	r2, #4
 800148a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800148c:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 800148e:	2203      	movs	r2, #3
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 8001494:	2200      	movs	r2, #0
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 800149a:	2200      	movs	r2, #0
 800149c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800149e:	482a      	ldr	r0, [pc, #168]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 80014a0:	f002 fdbc 	bl	800401c <HAL_DMA_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80014aa:	f000 f9bd 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a25      	ldr	r2, [pc, #148]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 80014b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80014b4:	4a24      	ldr	r2, [pc, #144]	; (8001548 <HAL_I2C_MspInit+0x1a8>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80014ba:	4b25      	ldr	r3, [pc, #148]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 80014bc:	4a25      	ldr	r2, [pc, #148]	; (8001554 <HAL_I2C_MspInit+0x1b4>)
 80014be:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80014c0:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 80014c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014c6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 80014d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014da:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 80014f6:	2204      	movs	r2, #4
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 80014fc:	2203      	movs	r2, #3
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 8001502:	2200      	movs	r2, #0
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 8001508:	2200      	movs	r2, #0
 800150a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800150c:	4810      	ldr	r0, [pc, #64]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 800150e:	f002 fd85 	bl	800401c <HAL_DMA_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_I2C_MspInit+0x17c>
    {
      Error_Handler();
 8001518:	f000 f986 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 8001520:	639a      	str	r2, [r3, #56]	; 0x38
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_I2C_MspInit+0x1b0>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	201f      	movs	r0, #31
 800152e:	f002 fd3e 	bl	8003fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001532:	201f      	movs	r0, #31
 8001534:	f002 fd57 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001538:	e0c8      	b.n	80016cc <HAL_I2C_MspInit+0x32c>
 800153a:	bf00      	nop
 800153c:	40005400 	.word	0x40005400
 8001540:	40023800 	.word	0x40023800
 8001544:	40020400 	.word	0x40020400
 8001548:	2000033c 	.word	0x2000033c
 800154c:	40026010 	.word	0x40026010
 8001550:	2000039c 	.word	0x2000039c
 8001554:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a5d      	ldr	r2, [pc, #372]	; (80016d4 <HAL_I2C_MspInit+0x334>)
 800155e:	4293      	cmp	r3, r2
 8001560:	f040 80b4 	bne.w	80016cc <HAL_I2C_MspInit+0x32c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001568:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001570:	f107 0318 	add.w	r3, r7, #24
 8001574:	4618      	mov	r0, r3
 8001576:	f007 facd 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_I2C_MspInit+0x1e4>
      Error_Handler();
 8001580:	f000 f952 	bl	8001828 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b54      	ldr	r3, [pc, #336]	; (80016d8 <HAL_I2C_MspInit+0x338>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	4a53      	ldr	r2, [pc, #332]	; (80016d8 <HAL_I2C_MspInit+0x338>)
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	6313      	str	r3, [r2, #48]	; 0x30
 8001590:	4b51      	ldr	r3, [pc, #324]	; (80016d8 <HAL_I2C_MspInit+0x338>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800159c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a4:	2312      	movs	r3, #18
 80015a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015b6:	2304      	movs	r3, #4
 80015b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015c0:	4619      	mov	r1, r3
 80015c2:	4846      	ldr	r0, [pc, #280]	; (80016dc <HAL_I2C_MspInit+0x33c>)
 80015c4:	f004 fb34 	bl	8005c30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015c8:	4b43      	ldr	r3, [pc, #268]	; (80016d8 <HAL_I2C_MspInit+0x338>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a42      	ldr	r2, [pc, #264]	; (80016d8 <HAL_I2C_MspInit+0x338>)
 80015ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <HAL_I2C_MspInit+0x338>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 80015e2:	4a40      	ldr	r2, [pc, #256]	; (80016e4 <HAL_I2C_MspInit+0x344>)
 80015e4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80015e6:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 80015e8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80015ec:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ee:	4b3c      	ldr	r3, [pc, #240]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 80015fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001600:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001608:	4b35      	ldr	r3, [pc, #212]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800160e:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001614:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 800161c:	2204      	movs	r2, #4
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 8001622:	2203      	movs	r2, #3
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001626:	4b2e      	ldr	r3, [pc, #184]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 8001628:	2200      	movs	r2, #0
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 800162e:	2200      	movs	r2, #0
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001632:	482b      	ldr	r0, [pc, #172]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 8001634:	f002 fcf2 	bl	800401c <HAL_DMA_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_MspInit+0x2a2>
      Error_Handler();
 800163e:	f000 f8f3 	bl	8001828 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 8001646:	63da      	str	r2, [r3, #60]	; 0x3c
 8001648:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <HAL_I2C_MspInit+0x340>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 8001650:	4a26      	ldr	r2, [pc, #152]	; (80016ec <HAL_I2C_MspInit+0x34c>)
 8001652:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 8001656:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800165a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 800165e:	2240      	movs	r2, #64	; 0x40
 8001660:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001668:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 800166a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800166e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 800168a:	2204      	movs	r2, #4
 800168c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 8001690:	2203      	movs	r2, #3
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 8001696:	2200      	movs	r2, #0
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 800169c:	2200      	movs	r2, #0
 800169e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 80016a2:	f002 fcbb 	bl	800401c <HAL_DMA_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_I2C_MspInit+0x310>
      Error_Handler();
 80016ac:	f000 f8bc 	bl	8001828 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 80016b4:	639a      	str	r2, [r3, #56]	; 0x38
 80016b6:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <HAL_I2C_MspInit+0x348>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2021      	movs	r0, #33	; 0x21
 80016c2:	f002 fc74 	bl	8003fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80016c6:	2021      	movs	r0, #33	; 0x21
 80016c8:	f002 fc8d 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
}
 80016cc:	bf00      	nop
 80016ce:	37b0      	adds	r7, #176	; 0xb0
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40005800 	.word	0x40005800
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400
 80016e0:	200003fc 	.word	0x200003fc
 80016e4:	40026058 	.word	0x40026058
 80016e8:	2000045c 	.word	0x2000045c
 80016ec:	400260b8 	.word	0x400260b8

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f4:	f001 fe57 	bl	80033a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f8:	f000 f82e 	bl	8001758 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80016fc:	f7ff fc86 	bl	800100c <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001700:	f7ff fd0e 	bl	8001120 <MX_GPIO_Init>
  MX_DMA_Init();
 8001704:	f7ff fc82 	bl	800100c <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001708:	f000 ff60 	bl	80025cc <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 800170c:	f00b f83c 	bl	800c788 <MX_LWIP_Init>
  MX_UART4_Init();
 8001710:	f000 fcde 	bl	80020d0 <MX_UART4_Init>
  MX_I2C2_Init();
 8001714:	f7ff fe04 	bl	8001320 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001718:	f000 f88c 	bl	8001834 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800171c:	f000 fd08 	bl	8002130 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001720:	f7ff fb9e 	bl	8000e60 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8001724:	f000 fd34 	bl	8002190 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001728:	f7ff fdba 	bl	80012a0 <MX_I2C1_Init>
  MX_SPI4_Init();
 800172c:	f000 f8c0 	bl	80018b0 <MX_SPI4_Init>
  MX_TIM3_Init();
 8001730:	f000 fc58 	bl	8001fe4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	udpServer_init ();
 8001734:	f001 fa3a 	bl	8002bac <udpServer_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <main+0x60>)
 800173a:	f00b fac1 	bl	800ccc0 <ethernetif_input>
	  sys_check_timeouts();
 800173e:	f012 fe2d 	bl	801439c <sys_check_timeouts>
	  if (flag_packet)
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <main+0x64>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f6      	beq.n	8001738 <main+0x48>
		  package_back();
 800174a:	f001 f9b5 	bl	8002ab8 <package_back>
	  ethernetif_input(&gnetif);
 800174e:	e7f3      	b.n	8001738 <main+0x48>
 8001750:	200016bc 	.word	0x200016bc
 8001754:	200005c4 	.word	0x200005c4

08001758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b094      	sub	sp, #80	; 0x50
 800175c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	2230      	movs	r2, #48	; 0x30
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f015 fed6 	bl	8017518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800177c:	f006 fcf0 	bl	8008160 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <SystemClock_Config+0xc8>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a26      	ldr	r2, [pc, #152]	; (8001820 <SystemClock_Config+0xc8>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <SystemClock_Config+0xc8>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <SystemClock_Config+0xcc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017a0:	4a20      	ldr	r2, [pc, #128]	; (8001824 <SystemClock_Config+0xcc>)
 80017a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <SystemClock_Config+0xcc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b4:	2301      	movs	r3, #1
 80017b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017be:	2302      	movs	r3, #2
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017c8:	2304      	movs	r3, #4
 80017ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80017cc:	2348      	movs	r3, #72	; 0x48
 80017ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017d4:	2303      	movs	r3, #3
 80017d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d8:	f107 0320 	add.w	r3, r7, #32
 80017dc:	4618      	mov	r0, r3
 80017de:	f006 fccf 	bl	8008180 <HAL_RCC_OscConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017e8:	f000 f81e 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ec:	230f      	movs	r3, #15
 80017ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f0:	2302      	movs	r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	2102      	movs	r1, #2
 8001808:	4618      	mov	r0, r3
 800180a:	f006 ff5d 	bl	80086c8 <HAL_RCC_ClockConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001814:	f000 f808 	bl	8001828 <Error_Handler>
  }
}
 8001818:	bf00      	nop
 800181a:	3750      	adds	r7, #80	; 0x50
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	e7fe      	b.n	8001830 <Error_Handler+0x8>
	...

08001834 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <MX_SPI1_Init+0x74>)
 800183a:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <MX_SPI1_Init+0x78>)
 800183c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <MX_SPI1_Init+0x74>)
 800184e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001852:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_SPI1_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001866:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_SPI1_Init+0x74>)
 800186a:	2220      	movs	r2, #32
 800186c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_SPI1_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001882:	2207      	movs	r2, #7
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_SPI1_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_SPI1_Init+0x74>)
 8001894:	f007 fd2e 	bl	80092f4 <HAL_SPI_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800189e:	f7ff ffc3 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200005c8 	.word	0x200005c8
 80018ac:	40013000 	.word	0x40013000

080018b0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <MX_SPI4_Init+0x6c>)
 80018b6:	4a1a      	ldr	r2, [pc, #104]	; (8001920 <MX_SPI4_Init+0x70>)
 80018b8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <MX_SPI4_Init+0x6c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_SPI4_Init+0x6c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_SPI4_Init+0x6c>)
 80018c8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018cc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_SPI4_Init+0x6c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_SPI4_Init+0x6c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <MX_SPI4_Init+0x6c>)
 80018dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e0:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_SPI4_Init+0x6c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_SPI4_Init+0x6c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_SPI4_Init+0x6c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_SPI4_Init+0x6c>)
 80018f6:	2207      	movs	r2, #7
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_SPI4_Init+0x6c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_SPI4_Init+0x6c>)
 8001902:	2200      	movs	r2, #0
 8001904:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_SPI4_Init+0x6c>)
 8001908:	f007 fcf4 	bl	80092f4 <HAL_SPI_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_SPI4_Init+0x66>
  {
    Error_Handler();
 8001912:	f7ff ff89 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000062c 	.word	0x2000062c
 8001920:	40013400 	.word	0x40013400

08001924 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a5f      	ldr	r2, [pc, #380]	; (8001ac0 <HAL_SPI_MspInit+0x19c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	f040 80cc 	bne.w	8001ae0 <HAL_SPI_MspInit+0x1bc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001948:	4b5e      	ldr	r3, [pc, #376]	; (8001ac4 <HAL_SPI_MspInit+0x1a0>)
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	4a5d      	ldr	r2, [pc, #372]	; (8001ac4 <HAL_SPI_MspInit+0x1a0>)
 800194e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001952:	6453      	str	r3, [r2, #68]	; 0x44
 8001954:	4b5b      	ldr	r3, [pc, #364]	; (8001ac4 <HAL_SPI_MspInit+0x1a0>)
 8001956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b58      	ldr	r3, [pc, #352]	; (8001ac4 <HAL_SPI_MspInit+0x1a0>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4a57      	ldr	r2, [pc, #348]	; (8001ac4 <HAL_SPI_MspInit+0x1a0>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6313      	str	r3, [r2, #48]	; 0x30
 800196c:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <HAL_SPI_MspInit+0x1a0>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001978:	4b52      	ldr	r3, [pc, #328]	; (8001ac4 <HAL_SPI_MspInit+0x1a0>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	4a51      	ldr	r2, [pc, #324]	; (8001ac4 <HAL_SPI_MspInit+0x1a0>)
 800197e:	f043 0302 	orr.w	r3, r3, #2
 8001982:	6313      	str	r3, [r2, #48]	; 0x30
 8001984:	4b4f      	ldr	r3, [pc, #316]	; (8001ac4 <HAL_SPI_MspInit+0x1a0>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001990:	2360      	movs	r3, #96	; 0x60
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019a0:	2305      	movs	r3, #5
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	4847      	ldr	r0, [pc, #284]	; (8001ac8 <HAL_SPI_MspInit+0x1a4>)
 80019ac:	f004 f940 	bl	8005c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019b0:	2320      	movs	r3, #32
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019c0:	2305      	movs	r3, #5
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4840      	ldr	r0, [pc, #256]	; (8001acc <HAL_SPI_MspInit+0x1a8>)
 80019cc:	f004 f930 	bl	8005c30 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80019d0:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 80019d2:	4a40      	ldr	r2, [pc, #256]	; (8001ad4 <HAL_SPI_MspInit+0x1b0>)
 80019d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80019d6:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 80019d8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80019dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019de:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e4:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019ea:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 80019ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f2:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f8:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80019fe:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a04:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a10:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 8001a12:	2203      	movs	r2, #3
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a16:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001a22:	482b      	ldr	r0, [pc, #172]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 8001a24:	f002 fafa 	bl	800401c <HAL_DMA_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8001a2e:	f7ff fefb 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a26      	ldr	r2, [pc, #152]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 8001a36:	659a      	str	r2, [r3, #88]	; 0x58
 8001a38:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <HAL_SPI_MspInit+0x1ac>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a40:	4a26      	ldr	r2, [pc, #152]	; (8001adc <HAL_SPI_MspInit+0x1b8>)
 8001a42:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a46:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001a4a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a4e:	2240      	movs	r2, #64	; 0x40
 8001a50:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a80:	2203      	movs	r2, #3
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a90:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001a92:	f002 fac3 	bl	800401c <HAL_DMA_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_SPI_MspInit+0x17c>
    {
      Error_Handler();
 8001a9c:	f7ff fec4 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
 8001aa6:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <HAL_SPI_MspInit+0x1b4>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2023      	movs	r0, #35	; 0x23
 8001ab2:	f002 fa7c 	bl	8003fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ab6:	2023      	movs	r0, #35	; 0x23
 8001ab8:	f002 fa95 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001abc:	e0b4      	b.n	8001c28 <HAL_SPI_MspInit+0x304>
 8001abe:	bf00      	nop
 8001ac0:	40013000 	.word	0x40013000
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	20000690 	.word	0x20000690
 8001ad4:	40026410 	.word	0x40026410
 8001ad8:	200006f0 	.word	0x200006f0
 8001adc:	40026488 	.word	0x40026488
  else if(spiHandle->Instance==SPI4)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a52      	ldr	r2, [pc, #328]	; (8001c30 <HAL_SPI_MspInit+0x30c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	f040 809e 	bne.w	8001c28 <HAL_SPI_MspInit+0x304>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001aec:	4b51      	ldr	r3, [pc, #324]	; (8001c34 <HAL_SPI_MspInit+0x310>)
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af0:	4a50      	ldr	r2, [pc, #320]	; (8001c34 <HAL_SPI_MspInit+0x310>)
 8001af2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001af6:	6453      	str	r3, [r2, #68]	; 0x44
 8001af8:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <HAL_SPI_MspInit+0x310>)
 8001afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b04:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <HAL_SPI_MspInit+0x310>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	4a4a      	ldr	r2, [pc, #296]	; (8001c34 <HAL_SPI_MspInit+0x310>)
 8001b0a:	f043 0310 	orr.w	r3, r3, #16
 8001b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b10:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <HAL_SPI_MspInit+0x310>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001b1c:	2364      	movs	r3, #100	; 0x64
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b30:	f107 031c 	add.w	r3, r7, #28
 8001b34:	4619      	mov	r1, r3
 8001b36:	4840      	ldr	r0, [pc, #256]	; (8001c38 <HAL_SPI_MspInit+0x314>)
 8001b38:	f004 f87a 	bl	8005c30 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b3e:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <HAL_SPI_MspInit+0x31c>)
 8001b40:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8001b42:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b44:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001b48:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b4a:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b50:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b5c:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001b6a:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b76:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b78:	2204      	movs	r2, #4
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b7e:	2203      	movs	r2, #3
 8001b80:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b88:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001b8e:	482b      	ldr	r0, [pc, #172]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001b90:	f002 fa44 	bl	800401c <HAL_DMA_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_SPI_MspInit+0x27a>
      Error_Handler();
 8001b9a:	f7ff fe45 	bl	8001828 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a26      	ldr	r2, [pc, #152]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ba4:	4a25      	ldr	r2, [pc, #148]	; (8001c3c <HAL_SPI_MspInit+0x318>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001bac:	4a26      	ldr	r2, [pc, #152]	; (8001c48 <HAL_SPI_MspInit+0x324>)
 8001bae:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bb6:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bca:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001be6:	2204      	movs	r2, #4
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001bec:	2203      	movs	r2, #3
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001bfc:	4811      	ldr	r0, [pc, #68]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001bfe:	f002 fa0d 	bl	800401c <HAL_DMA_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_SPI_MspInit+0x2e8>
      Error_Handler();
 8001c08:	f7ff fe0e 	bl	8001828 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
 8001c12:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <HAL_SPI_MspInit+0x320>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	2054      	movs	r0, #84	; 0x54
 8001c1e:	f002 f9c6 	bl	8003fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001c22:	2054      	movs	r0, #84	; 0x54
 8001c24:	f002 f9df 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
}
 8001c28:	bf00      	nop
 8001c2a:	3730      	adds	r7, #48	; 0x30
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40013400 	.word	0x40013400
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	20000750 	.word	0x20000750
 8001c40:	40026458 	.word	0x40026458
 8001c44:	200007b0 	.word	0x200007b0
 8001c48:	40026428 	.word	0x40026428

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_MspInit+0x44>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <HAL_MspInit+0x44>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_MspInit+0x44>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_MspInit+0x44>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <HAL_MspInit+0x44>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_MspInit+0x44>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <NMI_Handler+0x4>

08001c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <HardFault_Handler+0x4>

08001ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <MemManage_Handler+0x4>

08001ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce0:	f001 fb9e 	bl	8003420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <DMA1_Stream0_IRQHandler+0x10>)
 8001cee:	f002 fb35 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000033c 	.word	0x2000033c

08001cfc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <DMA1_Stream2_IRQHandler+0x10>)
 8001d02:	f002 fb2b 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200009f8 	.word	0x200009f8

08001d10 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <DMA1_Stream3_IRQHandler+0x10>)
 8001d16:	f002 fb21 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200003fc 	.word	0x200003fc

08001d24 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <DMA1_Stream4_IRQHandler+0x10>)
 8001d2a:	f002 fb17 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000a58 	.word	0x20000a58

08001d38 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <DMA1_Stream6_IRQHandler+0x10>)
 8001d3e:	f002 fb0d 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000039c 	.word	0x2000039c

08001d4c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <ADC_IRQHandler+0x10>)
 8001d52:	f001 fcc5 	bl	80036e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200001ec 	.word	0x200001ec

08001d60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <TIM3_IRQHandler+0x10>)
 8001d66:	f008 fa18 	bl	800a19a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000814 	.word	0x20000814

08001d74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <I2C1_EV_IRQHandler+0x10>)
 8001d7a:	f004 fd15 	bl	80067a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000294 	.word	0x20000294

08001d88 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <I2C2_EV_IRQHandler+0x10>)
 8001d8e:	f004 fd0b 	bl	80067a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200002e8 	.word	0x200002e8

08001d9c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <SPI1_IRQHandler+0x10>)
 8001da2:	f007 fcdf 	bl	8009764 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200005c8 	.word	0x200005c8

08001db0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <DMA1_Stream7_IRQHandler+0x10>)
 8001db6:	f002 fad1 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000045c 	.word	0x2000045c

08001dc4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <UART4_IRQHandler+0x10>)
 8001dca:	f009 f833 	bl	800ae34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000860 	.word	0x20000860

08001dd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <DMA2_Stream0_IRQHandler+0x10>)
 8001dde:	f002 fabd 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000690 	.word	0x20000690

08001dec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <DMA2_Stream1_IRQHandler+0x10>)
 8001df2:	f002 fab3 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200007b0 	.word	0x200007b0

08001e00 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <DMA2_Stream2_IRQHandler+0x10>)
 8001e06:	f002 faa9 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000ab8 	.word	0x20000ab8

08001e14 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <DMA2_Stream3_IRQHandler+0x10>)
 8001e1a:	f002 fa9f 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000750 	.word	0x20000750

08001e28 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <DMA2_Stream4_IRQHandler+0x10>)
 8001e2e:	f002 fa95 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000234 	.word	0x20000234

08001e3c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <ETH_IRQHandler+0x10>)
 8001e42:	f003 f80f 	bl	8004e64 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20006094 	.word	0x20006094

08001e50 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <DMA2_Stream5_IRQHandler+0x10>)
 8001e56:	f002 fa81 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200006f0 	.word	0x200006f0

08001e64 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <DMA2_Stream6_IRQHandler+0x10>)
 8001e6a:	f002 fa77 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000b18 	.word	0x20000b18

08001e78 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <USART6_IRQHandler+0x10>)
 8001e7e:	f008 ffd9 	bl	800ae34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000970 	.word	0x20000970

08001e8c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <SPI4_IRQHandler+0x10>)
 8001e92:	f007 fc67 	bl	8009764 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000062c 	.word	0x2000062c

08001ea0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
	return 1;
 8001ea4:	2301      	movs	r3, #1
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_kill>:

int _kill(int pid, int sig)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <_kill+0x20>)
 8001ebc:	2216      	movs	r2, #22
 8001ebe:	601a      	str	r2, [r3, #0]
	return -1;
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	20009868 	.word	0x20009868

08001ed4 <_exit>:

void _exit (int status)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ffe5 	bl	8001eb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ee6:	e7fe      	b.n	8001ee6 <_exit+0x12>

08001ee8 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f10:	605a      	str	r2, [r3, #4]
	return 0;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_isatty>:

int _isatty(int file)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	return 1;
 8001f28:	2301      	movs	r3, #1
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
	return 0;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f58:	4a14      	ldr	r2, [pc, #80]	; (8001fac <_sbrk+0x5c>)
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <_sbrk+0x60>)
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <_sbrk+0x64>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <_sbrk+0x68>)
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d205      	bcs.n	8001f8c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <_sbrk+0x6c>)
 8001f82:	220c      	movs	r2, #12
 8001f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f8a:	e009      	b.n	8001fa0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <_sbrk+0x64>)
 8001f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	20050000 	.word	0x20050000
 8001fb0:	00000400 	.word	0x00000400
 8001fb4:	20000810 	.word	0x20000810
 8001fb8:	20009878 	.word	0x20009878
 8001fbc:	20009868 	.word	0x20009868

08001fc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <SystemInit+0x20>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <SystemInit+0x20>)
 8001fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <MX_TIM3_Init+0x98>)
 8002004:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <MX_TIM3_Init+0x9c>)
 8002006:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8002008:	4b1c      	ldr	r3, [pc, #112]	; (800207c <MX_TIM3_Init+0x98>)
 800200a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800200e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <MX_TIM3_Init+0x98>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <MX_TIM3_Init+0x98>)
 8002018:	f242 720f 	movw	r2, #9999	; 0x270f
 800201c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <MX_TIM3_Init+0x98>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <MX_TIM3_Init+0x98>)
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800202a:	4814      	ldr	r0, [pc, #80]	; (800207c <MX_TIM3_Init+0x98>)
 800202c:	f007 ffb6 	bl	8009f9c <HAL_TIM_Base_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002036:	f7ff fbf7 	bl	8001828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	4619      	mov	r1, r3
 8002046:	480d      	ldr	r0, [pc, #52]	; (800207c <MX_TIM3_Init+0x98>)
 8002048:	f008 f9c6 	bl	800a3d8 <HAL_TIM_ConfigClockSource>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002052:	f7ff fbe9 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4806      	ldr	r0, [pc, #24]	; (800207c <MX_TIM3_Init+0x98>)
 8002064:	f008 fbe4 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800206e:	f7ff fbdb 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000814 	.word	0x20000814
 8002080:	40000400 	.word	0x40000400

08002084 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <HAL_TIM_Base_MspInit+0x44>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d113      	bne.n	80020be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_TIM_Base_MspInit+0x48>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <HAL_TIM_Base_MspInit+0x48>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_TIM_Base_MspInit+0x48>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	201d      	movs	r0, #29
 80020b4:	f001 ff7b 	bl	8003fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020b8:	201d      	movs	r0, #29
 80020ba:	f001 ff94 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40023800 	.word	0x40023800

080020d0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_UART4_Init+0x58>)
 80020d6:	4a15      	ldr	r2, [pc, #84]	; (800212c <MX_UART4_Init+0x5c>)
 80020d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <MX_UART4_Init+0x58>)
 80020dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_UART4_Init+0x58>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_UART4_Init+0x58>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <MX_UART4_Init+0x58>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_UART4_Init+0x58>)
 80020f6:	220c      	movs	r2, #12
 80020f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_UART4_Init+0x58>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_UART4_Init+0x58>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MX_UART4_Init+0x58>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_UART4_Init+0x58>)
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_UART4_Init+0x58>)
 8002114:	f008 fc38 	bl	800a988 <HAL_UART_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800211e:	f7ff fb83 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000860 	.word	0x20000860
 800212c:	40004c00 	.word	0x40004c00

08002130 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <MX_USART3_UART_Init+0x58>)
 8002136:	4a15      	ldr	r2, [pc, #84]	; (800218c <MX_USART3_UART_Init+0x5c>)
 8002138:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <MX_USART3_UART_Init+0x58>)
 800213c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002140:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_USART3_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_USART3_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_USART3_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_USART3_UART_Init+0x58>)
 8002156:	220c      	movs	r2, #12
 8002158:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <MX_USART3_UART_Init+0x58>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_USART3_UART_Init+0x58>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <MX_USART3_UART_Init+0x58>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <MX_USART3_UART_Init+0x58>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_USART3_UART_Init+0x58>)
 8002174:	f008 fc08 	bl	800a988 <HAL_UART_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800217e:	f7ff fb53 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200008e8 	.word	0x200008e8
 800218c:	40004800 	.word	0x40004800

08002190 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_USART6_UART_Init+0x58>)
 8002196:	4a15      	ldr	r2, [pc, #84]	; (80021ec <MX_USART6_UART_Init+0x5c>)
 8002198:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <MX_USART6_UART_Init+0x58>)
 800219c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_USART6_UART_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <MX_USART6_UART_Init+0x58>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_USART6_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_USART6_UART_Init+0x58>)
 80021b6:	220c      	movs	r2, #12
 80021b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <MX_USART6_UART_Init+0x58>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_USART6_UART_Init+0x58>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <MX_USART6_UART_Init+0x58>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_USART6_UART_Init+0x58>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_USART6_UART_Init+0x58>)
 80021d4:	f008 fbd8 	bl	800a988 <HAL_UART_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80021de:	f7ff fb23 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000970 	.word	0x20000970
 80021ec:	40011400 	.word	0x40011400

080021f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0ae      	sub	sp, #184	; 0xb8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002208:	f107 0320 	add.w	r3, r7, #32
 800220c:	2284      	movs	r2, #132	; 0x84
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f015 f981 	bl	8017518 <memset>
  if(uartHandle->Instance==UART4)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a7d      	ldr	r2, [pc, #500]	; (8002410 <HAL_UART_MspInit+0x220>)
 800221c:	4293      	cmp	r3, r2
 800221e:	f040 80b4 	bne.w	800238a <HAL_UART_MspInit+0x19a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002226:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002228:	2300      	movs	r3, #0
 800222a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800222c:	f107 0320 	add.w	r3, r7, #32
 8002230:	4618      	mov	r0, r3
 8002232:	f006 fc6f 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800223c:	f7ff faf4 	bl	8001828 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002240:	4b74      	ldr	r3, [pc, #464]	; (8002414 <HAL_UART_MspInit+0x224>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	4a73      	ldr	r2, [pc, #460]	; (8002414 <HAL_UART_MspInit+0x224>)
 8002246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800224a:	6413      	str	r3, [r2, #64]	; 0x40
 800224c:	4b71      	ldr	r3, [pc, #452]	; (8002414 <HAL_UART_MspInit+0x224>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002258:	4b6e      	ldr	r3, [pc, #440]	; (8002414 <HAL_UART_MspInit+0x224>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	4a6d      	ldr	r2, [pc, #436]	; (8002414 <HAL_UART_MspInit+0x224>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6313      	str	r3, [r2, #48]	; 0x30
 8002264:	4b6b      	ldr	r3, [pc, #428]	; (8002414 <HAL_UART_MspInit+0x224>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002270:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002274:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227e:	2301      	movs	r3, #1
 8002280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800228a:	2308      	movs	r3, #8
 800228c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002290:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002294:	4619      	mov	r1, r3
 8002296:	4860      	ldr	r0, [pc, #384]	; (8002418 <HAL_UART_MspInit+0x228>)
 8002298:	f003 fcca 	bl	8005c30 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800229c:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_UART_MspInit+0x22c>)
 800229e:	4a60      	ldr	r2, [pc, #384]	; (8002420 <HAL_UART_MspInit+0x230>)
 80022a0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80022a2:	4b5e      	ldr	r3, [pc, #376]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022a8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b0:	4b5a      	ldr	r3, [pc, #360]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022b6:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022bc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022be:	4b57      	ldr	r3, [pc, #348]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022c4:	4b55      	ldr	r3, [pc, #340]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80022ca:	4b54      	ldr	r3, [pc, #336]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022d0:	4b52      	ldr	r3, [pc, #328]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80022d6:	4b51      	ldr	r3, [pc, #324]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022d8:	2204      	movs	r2, #4
 80022da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80022dc:	4b4f      	ldr	r3, [pc, #316]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022de:	2203      	movs	r2, #3
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80022e2:	4b4e      	ldr	r3, [pc, #312]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80022e8:	4b4c      	ldr	r3, [pc, #304]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80022ee:	484b      	ldr	r0, [pc, #300]	; (800241c <HAL_UART_MspInit+0x22c>)
 80022f0:	f001 fe94 	bl	800401c <HAL_DMA_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80022fa:	f7ff fa95 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a46      	ldr	r2, [pc, #280]	; (800241c <HAL_UART_MspInit+0x22c>)
 8002302:	675a      	str	r2, [r3, #116]	; 0x74
 8002304:	4a45      	ldr	r2, [pc, #276]	; (800241c <HAL_UART_MspInit+0x22c>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800230a:	4b46      	ldr	r3, [pc, #280]	; (8002424 <HAL_UART_MspInit+0x234>)
 800230c:	4a46      	ldr	r2, [pc, #280]	; (8002428 <HAL_UART_MspInit+0x238>)
 800230e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002310:	4b44      	ldr	r3, [pc, #272]	; (8002424 <HAL_UART_MspInit+0x234>)
 8002312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002316:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <HAL_UART_MspInit+0x234>)
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800231e:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_UART_MspInit+0x234>)
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002324:	4b3f      	ldr	r3, [pc, #252]	; (8002424 <HAL_UART_MspInit+0x234>)
 8002326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800232a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800232c:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_UART_MspInit+0x234>)
 800232e:	2200      	movs	r2, #0
 8002330:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002332:	4b3c      	ldr	r3, [pc, #240]	; (8002424 <HAL_UART_MspInit+0x234>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002338:	4b3a      	ldr	r3, [pc, #232]	; (8002424 <HAL_UART_MspInit+0x234>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800233e:	4b39      	ldr	r3, [pc, #228]	; (8002424 <HAL_UART_MspInit+0x234>)
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002344:	4b37      	ldr	r3, [pc, #220]	; (8002424 <HAL_UART_MspInit+0x234>)
 8002346:	2204      	movs	r2, #4
 8002348:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800234a:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_UART_MspInit+0x234>)
 800234c:	2203      	movs	r2, #3
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002350:	4b34      	ldr	r3, [pc, #208]	; (8002424 <HAL_UART_MspInit+0x234>)
 8002352:	2200      	movs	r2, #0
 8002354:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002356:	4b33      	ldr	r3, [pc, #204]	; (8002424 <HAL_UART_MspInit+0x234>)
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800235c:	4831      	ldr	r0, [pc, #196]	; (8002424 <HAL_UART_MspInit+0x234>)
 800235e:	f001 fe5d 	bl	800401c <HAL_DMA_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_UART_MspInit+0x17c>
    {
      Error_Handler();
 8002368:	f7ff fa5e 	bl	8001828 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a2d      	ldr	r2, [pc, #180]	; (8002424 <HAL_UART_MspInit+0x234>)
 8002370:	671a      	str	r2, [r3, #112]	; 0x70
 8002372:	4a2c      	ldr	r2, [pc, #176]	; (8002424 <HAL_UART_MspInit+0x234>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	2034      	movs	r0, #52	; 0x34
 800237e:	f001 fe16 	bl	8003fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002382:	2034      	movs	r0, #52	; 0x34
 8002384:	f001 fe2f 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002388:	e10d      	b.n	80025a6 <HAL_UART_MspInit+0x3b6>
  else if(uartHandle->Instance==USART3)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a27      	ldr	r2, [pc, #156]	; (800242c <HAL_UART_MspInit+0x23c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d14f      	bne.n	8002434 <HAL_UART_MspInit+0x244>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002398:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800239a:	2300      	movs	r3, #0
 800239c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239e:	f107 0320 	add.w	r3, r7, #32
 80023a2:	4618      	mov	r0, r3
 80023a4:	f006 fbb6 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 80023ae:	f7ff fa3b 	bl	8001828 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <HAL_UART_MspInit+0x224>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a17      	ldr	r2, [pc, #92]	; (8002414 <HAL_UART_MspInit+0x224>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_UART_MspInit+0x224>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_UART_MspInit+0x224>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a11      	ldr	r2, [pc, #68]	; (8002414 <HAL_UART_MspInit+0x224>)
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_UART_MspInit+0x224>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023fc:	2307      	movs	r3, #7
 80023fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002402:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002406:	4619      	mov	r1, r3
 8002408:	4809      	ldr	r0, [pc, #36]	; (8002430 <HAL_UART_MspInit+0x240>)
 800240a:	f003 fc11 	bl	8005c30 <HAL_GPIO_Init>
}
 800240e:	e0ca      	b.n	80025a6 <HAL_UART_MspInit+0x3b6>
 8002410:	40004c00 	.word	0x40004c00
 8002414:	40023800 	.word	0x40023800
 8002418:	40020800 	.word	0x40020800
 800241c:	200009f8 	.word	0x200009f8
 8002420:	40026040 	.word	0x40026040
 8002424:	20000a58 	.word	0x20000a58
 8002428:	40026070 	.word	0x40026070
 800242c:	40004800 	.word	0x40004800
 8002430:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART6)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5d      	ldr	r2, [pc, #372]	; (80025b0 <HAL_UART_MspInit+0x3c0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	f040 80b3 	bne.w	80025a6 <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002440:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002444:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002446:	2300      	movs	r3, #0
 8002448:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800244a:	f107 0320 	add.w	r3, r7, #32
 800244e:	4618      	mov	r0, r3
 8002450:	f006 fb60 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_UART_MspInit+0x26e>
      Error_Handler();
 800245a:	f7ff f9e5 	bl	8001828 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800245e:	4b55      	ldr	r3, [pc, #340]	; (80025b4 <HAL_UART_MspInit+0x3c4>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a54      	ldr	r2, [pc, #336]	; (80025b4 <HAL_UART_MspInit+0x3c4>)
 8002464:	f043 0320 	orr.w	r3, r3, #32
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b52      	ldr	r3, [pc, #328]	; (80025b4 <HAL_UART_MspInit+0x3c4>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002476:	4b4f      	ldr	r3, [pc, #316]	; (80025b4 <HAL_UART_MspInit+0x3c4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a4e      	ldr	r2, [pc, #312]	; (80025b4 <HAL_UART_MspInit+0x3c4>)
 800247c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <HAL_UART_MspInit+0x3c4>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800248e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800249c:	2301      	movs	r3, #1
 800249e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a2:	2303      	movs	r3, #3
 80024a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024a8:	2308      	movs	r3, #8
 80024aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4840      	ldr	r0, [pc, #256]	; (80025b8 <HAL_UART_MspInit+0x3c8>)
 80024b6:	f003 fbbb 	bl	8005c30 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 80024ba:	4b40      	ldr	r3, [pc, #256]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 80024bc:	4a40      	ldr	r2, [pc, #256]	; (80025c0 <HAL_UART_MspInit+0x3d0>)
 80024be:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80024c0:	4b3e      	ldr	r3, [pc, #248]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 80024c2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80024c6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024c8:	4b3c      	ldr	r3, [pc, #240]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ce:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024d4:	4b39      	ldr	r3, [pc, #228]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 80024d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024da:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024dc:	4b37      	ldr	r3, [pc, #220]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80024e8:	4b34      	ldr	r3, [pc, #208]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024ee:	4b33      	ldr	r3, [pc, #204]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024f4:	4b31      	ldr	r3, [pc, #196]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 80024f6:	2204      	movs	r2, #4
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024fa:	4b30      	ldr	r3, [pc, #192]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 80024fc:	2203      	movs	r2, #3
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002500:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 8002502:	2200      	movs	r2, #0
 8002504:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002506:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800250c:	482b      	ldr	r0, [pc, #172]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 800250e:	f001 fd85 	bl	800401c <HAL_DMA_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_UART_MspInit+0x32c>
      Error_Handler();
 8002518:	f7ff f986 	bl	8001828 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a27      	ldr	r2, [pc, #156]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 8002520:	675a      	str	r2, [r3, #116]	; 0x74
 8002522:	4a26      	ldr	r2, [pc, #152]	; (80025bc <HAL_UART_MspInit+0x3cc>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002528:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 800252a:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <HAL_UART_MspInit+0x3d8>)
 800252c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 8002530:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002534:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002536:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 8002538:	2240      	movs	r2, #64	; 0x40
 800253a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800253c:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 8002544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002548:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 800254c:	2200      	movs	r2, #0
 800254e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 8002552:	2200      	movs	r2, #0
 8002554:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 8002558:	2200      	movs	r2, #0
 800255a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 800255e:	2200      	movs	r2, #0
 8002560:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 8002564:	2204      	movs	r2, #4
 8002566:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 800256a:	2203      	movs	r2, #3
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 8002570:	2200      	movs	r2, #0
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 8002576:	2200      	movs	r2, #0
 8002578:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800257a:	4812      	ldr	r0, [pc, #72]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 800257c:	f001 fd4e 	bl	800401c <HAL_DMA_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_UART_MspInit+0x39a>
      Error_Handler();
 8002586:	f7ff f94f 	bl	8001828 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 800258e:	671a      	str	r2, [r3, #112]	; 0x70
 8002590:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <HAL_UART_MspInit+0x3d4>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2047      	movs	r0, #71	; 0x47
 800259c:	f001 fd07 	bl	8003fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80025a0:	2047      	movs	r0, #71	; 0x47
 80025a2:	f001 fd20 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
}
 80025a6:	bf00      	nop
 80025a8:	37b8      	adds	r7, #184	; 0xb8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40011400 	.word	0x40011400
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40021800 	.word	0x40021800
 80025bc:	20000ab8 	.word	0x20000ab8
 80025c0:	40026440 	.word	0x40026440
 80025c4:	20000b18 	.word	0x20000b18
 80025c8:	400264a0 	.word	0x400264a0

080025cc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80025d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025da:	2206      	movs	r2, #6
 80025dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025e0:	2202      	movs	r2, #2
 80025e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025ec:	2202      	movs	r2, #2
 80025ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002604:	2201      	movs	r2, #1
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800260a:	2200      	movs	r2, #0
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002610:	f005 fc5d 	bl	8007ece <HAL_PCD_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800261a:	f7ff f905 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000b78 	.word	0x20000b78

08002628 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0ac      	sub	sp, #176	; 0xb0
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002640:	f107 0318 	add.w	r3, r7, #24
 8002644:	2284      	movs	r2, #132	; 0x84
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f014 ff65 	bl	8017518 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002656:	d159      	bne.n	800270c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002658:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800265c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002664:	f107 0318 	add.w	r3, r7, #24
 8002668:	4618      	mov	r0, r3
 800266a:	f006 fa53 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002674:	f7ff f8d8 	bl	8001828 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_PCD_MspInit+0xec>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	4a25      	ldr	r2, [pc, #148]	; (8002714 <HAL_PCD_MspInit+0xec>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6313      	str	r3, [r2, #48]	; 0x30
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_PCD_MspInit+0xec>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002690:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026aa:	230a      	movs	r3, #10
 80026ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026b4:	4619      	mov	r1, r3
 80026b6:	4818      	ldr	r0, [pc, #96]	; (8002718 <HAL_PCD_MspInit+0xf0>)
 80026b8:	f003 faba 	bl	8005c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80026bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80026d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026d4:	4619      	mov	r1, r3
 80026d6:	4810      	ldr	r0, [pc, #64]	; (8002718 <HAL_PCD_MspInit+0xf0>)
 80026d8:	f003 faaa 	bl	8005c30 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_PCD_MspInit+0xec>)
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <HAL_PCD_MspInit+0xec>)
 80026e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e6:	6353      	str	r3, [r2, #52]	; 0x34
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_PCD_MspInit+0xec>)
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_PCD_MspInit+0xec>)
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	4a06      	ldr	r2, [pc, #24]	; (8002714 <HAL_PCD_MspInit+0xec>)
 80026fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_PCD_MspInit+0xec>)
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800270c:	bf00      	nop
 800270e:	37b0      	adds	r7, #176	; 0xb0
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40023800 	.word	0x40023800
 8002718:	40020000 	.word	0x40020000

0800271c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800271c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002720:	480d      	ldr	r0, [pc, #52]	; (8002758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002722:	490e      	ldr	r1, [pc, #56]	; (800275c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002724:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002728:	e002      	b.n	8002730 <LoopCopyDataInit>

0800272a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800272c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272e:	3304      	adds	r3, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002734:	d3f9      	bcc.n	800272a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002736:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002738:	4c0b      	ldr	r4, [pc, #44]	; (8002768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800273c:	e001      	b.n	8002742 <LoopFillZerobss>

0800273e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002740:	3204      	adds	r2, #4

08002742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002744:	d3fb      	bcc.n	800273e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002746:	f7ff fc3b 	bl	8001fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800274a:	f014 fea3 	bl	8017494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274e:	f7fe ffcf 	bl	80016f0 <main>
  bx  lr    
 8002752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002754:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800275c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002760:	0801b4f4 	.word	0x0801b4f4
  ldr r2, =_sbss
 8002764:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002768:	20009878 	.word	0x20009878

0800276c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800276c:	e7fe      	b.n	800276c <CAN1_RX0_IRQHandler>
	...

08002770 <DB_ADC>:
  * @brief In this method we will check the voltage in 3.3V port.
  * We use "ADC1" port to test this action.
  * @param  uint8_t iteration counter.
  * @retval uint8_t status check.
  */
uint8_t DB_ADC(uint8_t main_iter){
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
	printf("Start test of ADC:\r\n");
 800277a:	4837      	ldr	r0, [pc, #220]	; (8002858 <DB_ADC+0xe8>)
 800277c:	f014 ff5a 	bl	8017634 <puts>
	while (main_iter)
 8002780:	e055      	b.n	800282e <DB_ADC+0xbe>
	{
		if(HAL_ADC_Start_IT(ADC_1)!= HAL_OK)				// start interrupt for ADC1 , jump to callback
 8002782:	4836      	ldr	r0, [pc, #216]	; (800285c <DB_ADC+0xec>)
 8002784:	f000 fed4 	bl	8003530 <HAL_ADC_Start_IT>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <DB_ADC+0x28>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 800278e:	4834      	ldr	r0, [pc, #208]	; (8002860 <DB_ADC+0xf0>)
 8002790:	f014 ff50 	bl	8017634 <puts>
			return FAILURE;
 8002794:	23ff      	movs	r3, #255	; 0xff
 8002796:	e054      	b.n	8002842 <DB_ADC+0xd2>
		}
		if (flag_adc)
 8002798:	4b32      	ldr	r3, [pc, #200]	; (8002864 <DB_ADC+0xf4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d046      	beq.n	800282e <DB_ADC+0xbe>
		{
			currentValue =  HAL_ADC_GetValue(ADC_1);								// get value from 3.3V port.
 80027a0:	482e      	ldr	r0, [pc, #184]	; (800285c <DB_ADC+0xec>)
 80027a2:	f001 f8ad 	bl	8003900 <HAL_ADC_GetValue>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a2f      	ldr	r2, [pc, #188]	; (8002868 <DB_ADC+0xf8>)
 80027aa:	6013      	str	r3, [r2, #0]
			currentVoltage = ((double)currentValue/ADC_TO_VOLT_FACTOR);				// convert value to VOLTAGE
 80027ac:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <DB_ADC+0xf8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd febf 	bl	8000534 <__aeabi_ui2d>
 80027b6:	a326      	add	r3, pc, #152	; (adr r3, 8002850 <DB_ADC+0xe0>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fe f85e 	bl	800087c <__aeabi_ddiv>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4929      	ldr	r1, [pc, #164]	; (800286c <DB_ADC+0xfc>)
 80027c6:	e9c1 2300 	strd	r2, r3, [r1]
			if (!(BOTTOM_BOUND < currentVoltage && currentVoltage < TOP_BOUND))		// check if the range of Voltage is okay.
 80027ca:	4b28      	ldr	r3, [pc, #160]	; (800286c <DB_ADC+0xfc>)
 80027cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027d0:	2301      	movs	r3, #1
 80027d2:	461c      	mov	r4, r3
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	4b25      	ldr	r3, [pc, #148]	; (8002870 <DB_ADC+0x100>)
 80027da:	f7fe f9b5 	bl	8000b48 <__aeabi_dcmpgt>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <DB_ADC+0x78>
 80027e4:	2300      	movs	r3, #0
 80027e6:	461c      	mov	r4, r3
 80027e8:	b2e3      	uxtb	r3, r4
 80027ea:	f083 0301 	eor.w	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d114      	bne.n	800281e <DB_ADC+0xae>
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <DB_ADC+0xfc>)
 80027f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027fa:	2301      	movs	r3, #1
 80027fc:	461c      	mov	r4, r3
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <DB_ADC+0x104>)
 8002804:	f7fe f982 	bl	8000b0c <__aeabi_dcmplt>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <DB_ADC+0xa2>
 800280e:	2300      	movs	r3, #0
 8002810:	461c      	mov	r4, r3
 8002812:	b2e3      	uxtb	r3, r4
 8002814:	f083 0301 	eor.w	r3, r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <DB_ADC+0xb2>
			{
				return FAILURE;
 800281e:	23ff      	movs	r3, #255	; 0xff
 8002820:	e00f      	b.n	8002842 <DB_ADC+0xd2>
			}
			main_iter --;
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	3b01      	subs	r3, #1
 8002826:	71fb      	strb	r3, [r7, #7]
			flag_adc = RESET;															// reset ADC flag interrupt
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <DB_ADC+0xf4>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
	while (main_iter)
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1a6      	bne.n	8002782 <DB_ADC+0x12>
		}
	}
	printf("ADC_WORKS_GOOD\r\n");
 8002834:	4810      	ldr	r0, [pc, #64]	; (8002878 <DB_ADC+0x108>)
 8002836:	f014 fefd 	bl	8017634 <puts>
    printf("---------------------\r\n");
 800283a:	4810      	ldr	r0, [pc, #64]	; (800287c <DB_ADC+0x10c>)
 800283c:	f014 fefa 	bl	8017634 <puts>
	return SUCCESS;
 8002840:	2301      	movs	r3, #1
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bd90      	pop	{r4, r7, pc}
 800284a:	bf00      	nop
 800284c:	f3af 8000 	nop.w
 8002850:	16872b02 	.word	0x16872b02
 8002854:	409364d9 	.word	0x409364d9
 8002858:	080186cc 	.word	0x080186cc
 800285c:	200001ec 	.word	0x200001ec
 8002860:	080186e0 	.word	0x080186e0
 8002864:	20001080 	.word	0x20001080
 8002868:	20001090 	.word	0x20001090
 800286c:	20001088 	.word	0x20001088
 8002870:	40080000 	.word	0x40080000
 8002874:	400c0000 	.word	0x400c0000
 8002878:	08018700 	.word	0x08018700
 800287c:	08018710 	.word	0x08018710

08002880 <HAL_ADC_ConvCpltCallback>:

// ADC interrupt Callback (notify that data conversion is finished)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	flag_adc = SET;		// go through the loop.
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <HAL_ADC_ConvCpltCallback+0x1c>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20001080 	.word	0x20001080

080028a0 <DB_I2C>:
  * @param  uint8_t length of string received from client.
  * @param  char* string that client sent to use in protocol test.
  * @retval uint8_t status check.
  */
uint8_t DB_I2C(uint8_t main_iter, uint8_t length, char * string_to_check)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	603a      	str	r2, [r7, #0]
 80028aa:	71fb      	strb	r3, [r7, #7]
 80028ac:	460b      	mov	r3, r1
 80028ae:	71bb      	strb	r3, [r7, #6]
	printf("Start test of I2C protocol:\r\n");
 80028b0:	4837      	ldr	r0, [pc, #220]	; (8002990 <DB_I2C+0xf0>)
 80028b2:	f014 febf 	bl	8017634 <puts>
	while (main_iter --)
 80028b6:	e05a      	b.n	800296e <DB_I2C+0xce>
	{
		flag_i2c = RESET;
 80028b8:	4b36      	ldr	r3, [pc, #216]	; (8002994 <DB_I2C+0xf4>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
		// I2C_SLAVE is ready to receive data from I2C_MASTER.
		if (HAL_I2C_Slave_Receive_DMA(I2C_SLAVE,I2C_SLAVE_BUFF, length) != HAL_OK)
 80028be:	79bb      	ldrb	r3, [r7, #6]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	4934      	ldr	r1, [pc, #208]	; (8002998 <DB_I2C+0xf8>)
 80028c6:	4835      	ldr	r0, [pc, #212]	; (800299c <DB_I2C+0xfc>)
 80028c8:	f003 feb8 	bl	800663c <HAL_I2C_Slave_Receive_DMA>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <DB_I2C+0x3c>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 80028d2:	4833      	ldr	r0, [pc, #204]	; (80029a0 <DB_I2C+0x100>)
 80028d4:	f014 feae 	bl	8017634 <puts>
			return FAILURE;
 80028d8:	23ff      	movs	r3, #255	; 0xff
 80028da:	e054      	b.n	8002986 <DB_I2C+0xe6>
		}
		// I2C_MASTER transmit data that he get from client.
		if (HAL_I2C_Master_Transmit_DMA(I2C_MASTER, SLAVE_ADDRESS, (uint8_t *)string_to_check, length) != HAL_OK)
 80028dc:	4b2f      	ldr	r3, [pc, #188]	; (800299c <DB_I2C+0xfc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	b299      	uxth	r1, r3
 80028e2:	79bb      	ldrb	r3, [r7, #6]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	482e      	ldr	r0, [pc, #184]	; (80029a4 <DB_I2C+0x104>)
 80028ea:	f003 fc11 	bl	8006110 <HAL_I2C_Master_Transmit_DMA>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <DB_I2C+0x5e>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 80028f4:	482a      	ldr	r0, [pc, #168]	; (80029a0 <DB_I2C+0x100>)
 80028f6:	f014 fe9d 	bl	8017634 <puts>
			return FAILURE;
 80028fa:	23ff      	movs	r3, #255	; 0xff
 80028fc:	e043      	b.n	8002986 <DB_I2C+0xe6>
		}
		while(flag_i2c != SET){;}
 80028fe:	bf00      	nop
 8002900:	4b24      	ldr	r3, [pc, #144]	; (8002994 <DB_I2C+0xf4>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d1fb      	bne.n	8002900 <DB_I2C+0x60>
		flag_i2c = RESET;
 8002908:	4b22      	ldr	r3, [pc, #136]	; (8002994 <DB_I2C+0xf4>)
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
		// I2C_SLAVE is ready to transmit data to I2C_MASTER.
		if (HAL_I2C_Slave_Transmit_DMA(I2C_SLAVE, I2C_SLAVE_BUFF, length) != HAL_OK)
 800290e:	79bb      	ldrb	r3, [r7, #6]
 8002910:	b29b      	uxth	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	4920      	ldr	r1, [pc, #128]	; (8002998 <DB_I2C+0xf8>)
 8002916:	4821      	ldr	r0, [pc, #132]	; (800299c <DB_I2C+0xfc>)
 8002918:	f003 fdda 	bl	80064d0 <HAL_I2C_Slave_Transmit_DMA>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d004      	beq.n	800292c <DB_I2C+0x8c>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 8002922:	481f      	ldr	r0, [pc, #124]	; (80029a0 <DB_I2C+0x100>)
 8002924:	f014 fe86 	bl	8017634 <puts>
			return FAILURE;
 8002928:	23ff      	movs	r3, #255	; 0xff
 800292a:	e02c      	b.n	8002986 <DB_I2C+0xe6>
		}
		// I2C_MASTER receive data from I2C_SLAVE.
		if (HAL_I2C_Master_Receive_DMA(I2C_MASTER, SLAVE_ADDRESS, I2C_MASTER_BUFF, length) != HAL_OK)
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <DB_I2C+0xfc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	b299      	uxth	r1, r3
 8002932:	79bb      	ldrb	r3, [r7, #6]
 8002934:	b29b      	uxth	r3, r3
 8002936:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <DB_I2C+0x108>)
 8002938:	481a      	ldr	r0, [pc, #104]	; (80029a4 <DB_I2C+0x104>)
 800293a:	f003 fcd9 	bl	80062f0 <HAL_I2C_Master_Receive_DMA>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <DB_I2C+0xae>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 8002944:	4816      	ldr	r0, [pc, #88]	; (80029a0 <DB_I2C+0x100>)
 8002946:	f014 fe75 	bl	8017634 <puts>
			return FAILURE;
 800294a:	23ff      	movs	r3, #255	; 0xff
 800294c:	e01b      	b.n	8002986 <DB_I2C+0xe6>
		}
		while(flag_i2c != SET){;}
 800294e:	bf00      	nop
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <DB_I2C+0xf4>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d1fb      	bne.n	8002950 <DB_I2C+0xb0>
		if(memcmp(string_to_check,I2C_MASTER_BUFF,length)!= 0)
 8002958:	79bb      	ldrb	r3, [r7, #6]
 800295a:	461a      	mov	r2, r3
 800295c:	4912      	ldr	r1, [pc, #72]	; (80029a8 <DB_I2C+0x108>)
 800295e:	6838      	ldr	r0, [r7, #0]
 8002960:	f014 fdbc 	bl	80174dc <memcmp>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <DB_I2C+0xce>
		// check that string at the end of 'I2C' is the same as the string at the beginning.
		{
			return FAILURE;
 800296a:	23ff      	movs	r3, #255	; 0xff
 800296c:	e00b      	b.n	8002986 <DB_I2C+0xe6>
	while (main_iter --)
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	1e5a      	subs	r2, r3, #1
 8002972:	71fa      	strb	r2, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d19f      	bne.n	80028b8 <DB_I2C+0x18>
		}
	}
	printf("I2C_WORKS_GOOD\r\n");
 8002978:	480c      	ldr	r0, [pc, #48]	; (80029ac <DB_I2C+0x10c>)
 800297a:	f014 fe5b 	bl	8017634 <puts>
    printf("---------------------\r\n");
 800297e:	480c      	ldr	r0, [pc, #48]	; (80029b0 <DB_I2C+0x110>)
 8002980:	f014 fe58 	bl	8017634 <puts>
	return SUCCESS;
 8002984:	2301      	movs	r3, #1
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	08018728 	.word	0x08018728
 8002994:	20001094 	.word	0x20001094
 8002998:	20001098 	.word	0x20001098
 800299c:	200002e8 	.word	0x200002e8
 80029a0:	08018748 	.word	0x08018748
 80029a4:	20000294 	.word	0x20000294
 80029a8:	20001198 	.word	0x20001198
 80029ac:	08018768 	.word	0x08018768
 80029b0:	08018778 	.word	0x08018778

080029b4 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)	// check if MASTER complete transmission
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	if(hi2c == I2C_MASTER)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <HAL_I2C_MasterTxCpltCallback+0x24>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d102      	bne.n	80029ca <HAL_I2C_MasterTxCpltCallback+0x16>
	{
		flag_i2c = SET;
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_I2C_MasterTxCpltCallback+0x28>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
	}
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000294 	.word	0x20000294
 80029dc:	20001094 	.word	0x20001094

080029e0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)	// check if MASTER complete receiving

{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	if(hi2c == I2C_MASTER)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <HAL_I2C_MasterRxCpltCallback+0x24>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d102      	bne.n	80029f6 <HAL_I2C_MasterRxCpltCallback+0x16>
	{
		flag_i2c = SET;
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_I2C_MasterRxCpltCallback+0x28>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
	}
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000294 	.word	0x20000294
 8002a08:	20001094 	.word	0x20001094

08002a0c <proccess_manage>:
  * To manage packet data easily  contain ID test number and  his test's status
  * @param  struct pbuf *global_payload
  * @retval None
  */
void proccess_manage(struct pbuf *global_payload)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	//Get packet from client into packet for future test uses in SERVER -> (receivePack)
		receive_pack.testId            = *(uint32_t *)(TEST_ID_OFFSET);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a21      	ldr	r2, [pc, #132]	; (8002aa0 <proccess_manage+0x94>)
 8002a1c:	6013      	str	r3, [r2, #0]
		receive_pack.perToTest         = *(uint8_t *)(PER_TO_TEST_OFFSET);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	791a      	ldrb	r2, [r3, #4]
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <proccess_manage+0x94>)
 8002a26:	711a      	strb	r2, [r3, #4]
		receive_pack.iter              = *(uint8_t *)(ITER_OFFSET) ;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	795a      	ldrb	r2, [r3, #5]
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <proccess_manage+0x94>)
 8002a30:	715a      	strb	r2, [r3, #5]
		receive_pack.bitPatternLength  = *(uint8_t *)(BIT_PATTERN_LENGTH_OFFSET);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	799a      	ldrb	r2, [r3, #6]
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <proccess_manage+0x94>)
 8002a3a:	719a      	strb	r2, [r3, #6]
		memcpy(receive_pack.bitPattern, BIT_PATTERN_OFFSET, receive_pack.bitPatternLength);
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <proccess_manage+0x94>)
 8002a3e:	6898      	ldr	r0, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	3307      	adds	r3, #7
 8002a46:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <proccess_manage+0x94>)
 8002a48:	7992      	ldrb	r2, [r2, #6]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f014 fd56 	bl	80174fc <memcpy>
		if (!(MIN_PACKET_SIZE <= global_payload->len && global_payload->len <= MAX_PACKET_SIZE))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	895b      	ldrh	r3, [r3, #10]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d904      	bls.n	8002a62 <proccess_manage+0x56>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	895b      	ldrh	r3, [r3, #10]
 8002a5c:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8002a60:	d305      	bcc.n	8002a6e <proccess_manage+0x62>
		{
			printf("packet size not in range \r\n");
 8002a62:	4810      	ldr	r0, [pc, #64]	; (8002aa4 <proccess_manage+0x98>)
 8002a64:	f014 fde6 	bl	8017634 <puts>
			receive_pack.perToTest = WRONG_PACK_SIZE;
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <proccess_manage+0x94>)
 8002a6a:	2242      	movs	r2, #66	; 0x42
 8002a6c:	711a      	strb	r2, [r3, #4]
		}

	// Save parameter to global variables in order to use in TEST function
		per     =  receive_pack.perToTest;			// parameter to know which protocol to test.
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <proccess_manage+0x94>)
 8002a70:	791a      	ldrb	r2, [r3, #4]
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <proccess_manage+0x9c>)
 8002a74:	701a      	strb	r2, [r3, #0]
		iter    =  receive_pack.iter;				// parameter to know how many times test the protocol.
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <proccess_manage+0x94>)
 8002a78:	795a      	ldrb	r2, [r3, #5]
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <proccess_manage+0xa0>)
 8002a7c:	701a      	strb	r2, [r3, #0]
		length  =  receive_pack.bitPatternLength;	// parameter to know length of the string in protocol test.
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <proccess_manage+0x94>)
 8002a80:	799a      	ldrb	r2, [r3, #6]
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <proccess_manage+0xa4>)
 8002a84:	701a      	strb	r2, [r3, #0]
		memcpy(test_check, receive_pack.bitPattern,receive_pack.bitPatternLength);
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <proccess_manage+0x94>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <proccess_manage+0x94>)
 8002a8c:	7992      	ldrb	r2, [r2, #6]
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4808      	ldr	r0, [pc, #32]	; (8002ab4 <proccess_manage+0xa8>)
 8002a92:	f014 fd33 	bl	80174fc <memcpy>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200012a0 	.word	0x200012a0
 8002aa4:	08018790 	.word	0x08018790
 8002aa8:	200004bd 	.word	0x200004bd
 8002aac:	200004bc 	.word	0x200004bc
 8002ab0:	200004be 	.word	0x200004be
 8002ab4:	200004c0 	.word	0x200004c0

08002ab8 <package_back>:
  * At the end contain ID test number and  his test's status
  * @param  None
  * @retval None
  */
void package_back()
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
	flag_packet = 0;
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <package_back+0x88>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
	char buf[5];												//Initialize buffer
	status.result = test(iter, per, length, test_check); 	   	// get the result from the chosen test.
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <package_back+0x8c>)
 8002ac6:	7818      	ldrb	r0, [r3, #0]
 8002ac8:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <package_back+0x90>)
 8002aca:	7819      	ldrb	r1, [r3, #0]
 8002acc:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <package_back+0x94>)
 8002ace:	781a      	ldrb	r2, [r3, #0]
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <package_back+0x98>)
 8002ad2:	f000 fa2b 	bl	8002f2c <test>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <package_back+0x9c>)
 8002adc:	711a      	strb	r2, [r3, #4]
    *(uint32_t *)(TEST_ID_REC_OFFSET) = receive_pack.testId;	// fill the buffer with testID
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <package_back+0xa0>)
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	601a      	str	r2, [r3, #0]
    *(uint8_t *)(RESULT_REC_OFFSET) = status.result;			// fill the buffer with test's result
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	3304      	adds	r3, #4
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <package_back+0x9c>)
 8002aec:	7912      	ldrb	r2, [r2, #4]
 8002aee:	701a      	strb	r2, [r3, #0]

    struct pbuf *txBuf = pbuf_alloc(PBUF_TRANSPORT,RECEIVE_PACK_SIZE, PBUF_RAM); //Create buffer for transmit packet back to client.
 8002af0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002af4:	2105      	movs	r1, #5
 8002af6:	2036      	movs	r0, #54	; 0x36
 8002af8:	f00b fbd8 	bl	800e2ac <pbuf_alloc>
 8002afc:	60f8      	str	r0, [r7, #12]
	pbuf_take(txBuf, buf, RECEIVE_PACK_SIZE);
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	2205      	movs	r2, #5
 8002b02:	4619      	mov	r1, r3
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f00c f921 	bl	800ed4c <pbuf_take>

	udp_connect(upcb, &client_addr, client_port);								// Connect to the remote client
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <package_back+0xa4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <package_back+0xa8>)
 8002b10:	8812      	ldrh	r2, [r2, #0]
 8002b12:	4914      	ldr	r1, [pc, #80]	; (8002b64 <package_back+0xac>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f012 f8b7 	bl	8014c88 <udp_connect>

	udp_send(upcb, txBuf);			// Send a Reply to the Client
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <package_back+0xa4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68f9      	ldr	r1, [r7, #12]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f011 fe3f 	bl	80147a4 <udp_send>

	udp_disconnect(upcb);			// free the UDP connection, so we can accept new clients
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <package_back+0xa4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f012 f91a 	bl	8014d64 <udp_disconnect>

	pbuf_free(txBuf);				// Free the p_tx buffer
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f00b fe9f 	bl	800e874 <pbuf_free>
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200005c4 	.word	0x200005c4
 8002b44:	200004bc 	.word	0x200004bc
 8002b48:	200004bd 	.word	0x200004bd
 8002b4c:	200004be 	.word	0x200004be
 8002b50:	200004c0 	.word	0x200004c0
 8002b54:	20001298 	.word	0x20001298
 8002b58:	200012a0 	.word	0x200012a0
 8002b5c:	200005c0 	.word	0x200005c0
 8002b60:	200012b0 	.word	0x200012b0
 8002b64:	200012ac 	.word	0x200012ac

08002b68 <udp_receive_callback>:

ip_addr_t client_addr;
u16_t client_port;

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
	client_addr = *addr; 	// holds client's address.
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <udp_receive_callback+0x38>)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6013      	str	r3, [r2, #0]
	client_port = port;		// holds client's port.e
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <udp_receive_callback+0x3c>)
 8002b80:	8b3b      	ldrh	r3, [r7, #24]
 8002b82:	8013      	strh	r3, [r2, #0]
	flag_packet = 1;		// notice than packet is received
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <udp_receive_callback+0x40>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
	proccess_manage(p);		//load local packet with payload
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ff3e 	bl	8002a0c <proccess_manage>
	pbuf_free(p);			// free the allocation
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f00b fe6f 	bl	800e874 <pbuf_free>
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200012ac 	.word	0x200012ac
 8002ba4:	200012b0 	.word	0x200012b0
 8002ba8:	200005c4 	.word	0x200005c4

08002bac <udpServer_init>:

void udpServer_init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
   upcb = udp_new(); 										//1. Create a new UDP control block.
 8002bb2:	f012 f961 	bl	8014e78 <udp_new>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <udpServer_init+0x4c>)
 8002bba:	6013      	str	r3, [r2, #0]

   err_t err = udp_bind(upcb, IP_ADDR_ANY, SERVER_PORT);	//2. Bind the upcb to the local port.
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <udpServer_init+0x4c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	490e      	ldr	r1, [pc, #56]	; (8002bfc <udpServer_init+0x50>)
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f011 ffd7 	bl	8014b78 <udp_bind>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]

   if (err == ERR_OK)										//3. Set a receive callback for the upcb.
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d107      	bne.n	8002be6 <udpServer_init+0x3a>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <udpServer_init+0x4c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4908      	ldr	r1, [pc, #32]	; (8002c00 <udpServer_init+0x54>)
 8002bde:	4618      	mov	r0, r3
 8002be0:	f012 f8e8 	bl	8014db4 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8002be4:	e004      	b.n	8002bf0 <udpServer_init+0x44>
	   udp_remove(upcb);
 8002be6:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <udpServer_init+0x4c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f012 f902 	bl	8014df4 <udp_remove>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	200005c0 	.word	0x200005c0
 8002bfc:	0801b388 	.word	0x0801b388
 8002c00:	08002b69 	.word	0x08002b69

08002c04 <DB_SPI>:
  * @param  uint8_t length of string received from client.
  * @param  char* string that client sent to use in protocol test.
  * @retval uint8_t status check.
  */
uint8_t DB_SPI(uint8_t main_iter, uint8_t length, char * string_to_check)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	603a      	str	r2, [r7, #0]
 8002c0e:	71fb      	strb	r3, [r7, #7]
 8002c10:	460b      	mov	r3, r1
 8002c12:	71bb      	strb	r3, [r7, #6]
	printf("Start test of SPI protocol:\r\n");
 8002c14:	4835      	ldr	r0, [pc, #212]	; (8002cec <DB_SPI+0xe8>)
 8002c16:	f014 fd0d 	bl	8017634 <puts>
	while (main_iter --)
 8002c1a:	e056      	b.n	8002cca <DB_SPI+0xc6>
	{
		flag_spi = RESET;
 8002c1c:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <DB_SPI+0xec>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
		// SLAVE is ready to get data to SLAVE_BUFF and transmit SLAVE_BUFF to MASTER.
		if (HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, SPI_SLAVE_BUFF, SPI_SLAVE_BUFF, length) != HAL_OK)
 8002c22:	79bb      	ldrb	r3, [r7, #6]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4a33      	ldr	r2, [pc, #204]	; (8002cf4 <DB_SPI+0xf0>)
 8002c28:	4932      	ldr	r1, [pc, #200]	; (8002cf4 <DB_SPI+0xf0>)
 8002c2a:	4833      	ldr	r0, [pc, #204]	; (8002cf8 <DB_SPI+0xf4>)
 8002c2c:	f006 fc0e 	bl	800944c <HAL_SPI_TransmitReceive_DMA>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d004      	beq.n	8002c40 <DB_SPI+0x3c>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 8002c36:	4831      	ldr	r0, [pc, #196]	; (8002cfc <DB_SPI+0xf8>)
 8002c38:	f014 fcfc 	bl	8017634 <puts>
			return FAILURE;
 8002c3c:	23ff      	movs	r3, #255	; 0xff
 8002c3e:	e050      	b.n	8002ce2 <DB_SPI+0xde>
		}
		// MASTER transmit the string from client to SLAVE_BUFF and receive empty SLAVE_BUFF to MASTER_BUFF.
		if (HAL_SPI_TransmitReceive_DMA(SPI_MASTER, (uint8_t *)string_to_check, SPI_MASTER_BUFF,  length) != HAL_OK)
 8002c40:	79bb      	ldrb	r3, [r7, #6]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <DB_SPI+0xfc>)
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	482e      	ldr	r0, [pc, #184]	; (8002d04 <DB_SPI+0x100>)
 8002c4a:	f006 fbff 	bl	800944c <HAL_SPI_TransmitReceive_DMA>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <DB_SPI+0x5a>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 8002c54:	4829      	ldr	r0, [pc, #164]	; (8002cfc <DB_SPI+0xf8>)
 8002c56:	f014 fced 	bl	8017634 <puts>
			return FAILURE;
 8002c5a:	23ff      	movs	r3, #255	; 0xff
 8002c5c:	e041      	b.n	8002ce2 <DB_SPI+0xde>
		}
		while(flag_spi != SET){;}
 8002c5e:	bf00      	nop
 8002c60:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <DB_SPI+0xec>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d1fb      	bne.n	8002c60 <DB_SPI+0x5c>
		flag_spi = RESET;
 8002c68:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <DB_SPI+0xec>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]

		// SLAVE transmit his buffer to MASTER_BUFF and ready to receive MASTER_BUFF to SLAVE_BUFF.
		if (HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, SPI_SLAVE_BUFF, SPI_SLAVE_BUFF, length) != HAL_OK)
 8002c6e:	79bb      	ldrb	r3, [r7, #6]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	4a20      	ldr	r2, [pc, #128]	; (8002cf4 <DB_SPI+0xf0>)
 8002c74:	491f      	ldr	r1, [pc, #124]	; (8002cf4 <DB_SPI+0xf0>)
 8002c76:	4820      	ldr	r0, [pc, #128]	; (8002cf8 <DB_SPI+0xf4>)
 8002c78:	f006 fbe8 	bl	800944c <HAL_SPI_TransmitReceive_DMA>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d004      	beq.n	8002c8c <DB_SPI+0x88>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 8002c82:	481e      	ldr	r0, [pc, #120]	; (8002cfc <DB_SPI+0xf8>)
 8002c84:	f014 fcd6 	bl	8017634 <puts>
			return FAILURE;
 8002c88:	23ff      	movs	r3, #255	; 0xff
 8002c8a:	e02a      	b.n	8002ce2 <DB_SPI+0xde>
		}
		// MASTER receive SLAVE_BUFF to MASTER_BUFF and transmit empty MASTER_BUFF to SLAVE_BUFF.
		if (HAL_SPI_TransmitReceive_DMA(SPI_MASTER, SPI_MASTER_BUFF, SPI_MASTER_BUFF,  length) != HAL_OK)
 8002c8c:	79bb      	ldrb	r3, [r7, #6]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <DB_SPI+0xfc>)
 8002c92:	491b      	ldr	r1, [pc, #108]	; (8002d00 <DB_SPI+0xfc>)
 8002c94:	481b      	ldr	r0, [pc, #108]	; (8002d04 <DB_SPI+0x100>)
 8002c96:	f006 fbd9 	bl	800944c <HAL_SPI_TransmitReceive_DMA>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <DB_SPI+0xa6>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 8002ca0:	4816      	ldr	r0, [pc, #88]	; (8002cfc <DB_SPI+0xf8>)
 8002ca2:	f014 fcc7 	bl	8017634 <puts>
			return FAILURE;
 8002ca6:	23ff      	movs	r3, #255	; 0xff
 8002ca8:	e01b      	b.n	8002ce2 <DB_SPI+0xde>
		}
		while(flag_spi != SET){;}
 8002caa:	bf00      	nop
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <DB_SPI+0xec>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d1fb      	bne.n	8002cac <DB_SPI+0xa8>

		if(memcmp(string_to_check, SPI_MASTER_BUFF,length)!= 0)
 8002cb4:	79bb      	ldrb	r3, [r7, #6]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4911      	ldr	r1, [pc, #68]	; (8002d00 <DB_SPI+0xfc>)
 8002cba:	6838      	ldr	r0, [r7, #0]
 8002cbc:	f014 fc0e 	bl	80174dc <memcmp>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <DB_SPI+0xc6>
		// check that string at the end of 'SPI' is the same as the string at the beginning.
		{
			return FAILURE;
 8002cc6:	23ff      	movs	r3, #255	; 0xff
 8002cc8:	e00b      	b.n	8002ce2 <DB_SPI+0xde>
	while (main_iter --)
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	1e5a      	subs	r2, r3, #1
 8002cce:	71fa      	strb	r2, [r7, #7]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1a3      	bne.n	8002c1c <DB_SPI+0x18>
		}
	}
	printf("SPI_WORKS_GOOD\r\n");
 8002cd4:	480c      	ldr	r0, [pc, #48]	; (8002d08 <DB_SPI+0x104>)
 8002cd6:	f014 fcad 	bl	8017634 <puts>
    printf("---------------------\r\n");
 8002cda:	480c      	ldr	r0, [pc, #48]	; (8002d0c <DB_SPI+0x108>)
 8002cdc:	f014 fcaa 	bl	8017634 <puts>
	return SUCCESS;
 8002ce0:	2301      	movs	r3, #1
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	080187ac 	.word	0x080187ac
 8002cf0:	200012b2 	.word	0x200012b2
 8002cf4:	200012b4 	.word	0x200012b4
 8002cf8:	2000062c 	.word	0x2000062c
 8002cfc:	080187cc 	.word	0x080187cc
 8002d00:	200013b4 	.word	0x200013b4
 8002d04:	200005c8 	.word	0x200005c8
 8002d08:	080187ec 	.word	0x080187ec
 8002d0c:	080187fc 	.word	0x080187fc

08002d10 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	if(hspi == SPI_MASTER)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a06      	ldr	r2, [pc, #24]	; (8002d34 <HAL_SPI_TxRxCpltCallback+0x24>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d102      	bne.n	8002d26 <HAL_SPI_TxRxCpltCallback+0x16>
	{
		flag_spi = SET;
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_SPI_TxRxCpltCallback+0x28>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
	}
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	200005c8 	.word	0x200005c8
 8002d38:	200012b2 	.word	0x200012b2

08002d3c <DB_TIME>:
#include "DB_TIMER.h"
uint16_t timer_val;
ITStatus flag_timer;

uint8_t DB_TIME(uint8_t main_iter)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
	 // Start timer
	flag_timer = RESET;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <DB_TIME+0x44>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(TIM_3);				// TIMER 3 starts count
 8002d4c:	480d      	ldr	r0, [pc, #52]	; (8002d84 <DB_TIME+0x48>)
 8002d4e:	f007 f97d 	bl	800a04c <HAL_TIM_Base_Start_IT>
	while (main_iter)
 8002d52:	e00a      	b.n	8002d6a <DB_TIME+0x2e>
	{
		while (!flag_timer){}
 8002d54:	bf00      	nop
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <DB_TIME+0x44>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0fb      	beq.n	8002d56 <DB_TIME+0x1a>
		main_iter --;
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	71fb      	strb	r3, [r7, #7]
		flag_timer = RESET;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <DB_TIME+0x44>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
	while (main_iter)
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f1      	bne.n	8002d54 <DB_TIME+0x18>
	}
	HAL_TIM_Base_Stop_IT(TIM_3);				//// TIMER 3 stop at the end of test
 8002d70:	4804      	ldr	r0, [pc, #16]	; (8002d84 <DB_TIME+0x48>)
 8002d72:	f007 f9e3 	bl	800a13c <HAL_TIM_Base_Stop_IT>
	return SUCCESS;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	200014b3 	.word	0x200014b3
 8002d84:	20000814 	.word	0x20000814

08002d88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
// Check which version of the timer triggered this callback and toggle LED
	if (htim == TIM_3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a0b      	ldr	r2, [pc, #44]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d10f      	bne.n	8002db8 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
		  HAL_GPIO_TogglePin(GPIO_PER_1, GPIO_LED_1);
 8002d98:	2101      	movs	r1, #1
 8002d9a:	480a      	ldr	r0, [pc, #40]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002d9c:	f003 f90d 	bl	8005fba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIO_PER_2, GPIO_LED_2);
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	4808      	ldr	r0, [pc, #32]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002da4:	f003 f909 	bl	8005fba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIO_PER_3, GPIO_LED_3);
 8002da8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dac:	4805      	ldr	r0, [pc, #20]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002dae:	f003 f904 	bl	8005fba <HAL_GPIO_TogglePin>
		  flag_timer = SET;
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
		}
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000814 	.word	0x20000814
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	200014b3 	.word	0x200014b3

08002dcc <DB_UART>:
  * @param  uint8_t length of string received from client.
  * @param  char* string that client sent to use in protocol test.
  * @retval uint8_t status check.
  */
uint8_t DB_UART(uint8_t main_iter, uint8_t length, char * string_to_check)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	603a      	str	r2, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	71bb      	strb	r3, [r7, #6]
	printf("Start test of UART protocol:\r\n");
 8002ddc:	4834      	ldr	r0, [pc, #208]	; (8002eb0 <DB_UART+0xe4>)
 8002dde:	f014 fc29 	bl	8017634 <puts>
	while(main_iter --)
 8002de2:	e054      	b.n	8002e8e <DB_UART+0xc2>
	{
		flag_uart = RESET;
 8002de4:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <DB_UART+0xe8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
		if(HAL_UART_Receive_DMA(SLAVE_UART_6, U6_SLAVE_BUFF , length) != HAL_OK)// UART6 ready to receive data from UART4.
 8002dea:	79bb      	ldrb	r3, [r7, #6]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	4931      	ldr	r1, [pc, #196]	; (8002eb8 <DB_UART+0xec>)
 8002df2:	4832      	ldr	r0, [pc, #200]	; (8002ebc <DB_UART+0xf0>)
 8002df4:	f007 ffda 	bl	800adac <HAL_UART_Receive_DMA>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <DB_UART+0x3c>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 8002dfe:	4830      	ldr	r0, [pc, #192]	; (8002ec0 <DB_UART+0xf4>)
 8002e00:	f014 fc18 	bl	8017634 <puts>
			return FAILURE;
 8002e04:	23ff      	movs	r3, #255	; 0xff
 8002e06:	e04e      	b.n	8002ea6 <DB_UART+0xda>
		}
		if(HAL_UART_Transmit_DMA(MASTER_UART_4, (uint8_t *)string_to_check, length) != HAL_OK)// UART4 transmit the data from client to UART6.
 8002e08:	79bb      	ldrb	r3, [r7, #6]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6839      	ldr	r1, [r7, #0]
 8002e10:	482c      	ldr	r0, [pc, #176]	; (8002ec4 <DB_UART+0xf8>)
 8002e12:	f007 ff4f 	bl	800acb4 <HAL_UART_Transmit_DMA>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <DB_UART+0x5a>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 8002e1c:	4828      	ldr	r0, [pc, #160]	; (8002ec0 <DB_UART+0xf4>)
 8002e1e:	f014 fc09 	bl	8017634 <puts>
			return FAILURE;
 8002e22:	23ff      	movs	r3, #255	; 0xff
 8002e24:	e03f      	b.n	8002ea6 <DB_UART+0xda>
		}
		while (flag_uart != SET){;}
 8002e26:	bf00      	nop
 8002e28:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <DB_UART+0xe8>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d1fb      	bne.n	8002e28 <DB_UART+0x5c>
		flag_uart = RESET;
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <DB_UART+0xe8>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]

		if(HAL_UART_Receive_DMA(MASTER_UART_4, U4_MASTER_BUFF , length) != HAL_OK)	// UART4 receive data from UART6.
 8002e36:	79bb      	ldrb	r3, [r7, #6]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4922      	ldr	r1, [pc, #136]	; (8002ec8 <DB_UART+0xfc>)
 8002e3e:	4821      	ldr	r0, [pc, #132]	; (8002ec4 <DB_UART+0xf8>)
 8002e40:	f007 ffb4 	bl	800adac <HAL_UART_Receive_DMA>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <DB_UART+0x88>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 8002e4a:	481d      	ldr	r0, [pc, #116]	; (8002ec0 <DB_UART+0xf4>)
 8002e4c:	f014 fbf2 	bl	8017634 <puts>
			return FAILURE;
 8002e50:	23ff      	movs	r3, #255	; 0xff
 8002e52:	e028      	b.n	8002ea6 <DB_UART+0xda>
		}
		if(HAL_UART_Transmit_DMA(SLAVE_UART_6, U6_SLAVE_BUFF, length) != HAL_OK)	// UART6 transmit back his buffer to UART4.
 8002e54:	79bb      	ldrb	r3, [r7, #6]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4917      	ldr	r1, [pc, #92]	; (8002eb8 <DB_UART+0xec>)
 8002e5c:	4817      	ldr	r0, [pc, #92]	; (8002ebc <DB_UART+0xf0>)
 8002e5e:	f007 ff29 	bl	800acb4 <HAL_UART_Transmit_DMA>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <DB_UART+0xa6>
		{
			printf("TEST FAIL, (check hal_status)\r\n");
 8002e68:	4815      	ldr	r0, [pc, #84]	; (8002ec0 <DB_UART+0xf4>)
 8002e6a:	f014 fbe3 	bl	8017634 <puts>
			return FAILURE;
 8002e6e:	23ff      	movs	r3, #255	; 0xff
 8002e70:	e019      	b.n	8002ea6 <DB_UART+0xda>
		}
		HAL_Delay(50);
 8002e72:	2032      	movs	r0, #50	; 0x32
 8002e74:	f000 faf4 	bl	8003460 <HAL_Delay>
		if(memcmp(string_to_check, U4_MASTER_BUFF,length)!= 0)
 8002e78:	79bb      	ldrb	r3, [r7, #6]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4912      	ldr	r1, [pc, #72]	; (8002ec8 <DB_UART+0xfc>)
 8002e7e:	6838      	ldr	r0, [r7, #0]
 8002e80:	f014 fb2c 	bl	80174dc <memcmp>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <DB_UART+0xc2>
		// check that string at the end of 'UART' is the same as the string at the beginning.
		{
			return FAILURE;
 8002e8a:	23ff      	movs	r3, #255	; 0xff
 8002e8c:	e00b      	b.n	8002ea6 <DB_UART+0xda>
	while(main_iter --)
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	1e5a      	subs	r2, r3, #1
 8002e92:	71fa      	strb	r2, [r7, #7]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1a5      	bne.n	8002de4 <DB_UART+0x18>
		}
	}
	printf("UART_WORKS_GOOD\r\n");
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <DB_UART+0x100>)
 8002e9a:	f014 fbcb 	bl	8017634 <puts>
    printf("---------------------\r\n");
 8002e9e:	480c      	ldr	r0, [pc, #48]	; (8002ed0 <DB_UART+0x104>)
 8002ea0:	f014 fbc8 	bl	8017634 <puts>
	return SUCCESS;
 8002ea4:	2301      	movs	r3, #1
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	08018814 	.word	0x08018814
 8002eb4:	200014b4 	.word	0x200014b4
 8002eb8:	200014b8 	.word	0x200014b8
 8002ebc:	20000970 	.word	0x20000970
 8002ec0:	08018834 	.word	0x08018834
 8002ec4:	20000860 	.word	0x20000860
 8002ec8:	200015b8 	.word	0x200015b8
 8002ecc:	08018854 	.word	0x08018854
 8002ed0:	08018868 	.word	0x08018868

08002ed4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) // check if SLAVE complete transmission
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	if(huart == SLAVE_UART_6){
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a06      	ldr	r2, [pc, #24]	; (8002ef8 <HAL_UART_TxCpltCallback+0x24>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d102      	bne.n	8002eea <HAL_UART_TxCpltCallback+0x16>
		flag_uart = SET;
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_UART_TxCpltCallback+0x28>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
	}
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000970 	.word	0x20000970
 8002efc:	200014b4 	.word	0x200014b4

08002f00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)	// check if SLAVE complete receiving
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	if(huart==SLAVE_UART_6){
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a06      	ldr	r2, [pc, #24]	; (8002f24 <HAL_UART_RxCpltCallback+0x24>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d102      	bne.n	8002f16 <HAL_UART_RxCpltCallback+0x16>
		flag_uart = SET;
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_UART_RxCpltCallback+0x28>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
	}
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000970 	.word	0x20000970
 8002f28:	200014b4 	.word	0x200014b4

08002f2c <test>:
  * @param  uint8_t length of string received from client.
  * @param  char* string that client sent to use in protocol test.
  * @retval uint8_t status check.
  */
uint8_t test(uint8_t main_iter, uint8_t per_to_check, uint8_t length, char * string_to_check)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	4603      	mov	r3, r0
 8002f36:	71fb      	strb	r3, [r7, #7]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	71bb      	strb	r3, [r7, #6]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	717b      	strb	r3, [r7, #5]
	uint8_t status = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
	if(!(per_to_check == TIMER || per_to_check == UART || per_to_check == SPI || per_to_check == I2C
 8002f44:	79bb      	ldrb	r3, [r7, #6]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d013      	beq.n	8002f72 <test+0x46>
 8002f4a:	79bb      	ldrb	r3, [r7, #6]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d010      	beq.n	8002f72 <test+0x46>
 8002f50:	79bb      	ldrb	r3, [r7, #6]
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d00d      	beq.n	8002f72 <test+0x46>
 8002f56:	79bb      	ldrb	r3, [r7, #6]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d00a      	beq.n	8002f72 <test+0x46>
							   || per_to_check == ADC33||per_to_check == WRONG_PACK_SIZE))
 8002f5c:	79bb      	ldrb	r3, [r7, #6]
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d007      	beq.n	8002f72 <test+0x46>
	if(!(per_to_check == TIMER || per_to_check == UART || per_to_check == SPI || per_to_check == I2C
 8002f62:	79bb      	ldrb	r3, [r7, #6]
 8002f64:	2b42      	cmp	r3, #66	; 0x42
 8002f66:	d004      	beq.n	8002f72 <test+0x46>
	{
		printf("WRONG PERIPHERIAL\r\n");
 8002f68:	4832      	ldr	r0, [pc, #200]	; (8003034 <test+0x108>)
 8002f6a:	f014 fb63 	bl	8017634 <puts>
		return FAILURE;
 8002f6e:	23ff      	movs	r3, #255	; 0xff
 8002f70:	e05c      	b.n	800302c <test+0x100>
	}
	if(main_iter > 255)
	{
		main_iter %= 255;
	}
	switch(per_to_check)
 8002f72:	79bb      	ldrb	r3, [r7, #6]
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	dc27      	bgt.n	8002fc8 <test+0x9c>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	dd53      	ble.n	8003024 <test+0xf8>
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	d850      	bhi.n	8003024 <test+0xf8>
 8002f82:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <test+0x5c>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	08002fcf 	.word	0x08002fcf
 8002f8c:	08002fdd 	.word	0x08002fdd
 8002f90:	08003025 	.word	0x08003025
 8002f94:	08002fef 	.word	0x08002fef
 8002f98:	08003025 	.word	0x08003025
 8002f9c:	08003025 	.word	0x08003025
 8002fa0:	08003025 	.word	0x08003025
 8002fa4:	08003001 	.word	0x08003001
 8002fa8:	08003025 	.word	0x08003025
 8002fac:	08003025 	.word	0x08003025
 8002fb0:	08003025 	.word	0x08003025
 8002fb4:	08003025 	.word	0x08003025
 8002fb8:	08003025 	.word	0x08003025
 8002fbc:	08003025 	.word	0x08003025
 8002fc0:	08003025 	.word	0x08003025
 8002fc4:	08003013 	.word	0x08003013
 8002fc8:	2b42      	cmp	r3, #66	; 0x42
 8002fca:	d029      	beq.n	8003020 <test+0xf4>
 8002fcc:	e02a      	b.n	8003024 <test+0xf8>
	{
		case TIMER:
			status = DB_TIME(main_iter);
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff feb3 	bl	8002d3c <DB_TIME>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	73fb      	strb	r3, [r7, #15]
			break;
 8002fda:	e026      	b.n	800302a <test+0xfe>
		case UART:
			status = DB_UART(main_iter, length, string_to_check);
 8002fdc:	7979      	ldrb	r1, [r7, #5]
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fef2 	bl	8002dcc <DB_UART>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	73fb      	strb	r3, [r7, #15]
			break;
 8002fec:	e01d      	b.n	800302a <test+0xfe>
		case SPI:
			status = DB_SPI(main_iter, length, string_to_check);
 8002fee:	7979      	ldrb	r1, [r7, #5]
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fe05 	bl	8002c04 <DB_SPI>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	73fb      	strb	r3, [r7, #15]
			break;
 8002ffe:	e014      	b.n	800302a <test+0xfe>
		case I2C:
			status = DB_I2C(main_iter, length, string_to_check);
 8003000:	7979      	ldrb	r1, [r7, #5]
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fc4a 	bl	80028a0 <DB_I2C>
 800300c:	4603      	mov	r3, r0
 800300e:	73fb      	strb	r3, [r7, #15]
			break;
 8003010:	e00b      	b.n	800302a <test+0xfe>
		case ADC33:
			status = DB_ADC(main_iter);
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fbab 	bl	8002770 <DB_ADC>
 800301a:	4603      	mov	r3, r0
 800301c:	73fb      	strb	r3, [r7, #15]
			break;
 800301e:	e004      	b.n	800302a <test+0xfe>
		case WRONG_PACK_SIZE:
			status = FAILURE;
 8003020:	23ff      	movs	r3, #255	; 0xff
 8003022:	73fb      	strb	r3, [r7, #15]
		default:
			printf ("chose different per\r\n");
 8003024:	4804      	ldr	r0, [pc, #16]	; (8003038 <test+0x10c>)
 8003026:	f014 fb05 	bl	8017634 <puts>
	}
	return status;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	08018880 	.word	0x08018880
 8003038:	08018894 	.word	0x08018894

0800303c <_write>:
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, len, 0xFFFF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	b29a      	uxth	r2, r3
 800304c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	4804      	ldr	r0, [pc, #16]	; (8003064 <_write+0x28>)
 8003054:	f007 fce6 	bl	800aa24 <HAL_UART_Transmit>
	return len;
 8003058:	687b      	ldr	r3, [r7, #4]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200008e8 	.word	0x200008e8

08003068 <_read>:

// scanf
int _read(int file, char *ptr, int len)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
	int ch=0;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUG, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003078:	f107 0114 	add.w	r1, r7, #20
 800307c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003080:	2201      	movs	r2, #1
 8003082:	4817      	ldr	r0, [pc, #92]	; (80030e0 <_read+0x78>)
 8003084:	f007 fd51 	bl	800ab2a <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8003088:	f107 0114 	add.w	r1, r7, #20
 800308c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003090:	2201      	movs	r2, #1
 8003092:	4813      	ldr	r0, [pc, #76]	; (80030e0 <_read+0x78>)
 8003094:	f007 fcc6 	bl	800aa24 <HAL_UART_Transmit>
	if(ch==13)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b0d      	cmp	r3, #13
 800309c:	d10a      	bne.n	80030b4 <_read+0x4c>
	{
		ch=10;
 800309e:	230a      	movs	r3, #10
 80030a0:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 80030a2:	f107 0114 	add.w	r1, r7, #20
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030aa:	2201      	movs	r2, #1
 80030ac:	480c      	ldr	r0, [pc, #48]	; (80030e0 <_read+0x78>)
 80030ae:	f007 fcb9 	bl	800aa24 <HAL_UART_Transmit>
 80030b2:	e00c      	b.n	80030ce <_read+0x66>
	}
	else if(ch==8)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d109      	bne.n	80030ce <_read+0x66>
	{
		ch=0x30;
 80030ba:	2330      	movs	r3, #48	; 0x30
 80030bc:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 80030be:	f107 0114 	add.w	r1, r7, #20
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030c6:	2201      	movs	r2, #1
 80030c8:	4805      	ldr	r0, [pc, #20]	; (80030e0 <_read+0x78>)
 80030ca:	f007 fcab 	bl	800aa24 <HAL_UART_Transmit>
	}

	*ptr=ch;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	701a      	strb	r2, [r3, #0]

	return 1;
 80030d6:	2301      	movs	r3, #1
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	200008e8 	.word	0x200008e8

080030e4 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00b      	beq.n	800310c <LAN8742_RegisterBusIO+0x28>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <LAN8742_RegisterBusIO+0x28>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <LAN8742_RegisterBusIO+0x28>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800310c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003110:	e014      	b.n	800313c <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	2300      	movs	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d17c      	bne.n	8003262 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	e01c      	b.n	80031bc <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f107 0208 	add.w	r2, r7, #8
 800318a:	2112      	movs	r1, #18
 800318c:	6978      	ldr	r0, [r7, #20]
 800318e:	4798      	blx	r3
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	da03      	bge.n	800319e <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003196:	f06f 0304 	mvn.w	r3, #4
 800319a:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800319c:	e00b      	b.n	80031b6 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d105      	bne.n	80031b6 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]
         break;
 80031b4:	e005      	b.n	80031c2 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3301      	adds	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2b1f      	cmp	r3, #31
 80031c0:	d9df      	bls.n	8003182 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b1f      	cmp	r3, #31
 80031c8:	d902      	bls.n	80031d0 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80031ca:	f06f 0302 	mvn.w	r3, #2
 80031ce:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d145      	bne.n	8003262 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6810      	ldr	r0, [r2, #0]
 80031de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80031e2:	2100      	movs	r1, #0
 80031e4:	4798      	blx	r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	db37      	blt.n	800325c <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6810      	ldr	r0, [r2, #0]
 80031f4:	f107 0208 	add.w	r2, r7, #8
 80031f8:	2100      	movs	r1, #0
 80031fa:	4798      	blx	r3
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	db28      	blt.n	8003254 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	4798      	blx	r3
 8003208:	4603      	mov	r3, r0
 800320a:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800320c:	e01c      	b.n	8003248 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	4798      	blx	r3
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003220:	d80e      	bhi.n	8003240 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6810      	ldr	r0, [r2, #0]
 800322a:	f107 0208 	add.w	r2, r7, #8
 800322e:	2100      	movs	r1, #0
 8003230:	4798      	blx	r3
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	da07      	bge.n	8003248 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003238:	f06f 0304 	mvn.w	r3, #4
 800323c:	613b      	str	r3, [r7, #16]
                 break;
 800323e:	e010      	b.n	8003262 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003240:	f06f 0301 	mvn.w	r3, #1
 8003244:	613b      	str	r3, [r7, #16]
               break;
 8003246:	e00c      	b.n	8003262 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1dd      	bne.n	800320e <LAN8742_Init+0xc6>
 8003252:	e006      	b.n	8003262 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003254:	f06f 0304 	mvn.w	r3, #4
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	e002      	b.n	8003262 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800325c:	f06f 0303 	mvn.w	r3, #3
 8003260:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d112      	bne.n	800328e <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	4798      	blx	r3
 800326e:	4603      	mov	r3, r0
 8003270:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003272:	bf00      	nop
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	4798      	blx	r3
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003286:	d9f5      	bls.n	8003274 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800328e:	693b      	ldr	r3, [r7, #16]
 }
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6810      	ldr	r0, [r2, #0]
 80032ac:	f107 020c 	add.w	r2, r7, #12
 80032b0:	2101      	movs	r1, #1
 80032b2:	4798      	blx	r3
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	da02      	bge.n	80032c0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80032ba:	f06f 0304 	mvn.w	r3, #4
 80032be:	e06e      	b.n	800339e <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6810      	ldr	r0, [r2, #0]
 80032c8:	f107 020c 	add.w	r2, r7, #12
 80032cc:	2101      	movs	r1, #1
 80032ce:	4798      	blx	r3
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	da02      	bge.n	80032dc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80032d6:	f06f 0304 	mvn.w	r3, #4
 80032da:	e060      	b.n	800339e <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80032e6:	2301      	movs	r3, #1
 80032e8:	e059      	b.n	800339e <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6810      	ldr	r0, [r2, #0]
 80032f2:	f107 020c 	add.w	r2, r7, #12
 80032f6:	2100      	movs	r1, #0
 80032f8:	4798      	blx	r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da02      	bge.n	8003306 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003300:	f06f 0304 	mvn.w	r3, #4
 8003304:	e04b      	b.n	800339e <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d11b      	bne.n	8003348 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d006      	beq.n	8003328 <LAN8742_GetLinkState+0x90>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003324:	2302      	movs	r3, #2
 8003326:	e03a      	b.n	800339e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003332:	2303      	movs	r3, #3
 8003334:	e033      	b.n	800339e <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003340:	2304      	movs	r3, #4
 8003342:	e02c      	b.n	800339e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003344:	2305      	movs	r3, #5
 8003346:	e02a      	b.n	800339e <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6810      	ldr	r0, [r2, #0]
 8003350:	f107 020c 	add.w	r2, r7, #12
 8003354:	211f      	movs	r1, #31
 8003356:	4798      	blx	r3
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	da02      	bge.n	8003364 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800335e:	f06f 0304 	mvn.w	r3, #4
 8003362:	e01c      	b.n	800339e <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800336e:	2306      	movs	r3, #6
 8003370:	e015      	b.n	800339e <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 031c 	and.w	r3, r3, #28
 8003378:	2b18      	cmp	r3, #24
 800337a:	d101      	bne.n	8003380 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800337c:	2302      	movs	r3, #2
 800337e:	e00e      	b.n	800339e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 031c 	and.w	r3, r3, #28
 8003386:	2b08      	cmp	r3, #8
 8003388:	d101      	bne.n	800338e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800338a:	2303      	movs	r3, #3
 800338c:	e007      	b.n	800339e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 031c 	and.w	r3, r3, #28
 8003394:	2b14      	cmp	r3, #20
 8003396:	d101      	bne.n	800339c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003398:	2304      	movs	r3, #4
 800339a:	e000      	b.n	800339e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800339c:	2305      	movs	r3, #5
    }				
  }
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033aa:	2003      	movs	r0, #3
 80033ac:	f000 fdf4 	bl	8003f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033b0:	2000      	movs	r0, #0
 80033b2:	f000 f805 	bl	80033c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033b6:	f7fe fc49 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033c8:	4b12      	ldr	r3, [pc, #72]	; (8003414 <HAL_InitTick+0x54>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_InitTick+0x58>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	4619      	mov	r1, r3
 80033d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033da:	fbb2 f3f3 	udiv	r3, r2, r3
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fe0f 	bl	8004002 <HAL_SYSTICK_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e00e      	b.n	800340c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b0f      	cmp	r3, #15
 80033f2:	d80a      	bhi.n	800340a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033f4:	2200      	movs	r2, #0
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033fc:	f000 fdd7 	bl	8003fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003400:	4a06      	ldr	r2, [pc, #24]	; (800341c <HAL_InitTick+0x5c>)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000000 	.word	0x20000000
 8003418:	20000008 	.word	0x20000008
 800341c:	20000004 	.word	0x20000004

08003420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_IncTick+0x20>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_IncTick+0x24>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4413      	add	r3, r2
 8003430:	4a04      	ldr	r2, [pc, #16]	; (8003444 <HAL_IncTick+0x24>)
 8003432:	6013      	str	r3, [r2, #0]
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000008 	.word	0x20000008
 8003444:	200016b8 	.word	0x200016b8

08003448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return uwTick;
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_GetTick+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	200016b8 	.word	0x200016b8

08003460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003468:	f7ff ffee 	bl	8003448 <HAL_GetTick>
 800346c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003478:	d005      	beq.n	8003486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_Delay+0x44>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003486:	bf00      	nop
 8003488:	f7ff ffde 	bl	8003448 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	429a      	cmp	r2, r3
 8003496:	d8f7      	bhi.n	8003488 <HAL_Delay+0x28>
  {
  }
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000008 	.word	0x20000008

080034a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e031      	b.n	8003522 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fd1c 	bl	8000f04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d116      	bne.n	8003514 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <HAL_ADC_Init+0x84>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	f043 0202 	orr.w	r2, r3, #2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fb7a 	bl	8003bf0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	f043 0201 	orr.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
 8003512:	e001      	b.n	8003518 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	ffffeefd 	.word	0xffffeefd

08003530 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_ADC_Start_IT+0x1a>
 8003546:	2302      	movs	r3, #2
 8003548:	e0b5      	b.n	80036b6 <HAL_ADC_Start_IT+0x186>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d018      	beq.n	8003592 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003570:	4b54      	ldr	r3, [pc, #336]	; (80036c4 <HAL_ADC_Start_IT+0x194>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a54      	ldr	r2, [pc, #336]	; (80036c8 <HAL_ADC_Start_IT+0x198>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0c9a      	lsrs	r2, r3, #18
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003584:	e002      	b.n	800358c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3b01      	subs	r3, #1
 800358a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f9      	bne.n	8003586 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d17d      	bne.n	800369c <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a4:	4b49      	ldr	r3, [pc, #292]	; (80036cc <HAL_ADC_Start_IT+0x19c>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035da:	d106      	bne.n	80035ea <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	f023 0206 	bic.w	r2, r3, #6
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
 80035e8:	e002      	b.n	80035f0 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003600:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b30      	ldr	r3, [pc, #192]	; (80036d0 <HAL_ADC_Start_IT+0x1a0>)
 800360e:	430b      	orrs	r3, r1
 8003610:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <HAL_ADC_Start_IT+0x1a4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d143      	bne.n	80036b4 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	e03a      	b.n	80036b4 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a25      	ldr	r2, [pc, #148]	; (80036d8 <HAL_ADC_Start_IT+0x1a8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d10e      	bne.n	8003666 <HAL_ADC_Start_IT+0x136>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003664:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_ADC_Start_IT+0x1a4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d120      	bne.n	80036b4 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a19      	ldr	r2, [pc, #100]	; (80036dc <HAL_ADC_Start_IT+0x1ac>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d11b      	bne.n	80036b4 <HAL_ADC_Start_IT+0x184>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d114      	bne.n	80036b4 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	e00b      	b.n	80036b4 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f043 0210 	orr.w	r2, r3, #16
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ac:	f043 0201 	orr.w	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000000 	.word	0x20000000
 80036c8:	431bde83 	.word	0x431bde83
 80036cc:	fffff8fe 	.word	0xfffff8fe
 80036d0:	04000020 	.word	0x04000020
 80036d4:	40012300 	.word	0x40012300
 80036d8:	40012000 	.word	0x40012000
 80036dc:	40012200 	.word	0x40012200

080036e0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d049      	beq.n	80037aa <HAL_ADC_IRQHandler+0xca>
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d046      	beq.n	80037aa <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d12b      	bne.n	800379a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003746:	2b00      	cmp	r3, #0
 8003748:	d127      	bne.n	800379a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003754:	2b00      	cmp	r3, #0
 8003756:	d006      	beq.n	8003766 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003762:	2b00      	cmp	r3, #0
 8003764:	d119      	bne.n	800379a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0220 	bic.w	r2, r2, #32
 8003774:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d105      	bne.n	800379a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff f870 	bl	8002880 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0212 	mvn.w	r2, #18
 80037a8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d057      	beq.n	8003870 <HAL_ADC_IRQHandler+0x190>
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d054      	beq.n	8003870 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d139      	bne.n	8003860 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d006      	beq.n	8003808 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003804:	2b00      	cmp	r3, #0
 8003806:	d12b      	bne.n	8003860 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003812:	2b00      	cmp	r3, #0
 8003814:	d124      	bne.n	8003860 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003820:	2b00      	cmp	r3, #0
 8003822:	d11d      	bne.n	8003860 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003828:	2b00      	cmp	r3, #0
 800382a:	d119      	bne.n	8003860 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800383a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	f043 0201 	orr.w	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fabf 	bl	8003de4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f06f 020c 	mvn.w	r2, #12
 800386e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d017      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x1d6>
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d014      	beq.n	80038b6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10d      	bne.n	80038b6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f837 	bl	800391a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0201 	mvn.w	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038c4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_ADC_IRQHandler+0x218>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d012      	beq.n	80038f8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f043 0202 	orr.w	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f06f 0220 	mvn.w	r2, #32
 80038e6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f820 	bl	800392e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f06f 0220 	mvn.w	r2, #32
 80038f6:	601a      	str	r2, [r3, #0]
  }
}
 80038f8:	bf00      	nop
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x1c>
 800395c:	2302      	movs	r3, #2
 800395e:	e136      	b.n	8003bce <HAL_ADC_ConfigChannel+0x28a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b09      	cmp	r3, #9
 800396e:	d93a      	bls.n	80039e6 <HAL_ADC_ConfigChannel+0xa2>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003978:	d035      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68d9      	ldr	r1, [r3, #12]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	b29b      	uxth	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	4613      	mov	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	3b1e      	subs	r3, #30
 8003990:	2207      	movs	r2, #7
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	400a      	ands	r2, r1
 800399e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a8d      	ldr	r2, [pc, #564]	; (8003bdc <HAL_ADC_ConfigChannel+0x298>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d10a      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68d9      	ldr	r1, [r3, #12]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	061a      	lsls	r2, r3, #24
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039be:	e035      	b.n	8003a2c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68d9      	ldr	r1, [r3, #12]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	4618      	mov	r0, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4403      	add	r3, r0
 80039d8:	3b1e      	subs	r3, #30
 80039da:	409a      	lsls	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039e4:	e022      	b.n	8003a2c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6919      	ldr	r1, [r3, #16]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	4613      	mov	r3, r2
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4413      	add	r3, r2
 80039fa:	2207      	movs	r2, #7
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43da      	mvns	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	400a      	ands	r2, r1
 8003a08:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6919      	ldr	r1, [r3, #16]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4403      	add	r3, r0
 8003a22:	409a      	lsls	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d824      	bhi.n	8003a7e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	3b05      	subs	r3, #5
 8003a46:	221f      	movs	r2, #31
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43da      	mvns	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	400a      	ands	r2, r1
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	4618      	mov	r0, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3b05      	subs	r3, #5
 8003a70:	fa00 f203 	lsl.w	r2, r0, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	635a      	str	r2, [r3, #52]	; 0x34
 8003a7c:	e04c      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d824      	bhi.n	8003ad0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	3b23      	subs	r3, #35	; 0x23
 8003a98:	221f      	movs	r2, #31
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	3b23      	subs	r3, #35	; 0x23
 8003ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
 8003ace:	e023      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	3b41      	subs	r3, #65	; 0x41
 8003ae2:	221f      	movs	r2, #31
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	400a      	ands	r2, r1
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	4618      	mov	r0, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	3b41      	subs	r3, #65	; 0x41
 8003b0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a30      	ldr	r2, [pc, #192]	; (8003be0 <HAL_ADC_ConfigChannel+0x29c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d10a      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1f4>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b2a:	d105      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a2c      	ldr	r2, [pc, #176]	; (8003be4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b32:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b36:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a28      	ldr	r2, [pc, #160]	; (8003be0 <HAL_ADC_ConfigChannel+0x29c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10f      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x21e>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b12      	cmp	r3, #18
 8003b48:	d10b      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4a25      	ldr	r2, [pc, #148]	; (8003be4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b54:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b56:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b60:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1e      	ldr	r2, [pc, #120]	; (8003be0 <HAL_ADC_ConfigChannel+0x29c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d12b      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x280>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <HAL_ADC_ConfigChannel+0x298>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <HAL_ADC_ConfigChannel+0x23a>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b11      	cmp	r3, #17
 8003b7c:	d122      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003b7e:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b84:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b88:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b8a:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b94:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a10      	ldr	r2, [pc, #64]	; (8003bdc <HAL_ADC_ConfigChannel+0x298>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d111      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_ADC_ConfigChannel+0x2a4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a11      	ldr	r2, [pc, #68]	; (8003bec <HAL_ADC_ConfigChannel+0x2a8>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	0c9a      	lsrs	r2, r3, #18
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bb6:	e002      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f9      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	10000012 	.word	0x10000012
 8003be0:	40012000 	.word	0x40012000
 8003be4:	40012300 	.word	0x40012300
 8003be8:	20000000 	.word	0x20000000
 8003bec:	431bde83 	.word	0x431bde83

08003bf0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003bf8:	4b78      	ldr	r3, [pc, #480]	; (8003ddc <ADC_Init+0x1ec>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4a77      	ldr	r2, [pc, #476]	; (8003ddc <ADC_Init+0x1ec>)
 8003bfe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c02:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003c04:	4b75      	ldr	r3, [pc, #468]	; (8003ddc <ADC_Init+0x1ec>)
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4973      	ldr	r1, [pc, #460]	; (8003ddc <ADC_Init+0x1ec>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	021a      	lsls	r2, r3, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6859      	ldr	r1, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6899      	ldr	r1, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	4a58      	ldr	r2, [pc, #352]	; (8003de0 <ADC_Init+0x1f0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d022      	beq.n	8003cca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6899      	ldr	r1, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6899      	ldr	r1, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	e00f      	b.n	8003cea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ce8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0202 	bic.w	r2, r2, #2
 8003cf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6899      	ldr	r1, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	005a      	lsls	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01b      	beq.n	8003d50 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	3b01      	subs	r3, #1
 8003d44:	035a      	lsls	r2, r3, #13
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	e007      	b.n	8003d60 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	051a      	lsls	r2, r3, #20
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6899      	ldr	r1, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003da2:	025a      	lsls	r2, r3, #9
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6899      	ldr	r1, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	029a      	lsls	r2, r3, #10
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40012300 	.word	0x40012300
 8003de0:	0f000001 	.word	0x0f000001

08003de4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <__NVIC_SetPriorityGrouping+0x40>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e14:	4013      	ands	r3, r2
 8003e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <__NVIC_SetPriorityGrouping+0x44>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e26:	4a04      	ldr	r2, [pc, #16]	; (8003e38 <__NVIC_SetPriorityGrouping+0x40>)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	60d3      	str	r3, [r2, #12]
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	e000ed00 	.word	0xe000ed00
 8003e3c:	05fa0000 	.word	0x05fa0000

08003e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <__NVIC_GetPriorityGrouping+0x18>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	f003 0307 	and.w	r3, r3, #7
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	e000ed00 	.word	0xe000ed00

08003e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	db0b      	blt.n	8003e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	f003 021f 	and.w	r2, r3, #31
 8003e74:	4907      	ldr	r1, [pc, #28]	; (8003e94 <__NVIC_EnableIRQ+0x38>)
 8003e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	e000e100 	.word	0xe000e100

08003e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	db0a      	blt.n	8003ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	490c      	ldr	r1, [pc, #48]	; (8003ee4 <__NVIC_SetPriority+0x4c>)
 8003eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb6:	0112      	lsls	r2, r2, #4
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ec0:	e00a      	b.n	8003ed8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	4908      	ldr	r1, [pc, #32]	; (8003ee8 <__NVIC_SetPriority+0x50>)
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	3b04      	subs	r3, #4
 8003ed0:	0112      	lsls	r2, r2, #4
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	761a      	strb	r2, [r3, #24]
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000e100 	.word	0xe000e100
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b089      	sub	sp, #36	; 0x24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f1c3 0307 	rsb	r3, r3, #7
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	bf28      	it	cs
 8003f0a:	2304      	movcs	r3, #4
 8003f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	3304      	adds	r3, #4
 8003f12:	2b06      	cmp	r3, #6
 8003f14:	d902      	bls.n	8003f1c <NVIC_EncodePriority+0x30>
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3b03      	subs	r3, #3
 8003f1a:	e000      	b.n	8003f1e <NVIC_EncodePriority+0x32>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	401a      	ands	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3e:	43d9      	mvns	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f44:	4313      	orrs	r3, r2
         );
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3724      	adds	r7, #36	; 0x24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f64:	d301      	bcc.n	8003f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f66:	2301      	movs	r3, #1
 8003f68:	e00f      	b.n	8003f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <SysTick_Config+0x40>)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f72:	210f      	movs	r1, #15
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f78:	f7ff ff8e 	bl	8003e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <SysTick_Config+0x40>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f82:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <SysTick_Config+0x40>)
 8003f84:	2207      	movs	r2, #7
 8003f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	e000e010 	.word	0xe000e010

08003f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff ff29 	bl	8003df8 <__NVIC_SetPriorityGrouping>
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b086      	sub	sp, #24
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fc0:	f7ff ff3e 	bl	8003e40 <__NVIC_GetPriorityGrouping>
 8003fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	6978      	ldr	r0, [r7, #20]
 8003fcc:	f7ff ff8e 	bl	8003eec <NVIC_EncodePriority>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff ff5d 	bl	8003e98 <__NVIC_SetPriority>
}
 8003fde:	bf00      	nop
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	4603      	mov	r3, r0
 8003fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff ff31 	bl	8003e5c <__NVIC_EnableIRQ>
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff ffa2 	bl	8003f54 <SysTick_Config>
 8004010:	4603      	mov	r3, r0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004028:	f7ff fa0e 	bl	8003448 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e099      	b.n	800416c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004058:	e00f      	b.n	800407a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800405a:	f7ff f9f5 	bl	8003448 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b05      	cmp	r3, #5
 8004066:	d908      	bls.n	800407a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2203      	movs	r2, #3
 8004072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e078      	b.n	800416c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e8      	bne.n	800405a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4b38      	ldr	r3, [pc, #224]	; (8004174 <HAL_DMA_Init+0x158>)
 8004094:	4013      	ands	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d107      	bne.n	80040e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	4313      	orrs	r3, r2
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0307 	bic.w	r3, r3, #7
 80040fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	2b04      	cmp	r3, #4
 800410c:	d117      	bne.n	800413e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fb23 	bl	800476c <DMA_CheckFifoParam>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2240      	movs	r2, #64	; 0x40
 8004130:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800413a:	2301      	movs	r3, #1
 800413c:	e016      	b.n	800416c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fada 	bl	8004700 <DMA_CalcBaseAndBitshift>
 800414c:	4603      	mov	r3, r0
 800414e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004154:	223f      	movs	r2, #63	; 0x3f
 8004156:	409a      	lsls	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	f010803f 	.word	0xf010803f

08004178 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_DMA_Start_IT+0x26>
 800419a:	2302      	movs	r3, #2
 800419c:	e048      	b.n	8004230 <HAL_DMA_Start_IT+0xb8>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d137      	bne.n	8004222 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2202      	movs	r2, #2
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fa6c 	bl	80046a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	223f      	movs	r2, #63	; 0x3f
 80041d2:	409a      	lsls	r2, r3
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0216 	orr.w	r2, r2, #22
 80041e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041f6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0208 	orr.w	r2, r2, #8
 800420e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e005      	b.n	800422e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800422a:	2302      	movs	r3, #2
 800422c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800422e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004246:	f7ff f8ff 	bl	8003448 <HAL_GetTick>
 800424a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d008      	beq.n	800426a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2280      	movs	r2, #128	; 0x80
 800425c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e052      	b.n	8004310 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0216 	bic.w	r2, r2, #22
 8004278:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004288:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d103      	bne.n	800429a <HAL_DMA_Abort+0x62>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0208 	bic.w	r2, r2, #8
 80042a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ba:	e013      	b.n	80042e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042bc:	f7ff f8c4 	bl	8003448 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b05      	cmp	r3, #5
 80042c8:	d90c      	bls.n	80042e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2203      	movs	r2, #3
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e015      	b.n	8004310 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e4      	bne.n	80042bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f6:	223f      	movs	r2, #63	; 0x3f
 80042f8:	409a      	lsls	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d004      	beq.n	8004336 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2280      	movs	r2, #128	; 0x80
 8004330:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e00c      	b.n	8004350 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2205      	movs	r2, #5
 800433a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004368:	4b8e      	ldr	r3, [pc, #568]	; (80045a4 <HAL_DMA_IRQHandler+0x248>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a8e      	ldr	r2, [pc, #568]	; (80045a8 <HAL_DMA_IRQHandler+0x24c>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	0a9b      	lsrs	r3, r3, #10
 8004374:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004386:	2208      	movs	r2, #8
 8004388:	409a      	lsls	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4013      	ands	r3, r2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01a      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d013      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0204 	bic.w	r2, r2, #4
 80043ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b4:	2208      	movs	r2, #8
 80043b6:	409a      	lsls	r2, r3
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c0:	f043 0201 	orr.w	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	2201      	movs	r2, #1
 80043ce:	409a      	lsls	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d012      	beq.n	80043fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ea:	2201      	movs	r2, #1
 80043ec:	409a      	lsls	r2, r3
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	f043 0202 	orr.w	r2, r3, #2
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004402:	2204      	movs	r2, #4
 8004404:	409a      	lsls	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d012      	beq.n	8004434 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00b      	beq.n	8004434 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004420:	2204      	movs	r2, #4
 8004422:	409a      	lsls	r2, r3
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	f043 0204 	orr.w	r2, r3, #4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	2210      	movs	r2, #16
 800443a:	409a      	lsls	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4013      	ands	r3, r2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d043      	beq.n	80044cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d03c      	beq.n	80044cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004456:	2210      	movs	r2, #16
 8004458:	409a      	lsls	r2, r3
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d018      	beq.n	800449e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d108      	bne.n	800448c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d024      	beq.n	80044cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
 800448a:	e01f      	b.n	80044cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01b      	beq.n	80044cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
 800449c:	e016      	b.n	80044cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d107      	bne.n	80044bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0208 	bic.w	r2, r2, #8
 80044ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d0:	2220      	movs	r2, #32
 80044d2:	409a      	lsls	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 808f 	beq.w	80045fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8087 	beq.w	80045fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f2:	2220      	movs	r2, #32
 80044f4:	409a      	lsls	r2, r3
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b05      	cmp	r3, #5
 8004504:	d136      	bne.n	8004574 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0216 	bic.w	r2, r2, #22
 8004514:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004524:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d103      	bne.n	8004536 <HAL_DMA_IRQHandler+0x1da>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0208 	bic.w	r2, r2, #8
 8004544:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454a:	223f      	movs	r2, #63	; 0x3f
 800454c:	409a      	lsls	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004566:	2b00      	cmp	r3, #0
 8004568:	d07e      	beq.n	8004668 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
        }
        return;
 8004572:	e079      	b.n	8004668 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01d      	beq.n	80045be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10d      	bne.n	80045ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	2b00      	cmp	r3, #0
 8004596:	d031      	beq.n	80045fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
 80045a0:	e02c      	b.n	80045fc <HAL_DMA_IRQHandler+0x2a0>
 80045a2:	bf00      	nop
 80045a4:	20000000 	.word	0x20000000
 80045a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d023      	beq.n	80045fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4798      	blx	r3
 80045bc:	e01e      	b.n	80045fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10f      	bne.n	80045ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0210 	bic.w	r2, r2, #16
 80045da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	2b00      	cmp	r3, #0
 8004602:	d032      	beq.n	800466a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d022      	beq.n	8004656 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2205      	movs	r2, #5
 8004614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	3301      	adds	r3, #1
 800462c:	60bb      	str	r3, [r7, #8]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	429a      	cmp	r2, r3
 8004632:	d307      	bcc.n	8004644 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f2      	bne.n	8004628 <HAL_DMA_IRQHandler+0x2cc>
 8004642:	e000      	b.n	8004646 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004644:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4798      	blx	r3
 8004666:	e000      	b.n	800466a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004668:	bf00      	nop
    }
  }
}
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800467e:	b2db      	uxtb	r3, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d108      	bne.n	80046e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046e2:	e007      	b.n	80046f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	3b10      	subs	r3, #16
 8004710:	4a13      	ldr	r2, [pc, #76]	; (8004760 <DMA_CalcBaseAndBitshift+0x60>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800471a:	4a12      	ldr	r2, [pc, #72]	; (8004764 <DMA_CalcBaseAndBitshift+0x64>)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b03      	cmp	r3, #3
 800472c:	d908      	bls.n	8004740 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <DMA_CalcBaseAndBitshift+0x68>)
 8004736:	4013      	ands	r3, r2
 8004738:	1d1a      	adds	r2, r3, #4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	659a      	str	r2, [r3, #88]	; 0x58
 800473e:	e006      	b.n	800474e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	4b08      	ldr	r3, [pc, #32]	; (8004768 <DMA_CalcBaseAndBitshift+0x68>)
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	aaaaaaab 	.word	0xaaaaaaab
 8004764:	0801b2a4 	.word	0x0801b2a4
 8004768:	fffffc00 	.word	0xfffffc00

0800476c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d11f      	bne.n	80047c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d856      	bhi.n	800483a <DMA_CheckFifoParam+0xce>
 800478c:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <DMA_CheckFifoParam+0x28>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047a5 	.word	0x080047a5
 8004798:	080047b7 	.word	0x080047b7
 800479c:	080047a5 	.word	0x080047a5
 80047a0:	0800483b 	.word	0x0800483b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d046      	beq.n	800483e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b4:	e043      	b.n	800483e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047be:	d140      	bne.n	8004842 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c4:	e03d      	b.n	8004842 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ce:	d121      	bne.n	8004814 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d837      	bhi.n	8004846 <DMA_CheckFifoParam+0xda>
 80047d6:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <DMA_CheckFifoParam+0x70>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	080047ed 	.word	0x080047ed
 80047e0:	080047f3 	.word	0x080047f3
 80047e4:	080047ed 	.word	0x080047ed
 80047e8:	08004805 	.word	0x08004805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
      break;
 80047f0:	e030      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d025      	beq.n	800484a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004802:	e022      	b.n	800484a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800480c:	d11f      	bne.n	800484e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004812:	e01c      	b.n	800484e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d903      	bls.n	8004822 <DMA_CheckFifoParam+0xb6>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d003      	beq.n	8004828 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004820:	e018      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
      break;
 8004826:	e015      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00e      	beq.n	8004852 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
      break;
 8004838:	e00b      	b.n	8004852 <DMA_CheckFifoParam+0xe6>
      break;
 800483a:	bf00      	nop
 800483c:	e00a      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      break;
 800483e:	bf00      	nop
 8004840:	e008      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      break;
 8004842:	bf00      	nop
 8004844:	e006      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      break;
 8004846:	bf00      	nop
 8004848:	e004      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      break;
 800484a:	bf00      	nop
 800484c:	e002      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      break;   
 800484e:	bf00      	nop
 8004850:	e000      	b.n	8004854 <DMA_CheckFifoParam+0xe8>
      break;
 8004852:	bf00      	nop
    }
  } 
  
  return status; 
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop

08004864 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e06a      	b.n	800494c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2223      	movs	r2, #35	; 0x23
 8004884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f008 fa89 	bl	800cda0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800488e:	4b31      	ldr	r3, [pc, #196]	; (8004954 <HAL_ETH_Init+0xf0>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	4a30      	ldr	r2, [pc, #192]	; (8004954 <HAL_ETH_Init+0xf0>)
 8004894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004898:	6453      	str	r3, [r2, #68]	; 0x44
 800489a:	4b2e      	ldr	r3, [pc, #184]	; (8004954 <HAL_ETH_Init+0xf0>)
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80048a6:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <HAL_ETH_Init+0xf4>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4a2b      	ldr	r2, [pc, #172]	; (8004958 <HAL_ETH_Init+0xf4>)
 80048ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048b0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80048b2:	4b29      	ldr	r3, [pc, #164]	; (8004958 <HAL_ETH_Init+0xf4>)
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	4927      	ldr	r1, [pc, #156]	; (8004958 <HAL_ETH_Init+0xf4>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80048c0:	4b25      	ldr	r3, [pc, #148]	; (8004958 <HAL_ETH_Init+0xf4>)
 80048c2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048dc:	f7fe fdb4 	bl	8003448 <HAL_GetTick>
 80048e0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80048e2:	e011      	b.n	8004908 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80048e4:	f7fe fdb0 	bl	8003448 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048f2:	d909      	bls.n	8004908 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2204      	movs	r2, #4
 80048f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	22e0      	movs	r2, #224	; 0xe0
 8004900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e021      	b.n	800494c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e4      	bne.n	80048e4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fee4 	bl	80056e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 ff8b 	bl	800583c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 ffe1 	bl	80058ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	461a      	mov	r2, r3
 8004932:	2100      	movs	r1, #0
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 ff49 	bl	80057cc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2210      	movs	r2, #16
 8004946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40023800 	.word	0x40023800
 8004958:	40013800 	.word	0x40013800

0800495c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496a:	2b10      	cmp	r3, #16
 800496c:	d150      	bne.n	8004a10 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2223      	movs	r2, #35	; 0x23
 8004972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2204      	movs	r2, #4
 800497a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f9fd 	bl	8004d7c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0208 	orr.w	r2, r2, #8
 8004990:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800499a:	2001      	movs	r0, #1
 800499c:	f7fe fd60 	bl	8003460 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0204 	orr.w	r2, r2, #4
 80049b6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80049c0:	2001      	movs	r0, #1
 80049c2:	f7fe fd4d 	bl	8003460 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fd2a 	bl	8005428 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049ea:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	f043 0302 	orr.w	r3, r3, #2
 80049fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a02:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2223      	movs	r2, #35	; 0x23
 8004a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
  }
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a28:	2b23      	cmp	r3, #35	; 0x23
 8004a2a:	d14a      	bne.n	8004ac2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2223      	movs	r2, #35	; 0x23
 8004a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a4a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	f023 0302 	bic.w	r3, r3, #2
 8004a5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a62:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0204 	bic.w	r2, r2, #4
 8004a72:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	f7fe fcef 	bl	8003460 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fccc 	bl	8005428 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0208 	bic.w	r2, r2, #8
 8004a9e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f7fe fcd9 	bl	8003460 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2210      	movs	r2, #16
 8004aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e000      	b.n	8004ac4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
  }
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f043 0201 	orr.w	r2, r3, #1
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e07c      	b.n	8004bec <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af8:	2b23      	cmp	r3, #35	; 0x23
 8004afa:	d176      	bne.n	8004bea <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004afc:	2200      	movs	r2, #0
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 ff61 	bl	80059c8 <ETH_Prepare_Tx_Descriptors>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	f043 0202 	orr.w	r2, r3, #2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e065      	b.n	8004bec <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b20:	f3bf 8f4f 	dsb	sy
}
 8004b24:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3206      	adds	r2, #6
 8004b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b32:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	629a      	str	r2, [r3, #40]	; 0x28
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d904      	bls.n	8004b50 <HAL_ETH_Transmit+0x84>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	1f1a      	subs	r2, r3, #4
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3106      	adds	r1, #6
 8004b5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004b60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b64:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8004b66:	f7fe fc6f 	bl	8003448 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004b6c:	e037      	b.n	8004bde <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d011      	beq.n	8004ba4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f043 0208 	orr.w	r2, r3, #8
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e023      	b.n	8004bec <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004baa:	d018      	beq.n	8004bde <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bac:	f7fe fc4c 	bl	8003448 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <HAL_ETH_Transmit+0xf6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10d      	bne.n	8004bde <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f043 0204 	orr.w	r2, r3, #4
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8004bd8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e006      	b.n	8004bec <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	dbc3      	blt.n	8004b6e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e000      	b.n	8004bec <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
  }
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	f043 0201 	orr.w	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0a8      	b.n	8004d72 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c26:	2b23      	cmp	r3, #35	; 0x23
 8004c28:	d001      	beq.n	8004c2e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e0a1      	b.n	8004d72 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c32:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	3212      	adds	r2, #18
 8004c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c3e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c44:	f1c3 0304 	rsb	r3, r3, #4
 8004c48:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004c4a:	e06a      	b.n	8004d22 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	699a      	ldr	r2, [r3, #24]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d103      	bne.n	8004c7c <HAL_ETH_ReadData+0x88>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d040      	beq.n	8004cfe <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00c      	beq.n	8004cc0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004cb0:	3b04      	subs	r3, #4
 8004cb2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004cd8:	461a      	mov	r2, r3
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f008 fa29 	bl	800d134 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	441a      	add	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3301      	adds	r3, #1
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d902      	bls.n	8004d10 <HAL_ETH_ReadData+0x11c>
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3b04      	subs	r3, #4
 8004d0e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	3212      	adds	r2, #18
 8004d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	db06      	blt.n	8004d38 <HAL_ETH_ReadData+0x144>
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d202      	bcs.n	8004d38 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d089      	beq.n	8004c4c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	441a      	add	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f815 	bl	8004d7c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d108      	bne.n	8004d70 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e000      	b.n	8004d72 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d90:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	3212      	adds	r2, #18
 8004d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d9c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004da4:	e040      	b.n	8004e28 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d112      	bne.n	8004dd4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004dae:	f107 030c 	add.w	r3, r7, #12
 8004db2:	4618      	mov	r0, r3
 8004db4:	f008 f98e 	bl	800d0d4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	74fb      	strb	r3, [r7, #19]
 8004dc2:	e007      	b.n	8004dd4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004dd4:	7cfb      	ldrb	r3, [r7, #19]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d026      	beq.n	8004e28 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d103      	bne.n	8004dea <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <ETH_UpdateDescriptor+0xe4>)
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	e003      	b.n	8004df2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004df0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004df2:	f3bf 8f5f 	dmb	sy
}
 8004df6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	3301      	adds	r3, #1
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d902      	bls.n	8004e16 <ETH_UpdateDescriptor+0x9a>
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	3b04      	subs	r3, #4
 8004e14:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	3212      	adds	r2, #18
 8004e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e20:	617b      	str	r3, [r7, #20]
      desccount--;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <ETH_UpdateDescriptor+0xb8>
 8004e2e:	7cfb      	ldrb	r3, [r7, #19]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1b8      	bne.n	8004da6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d00c      	beq.n	8004e58 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e46:	461a      	mov	r2, r3
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004e58:	bf00      	nop
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	80004600 	.word	0x80004600

08004e64 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d112      	bne.n	8004ea4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8c:	2b40      	cmp	r3, #64	; 0x40
 8004e8e:	d109      	bne.n	8004ea4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4b50      	ldr	r3, [pc, #320]	; (8004fdc <HAL_ETH_IRQHandler+0x178>)
 8004e9c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f8ac 	bl	8004ffc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d113      	bne.n	8004ede <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d10a      	bne.n	8004ede <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004ed6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f885 	bl	8004fe8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef0:	d14c      	bne.n	8004f8c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f04:	d142      	bne.n	8004f8c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f043 0208 	orr.w	r2, r3, #8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f28:	d11a      	bne.n	8004f60 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	4b2a      	ldr	r3, [pc, #168]	; (8004fe0 <HAL_ETH_IRQHandler+0x17c>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004f50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f54:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	22e0      	movs	r2, #224	; 0xe0
 8004f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004f5e:	e012      	b.n	8004f86 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	f248 6380 	movw	r3, #34432	; 0x8680
 8004f6e:	4013      	ands	r3, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f248 6380 	movw	r3, #34432	; 0x8680
 8004f84:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f842 	bl	8005010 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d10e      	bne.n	8004fb8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f83a 	bl	8005024 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <HAL_ETH_IRQHandler+0x180>)
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d006      	beq.n	8004fd2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004fc4:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <HAL_ETH_IRQHandler+0x180>)
 8004fc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004fca:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f833 	bl	8005038 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	00010040 	.word	0x00010040
 8004fe0:	007e2000 	.word	0x007e2000
 8004fe4:	40013c00 	.word	0x40013c00

08004fe8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f003 031c 	and.w	r3, r3, #28
 8005068:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	02db      	lsls	r3, r3, #11
 800506e:	b29b      	uxth	r3, r3
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0302 	bic.w	r3, r3, #2
 800508a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800509c:	f7fe f9d4 	bl	8003448 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80050a2:	e00d      	b.n	80050c0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80050a4:	f7fe f9d0 	bl	8003448 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b2:	d301      	bcc.n	80050b8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e010      	b.n	80050da <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1ec      	bne.n	80050a4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b086      	sub	sp, #24
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
 80050ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f003 031c 	and.w	r3, r3, #28
 80050fe:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	02db      	lsls	r3, r3, #11
 8005104:	b29b      	uxth	r3, r3
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	019b      	lsls	r3, r3, #6
 8005110:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f043 0302 	orr.w	r3, r3, #2
 8005120:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800513c:	f7fe f984 	bl	8003448 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005142:	e00d      	b.n	8005160 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8005144:	f7fe f980 	bl	8003448 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005152:	d301      	bcc.n	8005158 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e009      	b.n	800516c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1ec      	bne.n	8005144 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0d9      	b.n	800533c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0310 	and.w	r3, r3, #16
 8005192:	2b00      	cmp	r3, #0
 8005194:	bf14      	ite	ne
 8005196:	2301      	movne	r3, #1
 8005198:	2300      	moveq	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051bc:	2b00      	cmp	r3, #0
 80051be:	bf0c      	ite	eq
 80051c0:	2301      	moveq	r3, #1
 80051c2:	2300      	movne	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80051d8:	2b00      	cmp	r3, #0
 80051da:	bf14      	ite	ne
 80051dc:	2301      	movne	r3, #1
 80051de:	2300      	moveq	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bf0c      	ite	eq
 80051f6:	2301      	moveq	r3, #1
 80051f8:	2300      	movne	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800520c:	2b00      	cmp	r3, #0
 800520e:	bf14      	ite	ne
 8005210:	2301      	movne	r3, #1
 8005212:	2300      	moveq	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005242:	2b00      	cmp	r3, #0
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800525c:	2b00      	cmp	r3, #0
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005276:	2b00      	cmp	r3, #0
 8005278:	bf14      	ite	ne
 800527a:	2301      	movne	r3, #1
 800527c:	2300      	moveq	r3, #0
 800527e:	b2db      	uxtb	r3, r3
 8005280:	461a      	mov	r2, r3
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bf14      	ite	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	2300      	moveq	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8005328:	2b00      	cmp	r3, #0
 800532a:	bf14      	ite	ne
 800532c:	2301      	movne	r3, #1
 800532e:	2300      	moveq	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e00b      	b.n	8005374 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005362:	2b10      	cmp	r3, #16
 8005364:	d105      	bne.n	8005372 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005366:	6839      	ldr	r1, [r7, #0]
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f883 	bl	8005474 <ETH_SetMACConfig>

    return HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	e000      	b.n	8005374 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
  }
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 031c 	bic.w	r3, r3, #28
 8005392:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005394:	f003 fb8a 	bl	8008aac <HAL_RCC_GetHCLKFreq>
 8005398:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <HAL_ETH_SetMDIOClockRange+0x98>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d908      	bls.n	80053b4 <HAL_ETH_SetMDIOClockRange+0x38>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4a1c      	ldr	r2, [pc, #112]	; (8005418 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d804      	bhi.n	80053b4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f043 0308 	orr.w	r3, r3, #8
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e027      	b.n	8005404 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4a18      	ldr	r2, [pc, #96]	; (8005418 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d908      	bls.n	80053ce <HAL_ETH_SetMDIOClockRange+0x52>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4a17      	ldr	r2, [pc, #92]	; (800541c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d204      	bcs.n	80053ce <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f043 030c 	orr.w	r3, r3, #12
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e01a      	b.n	8005404 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4a12      	ldr	r2, [pc, #72]	; (800541c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d303      	bcc.n	80053de <HAL_ETH_SetMDIOClockRange+0x62>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4a11      	ldr	r2, [pc, #68]	; (8005420 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d911      	bls.n	8005402 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	4a0f      	ldr	r2, [pc, #60]	; (8005420 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d908      	bls.n	80053f8 <HAL_ETH_SetMDIOClockRange+0x7c>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d804      	bhi.n	80053f8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f043 0304 	orr.w	r3, r3, #4
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e005      	b.n	8005404 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f043 0310 	orr.w	r3, r3, #16
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e000      	b.n	8005404 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8005402:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	611a      	str	r2, [r3, #16]
}
 800540c:	bf00      	nop
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	01312cff 	.word	0x01312cff
 8005418:	02160ebf 	.word	0x02160ebf
 800541c:	03938700 	.word	0x03938700
 8005420:	05f5e0ff 	.word	0x05f5e0ff
 8005424:	08f0d17f 	.word	0x08f0d17f

08005428 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005446:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800544a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005458:	2001      	movs	r0, #1
 800545a:	f7fe f801 	bl	8003460 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005468:	6193      	str	r3, [r2, #24]
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4b51      	ldr	r3, [pc, #324]	; (80055d0 <ETH_SetMACConfig+0x15c>)
 800548a:	4013      	ands	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	7c1b      	ldrb	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <ETH_SetMACConfig+0x28>
 8005496:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800549a:	e000      	b.n	800549e <ETH_SetMACConfig+0x2a>
 800549c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	7c5b      	ldrb	r3, [r3, #17]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d102      	bne.n	80054ac <ETH_SetMACConfig+0x38>
 80054a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054aa:	e000      	b.n	80054ae <ETH_SetMACConfig+0x3a>
 80054ac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80054ae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80054b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	7fdb      	ldrb	r3, [r3, #31]
 80054ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80054bc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80054c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	7f92      	ldrb	r2, [r2, #30]
 80054c8:	2a00      	cmp	r2, #0
 80054ca:	d102      	bne.n	80054d2 <ETH_SetMACConfig+0x5e>
 80054cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054d0:	e000      	b.n	80054d4 <ETH_SetMACConfig+0x60>
 80054d2:	2200      	movs	r2, #0
                        macconf->Speed |
 80054d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	7f1b      	ldrb	r3, [r3, #28]
 80054da:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80054dc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80054e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	791b      	ldrb	r3, [r3, #4]
 80054e8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80054ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80054f2:	2a00      	cmp	r2, #0
 80054f4:	d102      	bne.n	80054fc <ETH_SetMACConfig+0x88>
 80054f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054fa:	e000      	b.n	80054fe <ETH_SetMACConfig+0x8a>
 80054fc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80054fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	7bdb      	ldrb	r3, [r3, #15]
 8005504:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005506:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800550c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005514:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005516:	4313      	orrs	r3, r2
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800552e:	2001      	movs	r0, #1
 8005530:	f7fd ff96 	bl	8003460 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	f64f 7341 	movw	r3, #65345	; 0xff41
 800554a:	4013      	ands	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005552:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800555a:	2a00      	cmp	r2, #0
 800555c:	d101      	bne.n	8005562 <ETH_SetMACConfig+0xee>
 800555e:	2280      	movs	r2, #128	; 0x80
 8005560:	e000      	b.n	8005564 <ETH_SetMACConfig+0xf0>
 8005562:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005564:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800556a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8005572:	2a01      	cmp	r2, #1
 8005574:	d101      	bne.n	800557a <ETH_SetMACConfig+0x106>
 8005576:	2208      	movs	r2, #8
 8005578:	e000      	b.n	800557c <ETH_SetMACConfig+0x108>
 800557a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800557c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8005584:	2a01      	cmp	r2, #1
 8005586:	d101      	bne.n	800558c <ETH_SetMACConfig+0x118>
 8005588:	2204      	movs	r2, #4
 800558a:	e000      	b.n	800558e <ETH_SetMACConfig+0x11a>
 800558c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800558e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8005596:	2a01      	cmp	r2, #1
 8005598:	d101      	bne.n	800559e <ETH_SetMACConfig+0x12a>
 800559a:	2202      	movs	r2, #2
 800559c:	e000      	b.n	80055a0 <ETH_SetMACConfig+0x12c>
 800559e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80055a0:	4313      	orrs	r3, r2
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80055b8:	2001      	movs	r0, #1
 80055ba:	f7fd ff51 	bl	8003460 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	619a      	str	r2, [r3, #24]
}
 80055c6:	bf00      	nop
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	ff20810f 	.word	0xff20810f

080055d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4b3d      	ldr	r3, [pc, #244]	; (80056e4 <ETH_SetDMAConfig+0x110>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	7b1b      	ldrb	r3, [r3, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <ETH_SetDMAConfig+0x2c>
 80055fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80055fe:	e000      	b.n	8005602 <ETH_SetDMAConfig+0x2e>
 8005600:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	7b5b      	ldrb	r3, [r3, #13]
 8005606:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005608:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	7f52      	ldrb	r2, [r2, #29]
 800560e:	2a00      	cmp	r2, #0
 8005610:	d102      	bne.n	8005618 <ETH_SetDMAConfig+0x44>
 8005612:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005616:	e000      	b.n	800561a <ETH_SetDMAConfig+0x46>
 8005618:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800561a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	7b9b      	ldrb	r3, [r3, #14]
 8005620:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005622:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005628:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	7f1b      	ldrb	r3, [r3, #28]
 800562e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005630:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	7f9b      	ldrb	r3, [r3, #30]
 8005636:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005638:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800563e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005646:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005648:	4313      	orrs	r3, r2
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005658:	461a      	mov	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800566a:	2001      	movs	r0, #1
 800566c:	f7fd fef8 	bl	8003460 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005678:	461a      	mov	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	791b      	ldrb	r3, [r3, #4]
 8005682:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005688:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800568e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005694:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800569c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800569e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80056a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80056ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80056c8:	2001      	movs	r0, #1
 80056ca:	f7fd fec9 	bl	8003460 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d6:	461a      	mov	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6013      	str	r3, [r2, #0]
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	f8de3f23 	.word	0xf8de3f23

080056e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b0a6      	sub	sp, #152	; 0x98
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80056fc:	2300      	movs	r3, #0
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005700:	2300      	movs	r3, #0
 8005702:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800570c:	2300      	movs	r3, #0
 800570e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005718:	2300      	movs	r3, #0
 800571a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800571e:	2300      	movs	r3, #0
 8005720:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005724:	2300      	movs	r3, #0
 8005726:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005728:	2300      	movs	r3, #0
 800572a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800572e:	2300      	movs	r3, #0
 8005730:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005732:	2300      	movs	r3, #0
 8005734:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005738:	2300      	movs	r3, #0
 800573a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800573e:	2300      	movs	r3, #0
 8005740:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005744:	2300      	movs	r3, #0
 8005746:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800574a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800574e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005754:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005756:	2300      	movs	r3, #0
 8005758:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800575c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005760:	4619      	mov	r1, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff fe86 	bl	8005474 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005768:	2301      	movs	r3, #1
 800576a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800576c:	2301      	movs	r3, #1
 800576e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005776:	2301      	movs	r3, #1
 8005778:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800577e:	2300      	movs	r3, #0
 8005780:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005784:	2300      	movs	r3, #0
 8005786:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800578a:	2300      	movs	r3, #0
 800578c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005794:	2301      	movs	r3, #1
 8005796:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800579c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800579e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80057a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80057a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80057b8:	f107 0308 	add.w	r3, r7, #8
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff ff08 	bl	80055d4 <ETH_SetDMAConfig>
}
 80057c4:	bf00      	nop
 80057c6:	3798      	adds	r7, #152	; 0x98
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3305      	adds	r3, #5
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	3204      	adds	r2, #4
 80057e4:	7812      	ldrb	r2, [r2, #0]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	4b11      	ldr	r3, [pc, #68]	; (8005834 <ETH_MACAddressConfig+0x68>)
 80057ee:	4413      	add	r3, r2
 80057f0:	461a      	mov	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3303      	adds	r3, #3
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	061a      	lsls	r2, r3, #24
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3302      	adds	r3, #2
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	041b      	lsls	r3, r3, #16
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3301      	adds	r3, #1
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	4313      	orrs	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <ETH_MACAddressConfig+0x6c>)
 800581e:	4413      	add	r3, r2
 8005820:	461a      	mov	r2, r3
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	6013      	str	r3, [r2, #0]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40028040 	.word	0x40028040
 8005838:	40028044 	.word	0x40028044

0800583c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005844:	2300      	movs	r3, #0
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e03e      	b.n	80058c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68d9      	ldr	r1, [r3, #12]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	440b      	add	r3, r1
 800585a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2200      	movs	r2, #0
 8005872:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	3206      	adds	r2, #6
 800587c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d80c      	bhi.n	80058ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68d9      	ldr	r1, [r3, #12]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	440b      	add	r3, r1
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	60da      	str	r2, [r3, #12]
 80058aa:	e004      	b.n	80058b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	461a      	mov	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3301      	adds	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d9bd      	bls.n	800584a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e0:	611a      	str	r2, [r3, #16]
}
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	e046      	b.n	800598a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6919      	ldr	r1, [r3, #16]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	440b      	add	r3, r1
 800590c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2200      	movs	r2, #0
 800591e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2200      	movs	r2, #0
 800592a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2200      	movs	r2, #0
 8005930:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005938:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8005940:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800594e:	68b9      	ldr	r1, [r7, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	3212      	adds	r2, #18
 8005956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d80c      	bhi.n	800597a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6919      	ldr	r1, [r3, #16]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	440b      	add	r3, r1
 8005972:	461a      	mov	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	60da      	str	r2, [r3, #12]
 8005978:	e004      	b.n	8005984 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	461a      	mov	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3301      	adds	r3, #1
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b03      	cmp	r3, #3
 800598e:	d9b5      	bls.n	80058fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ba:	60da      	str	r2, [r3, #12]
}
 80059bc:	bf00      	nop
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b08d      	sub	sp, #52	; 0x34
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3318      	adds	r3, #24
 80059d8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a0a:	d007      	beq.n	8005a1c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	3304      	adds	r3, #4
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e0ff      	b.n	8005c20 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	3301      	adds	r3, #1
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	4b7d      	ldr	r3, [pc, #500]	; (8005c2c <ETH_Prepare_Tx_Descriptors+0x264>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	6852      	ldr	r2, [r2, #4]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d008      	beq.n	8005a60 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8005aa2:	f3bf 8f5f 	dmb	sy
}
 8005aa6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005ab4:	e082      	b.n	8005bbc <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d006      	beq.n	8005ad6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e005      	b.n	8005ae2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d902      	bls.n	8005af4 <ETH_Prepare_Tx_Descriptors+0x12c>
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	3b04      	subs	r3, #4
 8005af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b16:	d007      	beq.n	8005b28 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d029      	beq.n	8005b7c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b34:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005b36:	2300      	movs	r3, #0
 8005b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3a:	e019      	b.n	8005b70 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8005b3c:	f3bf 8f5f 	dmb	sy
}
 8005b40:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	3301      	adds	r3, #1
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d902      	bls.n	8005b60 <ETH_Prepare_Tx_Descriptors+0x198>
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	3b04      	subs	r3, #4
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b68:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d3e1      	bcc.n	8005b3c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e051      	b.n	8005c20 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	3301      	adds	r3, #1
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	4b25      	ldr	r3, [pc, #148]	; (8005c2c <ETH_Prepare_Tx_Descriptors+0x264>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	6852      	ldr	r2, [r2, #4]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005baa:	f3bf 8f5f 	dmb	sy
}
 8005bae:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f47f af78 	bne.w	8005ab6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d006      	beq.n	8005bda <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	e005      	b.n	8005be6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bf6:	6979      	ldr	r1, [r7, #20]
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c06:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c08:	b672      	cpsid	i
}
 8005c0a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	4413      	add	r3, r2
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005c1a:	b662      	cpsie	i
}
 8005c1c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3734      	adds	r7, #52	; 0x34
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	ffffe000 	.word	0xffffe000

08005c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b089      	sub	sp, #36	; 0x24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
 8005c4e:	e175      	b.n	8005f3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005c50:	2201      	movs	r2, #1
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4013      	ands	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	f040 8164 	bne.w	8005f36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d005      	beq.n	8005c86 <HAL_GPIO_Init+0x56>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d130      	bne.n	8005ce8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	2203      	movs	r2, #3
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	f003 0201 	and.w	r2, r3, #1
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d017      	beq.n	8005d24 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	2203      	movs	r2, #3
 8005d00:	fa02 f303 	lsl.w	r3, r2, r3
 8005d04:	43db      	mvns	r3, r3
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d123      	bne.n	8005d78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	08da      	lsrs	r2, r3, #3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3208      	adds	r2, #8
 8005d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	220f      	movs	r2, #15
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	4013      	ands	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	08da      	lsrs	r2, r3, #3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3208      	adds	r2, #8
 8005d72:	69b9      	ldr	r1, [r7, #24]
 8005d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	2203      	movs	r2, #3
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f003 0203 	and.w	r2, r3, #3
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 80be 	beq.w	8005f36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dba:	4b66      	ldr	r3, [pc, #408]	; (8005f54 <HAL_GPIO_Init+0x324>)
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	4a65      	ldr	r2, [pc, #404]	; (8005f54 <HAL_GPIO_Init+0x324>)
 8005dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8005dc6:	4b63      	ldr	r3, [pc, #396]	; (8005f54 <HAL_GPIO_Init+0x324>)
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005dd2:	4a61      	ldr	r2, [pc, #388]	; (8005f58 <HAL_GPIO_Init+0x328>)
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	089b      	lsrs	r3, r3, #2
 8005dd8:	3302      	adds	r3, #2
 8005dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	220f      	movs	r2, #15
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	43db      	mvns	r3, r3
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	4013      	ands	r3, r2
 8005df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a58      	ldr	r2, [pc, #352]	; (8005f5c <HAL_GPIO_Init+0x32c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d037      	beq.n	8005e6e <HAL_GPIO_Init+0x23e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a57      	ldr	r2, [pc, #348]	; (8005f60 <HAL_GPIO_Init+0x330>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d031      	beq.n	8005e6a <HAL_GPIO_Init+0x23a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a56      	ldr	r2, [pc, #344]	; (8005f64 <HAL_GPIO_Init+0x334>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d02b      	beq.n	8005e66 <HAL_GPIO_Init+0x236>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a55      	ldr	r2, [pc, #340]	; (8005f68 <HAL_GPIO_Init+0x338>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d025      	beq.n	8005e62 <HAL_GPIO_Init+0x232>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a54      	ldr	r2, [pc, #336]	; (8005f6c <HAL_GPIO_Init+0x33c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d01f      	beq.n	8005e5e <HAL_GPIO_Init+0x22e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a53      	ldr	r2, [pc, #332]	; (8005f70 <HAL_GPIO_Init+0x340>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d019      	beq.n	8005e5a <HAL_GPIO_Init+0x22a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a52      	ldr	r2, [pc, #328]	; (8005f74 <HAL_GPIO_Init+0x344>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d013      	beq.n	8005e56 <HAL_GPIO_Init+0x226>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a51      	ldr	r2, [pc, #324]	; (8005f78 <HAL_GPIO_Init+0x348>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00d      	beq.n	8005e52 <HAL_GPIO_Init+0x222>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a50      	ldr	r2, [pc, #320]	; (8005f7c <HAL_GPIO_Init+0x34c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d007      	beq.n	8005e4e <HAL_GPIO_Init+0x21e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a4f      	ldr	r2, [pc, #316]	; (8005f80 <HAL_GPIO_Init+0x350>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d101      	bne.n	8005e4a <HAL_GPIO_Init+0x21a>
 8005e46:	2309      	movs	r3, #9
 8005e48:	e012      	b.n	8005e70 <HAL_GPIO_Init+0x240>
 8005e4a:	230a      	movs	r3, #10
 8005e4c:	e010      	b.n	8005e70 <HAL_GPIO_Init+0x240>
 8005e4e:	2308      	movs	r3, #8
 8005e50:	e00e      	b.n	8005e70 <HAL_GPIO_Init+0x240>
 8005e52:	2307      	movs	r3, #7
 8005e54:	e00c      	b.n	8005e70 <HAL_GPIO_Init+0x240>
 8005e56:	2306      	movs	r3, #6
 8005e58:	e00a      	b.n	8005e70 <HAL_GPIO_Init+0x240>
 8005e5a:	2305      	movs	r3, #5
 8005e5c:	e008      	b.n	8005e70 <HAL_GPIO_Init+0x240>
 8005e5e:	2304      	movs	r3, #4
 8005e60:	e006      	b.n	8005e70 <HAL_GPIO_Init+0x240>
 8005e62:	2303      	movs	r3, #3
 8005e64:	e004      	b.n	8005e70 <HAL_GPIO_Init+0x240>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e002      	b.n	8005e70 <HAL_GPIO_Init+0x240>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <HAL_GPIO_Init+0x240>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	f002 0203 	and.w	r2, r2, #3
 8005e76:	0092      	lsls	r2, r2, #2
 8005e78:	4093      	lsls	r3, r2
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005e80:	4935      	ldr	r1, [pc, #212]	; (8005f58 <HAL_GPIO_Init+0x328>)
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	089b      	lsrs	r3, r3, #2
 8005e86:	3302      	adds	r3, #2
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e8e:	4b3d      	ldr	r3, [pc, #244]	; (8005f84 <HAL_GPIO_Init+0x354>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	43db      	mvns	r3, r3
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005eb2:	4a34      	ldr	r2, [pc, #208]	; (8005f84 <HAL_GPIO_Init+0x354>)
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005eb8:	4b32      	ldr	r3, [pc, #200]	; (8005f84 <HAL_GPIO_Init+0x354>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005edc:	4a29      	ldr	r2, [pc, #164]	; (8005f84 <HAL_GPIO_Init+0x354>)
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ee2:	4b28      	ldr	r3, [pc, #160]	; (8005f84 <HAL_GPIO_Init+0x354>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	43db      	mvns	r3, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f06:	4a1f      	ldr	r2, [pc, #124]	; (8005f84 <HAL_GPIO_Init+0x354>)
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f0c:	4b1d      	ldr	r3, [pc, #116]	; (8005f84 <HAL_GPIO_Init+0x354>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	43db      	mvns	r3, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f30:	4a14      	ldr	r2, [pc, #80]	; (8005f84 <HAL_GPIO_Init+0x354>)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	2b0f      	cmp	r3, #15
 8005f40:	f67f ae86 	bls.w	8005c50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3724      	adds	r7, #36	; 0x24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40023800 	.word	0x40023800
 8005f58:	40013800 	.word	0x40013800
 8005f5c:	40020000 	.word	0x40020000
 8005f60:	40020400 	.word	0x40020400
 8005f64:	40020800 	.word	0x40020800
 8005f68:	40020c00 	.word	0x40020c00
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40021400 	.word	0x40021400
 8005f74:	40021800 	.word	0x40021800
 8005f78:	40021c00 	.word	0x40021c00
 8005f7c:	40022000 	.word	0x40022000
 8005f80:	40022400 	.word	0x40022400
 8005f84:	40013c00 	.word	0x40013c00

08005f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	807b      	strh	r3, [r7, #2]
 8005f94:	4613      	mov	r3, r2
 8005f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f98:	787b      	ldrb	r3, [r7, #1]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f9e:	887a      	ldrh	r2, [r7, #2]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005fa4:	e003      	b.n	8005fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005fa6:	887b      	ldrh	r3, [r7, #2]
 8005fa8:	041a      	lsls	r2, r3, #16
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	619a      	str	r2, [r3, #24]
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005fcc:	887a      	ldrh	r2, [r7, #2]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	041a      	lsls	r2, r3, #16
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	43d9      	mvns	r1, r3
 8005fd8:	887b      	ldrh	r3, [r7, #2]
 8005fda:	400b      	ands	r3, r1
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	619a      	str	r2, [r3, #24]
}
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
	...

08005ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e07f      	b.n	8006102 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fb f9c2 	bl	80013a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2224      	movs	r2, #36	; 0x24
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0201 	bic.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006040:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006050:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d107      	bne.n	800606a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006066:	609a      	str	r2, [r3, #8]
 8006068:	e006      	b.n	8006078 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006076:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d104      	bne.n	800608a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006088:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6859      	ldr	r1, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4b1d      	ldr	r3, [pc, #116]	; (800610c <HAL_I2C_Init+0x11c>)
 8006096:	430b      	orrs	r3, r1
 8006098:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691a      	ldr	r2, [r3, #16]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69d9      	ldr	r1, [r3, #28]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1a      	ldr	r2, [r3, #32]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	02008000 	.word	0x02008000

08006110 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	607a      	str	r2, [r7, #4]
 800611a:	461a      	mov	r2, r3
 800611c:	460b      	mov	r3, r1
 800611e:	817b      	strh	r3, [r7, #10]
 8006120:	4613      	mov	r3, r2
 8006122:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b20      	cmp	r3, #32
 800612e:	f040 80cd 	bne.w	80062cc <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800613c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006140:	d101      	bne.n	8006146 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 8006142:	2302      	movs	r3, #2
 8006144:	e0c3      	b.n	80062ce <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_I2C_Master_Transmit_DMA+0x44>
 8006150:	2302      	movs	r3, #2
 8006152:	e0bc      	b.n	80062ce <HAL_I2C_Master_Transmit_DMA+0x1be>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2221      	movs	r2, #33	; 0x21
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2210      	movs	r2, #16
 8006168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	893a      	ldrh	r2, [r7, #8]
 800617c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a55      	ldr	r2, [pc, #340]	; (80062d8 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8006182:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4a55      	ldr	r2, [pc, #340]	; (80062dc <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8006188:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	2bff      	cmp	r3, #255	; 0xff
 8006192:	d906      	bls.n	80061a2 <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	22ff      	movs	r2, #255	; 0xff
 8006198:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800619a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e007      	b.n	80061b2 <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80061ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061b0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d070      	beq.n	800629c <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d020      	beq.n	8006204 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c6:	4a46      	ldr	r2, [pc, #280]	; (80062e0 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 80061c8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	4a45      	ldr	r2, [pc, #276]	; (80062e4 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 80061d0:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	2200      	movs	r2, #0
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	2200      	movs	r2, #0
 80061e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3328      	adds	r3, #40	; 0x28
 80061ee:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80061f4:	f7fd ffc0 	bl	8004178 <HAL_DMA_Start_IT>
 80061f8:	4603      	mov	r3, r0
 80061fa:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80061fc:	7cfb      	ldrb	r3, [r7, #19]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d138      	bne.n	8006274 <HAL_I2C_Master_Transmit_DMA+0x164>
 8006202:	e013      	b.n	800622c <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006218:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e050      	b.n	80062ce <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006230:	b2da      	uxtb	r2, r3
 8006232:	8979      	ldrh	r1, [r7, #10]
 8006234:	4b2c      	ldr	r3, [pc, #176]	; (80062e8 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f001 fcb6 	bl	8007bac <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006244:	b29a      	uxth	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800625a:	2110      	movs	r1, #16
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f001 fcd7 	bl	8007c10 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	e029      	b.n	80062c8 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006288:	f043 0210 	orr.w	r2, r3, #16
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e018      	b.n	80062ce <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4a13      	ldr	r2, [pc, #76]	; (80062ec <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 80062a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	8979      	ldrh	r1, [r7, #10]
 80062aa:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f001 fc7a 	bl	8007bac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062c0:	2101      	movs	r1, #1
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f001 fca4 	bl	8007c10 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e000      	b.n	80062ce <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80062cc:	2302      	movs	r3, #2
  }
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	ffff0000 	.word	0xffff0000
 80062dc:	08006cdb 	.word	0x08006cdb
 80062e0:	0800794b 	.word	0x0800794b
 80062e4:	08007afd 	.word	0x08007afd
 80062e8:	80002000 	.word	0x80002000
 80062ec:	08006885 	.word	0x08006885

080062f0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	607a      	str	r2, [r7, #4]
 80062fa:	461a      	mov	r2, r3
 80062fc:	460b      	mov	r3, r1
 80062fe:	817b      	strh	r3, [r7, #10]
 8006300:	4613      	mov	r3, r2
 8006302:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b20      	cmp	r3, #32
 800630e:	f040 80cd 	bne.w	80064ac <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800631c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006320:	d101      	bne.n	8006326 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8006322:	2302      	movs	r3, #2
 8006324:	e0c3      	b.n	80064ae <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_I2C_Master_Receive_DMA+0x44>
 8006330:	2302      	movs	r3, #2
 8006332:	e0bc      	b.n	80064ae <HAL_I2C_Master_Receive_DMA+0x1be>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2222      	movs	r2, #34	; 0x22
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2210      	movs	r2, #16
 8006348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	893a      	ldrh	r2, [r7, #8]
 800635c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a55      	ldr	r2, [pc, #340]	; (80064b8 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4a55      	ldr	r2, [pc, #340]	; (80064bc <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8006368:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	2bff      	cmp	r3, #255	; 0xff
 8006372:	d906      	bls.n	8006382 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	22ff      	movs	r2, #255	; 0xff
 8006378:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800637a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	e007      	b.n	8006392 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800638c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006390:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006396:	2b00      	cmp	r3, #0
 8006398:	d070      	beq.n	800647c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d020      	beq.n	80063e4 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a6:	4a46      	ldr	r2, [pc, #280]	; (80064c0 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80063a8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	4a45      	ldr	r2, [pc, #276]	; (80064c4 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80063b0:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	2200      	movs	r2, #0
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	2200      	movs	r2, #0
 80063c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3324      	adds	r3, #36	; 0x24
 80063cc:	4619      	mov	r1, r3
 80063ce:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80063d4:	f7fd fed0 	bl	8004178 <HAL_DMA_Start_IT>
 80063d8:	4603      	mov	r3, r0
 80063da:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80063dc:	7cfb      	ldrb	r3, [r7, #19]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d138      	bne.n	8006454 <HAL_I2C_Master_Receive_DMA+0x164>
 80063e2:	e013      	b.n	800640c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e050      	b.n	80064ae <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006410:	b2da      	uxtb	r2, r3
 8006412:	8979      	ldrh	r1, [r7, #10]
 8006414:	4b2c      	ldr	r3, [pc, #176]	; (80064c8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f001 fbc6 	bl	8007bac <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800643a:	2110      	movs	r1, #16
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f001 fbe7 	bl	8007c10 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e029      	b.n	80064a8 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006468:	f043 0210 	orr.w	r2, r3, #16
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e018      	b.n	80064ae <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4a13      	ldr	r2, [pc, #76]	; (80064cc <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8006480:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006486:	b2da      	uxtb	r2, r3
 8006488:	8979      	ldrh	r1, [r7, #10]
 800648a:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f001 fb8a 	bl	8007bac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064a0:	2101      	movs	r1, #1
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f001 fbb4 	bl	8007c10 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e000      	b.n	80064ae <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
  }
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	ffff0000 	.word	0xffff0000
 80064bc:	08006cdb 	.word	0x08006cdb
 80064c0:	08007a21 	.word	0x08007a21
 80064c4:	08007afd 	.word	0x08007afd
 80064c8:	80002400 	.word	0x80002400
 80064cc:	08006885 	.word	0x08006885

080064d0 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	f040 809b 	bne.w	8006622 <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_I2C_Slave_Transmit_DMA+0x28>
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e08f      	b.n	8006624 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_I2C_Slave_Transmit_DMA+0x42>
 800650e:	2302      	movs	r3, #2
 8006510:	e088      	b.n	8006624 <HAL_I2C_Slave_Transmit_DMA+0x154>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2221      	movs	r2, #33	; 0x21
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a38      	ldr	r2, [pc, #224]	; (800662c <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 800654a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4a38      	ldr	r2, [pc, #224]	; (8006630 <HAL_I2C_Slave_Transmit_DMA+0x160>)
 8006550:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006556:	2b00      	cmp	r3, #0
 8006558:	d020      	beq.n	800659c <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	4a35      	ldr	r2, [pc, #212]	; (8006634 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 8006560:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	4a34      	ldr	r2, [pc, #208]	; (8006638 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 8006568:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	2200      	movs	r2, #0
 8006570:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	2200      	movs	r2, #0
 8006578:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3328      	adds	r3, #40	; 0x28
 8006586:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800658c:	f7fd fdf4 	bl	8004178 <HAL_DMA_Start_IT>
 8006590:	4603      	mov	r3, r0
 8006592:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d12f      	bne.n	80065fa <HAL_I2C_Slave_Transmit_DMA+0x12a>
 800659a:	e013      	b.n	80065c4 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2228      	movs	r2, #40	; 0x28
 80065a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e02f      	b.n	8006624 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065d2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f001 fb15 	bl	8007c10 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065f4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	e014      	b.n	8006624 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2228      	movs	r2, #40	; 0x28
 80065fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660e:	f043 0210 	orr.w	r2, r3, #16
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8006622:	2302      	movs	r3, #2
  }
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	ffff0000 	.word	0xffff0000
 8006630:	08006ec1 	.word	0x08006ec1
 8006634:	080079e1 	.word	0x080079e1
 8006638:	08007afd 	.word	0x08007afd

0800663c <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b20      	cmp	r3, #32
 8006654:	f040 809b 	bne.w	800678e <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_I2C_Slave_Receive_DMA+0x28>
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d105      	bne.n	8006670 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800666a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e08f      	b.n	8006790 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_I2C_Slave_Receive_DMA+0x42>
 800667a:	2302      	movs	r3, #2
 800667c:	e088      	b.n	8006790 <HAL_I2C_Slave_Receive_DMA+0x154>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2222      	movs	r2, #34	; 0x22
 800668a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	88fa      	ldrh	r2, [r7, #6]
 80066a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	4a38      	ldr	r2, [pc, #224]	; (8006798 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 80066b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a38      	ldr	r2, [pc, #224]	; (800679c <HAL_I2C_Slave_Receive_DMA+0x160>)
 80066bc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d020      	beq.n	8006708 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ca:	4a35      	ldr	r2, [pc, #212]	; (80067a0 <HAL_I2C_Slave_Receive_DMA+0x164>)
 80066cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d2:	4a34      	ldr	r2, [pc, #208]	; (80067a4 <HAL_I2C_Slave_Receive_DMA+0x168>)
 80066d4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	2200      	movs	r2, #0
 80066dc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	2200      	movs	r2, #0
 80066e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3324      	adds	r3, #36	; 0x24
 80066f0:	4619      	mov	r1, r3
 80066f2:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80066f8:	f7fd fd3e 	bl	8004178 <HAL_DMA_Start_IT>
 80066fc:	4603      	mov	r3, r0
 80066fe:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006700:	7dfb      	ldrb	r3, [r7, #23]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d12f      	bne.n	8006766 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8006706:	e013      	b.n	8006730 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2228      	movs	r2, #40	; 0x28
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e02f      	b.n	8006790 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800673e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f001 fa5f 	bl	8007c10 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006760:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	e014      	b.n	8006790 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2228      	movs	r2, #40	; 0x28
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	f043 0210 	orr.w	r2, r3, #16
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800678e:	2302      	movs	r3, #2
  }
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	ffff0000 	.word	0xffff0000
 800679c:	08006ec1 	.word	0x08006ec1
 80067a0:	08007ab7 	.word	0x08007ab7
 80067a4:	08007afd 	.word	0x08007afd

080067a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	4798      	blx	r3
  }
}
 80067d4:	bf00      	nop
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
 8006810:	4613      	mov	r3, r2
 8006812:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <I2C_Master_ISR_IT+0x1e>
 800689e:	2302      	movs	r3, #2
 80068a0:	e114      	b.n	8006acc <I2C_Master_ISR_IT+0x248>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	091b      	lsrs	r3, r3, #4
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d013      	beq.n	80068de <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00d      	beq.n	80068de <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2210      	movs	r2, #16
 80068c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ce:	f043 0204 	orr.w	r2, r3, #4
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f001 f813 	bl	8007902 <I2C_Flush_TXDR>
 80068dc:	e0e1      	b.n	8006aa2 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	089b      	lsrs	r3, r3, #2
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d023      	beq.n	8006932 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	089b      	lsrs	r3, r3, #2
 80068ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d01d      	beq.n	8006932 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f023 0304 	bic.w	r3, r3, #4
 80068fc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006930:	e0b7      	b.n	8006aa2 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	085b      	lsrs	r3, r3, #1
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d01e      	beq.n	800697c <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	085b      	lsrs	r3, r3, #1
 8006942:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006946:	2b00      	cmp	r3, #0
 8006948:	d018      	beq.n	800697c <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	781a      	ldrb	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	855a      	strh	r2, [r3, #42]	; 0x2a
 800697a:	e092      	b.n	8006aa2 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	09db      	lsrs	r3, r3, #7
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d05d      	beq.n	8006a44 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	099b      	lsrs	r3, r3, #6
 800698c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006990:	2b00      	cmp	r3, #0
 8006992:	d057      	beq.n	8006a44 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d040      	beq.n	8006a20 <I2C_Master_ISR_IT+0x19c>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d13c      	bne.n	8006a20 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069b2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2bff      	cmp	r3, #255	; 0xff
 80069bc:	d90e      	bls.n	80069dc <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	22ff      	movs	r2, #255	; 0xff
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	8a79      	ldrh	r1, [r7, #18]
 80069cc:	2300      	movs	r3, #0
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f001 f8e9 	bl	8007bac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069da:	e032      	b.n	8006a42 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069ee:	d00b      	beq.n	8006a08 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fa:	8a79      	ldrh	r1, [r7, #18]
 80069fc:	2000      	movs	r0, #0
 80069fe:	9000      	str	r0, [sp, #0]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f001 f8d3 	bl	8007bac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a06:	e01c      	b.n	8006a42 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	8a79      	ldrh	r1, [r7, #18]
 8006a10:	2300      	movs	r3, #0
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f001 f8c7 	bl	8007bac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a1e:	e010      	b.n	8006a42 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a2e:	d003      	beq.n	8006a38 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fba9 	bl	8007188 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a36:	e034      	b.n	8006aa2 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a38:	2140      	movs	r1, #64	; 0x40
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 fe6a 	bl	8007714 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a40:	e02f      	b.n	8006aa2 <I2C_Master_ISR_IT+0x21e>
 8006a42:	e02e      	b.n	8006aa2 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	099b      	lsrs	r3, r3, #6
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d028      	beq.n	8006aa2 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	099b      	lsrs	r3, r3, #6
 8006a54:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d022      	beq.n	8006aa2 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d119      	bne.n	8006a9a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a74:	d015      	beq.n	8006aa2 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a7e:	d108      	bne.n	8006a92 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a8e:	605a      	str	r2, [r3, #4]
 8006a90:	e007      	b.n	8006aa2 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 fb78 	bl	8007188 <I2C_ITMasterSeqCplt>
 8006a98:	e003      	b.n	8006aa2 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a9a:	2140      	movs	r1, #64	; 0x40
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fe39 	bl	8007714 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	095b      	lsrs	r3, r3, #5
 8006ab2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006aba:	6979      	ldr	r1, [r7, #20]
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 fbff 	bl	80072c0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <I2C_Slave_ISR_IT+0x24>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e0ec      	b.n	8006cd2 <I2C_Slave_ISR_IT+0x1fe>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d009      	beq.n	8006b20 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	095b      	lsrs	r3, r3, #5
 8006b10:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006b18:	6939      	ldr	r1, [r7, #16]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fc9a 	bl	8007454 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	091b      	lsrs	r3, r3, #4
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d04d      	beq.n	8006bc8 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	091b      	lsrs	r3, r3, #4
 8006b30:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d047      	beq.n	8006bc8 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d128      	bne.n	8006b94 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b28      	cmp	r3, #40	; 0x28
 8006b4c:	d108      	bne.n	8006b60 <I2C_Slave_ISR_IT+0x8c>
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b54:	d104      	bne.n	8006b60 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006b56:	6939      	ldr	r1, [r7, #16]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fd85 	bl	8007668 <I2C_ITListenCplt>
 8006b5e:	e032      	b.n	8006bc6 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b29      	cmp	r3, #41	; 0x29
 8006b6a:	d10e      	bne.n	8006b8a <I2C_Slave_ISR_IT+0xb6>
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b72:	d00a      	beq.n	8006b8a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2210      	movs	r2, #16
 8006b7a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fec0 	bl	8007902 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 fb3d 	bl	8007202 <I2C_ITSlaveSeqCplt>
 8006b88:	e01d      	b.n	8006bc6 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2210      	movs	r2, #16
 8006b90:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006b92:	e096      	b.n	8006cc2 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2210      	movs	r2, #16
 8006b9a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba0:	f043 0204 	orr.w	r2, r3, #4
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d004      	beq.n	8006bb8 <I2C_Slave_ISR_IT+0xe4>
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bb4:	f040 8085 	bne.w	8006cc2 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fda8 	bl	8007714 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006bc4:	e07d      	b.n	8006cc2 <I2C_Slave_ISR_IT+0x1ee>
 8006bc6:	e07c      	b.n	8006cc2 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	089b      	lsrs	r3, r3, #2
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d030      	beq.n	8006c36 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	089b      	lsrs	r3, r3, #2
 8006bd8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d02a      	beq.n	8006c36 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d018      	beq.n	8006c1c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d14f      	bne.n	8006cc6 <I2C_Slave_ISR_IT+0x1f2>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c2c:	d04b      	beq.n	8006cc6 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fae7 	bl	8007202 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006c34:	e047      	b.n	8006cc6 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	08db      	lsrs	r3, r3, #3
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	08db      	lsrs	r3, r3, #3
 8006c46:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006c4e:	6939      	ldr	r1, [r7, #16]
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fa15 	bl	8007080 <I2C_ITAddrCplt>
 8006c56:	e037      	b.n	8006cc8 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d031      	beq.n	8006cc8 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d02b      	beq.n	8006cc8 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d018      	beq.n	8006cac <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	781a      	ldrb	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	851a      	strh	r2, [r3, #40]	; 0x28
 8006caa:	e00d      	b.n	8006cc8 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cb2:	d002      	beq.n	8006cba <I2C_Slave_ISR_IT+0x1e6>
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 faa1 	bl	8007202 <I2C_ITSlaveSeqCplt>
 8006cc0:	e002      	b.n	8006cc8 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8006cc2:	bf00      	nop
 8006cc4:	e000      	b.n	8006cc8 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8006cc6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b088      	sub	sp, #32
 8006cde:	af02      	add	r7, sp, #8
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <I2C_Master_ISR_DMA+0x1a>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e0e1      	b.n	8006eb8 <I2C_Master_ISR_DMA+0x1de>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	091b      	lsrs	r3, r3, #4
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d017      	beq.n	8006d38 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	091b      	lsrs	r3, r3, #4
 8006d0c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d011      	beq.n	8006d38 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2210      	movs	r2, #16
 8006d1a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d20:	f043 0204 	orr.w	r2, r3, #4
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006d28:	2120      	movs	r1, #32
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 ff70 	bl	8007c10 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fde6 	bl	8007902 <I2C_Flush_TXDR>
 8006d36:	e0ba      	b.n	8006eae <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	09db      	lsrs	r3, r3, #7
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d072      	beq.n	8006e2a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	099b      	lsrs	r3, r3, #6
 8006d48:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d06c      	beq.n	8006e2a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d5e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d04e      	beq.n	8006e08 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d76:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2bff      	cmp	r3, #255	; 0xff
 8006d80:	d906      	bls.n	8006d90 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	22ff      	movs	r2, #255	; 0xff
 8006d86:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	e010      	b.n	8006db2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006da2:	d003      	beq.n	8006dac <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	617b      	str	r3, [r7, #20]
 8006daa:	e002      	b.n	8006db2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006dac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006db0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	8a79      	ldrh	r1, [r7, #18]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 fef3 	bl	8007bac <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b22      	cmp	r3, #34	; 0x22
 8006de2:	d108      	bne.n	8006df6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006df2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006df4:	e05b      	b.n	8006eae <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e04:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006e06:	e052      	b.n	8006eae <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e16:	d003      	beq.n	8006e20 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f9b5 	bl	8007188 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006e1e:	e046      	b.n	8006eae <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006e20:	2140      	movs	r1, #64	; 0x40
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 fc76 	bl	8007714 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006e28:	e041      	b.n	8006eae <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	099b      	lsrs	r3, r3, #6
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d029      	beq.n	8006e8a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	099b      	lsrs	r3, r3, #6
 8006e3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d023      	beq.n	8006e8a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d119      	bne.n	8006e80 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e5a:	d027      	beq.n	8006eac <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e64:	d108      	bne.n	8006e78 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e74:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006e76:	e019      	b.n	8006eac <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 f985 	bl	8007188 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006e7e:	e015      	b.n	8006eac <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006e80:	2140      	movs	r1, #64	; 0x40
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 fc46 	bl	8007714 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006e88:	e010      	b.n	8006eac <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00b      	beq.n	8006eae <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 fa0b 	bl	80072c0 <I2C_ITMasterCplt>
 8006eaa:	e000      	b.n	8006eae <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006eac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <I2C_Slave_ISR_DMA+0x24>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e0c9      	b.n	8007078 <I2C_Slave_ISR_DMA+0x1b8>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	095b      	lsrs	r3, r3, #5
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d009      	beq.n	8006f0c <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 faa4 	bl	8007454 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	091b      	lsrs	r3, r3, #4
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 809a 	beq.w	800704e <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	091b      	lsrs	r3, r3, #4
 8006f1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 8093 	beq.w	800704e <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	0b9b      	lsrs	r3, r3, #14
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d105      	bne.n	8006f40 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	0bdb      	lsrs	r3, r3, #15
 8006f38:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d07f      	beq.n	8007040 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00d      	beq.n	8006f64 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	0bdb      	lsrs	r3, r3, #15
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8006f60:	2301      	movs	r3, #1
 8006f62:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00d      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	0b9b      	lsrs	r3, r3, #14
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8006f84:	2301      	movs	r3, #1
 8006f86:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d128      	bne.n	8006fe0 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b28      	cmp	r3, #40	; 0x28
 8006f98:	d108      	bne.n	8006fac <I2C_Slave_ISR_DMA+0xec>
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa0:	d104      	bne.n	8006fac <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fb5f 	bl	8007668 <I2C_ITListenCplt>
 8006faa:	e048      	b.n	800703e <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b29      	cmp	r3, #41	; 0x29
 8006fb6:	d10e      	bne.n	8006fd6 <I2C_Slave_ISR_DMA+0x116>
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fbe:	d00a      	beq.n	8006fd6 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2210      	movs	r2, #16
 8006fc6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 fc9a 	bl	8007902 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 f917 	bl	8007202 <I2C_ITSlaveSeqCplt>
 8006fd4:	e033      	b.n	800703e <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2210      	movs	r2, #16
 8006fdc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006fde:	e034      	b.n	800704a <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2210      	movs	r2, #16
 8006fe6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fec:	f043 0204 	orr.w	r2, r3, #4
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ffa:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <I2C_Slave_ISR_DMA+0x14a>
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007008:	d11f      	bne.n	800704a <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	2b21      	cmp	r3, #33	; 0x21
 800700e:	d002      	beq.n	8007016 <I2C_Slave_ISR_DMA+0x156>
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	2b29      	cmp	r3, #41	; 0x29
 8007014:	d103      	bne.n	800701e <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2221      	movs	r2, #33	; 0x21
 800701a:	631a      	str	r2, [r3, #48]	; 0x30
 800701c:	e008      	b.n	8007030 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	2b22      	cmp	r3, #34	; 0x22
 8007022:	d002      	beq.n	800702a <I2C_Slave_ISR_DMA+0x16a>
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	2b2a      	cmp	r3, #42	; 0x2a
 8007028:	d102      	bne.n	8007030 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2222      	movs	r2, #34	; 0x22
 800702e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007034:	4619      	mov	r1, r3
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 fb6c 	bl	8007714 <I2C_ITError>
      if (treatdmanack == 1U)
 800703c:	e005      	b.n	800704a <I2C_Slave_ISR_DMA+0x18a>
 800703e:	e004      	b.n	800704a <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2210      	movs	r2, #16
 8007046:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007048:	e011      	b.n	800706e <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800704a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800704c:	e00f      	b.n	800706e <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	08db      	lsrs	r3, r3, #3
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d009      	beq.n	800706e <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	08db      	lsrs	r3, r3, #3
 800705e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f809 	bl	8007080 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3720      	adds	r7, #32
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007090:	b2db      	uxtb	r3, r3
 8007092:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007096:	2b28      	cmp	r3, #40	; 0x28
 8007098:	d16a      	bne.n	8007170 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	0c1b      	lsrs	r3, r3, #16
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	0c1b      	lsrs	r3, r3, #16
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80070b8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80070d4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d138      	bne.n	8007150 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80070de:	897b      	ldrh	r3, [r7, #10]
 80070e0:	09db      	lsrs	r3, r3, #7
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	89bb      	ldrh	r3, [r7, #12]
 80070e6:	4053      	eors	r3, r2
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	f003 0306 	and.w	r3, r3, #6
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d11c      	bne.n	800712c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80070f2:	897b      	ldrh	r3, [r7, #10]
 80070f4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007104:	2b02      	cmp	r3, #2
 8007106:	d13b      	bne.n	8007180 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2208      	movs	r2, #8
 8007114:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800711e:	89ba      	ldrh	r2, [r7, #12]
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff fb6d 	bl	8006804 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800712a:	e029      	b.n	8007180 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800712c:	893b      	ldrh	r3, [r7, #8]
 800712e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fdd5 	bl	8007ce4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007142:	89ba      	ldrh	r2, [r7, #12]
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff fb5b 	bl	8006804 <HAL_I2C_AddrCallback>
}
 800714e:	e017      	b.n	8007180 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fdc5 	bl	8007ce4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007162:	89ba      	ldrh	r2, [r7, #12]
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff fb4b 	bl	8006804 <HAL_I2C_AddrCallback>
}
 800716e:	e007      	b.n	8007180 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2208      	movs	r2, #8
 8007176:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b21      	cmp	r3, #33	; 0x21
 80071a2:	d115      	bne.n	80071d0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2211      	movs	r2, #17
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80071b8:	2101      	movs	r1, #1
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fd92 	bl	8007ce4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7fb fbf3 	bl	80029b4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071ce:	e014      	b.n	80071fa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2212      	movs	r2, #18
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80071e4:	2102      	movs	r1, #2
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fd7c 	bl	8007ce4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fb fbf3 	bl	80029e0 <HAL_I2C_MasterRxCpltCallback>
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	0b9b      	lsrs	r3, r3, #14
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d008      	beq.n	8007238 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	e00d      	b.n	8007254 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	0bdb      	lsrs	r3, r3, #15
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d007      	beq.n	8007254 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007252:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b29      	cmp	r3, #41	; 0x29
 800725e:	d112      	bne.n	8007286 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2228      	movs	r2, #40	; 0x28
 8007264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2221      	movs	r2, #33	; 0x21
 800726c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800726e:	2101      	movs	r1, #1
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fd37 	bl	8007ce4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff faac 	bl	80067dc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007284:	e017      	b.n	80072b6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b2a      	cmp	r3, #42	; 0x2a
 8007290:	d111      	bne.n	80072b6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2228      	movs	r2, #40	; 0x28
 8007296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2222      	movs	r2, #34	; 0x22
 800729e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80072a0:	2102      	movs	r1, #2
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fd1e 	bl	8007ce4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff fa9d 	bl	80067f0 <HAL_I2C_SlaveRxCpltCallback>
}
 80072b6:	bf00      	nop
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2220      	movs	r2, #32
 80072d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b21      	cmp	r3, #33	; 0x21
 80072e0:	d107      	bne.n	80072f2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80072e2:	2101      	movs	r1, #1
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fcfd 	bl	8007ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2211      	movs	r2, #17
 80072ee:	631a      	str	r2, [r3, #48]	; 0x30
 80072f0:	e00c      	b.n	800730c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b22      	cmp	r3, #34	; 0x22
 80072fc:	d106      	bne.n	800730c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80072fe:	2102      	movs	r1, #2
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fcef 	bl	8007ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2212      	movs	r2, #18
 800730a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6859      	ldr	r1, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	4b4d      	ldr	r3, [pc, #308]	; (800744c <I2C_ITMasterCplt+0x18c>)
 8007318:	400b      	ands	r3, r1
 800731a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a4a      	ldr	r2, [pc, #296]	; (8007450 <I2C_ITMasterCplt+0x190>)
 8007326:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	091b      	lsrs	r3, r3, #4
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d009      	beq.n	8007348 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2210      	movs	r2, #16
 800733a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007340:	f043 0204 	orr.w	r2, r3, #4
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b60      	cmp	r3, #96	; 0x60
 8007352:	d10b      	bne.n	800736c <I2C_ITMasterCplt+0xac>
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	089b      	lsrs	r3, r3, #2
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	b2db      	uxtb	r3, r3
 8007368:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800736a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fac8 	bl	8007902 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007376:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b60      	cmp	r3, #96	; 0x60
 8007382:	d002      	beq.n	800738a <I2C_ITMasterCplt+0xca>
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d006      	beq.n	8007398 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f9bf 	bl	8007714 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007396:	e054      	b.n	8007442 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b21      	cmp	r3, #33	; 0x21
 80073a2:	d124      	bne.n	80073ee <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2220      	movs	r2, #32
 80073a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b40      	cmp	r3, #64	; 0x40
 80073bc:	d10b      	bne.n	80073d6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff fa30 	bl	8006834 <HAL_I2C_MemTxCpltCallback>
}
 80073d4:	e035      	b.n	8007442 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7fb fae4 	bl	80029b4 <HAL_I2C_MasterTxCpltCallback>
}
 80073ec:	e029      	b.n	8007442 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b22      	cmp	r3, #34	; 0x22
 80073f8:	d123      	bne.n	8007442 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b40      	cmp	r3, #64	; 0x40
 8007412:	d10b      	bne.n	800742c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fa0f 	bl	8006848 <HAL_I2C_MemRxCpltCallback>
}
 800742a:	e00a      	b.n	8007442 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7fb facf 	bl	80029e0 <HAL_I2C_MasterRxCpltCallback>
}
 8007442:	bf00      	nop
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	fe00e800 	.word	0xfe00e800
 8007450:	ffff0000 	.word	0xffff0000

08007454 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007470:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2220      	movs	r2, #32
 8007478:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	2b21      	cmp	r3, #33	; 0x21
 800747e:	d002      	beq.n	8007486 <I2C_ITSlaveCplt+0x32>
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	2b29      	cmp	r3, #41	; 0x29
 8007484:	d108      	bne.n	8007498 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007486:	f248 0101 	movw	r1, #32769	; 0x8001
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fc2a 	bl	8007ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2221      	movs	r2, #33	; 0x21
 8007494:	631a      	str	r2, [r3, #48]	; 0x30
 8007496:	e00d      	b.n	80074b4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007498:	7bfb      	ldrb	r3, [r7, #15]
 800749a:	2b22      	cmp	r3, #34	; 0x22
 800749c:	d002      	beq.n	80074a4 <I2C_ITSlaveCplt+0x50>
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	2b2a      	cmp	r3, #42	; 0x2a
 80074a2:	d107      	bne.n	80074b4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80074a4:	f248 0102 	movw	r1, #32770	; 0x8002
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fc1b 	bl	8007ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2222      	movs	r2, #34	; 0x22
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074c2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6859      	ldr	r1, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	4b64      	ldr	r3, [pc, #400]	; (8007660 <I2C_ITSlaveCplt+0x20c>)
 80074d0:	400b      	ands	r3, r1
 80074d2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fa14 	bl	8007902 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	0b9b      	lsrs	r3, r3, #14
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d013      	beq.n	800750e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074f4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d020      	beq.n	8007540 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	b29a      	uxth	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800750c:	e018      	b.n	8007540 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	0bdb      	lsrs	r3, r3, #15
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d012      	beq.n	8007540 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007528:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d006      	beq.n	8007540 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	b29a      	uxth	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	089b      	lsrs	r3, r3, #2
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d020      	beq.n	800758e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f023 0304 	bic.w	r3, r3, #4
 8007552:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00c      	beq.n	800758e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007592:	b29b      	uxth	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759c:	f043 0204 	orr.w	r2, r3, #4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d010      	beq.n	80075dc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f8a7 	bl	8007714 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b28      	cmp	r3, #40	; 0x28
 80075d0:	d141      	bne.n	8007656 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80075d2:	6979      	ldr	r1, [r7, #20]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f847 	bl	8007668 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075da:	e03c      	b.n	8007656 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075e4:	d014      	beq.n	8007610 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff fe0b 	bl	8007202 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <I2C_ITSlaveCplt+0x210>)
 80075f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff f909 	bl	8006820 <HAL_I2C_ListenCpltCallback>
}
 800760e:	e022      	b.n	8007656 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b22      	cmp	r3, #34	; 0x22
 800761a:	d10e      	bne.n	800763a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff f8dc 	bl	80067f0 <HAL_I2C_SlaveRxCpltCallback>
}
 8007638:	e00d      	b.n	8007656 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2220      	movs	r2, #32
 800763e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff f8c3 	bl	80067dc <HAL_I2C_SlaveTxCpltCallback>
}
 8007656:	bf00      	nop
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	fe00e800 	.word	0xfe00e800
 8007664:	ffff0000 	.word	0xffff0000

08007668 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a26      	ldr	r2, [pc, #152]	; (8007710 <I2C_ITListenCplt+0xa8>)
 8007676:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	089b      	lsrs	r3, r3, #2
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d022      	beq.n	80076e6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d012      	beq.n	80076e6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076de:	f043 0204 	orr.w	r2, r3, #4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076e6:	f248 0103 	movw	r1, #32771	; 0x8003
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fafa 	bl	8007ce4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2210      	movs	r2, #16
 80076f6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff f88d 	bl	8006820 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007706:	bf00      	nop
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	ffff0000 	.word	0xffff0000

08007714 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a5d      	ldr	r2, [pc, #372]	; (80078a8 <I2C_ITError+0x194>)
 8007732:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	2b28      	cmp	r3, #40	; 0x28
 800774a:	d005      	beq.n	8007758 <I2C_ITError+0x44>
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	2b29      	cmp	r3, #41	; 0x29
 8007750:	d002      	beq.n	8007758 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	2b2a      	cmp	r3, #42	; 0x2a
 8007756:	d10b      	bne.n	8007770 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007758:	2103      	movs	r1, #3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fac2 	bl	8007ce4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2228      	movs	r2, #40	; 0x28
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a50      	ldr	r2, [pc, #320]	; (80078ac <I2C_ITError+0x198>)
 800776c:	635a      	str	r2, [r3, #52]	; 0x34
 800776e:	e011      	b.n	8007794 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007770:	f248 0103 	movw	r1, #32771	; 0x8003
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fab5 	bl	8007ce4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b60      	cmp	r3, #96	; 0x60
 8007784:	d003      	beq.n	800778e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2220      	movs	r2, #32
 800778a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d039      	beq.n	8007816 <I2C_ITError+0x102>
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2b11      	cmp	r3, #17
 80077a6:	d002      	beq.n	80077ae <I2C_ITError+0x9a>
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b21      	cmp	r3, #33	; 0x21
 80077ac:	d133      	bne.n	8007816 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077bc:	d107      	bne.n	80077ce <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fc ff4c 	bl	8004670 <HAL_DMA_GetState>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d017      	beq.n	800780e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	4a33      	ldr	r2, [pc, #204]	; (80078b0 <I2C_ITError+0x19c>)
 80077e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fc fd90 	bl	8004318 <HAL_DMA_Abort_IT>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d04d      	beq.n	800789a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007808:	4610      	mov	r0, r2
 800780a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800780c:	e045      	b.n	800789a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f850 	bl	80078b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007814:	e041      	b.n	800789a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d039      	beq.n	8007892 <I2C_ITError+0x17e>
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b12      	cmp	r3, #18
 8007822:	d002      	beq.n	800782a <I2C_ITError+0x116>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b22      	cmp	r3, #34	; 0x22
 8007828:	d133      	bne.n	8007892 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007838:	d107      	bne.n	800784a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007848:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784e:	4618      	mov	r0, r3
 8007850:	f7fc ff0e 	bl	8004670 <HAL_DMA_GetState>
 8007854:	4603      	mov	r3, r0
 8007856:	2b01      	cmp	r3, #1
 8007858:	d017      	beq.n	800788a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785e:	4a14      	ldr	r2, [pc, #80]	; (80078b0 <I2C_ITError+0x19c>)
 8007860:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786e:	4618      	mov	r0, r3
 8007870:	f7fc fd52 	bl	8004318 <HAL_DMA_Abort_IT>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d011      	beq.n	800789e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007884:	4610      	mov	r0, r2
 8007886:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007888:	e009      	b.n	800789e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f812 	bl	80078b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007890:	e005      	b.n	800789e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f80e 	bl	80078b4 <I2C_TreatErrorCallback>
  }
}
 8007898:	e002      	b.n	80078a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800789a:	bf00      	nop
 800789c:	e000      	b.n	80078a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800789e:	bf00      	nop
}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	ffff0000 	.word	0xffff0000
 80078ac:	08006ad5 	.word	0x08006ad5
 80078b0:	08007b71 	.word	0x08007b71

080078b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b60      	cmp	r3, #96	; 0x60
 80078c6:	d10e      	bne.n	80078e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fe ffc6 	bl	8006870 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078e4:	e009      	b.n	80078fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fe ffb1 	bl	800685c <HAL_I2C_ErrorCallback>
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b02      	cmp	r3, #2
 8007916:	d103      	bne.n	8007920 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2200      	movs	r2, #0
 800791e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b01      	cmp	r3, #1
 800792c:	d007      	beq.n	800793e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	699a      	ldr	r2, [r3, #24]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0201 	orr.w	r2, r2, #1
 800793c:	619a      	str	r2, [r3, #24]
  }
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007966:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d104      	bne.n	800797c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007972:	2120      	movs	r1, #32
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f94b 	bl	8007c10 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800797a:	e02d      	b.n	80079d8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007984:	441a      	add	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798e:	b29b      	uxth	r3, r3
 8007990:	2bff      	cmp	r3, #255	; 0xff
 8007992:	d903      	bls.n	800799c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	22ff      	movs	r2, #255	; 0xff
 8007998:	851a      	strh	r2, [r3, #40]	; 0x28
 800799a:	e004      	b.n	80079a6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	4619      	mov	r1, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3328      	adds	r3, #40	; 0x28
 80079b6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80079bc:	f7fc fbdc 	bl	8004178 <HAL_DMA_Start_IT>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80079c6:	2110      	movs	r1, #16
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f7ff fea3 	bl	8007714 <I2C_ITError>
}
 80079ce:	e003      	b.n	80079d8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80079d0:	2140      	movs	r1, #64	; 0x40
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f91c 	bl	8007c10 <I2C_Enable_IRQ>
}
 80079d8:	bf00      	nop
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079fa:	d002      	beq.n	8007a02 <I2C_DMASlaveTransmitCplt+0x22>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10a      	bne.n	8007a18 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a10:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f7ff fbf5 	bl	8007202 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007a18:	bf00      	nop
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a3c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007a48:	2120      	movs	r1, #32
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f8e0 	bl	8007c10 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007a50:	e02d      	b.n	8007aae <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007a5a:	441a      	add	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2bff      	cmp	r3, #255	; 0xff
 8007a68:	d903      	bls.n	8007a72 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	22ff      	movs	r2, #255	; 0xff
 8007a6e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007a70:	e004      	b.n	8007a7c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3324      	adds	r3, #36	; 0x24
 8007a86:	4619      	mov	r1, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007a92:	f7fc fb71 	bl	8004178 <HAL_DMA_Start_IT>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d004      	beq.n	8007aa6 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007a9c:	2110      	movs	r1, #16
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff fe38 	bl	8007714 <I2C_ITError>
}
 8007aa4:	e003      	b.n	8007aae <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007aa6:	2140      	movs	r1, #64	; 0x40
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f8b1 	bl	8007c10 <I2C_Enable_IRQ>
}
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10e      	bne.n	8007af4 <I2C_DMASlaveReceiveCplt+0x3e>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007adc:	d00a      	beq.n	8007af4 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007aec:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7ff fb87 	bl	8007202 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8007b22:	2301      	movs	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7fc fda4 	bl	800468c <HAL_DMA_GetError>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d00e      	beq.n	8007b68 <I2C_DMAError+0x6c>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b5e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007b60:	2110      	movs	r1, #16
 8007b62:	68b8      	ldr	r0, [r7, #8]
 8007b64:	f7ff fdd6 	bl	8007714 <I2C_ITError>
  }
}
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff fe88 	bl	80078b4 <I2C_TreatErrorCallback>
}
 8007ba4:	bf00      	nop
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	607b      	str	r3, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	817b      	strh	r3, [r7, #10]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bbe:	897b      	ldrh	r3, [r7, #10]
 8007bc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007bc4:	7a7b      	ldrb	r3, [r7, #9]
 8007bc6:	041b      	lsls	r3, r3, #16
 8007bc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bcc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	0d5b      	lsrs	r3, r3, #21
 8007be6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007bea:	4b08      	ldr	r3, [pc, #32]	; (8007c0c <I2C_TransferConfig+0x60>)
 8007bec:	430b      	orrs	r3, r1
 8007bee:	43db      	mvns	r3, r3
 8007bf0:	ea02 0103 	and.w	r1, r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007bfe:	bf00      	nop
 8007c00:	371c      	adds	r7, #28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	03ff63ff 	.word	0x03ff63ff

08007c10 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c24:	4a2d      	ldr	r2, [pc, #180]	; (8007cdc <I2C_Enable_IRQ+0xcc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d004      	beq.n	8007c34 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007c2e:	4a2c      	ldr	r2, [pc, #176]	; (8007ce0 <I2C_Enable_IRQ+0xd0>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d11d      	bne.n	8007c70 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	da03      	bge.n	8007c44 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007c42:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007c44:	887b      	ldrh	r3, [r7, #2]
 8007c46:	2b10      	cmp	r3, #16
 8007c48:	d103      	bne.n	8007c52 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007c50:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007c52:	887b      	ldrh	r3, [r7, #2]
 8007c54:	2b20      	cmp	r3, #32
 8007c56:	d103      	bne.n	8007c60 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c5e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007c60:	887b      	ldrh	r3, [r7, #2]
 8007c62:	2b40      	cmp	r3, #64	; 0x40
 8007c64:	d12c      	bne.n	8007cc0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c6c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007c6e:	e027      	b.n	8007cc0 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	da03      	bge.n	8007c80 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007c7e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007c80:	887b      	ldrh	r3, [r7, #2]
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007c90:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007c92:	887b      	ldrh	r3, [r7, #2]
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007ca2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007ca4:	887b      	ldrh	r3, [r7, #2]
 8007ca6:	2b10      	cmp	r3, #16
 8007ca8:	d103      	bne.n	8007cb2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007cb0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007cb2:	887b      	ldrh	r3, [r7, #2]
 8007cb4:	2b20      	cmp	r3, #32
 8007cb6:	d103      	bne.n	8007cc0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f043 0320 	orr.w	r3, r3, #32
 8007cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6819      	ldr	r1, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	601a      	str	r2, [r3, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	08006cdb 	.word	0x08006cdb
 8007ce0:	08006ec1 	.word	0x08006ec1

08007ce4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007cf4:	887b      	ldrh	r3, [r7, #2]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00f      	beq.n	8007d1e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007d04:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d12:	2b28      	cmp	r3, #40	; 0x28
 8007d14:	d003      	beq.n	8007d1e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007d1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007d1e:	887b      	ldrh	r3, [r7, #2]
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00f      	beq.n	8007d48 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007d2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d3c:	2b28      	cmp	r3, #40	; 0x28
 8007d3e:	d003      	beq.n	8007d48 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007d46:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007d48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	da03      	bge.n	8007d58 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007d56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007d58:	887b      	ldrh	r3, [r7, #2]
 8007d5a:	2b10      	cmp	r3, #16
 8007d5c:	d103      	bne.n	8007d66 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007d64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d66:	887b      	ldrh	r3, [r7, #2]
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	d103      	bne.n	8007d74 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f043 0320 	orr.w	r3, r3, #32
 8007d72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007d74:	887b      	ldrh	r3, [r7, #2]
 8007d76:	2b40      	cmp	r3, #64	; 0x40
 8007d78:	d103      	bne.n	8007d82 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d80:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6819      	ldr	r1, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	43da      	mvns	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	400a      	ands	r2, r1
 8007d92:	601a      	str	r2, [r3, #0]
}
 8007d94:	bf00      	nop
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d138      	bne.n	8007e28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d101      	bne.n	8007dc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e032      	b.n	8007e2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2224      	movs	r2, #36	; 0x24
 8007dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f022 0201 	bic.w	r2, r2, #1
 8007de2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007df2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6819      	ldr	r1, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f042 0201 	orr.w	r2, r2, #1
 8007e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	e000      	b.n	8007e2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e28:	2302      	movs	r3, #2
  }
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b085      	sub	sp, #20
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d139      	bne.n	8007ec0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e56:	2302      	movs	r3, #2
 8007e58:	e033      	b.n	8007ec2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2224      	movs	r2, #36	; 0x24
 8007e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0201 	bic.w	r2, r2, #1
 8007e78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0201 	orr.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e000      	b.n	8007ec2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ec0:	2302      	movs	r3, #2
  }
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007ece:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ed0:	b08f      	sub	sp, #60	; 0x3c
 8007ed2:	af0a      	add	r7, sp, #40	; 0x28
 8007ed4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e116      	b.n	800810e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7fa fb94 	bl	8002628 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2203      	movs	r2, #3
 8007f04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d102      	bne.n	8007f1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f004 f996 	bl	800c250 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	687e      	ldr	r6, [r7, #4]
 8007f2c:	466d      	mov	r5, sp
 8007f2e:	f106 0410 	add.w	r4, r6, #16
 8007f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f42:	1d33      	adds	r3, r6, #4
 8007f44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f46:	6838      	ldr	r0, [r7, #0]
 8007f48:	f004 f92a 	bl	800c1a0 <USB_CoreInit>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d005      	beq.n	8007f5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2202      	movs	r2, #2
 8007f56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e0d7      	b.n	800810e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2100      	movs	r1, #0
 8007f64:	4618      	mov	r0, r3
 8007f66:	f004 f984 	bl	800c272 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
 8007f6e:	e04a      	b.n	8008006 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007f70:	7bfa      	ldrb	r2, [r7, #15]
 8007f72:	6879      	ldr	r1, [r7, #4]
 8007f74:	4613      	mov	r3, r2
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	333d      	adds	r3, #61	; 0x3d
 8007f80:	2201      	movs	r2, #1
 8007f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007f84:	7bfa      	ldrb	r2, [r7, #15]
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	333c      	adds	r3, #60	; 0x3c
 8007f94:	7bfa      	ldrb	r2, [r7, #15]
 8007f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007f98:	7bfa      	ldrb	r2, [r7, #15]
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	b298      	uxth	r0, r3
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	440b      	add	r3, r1
 8007faa:	3344      	adds	r3, #68	; 0x44
 8007fac:	4602      	mov	r2, r0
 8007fae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007fb0:	7bfa      	ldrb	r2, [r7, #15]
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	440b      	add	r3, r1
 8007fbe:	3340      	adds	r3, #64	; 0x40
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007fc4:	7bfa      	ldrb	r2, [r7, #15]
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	3348      	adds	r3, #72	; 0x48
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007fd8:	7bfa      	ldrb	r2, [r7, #15]
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	334c      	adds	r3, #76	; 0x4c
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007fec:	7bfa      	ldrb	r2, [r7, #15]
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	440b      	add	r3, r1
 8007ffa:	3354      	adds	r3, #84	; 0x54
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	3301      	adds	r3, #1
 8008004:	73fb      	strb	r3, [r7, #15]
 8008006:	7bfa      	ldrb	r2, [r7, #15]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	429a      	cmp	r2, r3
 800800e:	d3af      	bcc.n	8007f70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008010:	2300      	movs	r3, #0
 8008012:	73fb      	strb	r3, [r7, #15]
 8008014:	e044      	b.n	80080a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008016:	7bfa      	ldrb	r2, [r7, #15]
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008028:	2200      	movs	r2, #0
 800802a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800802c:	7bfa      	ldrb	r2, [r7, #15]
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4613      	mov	r3, r2
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800803e:	7bfa      	ldrb	r2, [r7, #15]
 8008040:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008042:	7bfa      	ldrb	r2, [r7, #15]
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	4613      	mov	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008054:	2200      	movs	r2, #0
 8008056:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008058:	7bfa      	ldrb	r2, [r7, #15]
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	4613      	mov	r3, r2
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	440b      	add	r3, r1
 8008066:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800806e:	7bfa      	ldrb	r2, [r7, #15]
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008080:	2200      	movs	r2, #0
 8008082:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008084:	7bfa      	ldrb	r2, [r7, #15]
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	4613      	mov	r3, r2
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	4413      	add	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	440b      	add	r3, r1
 8008092:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	3301      	adds	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]
 80080a0:	7bfa      	ldrb	r2, [r7, #15]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d3b5      	bcc.n	8008016 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	687e      	ldr	r6, [r7, #4]
 80080b2:	466d      	mov	r5, sp
 80080b4:	f106 0410 	add.w	r4, r6, #16
 80080b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80080c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80080c8:	1d33      	adds	r3, r6, #4
 80080ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080cc:	6838      	ldr	r0, [r7, #0]
 80080ce:	f004 f91d 	bl	800c30c <USB_DevInit>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e014      	b.n	800810e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d102      	bne.n	8008102 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f80b 	bl	8008118 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f004 fadb 	bl	800c6c2 <USB_DevDisconnect>

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008118 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008146:	4b05      	ldr	r3, [pc, #20]	; (800815c <HAL_PCDEx_ActivateLPM+0x44>)
 8008148:	4313      	orrs	r3, r2
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	10000003 	.word	0x10000003

08008160 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008160:	b480      	push	{r7}
 8008162:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008164:	4b05      	ldr	r3, [pc, #20]	; (800817c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a04      	ldr	r2, [pc, #16]	; (800817c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800816a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800816e:	6013      	str	r3, [r2, #0]
}
 8008170:	bf00      	nop
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	40007000 	.word	0x40007000

08008180 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008188:	2300      	movs	r3, #0
 800818a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e291      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 8087 	beq.w	80082b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80081a4:	4b96      	ldr	r3, [pc, #600]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f003 030c 	and.w	r3, r3, #12
 80081ac:	2b04      	cmp	r3, #4
 80081ae:	d00c      	beq.n	80081ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081b0:	4b93      	ldr	r3, [pc, #588]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f003 030c 	and.w	r3, r3, #12
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d112      	bne.n	80081e2 <HAL_RCC_OscConfig+0x62>
 80081bc:	4b90      	ldr	r3, [pc, #576]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081c8:	d10b      	bne.n	80081e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081ca:	4b8d      	ldr	r3, [pc, #564]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d06c      	beq.n	80082b0 <HAL_RCC_OscConfig+0x130>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d168      	bne.n	80082b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e26b      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ea:	d106      	bne.n	80081fa <HAL_RCC_OscConfig+0x7a>
 80081ec:	4b84      	ldr	r3, [pc, #528]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a83      	ldr	r2, [pc, #524]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80081f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	e02e      	b.n	8008258 <HAL_RCC_OscConfig+0xd8>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10c      	bne.n	800821c <HAL_RCC_OscConfig+0x9c>
 8008202:	4b7f      	ldr	r3, [pc, #508]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a7e      	ldr	r2, [pc, #504]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800820c:	6013      	str	r3, [r2, #0]
 800820e:	4b7c      	ldr	r3, [pc, #496]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a7b      	ldr	r2, [pc, #492]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	e01d      	b.n	8008258 <HAL_RCC_OscConfig+0xd8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008224:	d10c      	bne.n	8008240 <HAL_RCC_OscConfig+0xc0>
 8008226:	4b76      	ldr	r3, [pc, #472]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a75      	ldr	r2, [pc, #468]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 800822c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	4b73      	ldr	r3, [pc, #460]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a72      	ldr	r2, [pc, #456]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	e00b      	b.n	8008258 <HAL_RCC_OscConfig+0xd8>
 8008240:	4b6f      	ldr	r3, [pc, #444]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a6e      	ldr	r2, [pc, #440]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	4b6c      	ldr	r3, [pc, #432]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a6b      	ldr	r2, [pc, #428]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d013      	beq.n	8008288 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008260:	f7fb f8f2 	bl	8003448 <HAL_GetTick>
 8008264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008266:	e008      	b.n	800827a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008268:	f7fb f8ee 	bl	8003448 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b64      	cmp	r3, #100	; 0x64
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e21f      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800827a:	4b61      	ldr	r3, [pc, #388]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0f0      	beq.n	8008268 <HAL_RCC_OscConfig+0xe8>
 8008286:	e014      	b.n	80082b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008288:	f7fb f8de 	bl	8003448 <HAL_GetTick>
 800828c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800828e:	e008      	b.n	80082a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008290:	f7fb f8da 	bl	8003448 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b64      	cmp	r3, #100	; 0x64
 800829c:	d901      	bls.n	80082a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e20b      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082a2:	4b57      	ldr	r3, [pc, #348]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1f0      	bne.n	8008290 <HAL_RCC_OscConfig+0x110>
 80082ae:	e000      	b.n	80082b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d069      	beq.n	8008392 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80082be:	4b50      	ldr	r3, [pc, #320]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f003 030c 	and.w	r3, r3, #12
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00b      	beq.n	80082e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082ca:	4b4d      	ldr	r3, [pc, #308]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f003 030c 	and.w	r3, r3, #12
 80082d2:	2b08      	cmp	r3, #8
 80082d4:	d11c      	bne.n	8008310 <HAL_RCC_OscConfig+0x190>
 80082d6:	4b4a      	ldr	r3, [pc, #296]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d116      	bne.n	8008310 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082e2:	4b47      	ldr	r3, [pc, #284]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d005      	beq.n	80082fa <HAL_RCC_OscConfig+0x17a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d001      	beq.n	80082fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e1df      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082fa:	4b41      	ldr	r3, [pc, #260]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	493d      	ldr	r1, [pc, #244]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 800830a:	4313      	orrs	r3, r2
 800830c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800830e:	e040      	b.n	8008392 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d023      	beq.n	8008360 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008318:	4b39      	ldr	r3, [pc, #228]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a38      	ldr	r2, [pc, #224]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 800831e:	f043 0301 	orr.w	r3, r3, #1
 8008322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008324:	f7fb f890 	bl	8003448 <HAL_GetTick>
 8008328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800832a:	e008      	b.n	800833e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800832c:	f7fb f88c 	bl	8003448 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	2b02      	cmp	r3, #2
 8008338:	d901      	bls.n	800833e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e1bd      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800833e:	4b30      	ldr	r3, [pc, #192]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d0f0      	beq.n	800832c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800834a:	4b2d      	ldr	r3, [pc, #180]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	4929      	ldr	r1, [pc, #164]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 800835a:	4313      	orrs	r3, r2
 800835c:	600b      	str	r3, [r1, #0]
 800835e:	e018      	b.n	8008392 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008360:	4b27      	ldr	r3, [pc, #156]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a26      	ldr	r2, [pc, #152]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008366:	f023 0301 	bic.w	r3, r3, #1
 800836a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836c:	f7fb f86c 	bl	8003448 <HAL_GetTick>
 8008370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008372:	e008      	b.n	8008386 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008374:	f7fb f868 	bl	8003448 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d901      	bls.n	8008386 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e199      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008386:	4b1e      	ldr	r3, [pc, #120]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1f0      	bne.n	8008374 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0308 	and.w	r3, r3, #8
 800839a:	2b00      	cmp	r3, #0
 800839c:	d038      	beq.n	8008410 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d019      	beq.n	80083da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083a6:	4b16      	ldr	r3, [pc, #88]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80083a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083aa:	4a15      	ldr	r2, [pc, #84]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80083ac:	f043 0301 	orr.w	r3, r3, #1
 80083b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b2:	f7fb f849 	bl	8003448 <HAL_GetTick>
 80083b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083b8:	e008      	b.n	80083cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083ba:	f7fb f845 	bl	8003448 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d901      	bls.n	80083cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e176      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083cc:	4b0c      	ldr	r3, [pc, #48]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80083ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0f0      	beq.n	80083ba <HAL_RCC_OscConfig+0x23a>
 80083d8:	e01a      	b.n	8008410 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083da:	4b09      	ldr	r3, [pc, #36]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80083dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083de:	4a08      	ldr	r2, [pc, #32]	; (8008400 <HAL_RCC_OscConfig+0x280>)
 80083e0:	f023 0301 	bic.w	r3, r3, #1
 80083e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083e6:	f7fb f82f 	bl	8003448 <HAL_GetTick>
 80083ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083ec:	e00a      	b.n	8008404 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083ee:	f7fb f82b 	bl	8003448 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d903      	bls.n	8008404 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e15c      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
 8008400:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008404:	4b91      	ldr	r3, [pc, #580]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 8008406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1ee      	bne.n	80083ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 80a4 	beq.w	8008566 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800841e:	4b8b      	ldr	r3, [pc, #556]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10d      	bne.n	8008446 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800842a:	4b88      	ldr	r3, [pc, #544]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	4a87      	ldr	r2, [pc, #540]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 8008430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008434:	6413      	str	r3, [r2, #64]	; 0x40
 8008436:	4b85      	ldr	r3, [pc, #532]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 8008438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800843e:	60bb      	str	r3, [r7, #8]
 8008440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008442:	2301      	movs	r3, #1
 8008444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008446:	4b82      	ldr	r3, [pc, #520]	; (8008650 <HAL_RCC_OscConfig+0x4d0>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844e:	2b00      	cmp	r3, #0
 8008450:	d118      	bne.n	8008484 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008452:	4b7f      	ldr	r3, [pc, #508]	; (8008650 <HAL_RCC_OscConfig+0x4d0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a7e      	ldr	r2, [pc, #504]	; (8008650 <HAL_RCC_OscConfig+0x4d0>)
 8008458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800845c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800845e:	f7fa fff3 	bl	8003448 <HAL_GetTick>
 8008462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008464:	e008      	b.n	8008478 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008466:	f7fa ffef 	bl	8003448 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b64      	cmp	r3, #100	; 0x64
 8008472:	d901      	bls.n	8008478 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e120      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008478:	4b75      	ldr	r3, [pc, #468]	; (8008650 <HAL_RCC_OscConfig+0x4d0>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008480:	2b00      	cmp	r3, #0
 8008482:	d0f0      	beq.n	8008466 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d106      	bne.n	800849a <HAL_RCC_OscConfig+0x31a>
 800848c:	4b6f      	ldr	r3, [pc, #444]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 800848e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008490:	4a6e      	ldr	r2, [pc, #440]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 8008492:	f043 0301 	orr.w	r3, r3, #1
 8008496:	6713      	str	r3, [r2, #112]	; 0x70
 8008498:	e02d      	b.n	80084f6 <HAL_RCC_OscConfig+0x376>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10c      	bne.n	80084bc <HAL_RCC_OscConfig+0x33c>
 80084a2:	4b6a      	ldr	r3, [pc, #424]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80084a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a6:	4a69      	ldr	r2, [pc, #420]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80084a8:	f023 0301 	bic.w	r3, r3, #1
 80084ac:	6713      	str	r3, [r2, #112]	; 0x70
 80084ae:	4b67      	ldr	r3, [pc, #412]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80084b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b2:	4a66      	ldr	r2, [pc, #408]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80084b4:	f023 0304 	bic.w	r3, r3, #4
 80084b8:	6713      	str	r3, [r2, #112]	; 0x70
 80084ba:	e01c      	b.n	80084f6 <HAL_RCC_OscConfig+0x376>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	2b05      	cmp	r3, #5
 80084c2:	d10c      	bne.n	80084de <HAL_RCC_OscConfig+0x35e>
 80084c4:	4b61      	ldr	r3, [pc, #388]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80084c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c8:	4a60      	ldr	r2, [pc, #384]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80084ca:	f043 0304 	orr.w	r3, r3, #4
 80084ce:	6713      	str	r3, [r2, #112]	; 0x70
 80084d0:	4b5e      	ldr	r3, [pc, #376]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80084d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d4:	4a5d      	ldr	r2, [pc, #372]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80084d6:	f043 0301 	orr.w	r3, r3, #1
 80084da:	6713      	str	r3, [r2, #112]	; 0x70
 80084dc:	e00b      	b.n	80084f6 <HAL_RCC_OscConfig+0x376>
 80084de:	4b5b      	ldr	r3, [pc, #364]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80084e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e2:	4a5a      	ldr	r2, [pc, #360]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80084e4:	f023 0301 	bic.w	r3, r3, #1
 80084e8:	6713      	str	r3, [r2, #112]	; 0x70
 80084ea:	4b58      	ldr	r3, [pc, #352]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80084ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ee:	4a57      	ldr	r2, [pc, #348]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80084f0:	f023 0304 	bic.w	r3, r3, #4
 80084f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d015      	beq.n	800852a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084fe:	f7fa ffa3 	bl	8003448 <HAL_GetTick>
 8008502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008504:	e00a      	b.n	800851c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008506:	f7fa ff9f 	bl	8003448 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	f241 3288 	movw	r2, #5000	; 0x1388
 8008514:	4293      	cmp	r3, r2
 8008516:	d901      	bls.n	800851c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e0ce      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800851c:	4b4b      	ldr	r3, [pc, #300]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 800851e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0ee      	beq.n	8008506 <HAL_RCC_OscConfig+0x386>
 8008528:	e014      	b.n	8008554 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852a:	f7fa ff8d 	bl	8003448 <HAL_GetTick>
 800852e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008530:	e00a      	b.n	8008548 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008532:	f7fa ff89 	bl	8003448 <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008540:	4293      	cmp	r3, r2
 8008542:	d901      	bls.n	8008548 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e0b8      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008548:	4b40      	ldr	r3, [pc, #256]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 800854a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1ee      	bne.n	8008532 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008554:	7dfb      	ldrb	r3, [r7, #23]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d105      	bne.n	8008566 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800855a:	4b3c      	ldr	r3, [pc, #240]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 800855c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855e:	4a3b      	ldr	r2, [pc, #236]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 8008560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008564:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80a4 	beq.w	80086b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008570:	4b36      	ldr	r3, [pc, #216]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f003 030c 	and.w	r3, r3, #12
 8008578:	2b08      	cmp	r3, #8
 800857a:	d06b      	beq.n	8008654 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	2b02      	cmp	r3, #2
 8008582:	d149      	bne.n	8008618 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008584:	4b31      	ldr	r3, [pc, #196]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a30      	ldr	r2, [pc, #192]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 800858a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800858e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008590:	f7fa ff5a 	bl	8003448 <HAL_GetTick>
 8008594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008596:	e008      	b.n	80085aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008598:	f7fa ff56 	bl	8003448 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e087      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085aa:	4b28      	ldr	r3, [pc, #160]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1f0      	bne.n	8008598 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	69da      	ldr	r2, [r3, #28]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	431a      	orrs	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	019b      	lsls	r3, r3, #6
 80085c6:	431a      	orrs	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085cc:	085b      	lsrs	r3, r3, #1
 80085ce:	3b01      	subs	r3, #1
 80085d0:	041b      	lsls	r3, r3, #16
 80085d2:	431a      	orrs	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	061b      	lsls	r3, r3, #24
 80085da:	4313      	orrs	r3, r2
 80085dc:	4a1b      	ldr	r2, [pc, #108]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80085de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085e4:	4b19      	ldr	r3, [pc, #100]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a18      	ldr	r2, [pc, #96]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 80085ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f0:	f7fa ff2a 	bl	8003448 <HAL_GetTick>
 80085f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085f6:	e008      	b.n	800860a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085f8:	f7fa ff26 	bl	8003448 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d901      	bls.n	800860a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e057      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800860a:	4b10      	ldr	r3, [pc, #64]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0f0      	beq.n	80085f8 <HAL_RCC_OscConfig+0x478>
 8008616:	e04f      	b.n	80086b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008618:	4b0c      	ldr	r3, [pc, #48]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a0b      	ldr	r2, [pc, #44]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 800861e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008624:	f7fa ff10 	bl	8003448 <HAL_GetTick>
 8008628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800862a:	e008      	b.n	800863e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800862c:	f7fa ff0c 	bl	8003448 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	2b02      	cmp	r3, #2
 8008638:	d901      	bls.n	800863e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e03d      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800863e:	4b03      	ldr	r3, [pc, #12]	; (800864c <HAL_RCC_OscConfig+0x4cc>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1f0      	bne.n	800862c <HAL_RCC_OscConfig+0x4ac>
 800864a:	e035      	b.n	80086b8 <HAL_RCC_OscConfig+0x538>
 800864c:	40023800 	.word	0x40023800
 8008650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008654:	4b1b      	ldr	r3, [pc, #108]	; (80086c4 <HAL_RCC_OscConfig+0x544>)
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d028      	beq.n	80086b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800866c:	429a      	cmp	r2, r3
 800866e:	d121      	bne.n	80086b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800867a:	429a      	cmp	r2, r3
 800867c:	d11a      	bne.n	80086b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008684:	4013      	ands	r3, r2
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800868a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800868c:	4293      	cmp	r3, r2
 800868e:	d111      	bne.n	80086b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869a:	085b      	lsrs	r3, r3, #1
 800869c:	3b01      	subs	r3, #1
 800869e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d107      	bne.n	80086b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d001      	beq.n	80086b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e000      	b.n	80086ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	40023800 	.word	0x40023800

080086c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e0d0      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086e0:	4b6a      	ldr	r3, [pc, #424]	; (800888c <HAL_RCC_ClockConfig+0x1c4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d910      	bls.n	8008710 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ee:	4b67      	ldr	r3, [pc, #412]	; (800888c <HAL_RCC_ClockConfig+0x1c4>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f023 020f 	bic.w	r2, r3, #15
 80086f6:	4965      	ldr	r1, [pc, #404]	; (800888c <HAL_RCC_ClockConfig+0x1c4>)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086fe:	4b63      	ldr	r3, [pc, #396]	; (800888c <HAL_RCC_ClockConfig+0x1c4>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 030f 	and.w	r3, r3, #15
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	429a      	cmp	r2, r3
 800870a:	d001      	beq.n	8008710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e0b8      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0302 	and.w	r3, r3, #2
 8008718:	2b00      	cmp	r3, #0
 800871a:	d020      	beq.n	800875e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008728:	4b59      	ldr	r3, [pc, #356]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	4a58      	ldr	r2, [pc, #352]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 800872e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008732:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0308 	and.w	r3, r3, #8
 800873c:	2b00      	cmp	r3, #0
 800873e:	d005      	beq.n	800874c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008740:	4b53      	ldr	r3, [pc, #332]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	4a52      	ldr	r2, [pc, #328]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 8008746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800874a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800874c:	4b50      	ldr	r3, [pc, #320]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	494d      	ldr	r1, [pc, #308]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 800875a:	4313      	orrs	r3, r2
 800875c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d040      	beq.n	80087ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d107      	bne.n	8008782 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008772:	4b47      	ldr	r3, [pc, #284]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d115      	bne.n	80087aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e07f      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d107      	bne.n	800879a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800878a:	4b41      	ldr	r3, [pc, #260]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d109      	bne.n	80087aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e073      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800879a:	4b3d      	ldr	r3, [pc, #244]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e06b      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087aa:	4b39      	ldr	r3, [pc, #228]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	f023 0203 	bic.w	r2, r3, #3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	4936      	ldr	r1, [pc, #216]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087bc:	f7fa fe44 	bl	8003448 <HAL_GetTick>
 80087c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087c2:	e00a      	b.n	80087da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087c4:	f7fa fe40 	bl	8003448 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d901      	bls.n	80087da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e053      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087da:	4b2d      	ldr	r3, [pc, #180]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f003 020c 	and.w	r2, r3, #12
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d1eb      	bne.n	80087c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087ec:	4b27      	ldr	r3, [pc, #156]	; (800888c <HAL_RCC_ClockConfig+0x1c4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 030f 	and.w	r3, r3, #15
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d210      	bcs.n	800881c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087fa:	4b24      	ldr	r3, [pc, #144]	; (800888c <HAL_RCC_ClockConfig+0x1c4>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f023 020f 	bic.w	r2, r3, #15
 8008802:	4922      	ldr	r1, [pc, #136]	; (800888c <HAL_RCC_ClockConfig+0x1c4>)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	4313      	orrs	r3, r2
 8008808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800880a:	4b20      	ldr	r3, [pc, #128]	; (800888c <HAL_RCC_ClockConfig+0x1c4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 030f 	and.w	r3, r3, #15
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	429a      	cmp	r2, r3
 8008816:	d001      	beq.n	800881c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e032      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0304 	and.w	r3, r3, #4
 8008824:	2b00      	cmp	r3, #0
 8008826:	d008      	beq.n	800883a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008828:	4b19      	ldr	r3, [pc, #100]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	4916      	ldr	r1, [pc, #88]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 8008836:	4313      	orrs	r3, r2
 8008838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0308 	and.w	r3, r3, #8
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008846:	4b12      	ldr	r3, [pc, #72]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	490e      	ldr	r1, [pc, #56]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 8008856:	4313      	orrs	r3, r2
 8008858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800885a:	f000 f821 	bl	80088a0 <HAL_RCC_GetSysClockFreq>
 800885e:	4602      	mov	r2, r0
 8008860:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <HAL_RCC_ClockConfig+0x1c8>)
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	091b      	lsrs	r3, r3, #4
 8008866:	f003 030f 	and.w	r3, r3, #15
 800886a:	490a      	ldr	r1, [pc, #40]	; (8008894 <HAL_RCC_ClockConfig+0x1cc>)
 800886c:	5ccb      	ldrb	r3, [r1, r3]
 800886e:	fa22 f303 	lsr.w	r3, r2, r3
 8008872:	4a09      	ldr	r2, [pc, #36]	; (8008898 <HAL_RCC_ClockConfig+0x1d0>)
 8008874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008876:	4b09      	ldr	r3, [pc, #36]	; (800889c <HAL_RCC_ClockConfig+0x1d4>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f7fa fda0 	bl	80033c0 <HAL_InitTick>

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	40023c00 	.word	0x40023c00
 8008890:	40023800 	.word	0x40023800
 8008894:	0801b28c 	.word	0x0801b28c
 8008898:	20000000 	.word	0x20000000
 800889c:	20000004 	.word	0x20000004

080088a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088a4:	b094      	sub	sp, #80	; 0x50
 80088a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	647b      	str	r3, [r7, #68]	; 0x44
 80088ac:	2300      	movs	r3, #0
 80088ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088b0:	2300      	movs	r3, #0
 80088b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088b8:	4b79      	ldr	r3, [pc, #484]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f003 030c 	and.w	r3, r3, #12
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d00d      	beq.n	80088e0 <HAL_RCC_GetSysClockFreq+0x40>
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	f200 80e1 	bhi.w	8008a8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <HAL_RCC_GetSysClockFreq+0x34>
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d003      	beq.n	80088da <HAL_RCC_GetSysClockFreq+0x3a>
 80088d2:	e0db      	b.n	8008a8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80088d4:	4b73      	ldr	r3, [pc, #460]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 80088d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088d8:	e0db      	b.n	8008a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80088da:	4b73      	ldr	r3, [pc, #460]	; (8008aa8 <HAL_RCC_GetSysClockFreq+0x208>)
 80088dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088de:	e0d8      	b.n	8008a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80088e0:	4b6f      	ldr	r3, [pc, #444]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80088ea:	4b6d      	ldr	r3, [pc, #436]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d063      	beq.n	80089be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088f6:	4b6a      	ldr	r3, [pc, #424]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	099b      	lsrs	r3, r3, #6
 80088fc:	2200      	movs	r2, #0
 80088fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008900:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008908:	633b      	str	r3, [r7, #48]	; 0x30
 800890a:	2300      	movs	r3, #0
 800890c:	637b      	str	r3, [r7, #52]	; 0x34
 800890e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008912:	4622      	mov	r2, r4
 8008914:	462b      	mov	r3, r5
 8008916:	f04f 0000 	mov.w	r0, #0
 800891a:	f04f 0100 	mov.w	r1, #0
 800891e:	0159      	lsls	r1, r3, #5
 8008920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008924:	0150      	lsls	r0, r2, #5
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4621      	mov	r1, r4
 800892c:	1a51      	subs	r1, r2, r1
 800892e:	6139      	str	r1, [r7, #16]
 8008930:	4629      	mov	r1, r5
 8008932:	eb63 0301 	sbc.w	r3, r3, r1
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	f04f 0200 	mov.w	r2, #0
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008944:	4659      	mov	r1, fp
 8008946:	018b      	lsls	r3, r1, #6
 8008948:	4651      	mov	r1, sl
 800894a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800894e:	4651      	mov	r1, sl
 8008950:	018a      	lsls	r2, r1, #6
 8008952:	4651      	mov	r1, sl
 8008954:	ebb2 0801 	subs.w	r8, r2, r1
 8008958:	4659      	mov	r1, fp
 800895a:	eb63 0901 	sbc.w	r9, r3, r1
 800895e:	f04f 0200 	mov.w	r2, #0
 8008962:	f04f 0300 	mov.w	r3, #0
 8008966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800896a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800896e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008972:	4690      	mov	r8, r2
 8008974:	4699      	mov	r9, r3
 8008976:	4623      	mov	r3, r4
 8008978:	eb18 0303 	adds.w	r3, r8, r3
 800897c:	60bb      	str	r3, [r7, #8]
 800897e:	462b      	mov	r3, r5
 8008980:	eb49 0303 	adc.w	r3, r9, r3
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	f04f 0300 	mov.w	r3, #0
 800898e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008992:	4629      	mov	r1, r5
 8008994:	024b      	lsls	r3, r1, #9
 8008996:	4621      	mov	r1, r4
 8008998:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800899c:	4621      	mov	r1, r4
 800899e:	024a      	lsls	r2, r1, #9
 80089a0:	4610      	mov	r0, r2
 80089a2:	4619      	mov	r1, r3
 80089a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a6:	2200      	movs	r2, #0
 80089a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80089aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089b0:	f7f8 f8d4 	bl	8000b5c <__aeabi_uldivmod>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4613      	mov	r3, r2
 80089ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089bc:	e058      	b.n	8008a70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089be:	4b38      	ldr	r3, [pc, #224]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	099b      	lsrs	r3, r3, #6
 80089c4:	2200      	movs	r2, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	4611      	mov	r1, r2
 80089ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80089ce:	623b      	str	r3, [r7, #32]
 80089d0:	2300      	movs	r3, #0
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
 80089d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80089d8:	4642      	mov	r2, r8
 80089da:	464b      	mov	r3, r9
 80089dc:	f04f 0000 	mov.w	r0, #0
 80089e0:	f04f 0100 	mov.w	r1, #0
 80089e4:	0159      	lsls	r1, r3, #5
 80089e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089ea:	0150      	lsls	r0, r2, #5
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4641      	mov	r1, r8
 80089f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80089f6:	4649      	mov	r1, r9
 80089f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80089fc:	f04f 0200 	mov.w	r2, #0
 8008a00:	f04f 0300 	mov.w	r3, #0
 8008a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008a10:	ebb2 040a 	subs.w	r4, r2, sl
 8008a14:	eb63 050b 	sbc.w	r5, r3, fp
 8008a18:	f04f 0200 	mov.w	r2, #0
 8008a1c:	f04f 0300 	mov.w	r3, #0
 8008a20:	00eb      	lsls	r3, r5, #3
 8008a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a26:	00e2      	lsls	r2, r4, #3
 8008a28:	4614      	mov	r4, r2
 8008a2a:	461d      	mov	r5, r3
 8008a2c:	4643      	mov	r3, r8
 8008a2e:	18e3      	adds	r3, r4, r3
 8008a30:	603b      	str	r3, [r7, #0]
 8008a32:	464b      	mov	r3, r9
 8008a34:	eb45 0303 	adc.w	r3, r5, r3
 8008a38:	607b      	str	r3, [r7, #4]
 8008a3a:	f04f 0200 	mov.w	r2, #0
 8008a3e:	f04f 0300 	mov.w	r3, #0
 8008a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a46:	4629      	mov	r1, r5
 8008a48:	028b      	lsls	r3, r1, #10
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a50:	4621      	mov	r1, r4
 8008a52:	028a      	lsls	r2, r1, #10
 8008a54:	4610      	mov	r0, r2
 8008a56:	4619      	mov	r1, r3
 8008a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	61bb      	str	r3, [r7, #24]
 8008a5e:	61fa      	str	r2, [r7, #28]
 8008a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a64:	f7f8 f87a 	bl	8000b5c <__aeabi_uldivmod>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008a70:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	0c1b      	lsrs	r3, r3, #16
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8008a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a8a:	e002      	b.n	8008a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008a8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3750      	adds	r7, #80	; 0x50
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a9e:	bf00      	nop
 8008aa0:	40023800 	.word	0x40023800
 8008aa4:	00f42400 	.word	0x00f42400
 8008aa8:	007a1200 	.word	0x007a1200

08008aac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ab0:	4b03      	ldr	r3, [pc, #12]	; (8008ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	20000000 	.word	0x20000000

08008ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008ac8:	f7ff fff0 	bl	8008aac <HAL_RCC_GetHCLKFreq>
 8008acc:	4602      	mov	r2, r0
 8008ace:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	0a9b      	lsrs	r3, r3, #10
 8008ad4:	f003 0307 	and.w	r3, r3, #7
 8008ad8:	4903      	ldr	r1, [pc, #12]	; (8008ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ada:	5ccb      	ldrb	r3, [r1, r3]
 8008adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	40023800 	.word	0x40023800
 8008ae8:	0801b29c 	.word	0x0801b29c

08008aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008af0:	f7ff ffdc 	bl	8008aac <HAL_RCC_GetHCLKFreq>
 8008af4:	4602      	mov	r2, r0
 8008af6:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	0b5b      	lsrs	r3, r3, #13
 8008afc:	f003 0307 	and.w	r3, r3, #7
 8008b00:	4903      	ldr	r1, [pc, #12]	; (8008b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b02:	5ccb      	ldrb	r3, [r1, r3]
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	40023800 	.word	0x40023800
 8008b10:	0801b29c 	.word	0x0801b29c

08008b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d012      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008b3c:	4b69      	ldr	r3, [pc, #420]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	4a68      	ldr	r2, [pc, #416]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008b46:	6093      	str	r3, [r2, #8]
 8008b48:	4b66      	ldr	r3, [pc, #408]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b50:	4964      	ldr	r1, [pc, #400]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d017      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b6e:	4b5d      	ldr	r3, [pc, #372]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7c:	4959      	ldr	r1, [pc, #356]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b8c:	d101      	bne.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d017      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008baa:	4b4e      	ldr	r3, [pc, #312]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb8:	494a      	ldr	r1, [pc, #296]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bc8:	d101      	bne.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008be6:	2301      	movs	r3, #1
 8008be8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 808b 	beq.w	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008bf8:	4b3a      	ldr	r3, [pc, #232]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfc:	4a39      	ldr	r2, [pc, #228]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c02:	6413      	str	r3, [r2, #64]	; 0x40
 8008c04:	4b37      	ldr	r3, [pc, #220]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c0c:	60bb      	str	r3, [r7, #8]
 8008c0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c10:	4b35      	ldr	r3, [pc, #212]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a34      	ldr	r2, [pc, #208]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c1c:	f7fa fc14 	bl	8003448 <HAL_GetTick>
 8008c20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008c22:	e008      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c24:	f7fa fc10 	bl	8003448 <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b64      	cmp	r3, #100	; 0x64
 8008c30:	d901      	bls.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e357      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008c36:	4b2c      	ldr	r3, [pc, #176]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d0f0      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008c42:	4b28      	ldr	r3, [pc, #160]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d035      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d02e      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c60:	4b20      	ldr	r3, [pc, #128]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008c6a:	4b1e      	ldr	r3, [pc, #120]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008c76:	4b1b      	ldr	r3, [pc, #108]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008c82:	4a18      	ldr	r2, [pc, #96]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008c88:	4b16      	ldr	r3, [pc, #88]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d114      	bne.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c94:	f7fa fbd8 	bl	8003448 <HAL_GetTick>
 8008c98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c9a:	e00a      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c9c:	f7fa fbd4 	bl	8003448 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d901      	bls.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e319      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cb2:	4b0c      	ldr	r3, [pc, #48]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d0ee      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cca:	d111      	bne.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008ccc:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008cd8:	4b04      	ldr	r3, [pc, #16]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008cda:	400b      	ands	r3, r1
 8008cdc:	4901      	ldr	r1, [pc, #4]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	608b      	str	r3, [r1, #8]
 8008ce2:	e00b      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008ce4:	40023800 	.word	0x40023800
 8008ce8:	40007000 	.word	0x40007000
 8008cec:	0ffffcff 	.word	0x0ffffcff
 8008cf0:	4baa      	ldr	r3, [pc, #680]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	4aa9      	ldr	r2, [pc, #676]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cf6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008cfa:	6093      	str	r3, [r2, #8]
 8008cfc:	4ba7      	ldr	r3, [pc, #668]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d08:	49a4      	ldr	r1, [pc, #656]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0310 	and.w	r3, r3, #16
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d010      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d1a:	4ba0      	ldr	r3, [pc, #640]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d20:	4a9e      	ldr	r2, [pc, #632]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008d2a:	4b9c      	ldr	r3, [pc, #624]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d34:	4999      	ldr	r1, [pc, #612]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00a      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d48:	4b94      	ldr	r3, [pc, #592]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d56:	4991      	ldr	r1, [pc, #580]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00a      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d6a:	4b8c      	ldr	r3, [pc, #560]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d78:	4988      	ldr	r1, [pc, #544]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00a      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d8c:	4b83      	ldr	r3, [pc, #524]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d9a:	4980      	ldr	r1, [pc, #512]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00a      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008dae:	4b7b      	ldr	r3, [pc, #492]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dbc:	4977      	ldr	r1, [pc, #476]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00a      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008dd0:	4b72      	ldr	r3, [pc, #456]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd6:	f023 0203 	bic.w	r2, r3, #3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dde:	496f      	ldr	r1, [pc, #444]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00a      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008df2:	4b6a      	ldr	r3, [pc, #424]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df8:	f023 020c 	bic.w	r2, r3, #12
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e00:	4966      	ldr	r1, [pc, #408]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00a      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e14:	4b61      	ldr	r3, [pc, #388]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e22:	495e      	ldr	r1, [pc, #376]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00a      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e36:	4b59      	ldr	r3, [pc, #356]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e44:	4955      	ldr	r1, [pc, #340]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00a      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008e58:	4b50      	ldr	r3, [pc, #320]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e66:	494d      	ldr	r1, [pc, #308]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00a      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008e7a:	4b48      	ldr	r3, [pc, #288]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e88:	4944      	ldr	r1, [pc, #272]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00a      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008e9c:	4b3f      	ldr	r3, [pc, #252]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eaa:	493c      	ldr	r1, [pc, #240]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00a      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008ebe:	4b37      	ldr	r3, [pc, #220]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ecc:	4933      	ldr	r1, [pc, #204]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00a      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ee0:	4b2e      	ldr	r3, [pc, #184]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eee:	492b      	ldr	r1, [pc, #172]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d011      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008f02:	4b26      	ldr	r3, [pc, #152]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f10:	4922      	ldr	r1, [pc, #136]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f20:	d101      	bne.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008f22:	2301      	movs	r3, #1
 8008f24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0308 	and.w	r3, r3, #8
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008f32:	2301      	movs	r3, #1
 8008f34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00a      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f42:	4b16      	ldr	r3, [pc, #88]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f50:	4912      	ldr	r1, [pc, #72]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008f64:	4b0d      	ldr	r3, [pc, #52]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f74:	4909      	ldr	r1, [pc, #36]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d006      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 80d9 	beq.w	8009142 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008f90:	4b02      	ldr	r3, [pc, #8]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a01      	ldr	r2, [pc, #4]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f9a:	e001      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008f9c:	40023800 	.word	0x40023800
 8008fa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fa2:	f7fa fa51 	bl	8003448 <HAL_GetTick>
 8008fa6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008fa8:	e008      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008faa:	f7fa fa4d 	bl	8003448 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	2b64      	cmp	r3, #100	; 0x64
 8008fb6:	d901      	bls.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e194      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008fbc:	4b6c      	ldr	r3, [pc, #432]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1f0      	bne.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d021      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d11d      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008fdc:	4b64      	ldr	r3, [pc, #400]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fe2:	0c1b      	lsrs	r3, r3, #16
 8008fe4:	f003 0303 	and.w	r3, r3, #3
 8008fe8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008fea:	4b61      	ldr	r3, [pc, #388]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ff0:	0e1b      	lsrs	r3, r3, #24
 8008ff2:	f003 030f 	and.w	r3, r3, #15
 8008ff6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	019a      	lsls	r2, r3, #6
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	041b      	lsls	r3, r3, #16
 8009002:	431a      	orrs	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	061b      	lsls	r3, r3, #24
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	071b      	lsls	r3, r3, #28
 8009010:	4957      	ldr	r1, [pc, #348]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009012:	4313      	orrs	r3, r2
 8009014:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d004      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800902c:	d00a      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009036:	2b00      	cmp	r3, #0
 8009038:	d02e      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009042:	d129      	bne.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009044:	4b4a      	ldr	r3, [pc, #296]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800904a:	0c1b      	lsrs	r3, r3, #16
 800904c:	f003 0303 	and.w	r3, r3, #3
 8009050:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009052:	4b47      	ldr	r3, [pc, #284]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009058:	0f1b      	lsrs	r3, r3, #28
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	019a      	lsls	r2, r3, #6
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	041b      	lsls	r3, r3, #16
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	061b      	lsls	r3, r3, #24
 8009072:	431a      	orrs	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	071b      	lsls	r3, r3, #28
 8009078:	493d      	ldr	r1, [pc, #244]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800907a:	4313      	orrs	r3, r2
 800907c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009080:	4b3b      	ldr	r3, [pc, #236]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009086:	f023 021f 	bic.w	r2, r3, #31
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	3b01      	subs	r3, #1
 8009090:	4937      	ldr	r1, [pc, #220]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009092:	4313      	orrs	r3, r2
 8009094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01d      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80090a4:	4b32      	ldr	r3, [pc, #200]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090aa:	0e1b      	lsrs	r3, r3, #24
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80090b2:	4b2f      	ldr	r3, [pc, #188]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090b8:	0f1b      	lsrs	r3, r3, #28
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	019a      	lsls	r2, r3, #6
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	041b      	lsls	r3, r3, #16
 80090cc:	431a      	orrs	r2, r3
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	061b      	lsls	r3, r3, #24
 80090d2:	431a      	orrs	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	071b      	lsls	r3, r3, #28
 80090d8:	4925      	ldr	r1, [pc, #148]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d011      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	019a      	lsls	r2, r3, #6
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	041b      	lsls	r3, r3, #16
 80090f8:	431a      	orrs	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	061b      	lsls	r3, r3, #24
 8009100:	431a      	orrs	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	071b      	lsls	r3, r3, #28
 8009108:	4919      	ldr	r1, [pc, #100]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800910a:	4313      	orrs	r3, r2
 800910c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009110:	4b17      	ldr	r3, [pc, #92]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a16      	ldr	r2, [pc, #88]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009116:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800911a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800911c:	f7fa f994 	bl	8003448 <HAL_GetTick>
 8009120:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009122:	e008      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009124:	f7fa f990 	bl	8003448 <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	2b64      	cmp	r3, #100	; 0x64
 8009130:	d901      	bls.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e0d7      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009136:	4b0e      	ldr	r3, [pc, #56]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d0f0      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	2b01      	cmp	r3, #1
 8009146:	f040 80cd 	bne.w	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800914a:	4b09      	ldr	r3, [pc, #36]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a08      	ldr	r2, [pc, #32]	; (8009170 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009156:	f7fa f977 	bl	8003448 <HAL_GetTick>
 800915a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800915c:	e00a      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800915e:	f7fa f973 	bl	8003448 <HAL_GetTick>
 8009162:	4602      	mov	r2, r0
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	2b64      	cmp	r3, #100	; 0x64
 800916a:	d903      	bls.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e0ba      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009170:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009174:	4b5e      	ldr	r3, [pc, #376]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800917c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009180:	d0ed      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009192:	2b00      	cmp	r3, #0
 8009194:	d009      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d02e      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d12a      	bne.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80091aa:	4b51      	ldr	r3, [pc, #324]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b0:	0c1b      	lsrs	r3, r3, #16
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80091b8:	4b4d      	ldr	r3, [pc, #308]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091be:	0f1b      	lsrs	r3, r3, #28
 80091c0:	f003 0307 	and.w	r3, r3, #7
 80091c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	019a      	lsls	r2, r3, #6
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	041b      	lsls	r3, r3, #16
 80091d0:	431a      	orrs	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	061b      	lsls	r3, r3, #24
 80091d8:	431a      	orrs	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	071b      	lsls	r3, r3, #28
 80091de:	4944      	ldr	r1, [pc, #272]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80091e6:	4b42      	ldr	r3, [pc, #264]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f4:	3b01      	subs	r3, #1
 80091f6:	021b      	lsls	r3, r3, #8
 80091f8:	493d      	ldr	r1, [pc, #244]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d022      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009214:	d11d      	bne.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009216:	4b36      	ldr	r3, [pc, #216]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800921c:	0e1b      	lsrs	r3, r3, #24
 800921e:	f003 030f 	and.w	r3, r3, #15
 8009222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009224:	4b32      	ldr	r3, [pc, #200]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800922a:	0f1b      	lsrs	r3, r3, #28
 800922c:	f003 0307 	and.w	r3, r3, #7
 8009230:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	019a      	lsls	r2, r3, #6
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a1b      	ldr	r3, [r3, #32]
 800923c:	041b      	lsls	r3, r3, #16
 800923e:	431a      	orrs	r2, r3
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	061b      	lsls	r3, r3, #24
 8009244:	431a      	orrs	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	071b      	lsls	r3, r3, #28
 800924a:	4929      	ldr	r1, [pc, #164]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800924c:	4313      	orrs	r3, r2
 800924e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0308 	and.w	r3, r3, #8
 800925a:	2b00      	cmp	r3, #0
 800925c:	d028      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800925e:	4b24      	ldr	r3, [pc, #144]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009264:	0e1b      	lsrs	r3, r3, #24
 8009266:	f003 030f 	and.w	r3, r3, #15
 800926a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800926c:	4b20      	ldr	r3, [pc, #128]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800926e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009272:	0c1b      	lsrs	r3, r3, #16
 8009274:	f003 0303 	and.w	r3, r3, #3
 8009278:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	019a      	lsls	r2, r3, #6
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	041b      	lsls	r3, r3, #16
 8009284:	431a      	orrs	r2, r3
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	061b      	lsls	r3, r3, #24
 800928a:	431a      	orrs	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	071b      	lsls	r3, r3, #28
 8009292:	4917      	ldr	r1, [pc, #92]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009294:	4313      	orrs	r3, r2
 8009296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800929a:	4b15      	ldr	r3, [pc, #84]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800929c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a8:	4911      	ldr	r1, [pc, #68]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80092b0:	4b0f      	ldr	r3, [pc, #60]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a0e      	ldr	r2, [pc, #56]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092bc:	f7fa f8c4 	bl	8003448 <HAL_GetTick>
 80092c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80092c2:	e008      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80092c4:	f7fa f8c0 	bl	8003448 <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	2b64      	cmp	r3, #100	; 0x64
 80092d0:	d901      	bls.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e007      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80092d6:	4b06      	ldr	r3, [pc, #24]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e2:	d1ef      	bne.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3720      	adds	r7, #32
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	40023800 	.word	0x40023800

080092f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e09d      	b.n	8009442 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930a:	2b00      	cmp	r3, #0
 800930c:	d108      	bne.n	8009320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009316:	d009      	beq.n	800932c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	61da      	str	r2, [r3, #28]
 800931e:	e005      	b.n	800932c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d106      	bne.n	800934c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7f8 faec 	bl	8001924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2202      	movs	r2, #2
 8009350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009362:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800936c:	d902      	bls.n	8009374 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800936e:	2300      	movs	r3, #0
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	e002      	b.n	800937a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009378:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009382:	d007      	beq.n	8009394 <HAL_SPI_Init+0xa0>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800938c:	d002      	beq.n	8009394 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80093a4:	431a      	orrs	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	431a      	orrs	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	431a      	orrs	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093cc:	431a      	orrs	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d6:	ea42 0103 	orr.w	r1, r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	0c1b      	lsrs	r3, r3, #16
 80093f0:	f003 0204 	and.w	r2, r3, #4
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f8:	f003 0310 	and.w	r3, r3, #16
 80093fc:	431a      	orrs	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009402:	f003 0308 	and.w	r3, r3, #8
 8009406:	431a      	orrs	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009410:	ea42 0103 	orr.w	r1, r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	430a      	orrs	r2, r1
 8009420:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69da      	ldr	r2, [r3, #28]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009430:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
 8009458:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009464:	2b01      	cmp	r3, #1
 8009466:	d101      	bne.n	800946c <HAL_SPI_TransmitReceive_DMA+0x20>
 8009468:	2302      	movs	r3, #2
 800946a:	e16c      	b.n	8009746 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800947a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009482:	7dbb      	ldrb	r3, [r7, #22]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d00d      	beq.n	80094a4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800948e:	d106      	bne.n	800949e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d102      	bne.n	800949e <HAL_SPI_TransmitReceive_DMA+0x52>
 8009498:	7dbb      	ldrb	r3, [r7, #22]
 800949a:	2b04      	cmp	r3, #4
 800949c:	d002      	beq.n	80094a4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800949e:	2302      	movs	r3, #2
 80094a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094a2:	e14b      	b.n	800973c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d005      	beq.n	80094b6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80094b0:	887b      	ldrh	r3, [r7, #2]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d102      	bne.n	80094bc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094ba:	e13f      	b.n	800973c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	2b04      	cmp	r3, #4
 80094c6:	d003      	beq.n	80094d0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2205      	movs	r2, #5
 80094cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	887a      	ldrh	r2, [r7, #2]
 80094e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	887a      	ldrh	r2, [r7, #2]
 80094e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	887a      	ldrh	r2, [r7, #2]
 80094f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	887a      	ldrh	r2, [r7, #2]
 80094fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8009518:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009522:	d908      	bls.n	8009536 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	685a      	ldr	r2, [r3, #4]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009532:	605a      	str	r2, [r3, #4]
 8009534:	e06f      	b.n	8009616 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009544:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009550:	d126      	bne.n	80095a0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10f      	bne.n	800957e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800956c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009572:	b29b      	uxth	r3, r3
 8009574:	085b      	lsrs	r3, r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800957c:	e010      	b.n	80095a0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685a      	ldr	r2, [r3, #4]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800958c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009592:	b29b      	uxth	r3, r3
 8009594:	085b      	lsrs	r3, r3, #1
 8009596:	b29b      	uxth	r3, r3
 8009598:	3301      	adds	r3, #1
 800959a:	b29a      	uxth	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095aa:	d134      	bne.n	8009616 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80095ba:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d111      	bne.n	80095f0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095da:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	085b      	lsrs	r3, r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80095ee:	e012      	b.n	8009616 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095fe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009606:	b29b      	uxth	r3, r3
 8009608:	085b      	lsrs	r3, r3, #1
 800960a:	b29b      	uxth	r3, r3
 800960c:	3301      	adds	r3, #1
 800960e:	b29a      	uxth	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b04      	cmp	r3, #4
 8009620:	d108      	bne.n	8009634 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009626:	4a4a      	ldr	r2, [pc, #296]	; (8009750 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8009628:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800962e:	4a49      	ldr	r2, [pc, #292]	; (8009754 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8009630:	63da      	str	r2, [r3, #60]	; 0x3c
 8009632:	e007      	b.n	8009644 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009638:	4a47      	ldr	r2, [pc, #284]	; (8009758 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800963a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009640:	4a46      	ldr	r2, [pc, #280]	; (800975c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8009642:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009648:	4a45      	ldr	r2, [pc, #276]	; (8009760 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800964a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009650:	2200      	movs	r2, #0
 8009652:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	330c      	adds	r3, #12
 800965e:	4619      	mov	r1, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009664:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800966c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800966e:	f7fa fd83 	bl	8004178 <HAL_DMA_Start_IT>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00c      	beq.n	8009692 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800967c:	f043 0210 	orr.w	r2, r3, #16
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009690:	e054      	b.n	800973c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f042 0201 	orr.w	r2, r2, #1
 80096a0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a6:	2200      	movs	r2, #0
 80096a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ae:	2200      	movs	r2, #0
 80096b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b6:	2200      	movs	r2, #0
 80096b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096be:	2200      	movs	r2, #0
 80096c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ca:	4619      	mov	r1, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	330c      	adds	r3, #12
 80096d2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096d8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80096da:	f7fa fd4d 	bl	8004178 <HAL_DMA_Start_IT>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00c      	beq.n	80096fe <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096e8:	f043 0210 	orr.w	r2, r3, #16
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80096fc:	e01e      	b.n	800973c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009708:	2b40      	cmp	r3, #64	; 0x40
 800970a:	d007      	beq.n	800971c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800971a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f042 0220 	orr.w	r2, r2, #32
 800972a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f042 0202 	orr.w	r2, r2, #2
 800973a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009744:	7dfb      	ldrb	r3, [r7, #23]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	08009af1 	.word	0x08009af1
 8009754:	080099b5 	.word	0x080099b5
 8009758:	08009b0d 	.word	0x08009b0d
 800975c:	08009a5f 	.word	0x08009a5f
 8009760:	08009b29 	.word	0x08009b29

08009764 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	099b      	lsrs	r3, r3, #6
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10f      	bne.n	80097a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00a      	beq.n	80097a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	099b      	lsrs	r3, r3, #6
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d004      	beq.n	80097a8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
    return;
 80097a6:	e0d7      	b.n	8009958 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	085b      	lsrs	r3, r3, #1
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00a      	beq.n	80097ca <HAL_SPI_IRQHandler+0x66>
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	09db      	lsrs	r3, r3, #7
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d004      	beq.n	80097ca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	4798      	blx	r3
    return;
 80097c8:	e0c6      	b.n	8009958 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	095b      	lsrs	r3, r3, #5
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10c      	bne.n	80097f0 <HAL_SPI_IRQHandler+0x8c>
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	099b      	lsrs	r3, r3, #6
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d106      	bne.n	80097f0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	0a1b      	lsrs	r3, r3, #8
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 80b4 	beq.w	8009958 <HAL_SPI_IRQHandler+0x1f4>
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	095b      	lsrs	r3, r3, #5
 80097f4:	f003 0301 	and.w	r3, r3, #1
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80ad 	beq.w	8009958 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	099b      	lsrs	r3, r3, #6
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	2b00      	cmp	r3, #0
 8009808:	d023      	beq.n	8009852 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b03      	cmp	r3, #3
 8009814:	d011      	beq.n	800983a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800981a:	f043 0204 	orr.w	r2, r3, #4
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009822:	2300      	movs	r3, #0
 8009824:	617b      	str	r3, [r7, #20]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	617b      	str	r3, [r7, #20]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	617b      	str	r3, [r7, #20]
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	e00b      	b.n	8009852 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800983a:	2300      	movs	r3, #0
 800983c:	613b      	str	r3, [r7, #16]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	613b      	str	r3, [r7, #16]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	613b      	str	r3, [r7, #16]
 800984e:	693b      	ldr	r3, [r7, #16]
        return;
 8009850:	e082      	b.n	8009958 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	095b      	lsrs	r3, r3, #5
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	d014      	beq.n	8009888 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009862:	f043 0201 	orr.w	r2, r3, #1
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	60fb      	str	r3, [r7, #12]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	0a1b      	lsrs	r3, r3, #8
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00c      	beq.n	80098ae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009898:	f043 0208 	orr.w	r2, r3, #8
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80098a0:	2300      	movs	r3, #0
 80098a2:	60bb      	str	r3, [r7, #8]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	60bb      	str	r3, [r7, #8]
 80098ac:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d04f      	beq.n	8009956 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098c4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	f003 0302 	and.w	r3, r3, #2
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d104      	bne.n	80098e2 <HAL_SPI_IRQHandler+0x17e>
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d034      	beq.n	800994c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f022 0203 	bic.w	r2, r2, #3
 80098f0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d011      	beq.n	800991e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098fe:	4a18      	ldr	r2, [pc, #96]	; (8009960 <HAL_SPI_IRQHandler+0x1fc>)
 8009900:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009906:	4618      	mov	r0, r3
 8009908:	f7fa fd06 	bl	8004318 <HAL_DMA_Abort_IT>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d005      	beq.n	800991e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009916:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009922:	2b00      	cmp	r3, #0
 8009924:	d016      	beq.n	8009954 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800992a:	4a0d      	ldr	r2, [pc, #52]	; (8009960 <HAL_SPI_IRQHandler+0x1fc>)
 800992c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009932:	4618      	mov	r0, r3
 8009934:	f7fa fcf0 	bl	8004318 <HAL_DMA_Abort_IT>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00a      	beq.n	8009954 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009942:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800994a:	e003      	b.n	8009954 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f827 	bl	80099a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009952:	e000      	b.n	8009956 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009954:	bf00      	nop
    return;
 8009956:	bf00      	nop
  }
}
 8009958:	3720      	adds	r7, #32
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	08009b69 	.word	0x08009b69

08009964 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099c2:	f7f9 fd41 	bl	8003448 <HAL_GetTick>
 80099c6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099d6:	d03c      	beq.n	8009a52 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f022 0220 	bic.w	r2, r2, #32
 80099e6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10d      	bne.n	8009a0c <SPI_DMAReceiveCplt+0x58>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099f8:	d108      	bne.n	8009a0c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f022 0203 	bic.w	r2, r2, #3
 8009a08:	605a      	str	r2, [r3, #4]
 8009a0a:	e007      	b.n	8009a1c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 0201 	bic.w	r2, r2, #1
 8009a1a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	2164      	movs	r1, #100	; 0x64
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 f9d5 	bl	8009dd0 <SPI_EndRxTransaction>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d002      	beq.n	8009a32 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2220      	movs	r2, #32
 8009a30:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d003      	beq.n	8009a52 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f7ff ffa8 	bl	80099a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009a50:	e002      	b.n	8009a58 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f7ff ff86 	bl	8009964 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b084      	sub	sp, #16
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a6c:	f7f9 fcec 	bl	8003448 <HAL_GetTick>
 8009a70:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a80:	d030      	beq.n	8009ae4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	685a      	ldr	r2, [r3, #4]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0220 	bic.w	r2, r2, #32
 8009a90:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	2164      	movs	r1, #100	; 0x64
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f000 fa16 	bl	8009ec8 <SPI_EndRxTxTransaction>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d005      	beq.n	8009aae <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aa6:	f043 0220 	orr.w	r2, r3, #32
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 0203 	bic.w	r2, r2, #3
 8009abc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d003      	beq.n	8009ae4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f7ff ff5f 	bl	80099a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009ae2:	e002      	b.n	8009aea <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7f9 f913 	bl	8002d10 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f7ff ff3a 	bl	8009978 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b04:	bf00      	nop
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f7ff ff36 	bl	800998c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b20:	bf00      	nop
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f022 0203 	bic.w	r2, r2, #3
 8009b44:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b4a:	f043 0210 	orr.w	r2, r3, #16
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f7ff ff20 	bl	80099a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b60:	bf00      	nop
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7ff ff0b 	bl	80099a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b8a:	bf00      	nop
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b088      	sub	sp, #32
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	603b      	str	r3, [r7, #0]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009ba4:	f7f9 fc50 	bl	8003448 <HAL_GetTick>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bac:	1a9b      	subs	r3, r3, r2
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009bb4:	f7f9 fc48 	bl	8003448 <HAL_GetTick>
 8009bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009bba:	4b39      	ldr	r3, [pc, #228]	; (8009ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	015b      	lsls	r3, r3, #5
 8009bc0:	0d1b      	lsrs	r3, r3, #20
 8009bc2:	69fa      	ldr	r2, [r7, #28]
 8009bc4:	fb02 f303 	mul.w	r3, r2, r3
 8009bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bca:	e054      	b.n	8009c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bd2:	d050      	beq.n	8009c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009bd4:	f7f9 fc38 	bl	8003448 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	69fa      	ldr	r2, [r7, #28]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d902      	bls.n	8009bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d13d      	bne.n	8009c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c02:	d111      	bne.n	8009c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c0c:	d004      	beq.n	8009c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c16:	d107      	bne.n	8009c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c30:	d10f      	bne.n	8009c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e017      	b.n	8009c96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	3b01      	subs	r3, #1
 8009c74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689a      	ldr	r2, [r3, #8]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	4013      	ands	r3, r2
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	bf0c      	ite	eq
 8009c86:	2301      	moveq	r3, #1
 8009c88:	2300      	movne	r3, #0
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	79fb      	ldrb	r3, [r7, #7]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d19b      	bne.n	8009bcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3720      	adds	r7, #32
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20000000 	.word	0x20000000

08009ca4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b08a      	sub	sp, #40	; 0x28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009cb6:	f7f9 fbc7 	bl	8003448 <HAL_GetTick>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	1a9b      	subs	r3, r3, r2
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009cc6:	f7f9 fbbf 	bl	8003448 <HAL_GetTick>
 8009cca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	330c      	adds	r3, #12
 8009cd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009cd4:	4b3d      	ldr	r3, [pc, #244]	; (8009dcc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	00da      	lsls	r2, r3, #3
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	0d1b      	lsrs	r3, r3, #20
 8009ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce6:	fb02 f303 	mul.w	r3, r2, r3
 8009cea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009cec:	e060      	b.n	8009db0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009cf4:	d107      	bne.n	8009d06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d104      	bne.n	8009d06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d0c:	d050      	beq.n	8009db0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d0e:	f7f9 fb9b 	bl	8003448 <HAL_GetTick>
 8009d12:	4602      	mov	r2, r0
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d902      	bls.n	8009d24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d13d      	bne.n	8009da0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d3c:	d111      	bne.n	8009d62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d46:	d004      	beq.n	8009d52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d50:	d107      	bne.n	8009d62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d6a:	d10f      	bne.n	8009d8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e010      	b.n	8009dc2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009da6:	2300      	movs	r3, #0
 8009da8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689a      	ldr	r2, [r3, #8]
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	4013      	ands	r3, r2
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d196      	bne.n	8009cee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3728      	adds	r7, #40	; 0x28
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000000 	.word	0x20000000

08009dd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af02      	add	r7, sp, #8
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009de4:	d111      	bne.n	8009e0a <SPI_EndRxTransaction+0x3a>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dee:	d004      	beq.n	8009dfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009df8:	d107      	bne.n	8009e0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e12:	d112      	bne.n	8009e3a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2180      	movs	r1, #128	; 0x80
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f7ff feb8 	bl	8009b94 <SPI_WaitFlagStateUntilTimeout>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d021      	beq.n	8009e6e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e2e:	f043 0220 	orr.w	r2, r3, #32
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e03d      	b.n	8009eb6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009e3a:	4b21      	ldr	r3, [pc, #132]	; (8009ec0 <SPI_EndRxTransaction+0xf0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a21      	ldr	r2, [pc, #132]	; (8009ec4 <SPI_EndRxTransaction+0xf4>)
 8009e40:	fba2 2303 	umull	r2, r3, r2, r3
 8009e44:	0d5b      	lsrs	r3, r3, #21
 8009e46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e4a:	fb02 f303 	mul.w	r3, r2, r3
 8009e4e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00a      	beq.n	8009e6c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e66:	2b80      	cmp	r3, #128	; 0x80
 8009e68:	d0f2      	beq.n	8009e50 <SPI_EndRxTransaction+0x80>
 8009e6a:	e000      	b.n	8009e6e <SPI_EndRxTransaction+0x9e>
        break;
 8009e6c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e76:	d11d      	bne.n	8009eb4 <SPI_EndRxTransaction+0xe4>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e80:	d004      	beq.n	8009e8c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e8a:	d113      	bne.n	8009eb4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7ff ff03 	bl	8009ca4 <SPI_WaitFifoStateUntilTimeout>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d007      	beq.n	8009eb4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ea8:	f043 0220 	orr.w	r2, r3, #32
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e000      	b.n	8009eb6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20000000 	.word	0x20000000
 8009ec4:	165e9f81 	.word	0x165e9f81

08009ec8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af02      	add	r7, sp, #8
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f7ff fedf 	bl	8009ca4 <SPI_WaitFifoStateUntilTimeout>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d007      	beq.n	8009efc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ef0:	f043 0220 	orr.w	r2, r3, #32
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e046      	b.n	8009f8a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009efc:	4b25      	ldr	r3, [pc, #148]	; (8009f94 <SPI_EndRxTxTransaction+0xcc>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a25      	ldr	r2, [pc, #148]	; (8009f98 <SPI_EndRxTxTransaction+0xd0>)
 8009f02:	fba2 2303 	umull	r2, r3, r2, r3
 8009f06:	0d5b      	lsrs	r3, r3, #21
 8009f08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f0c:	fb02 f303 	mul.w	r3, r2, r3
 8009f10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f1a:	d112      	bne.n	8009f42 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2200      	movs	r2, #0
 8009f24:	2180      	movs	r1, #128	; 0x80
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f7ff fe34 	bl	8009b94 <SPI_WaitFlagStateUntilTimeout>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d016      	beq.n	8009f60 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f36:	f043 0220 	orr.w	r2, r3, #32
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e023      	b.n	8009f8a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00a      	beq.n	8009f5e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f58:	2b80      	cmp	r3, #128	; 0x80
 8009f5a:	d0f2      	beq.n	8009f42 <SPI_EndRxTxTransaction+0x7a>
 8009f5c:	e000      	b.n	8009f60 <SPI_EndRxTxTransaction+0x98>
        break;
 8009f5e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f7ff fe99 	bl	8009ca4 <SPI_WaitFifoStateUntilTimeout>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d007      	beq.n	8009f88 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f7c:	f043 0220 	orr.w	r2, r3, #32
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e000      	b.n	8009f8a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3718      	adds	r7, #24
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	20000000 	.word	0x20000000
 8009f98:	165e9f81 	.word	0x165e9f81

08009f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e049      	b.n	800a042 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d106      	bne.n	8009fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7f8 f85e 	bl	8002084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3304      	adds	r3, #4
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4610      	mov	r0, r2
 8009fdc:	f000 faee 	bl	800a5bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
	...

0800a04c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d001      	beq.n	800a064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	e054      	b.n	800a10e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2202      	movs	r2, #2
 800a068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68da      	ldr	r2, [r3, #12]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f042 0201 	orr.w	r2, r2, #1
 800a07a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a26      	ldr	r2, [pc, #152]	; (800a11c <HAL_TIM_Base_Start_IT+0xd0>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d022      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a08e:	d01d      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a22      	ldr	r2, [pc, #136]	; (800a120 <HAL_TIM_Base_Start_IT+0xd4>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d018      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a21      	ldr	r2, [pc, #132]	; (800a124 <HAL_TIM_Base_Start_IT+0xd8>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d013      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a1f      	ldr	r2, [pc, #124]	; (800a128 <HAL_TIM_Base_Start_IT+0xdc>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d00e      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a1e      	ldr	r2, [pc, #120]	; (800a12c <HAL_TIM_Base_Start_IT+0xe0>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d009      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a1c      	ldr	r2, [pc, #112]	; (800a130 <HAL_TIM_Base_Start_IT+0xe4>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d004      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a1b      	ldr	r2, [pc, #108]	; (800a134 <HAL_TIM_Base_Start_IT+0xe8>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d115      	bne.n	800a0f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689a      	ldr	r2, [r3, #8]
 800a0d2:	4b19      	ldr	r3, [pc, #100]	; (800a138 <HAL_TIM_Base_Start_IT+0xec>)
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b06      	cmp	r3, #6
 800a0dc:	d015      	beq.n	800a10a <HAL_TIM_Base_Start_IT+0xbe>
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0e4:	d011      	beq.n	800a10a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f042 0201 	orr.w	r2, r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0f6:	e008      	b.n	800a10a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f042 0201 	orr.w	r2, r2, #1
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	e000      	b.n	800a10c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a10a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	40010000 	.word	0x40010000
 800a120:	40000400 	.word	0x40000400
 800a124:	40000800 	.word	0x40000800
 800a128:	40000c00 	.word	0x40000c00
 800a12c:	40010400 	.word	0x40010400
 800a130:	40014000 	.word	0x40014000
 800a134:	40001800 	.word	0x40001800
 800a138:	00010007 	.word	0x00010007

0800a13c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68da      	ldr	r2, [r3, #12]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 0201 	bic.w	r2, r2, #1
 800a152:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6a1a      	ldr	r2, [r3, #32]
 800a15a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a15e:	4013      	ands	r3, r2
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10f      	bne.n	800a184 <HAL_TIM_Base_Stop_IT+0x48>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6a1a      	ldr	r2, [r3, #32]
 800a16a:	f240 4344 	movw	r3, #1092	; 0x444
 800a16e:	4013      	ands	r3, r2
 800a170:	2b00      	cmp	r3, #0
 800a172:	d107      	bne.n	800a184 <HAL_TIM_Base_Stop_IT+0x48>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f022 0201 	bic.w	r2, r2, #1
 800a182:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	370c      	adds	r7, #12
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b082      	sub	sp, #8
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	f003 0302 	and.w	r3, r3, #2
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d122      	bne.n	800a1f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	f003 0302 	and.w	r3, r3, #2
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d11b      	bne.n	800a1f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f06f 0202 	mvn.w	r2, #2
 800a1c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	f003 0303 	and.w	r3, r3, #3
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d003      	beq.n	800a1e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f9cf 	bl	800a580 <HAL_TIM_IC_CaptureCallback>
 800a1e2:	e005      	b.n	800a1f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f9c1 	bl	800a56c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f9d2 	bl	800a594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	f003 0304 	and.w	r3, r3, #4
 800a200:	2b04      	cmp	r3, #4
 800a202:	d122      	bne.n	800a24a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	f003 0304 	and.w	r3, r3, #4
 800a20e:	2b04      	cmp	r3, #4
 800a210:	d11b      	bne.n	800a24a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f06f 0204 	mvn.w	r2, #4
 800a21a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2202      	movs	r2, #2
 800a220:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f9a5 	bl	800a580 <HAL_TIM_IC_CaptureCallback>
 800a236:	e005      	b.n	800a244 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f997 	bl	800a56c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f9a8 	bl	800a594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	f003 0308 	and.w	r3, r3, #8
 800a254:	2b08      	cmp	r3, #8
 800a256:	d122      	bne.n	800a29e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	f003 0308 	and.w	r3, r3, #8
 800a262:	2b08      	cmp	r3, #8
 800a264:	d11b      	bne.n	800a29e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f06f 0208 	mvn.w	r2, #8
 800a26e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2204      	movs	r2, #4
 800a274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	f003 0303 	and.w	r3, r3, #3
 800a280:	2b00      	cmp	r3, #0
 800a282:	d003      	beq.n	800a28c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f97b 	bl	800a580 <HAL_TIM_IC_CaptureCallback>
 800a28a:	e005      	b.n	800a298 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f96d 	bl	800a56c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f97e 	bl	800a594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	f003 0310 	and.w	r3, r3, #16
 800a2a8:	2b10      	cmp	r3, #16
 800a2aa:	d122      	bne.n	800a2f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f003 0310 	and.w	r3, r3, #16
 800a2b6:	2b10      	cmp	r3, #16
 800a2b8:	d11b      	bne.n	800a2f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f06f 0210 	mvn.w	r2, #16
 800a2c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2208      	movs	r2, #8
 800a2c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d003      	beq.n	800a2e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f951 	bl	800a580 <HAL_TIM_IC_CaptureCallback>
 800a2de:	e005      	b.n	800a2ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f943 	bl	800a56c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f954 	bl	800a594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d10e      	bne.n	800a31e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d107      	bne.n	800a31e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f06f 0201 	mvn.w	r2, #1
 800a316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f7f8 fd35 	bl	8002d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a328:	2b80      	cmp	r3, #128	; 0x80
 800a32a:	d10e      	bne.n	800a34a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a336:	2b80      	cmp	r3, #128	; 0x80
 800a338:	d107      	bne.n	800a34a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fb0b 	bl	800a960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a358:	d10e      	bne.n	800a378 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a364:	2b80      	cmp	r3, #128	; 0x80
 800a366:	d107      	bne.n	800a378 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fafe 	bl	800a974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a382:	2b40      	cmp	r3, #64	; 0x40
 800a384:	d10e      	bne.n	800a3a4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a390:	2b40      	cmp	r3, #64	; 0x40
 800a392:	d107      	bne.n	800a3a4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a39c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f902 	bl	800a5a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	f003 0320 	and.w	r3, r3, #32
 800a3ae:	2b20      	cmp	r3, #32
 800a3b0:	d10e      	bne.n	800a3d0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	f003 0320 	and.w	r3, r3, #32
 800a3bc:	2b20      	cmp	r3, #32
 800a3be:	d107      	bne.n	800a3d0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f06f 0220 	mvn.w	r2, #32
 800a3c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fabe 	bl	800a94c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3d0:	bf00      	nop
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d101      	bne.n	800a3f4 <HAL_TIM_ConfigClockSource+0x1c>
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	e0b4      	b.n	800a55e <HAL_TIM_ConfigClockSource+0x186>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2202      	movs	r2, #2
 800a400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	4b56      	ldr	r3, [pc, #344]	; (800a568 <HAL_TIM_ConfigClockSource+0x190>)
 800a410:	4013      	ands	r3, r2
 800a412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a41a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a42c:	d03e      	beq.n	800a4ac <HAL_TIM_ConfigClockSource+0xd4>
 800a42e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a432:	f200 8087 	bhi.w	800a544 <HAL_TIM_ConfigClockSource+0x16c>
 800a436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a43a:	f000 8086 	beq.w	800a54a <HAL_TIM_ConfigClockSource+0x172>
 800a43e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a442:	d87f      	bhi.n	800a544 <HAL_TIM_ConfigClockSource+0x16c>
 800a444:	2b70      	cmp	r3, #112	; 0x70
 800a446:	d01a      	beq.n	800a47e <HAL_TIM_ConfigClockSource+0xa6>
 800a448:	2b70      	cmp	r3, #112	; 0x70
 800a44a:	d87b      	bhi.n	800a544 <HAL_TIM_ConfigClockSource+0x16c>
 800a44c:	2b60      	cmp	r3, #96	; 0x60
 800a44e:	d050      	beq.n	800a4f2 <HAL_TIM_ConfigClockSource+0x11a>
 800a450:	2b60      	cmp	r3, #96	; 0x60
 800a452:	d877      	bhi.n	800a544 <HAL_TIM_ConfigClockSource+0x16c>
 800a454:	2b50      	cmp	r3, #80	; 0x50
 800a456:	d03c      	beq.n	800a4d2 <HAL_TIM_ConfigClockSource+0xfa>
 800a458:	2b50      	cmp	r3, #80	; 0x50
 800a45a:	d873      	bhi.n	800a544 <HAL_TIM_ConfigClockSource+0x16c>
 800a45c:	2b40      	cmp	r3, #64	; 0x40
 800a45e:	d058      	beq.n	800a512 <HAL_TIM_ConfigClockSource+0x13a>
 800a460:	2b40      	cmp	r3, #64	; 0x40
 800a462:	d86f      	bhi.n	800a544 <HAL_TIM_ConfigClockSource+0x16c>
 800a464:	2b30      	cmp	r3, #48	; 0x30
 800a466:	d064      	beq.n	800a532 <HAL_TIM_ConfigClockSource+0x15a>
 800a468:	2b30      	cmp	r3, #48	; 0x30
 800a46a:	d86b      	bhi.n	800a544 <HAL_TIM_ConfigClockSource+0x16c>
 800a46c:	2b20      	cmp	r3, #32
 800a46e:	d060      	beq.n	800a532 <HAL_TIM_ConfigClockSource+0x15a>
 800a470:	2b20      	cmp	r3, #32
 800a472:	d867      	bhi.n	800a544 <HAL_TIM_ConfigClockSource+0x16c>
 800a474:	2b00      	cmp	r3, #0
 800a476:	d05c      	beq.n	800a532 <HAL_TIM_ConfigClockSource+0x15a>
 800a478:	2b10      	cmp	r3, #16
 800a47a:	d05a      	beq.n	800a532 <HAL_TIM_ConfigClockSource+0x15a>
 800a47c:	e062      	b.n	800a544 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6818      	ldr	r0, [r3, #0]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	6899      	ldr	r1, [r3, #8]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	685a      	ldr	r2, [r3, #4]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	f000 f9af 	bl	800a7f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a4a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	609a      	str	r2, [r3, #8]
      break;
 800a4aa:	e04f      	b.n	800a54c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6818      	ldr	r0, [r3, #0]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	6899      	ldr	r1, [r3, #8]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	f000 f998 	bl	800a7f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689a      	ldr	r2, [r3, #8]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4ce:	609a      	str	r2, [r3, #8]
      break;
 800a4d0:	e03c      	b.n	800a54c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6818      	ldr	r0, [r3, #0]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	6859      	ldr	r1, [r3, #4]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f000 f90c 	bl	800a6fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2150      	movs	r1, #80	; 0x50
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 f965 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 800a4f0:	e02c      	b.n	800a54c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6818      	ldr	r0, [r3, #0]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	6859      	ldr	r1, [r3, #4]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	461a      	mov	r2, r3
 800a500:	f000 f92b 	bl	800a75a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2160      	movs	r1, #96	; 0x60
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 f955 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 800a510:	e01c      	b.n	800a54c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6818      	ldr	r0, [r3, #0]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	6859      	ldr	r1, [r3, #4]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	461a      	mov	r2, r3
 800a520:	f000 f8ec 	bl	800a6fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2140      	movs	r1, #64	; 0x40
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 f945 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 800a530:	e00c      	b.n	800a54c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4619      	mov	r1, r3
 800a53c:	4610      	mov	r0, r2
 800a53e:	f000 f93c 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 800a542:	e003      	b.n	800a54c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	73fb      	strb	r3, [r7, #15]
      break;
 800a548:	e000      	b.n	800a54c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a54a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	fffeff88 	.word	0xfffeff88

0800a56c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a574:	bf00      	nop
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a588:	bf00      	nop
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a40      	ldr	r2, [pc, #256]	; (800a6d0 <TIM_Base_SetConfig+0x114>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d013      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5da:	d00f      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a3d      	ldr	r2, [pc, #244]	; (800a6d4 <TIM_Base_SetConfig+0x118>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d00b      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a3c      	ldr	r2, [pc, #240]	; (800a6d8 <TIM_Base_SetConfig+0x11c>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d007      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a3b      	ldr	r2, [pc, #236]	; (800a6dc <TIM_Base_SetConfig+0x120>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d003      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a3a      	ldr	r2, [pc, #232]	; (800a6e0 <TIM_Base_SetConfig+0x124>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d108      	bne.n	800a60e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a2f      	ldr	r2, [pc, #188]	; (800a6d0 <TIM_Base_SetConfig+0x114>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d02b      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a61c:	d027      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a2c      	ldr	r2, [pc, #176]	; (800a6d4 <TIM_Base_SetConfig+0x118>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d023      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a2b      	ldr	r2, [pc, #172]	; (800a6d8 <TIM_Base_SetConfig+0x11c>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d01f      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a2a      	ldr	r2, [pc, #168]	; (800a6dc <TIM_Base_SetConfig+0x120>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d01b      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a29      	ldr	r2, [pc, #164]	; (800a6e0 <TIM_Base_SetConfig+0x124>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d017      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a28      	ldr	r2, [pc, #160]	; (800a6e4 <TIM_Base_SetConfig+0x128>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d013      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a27      	ldr	r2, [pc, #156]	; (800a6e8 <TIM_Base_SetConfig+0x12c>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d00f      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a26      	ldr	r2, [pc, #152]	; (800a6ec <TIM_Base_SetConfig+0x130>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d00b      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a25      	ldr	r2, [pc, #148]	; (800a6f0 <TIM_Base_SetConfig+0x134>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d007      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a24      	ldr	r2, [pc, #144]	; (800a6f4 <TIM_Base_SetConfig+0x138>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d003      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a23      	ldr	r2, [pc, #140]	; (800a6f8 <TIM_Base_SetConfig+0x13c>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d108      	bne.n	800a680 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	695b      	ldr	r3, [r3, #20]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a0a      	ldr	r2, [pc, #40]	; (800a6d0 <TIM_Base_SetConfig+0x114>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d003      	beq.n	800a6b4 <TIM_Base_SetConfig+0xf8>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a0c      	ldr	r2, [pc, #48]	; (800a6e0 <TIM_Base_SetConfig+0x124>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d103      	bne.n	800a6bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	691a      	ldr	r2, [r3, #16]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	615a      	str	r2, [r3, #20]
}
 800a6c2:	bf00      	nop
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	40010000 	.word	0x40010000
 800a6d4:	40000400 	.word	0x40000400
 800a6d8:	40000800 	.word	0x40000800
 800a6dc:	40000c00 	.word	0x40000c00
 800a6e0:	40010400 	.word	0x40010400
 800a6e4:	40014000 	.word	0x40014000
 800a6e8:	40014400 	.word	0x40014400
 800a6ec:	40014800 	.word	0x40014800
 800a6f0:	40001800 	.word	0x40001800
 800a6f4:	40001c00 	.word	0x40001c00
 800a6f8:	40002000 	.word	0x40002000

0800a6fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	f023 0201 	bic.w	r2, r3, #1
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f023 030a 	bic.w	r3, r3, #10
 800a738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	621a      	str	r2, [r3, #32]
}
 800a74e:	bf00      	nop
 800a750:	371c      	adds	r7, #28
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b087      	sub	sp, #28
 800a75e:	af00      	add	r7, sp, #0
 800a760:	60f8      	str	r0, [r7, #12]
 800a762:	60b9      	str	r1, [r7, #8]
 800a764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	f023 0210 	bic.w	r2, r3, #16
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6a1b      	ldr	r3, [r3, #32]
 800a77c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a784:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	031b      	lsls	r3, r3, #12
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a796:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	621a      	str	r2, [r3, #32]
}
 800a7ae:	bf00      	nop
 800a7b0:	371c      	adds	r7, #28
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b085      	sub	sp, #20
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	f043 0307 	orr.w	r3, r3, #7
 800a7dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	609a      	str	r2, [r3, #8]
}
 800a7e4:	bf00      	nop
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a80a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	021a      	lsls	r2, r3, #8
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	431a      	orrs	r2, r3
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	4313      	orrs	r3, r2
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	609a      	str	r2, [r3, #8]
}
 800a824:	bf00      	nop
 800a826:	371c      	adds	r7, #28
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a840:	2b01      	cmp	r3, #1
 800a842:	d101      	bne.n	800a848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a844:	2302      	movs	r3, #2
 800a846:	e06d      	b.n	800a924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2202      	movs	r2, #2
 800a854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a30      	ldr	r2, [pc, #192]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d004      	beq.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a2f      	ldr	r2, [pc, #188]	; (800a934 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d108      	bne.n	800a88e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a882:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a894:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a20      	ldr	r2, [pc, #128]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d022      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ba:	d01d      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1d      	ldr	r2, [pc, #116]	; (800a938 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d018      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a1c      	ldr	r2, [pc, #112]	; (800a93c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d013      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a1a      	ldr	r2, [pc, #104]	; (800a940 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d00e      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a15      	ldr	r2, [pc, #84]	; (800a934 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d009      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a16      	ldr	r2, [pc, #88]	; (800a944 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d004      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a15      	ldr	r2, [pc, #84]	; (800a948 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d10c      	bne.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	4313      	orrs	r3, r2
 800a908:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	40010000 	.word	0x40010000
 800a934:	40010400 	.word	0x40010400
 800a938:	40000400 	.word	0x40000400
 800a93c:	40000800 	.word	0x40000800
 800a940:	40000c00 	.word	0x40000c00
 800a944:	40014000 	.word	0x40014000
 800a948:	40001800 	.word	0x40001800

0800a94c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e040      	b.n	800aa1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d106      	bne.n	800a9b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7f7 fc20 	bl	80021f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2224      	movs	r2, #36	; 0x24
 800a9b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f022 0201 	bic.w	r2, r2, #1
 800a9c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fd30 	bl	800b42c <UART_SetConfig>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d101      	bne.n	800a9d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e022      	b.n	800aa1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d002      	beq.n	800a9e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 ff88 	bl	800b8f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689a      	ldr	r2, [r3, #8]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f042 0201 	orr.w	r2, r2, #1
 800aa12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f001 f80f 	bl	800ba38 <UART_CheckIdleState>
 800aa1a:	4603      	mov	r3, r0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b08a      	sub	sp, #40	; 0x28
 800aa28:	af02      	add	r7, sp, #8
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	603b      	str	r3, [r7, #0]
 800aa30:	4613      	mov	r3, r2
 800aa32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa38:	2b20      	cmp	r3, #32
 800aa3a:	d171      	bne.n	800ab20 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d002      	beq.n	800aa48 <HAL_UART_Transmit+0x24>
 800aa42:	88fb      	ldrh	r3, [r7, #6]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d101      	bne.n	800aa4c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e06a      	b.n	800ab22 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2221      	movs	r2, #33	; 0x21
 800aa58:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa5a:	f7f8 fcf5 	bl	8003448 <HAL_GetTick>
 800aa5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	88fa      	ldrh	r2, [r7, #6]
 800aa64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	88fa      	ldrh	r2, [r7, #6]
 800aa6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa78:	d108      	bne.n	800aa8c <HAL_UART_Transmit+0x68>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d104      	bne.n	800aa8c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	61bb      	str	r3, [r7, #24]
 800aa8a:	e003      	b.n	800aa94 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa90:	2300      	movs	r3, #0
 800aa92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aa94:	e02c      	b.n	800aaf0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	2180      	movs	r1, #128	; 0x80
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f001 f800 	bl	800baa6 <UART_WaitOnFlagUntilTimeout>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800aaac:	2303      	movs	r3, #3
 800aaae:	e038      	b.n	800ab22 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d10b      	bne.n	800aace <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aac4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	3302      	adds	r3, #2
 800aaca:	61bb      	str	r3, [r7, #24]
 800aacc:	e007      	b.n	800aade <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	781a      	ldrb	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	3301      	adds	r3, #1
 800aadc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	3b01      	subs	r3, #1
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1cc      	bne.n	800aa96 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2200      	movs	r2, #0
 800ab04:	2140      	movs	r1, #64	; 0x40
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f000 ffcd 	bl	800baa6 <UART_WaitOnFlagUntilTimeout>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800ab12:	2303      	movs	r3, #3
 800ab14:	e005      	b.n	800ab22 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	e000      	b.n	800ab22 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ab20:	2302      	movs	r3, #2
  }
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3720      	adds	r7, #32
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b08a      	sub	sp, #40	; 0x28
 800ab2e:	af02      	add	r7, sp, #8
 800ab30:	60f8      	str	r0, [r7, #12]
 800ab32:	60b9      	str	r1, [r7, #8]
 800ab34:	603b      	str	r3, [r7, #0]
 800ab36:	4613      	mov	r3, r2
 800ab38:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab40:	2b20      	cmp	r3, #32
 800ab42:	f040 80b1 	bne.w	800aca8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d002      	beq.n	800ab52 <HAL_UART_Receive+0x28>
 800ab4c:	88fb      	ldrh	r3, [r7, #6]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e0a9      	b.n	800acaa <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2222      	movs	r2, #34	; 0x22
 800ab62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab6c:	f7f8 fc6c 	bl	8003448 <HAL_GetTick>
 800ab70:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	88fa      	ldrh	r2, [r7, #6]
 800ab76:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	88fa      	ldrh	r2, [r7, #6]
 800ab7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab8a:	d10e      	bne.n	800abaa <HAL_UART_Receive+0x80>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d105      	bne.n	800aba0 <HAL_UART_Receive+0x76>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ab9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab9e:	e02d      	b.n	800abfc <HAL_UART_Receive+0xd2>
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	22ff      	movs	r2, #255	; 0xff
 800aba4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aba8:	e028      	b.n	800abfc <HAL_UART_Receive+0xd2>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10d      	bne.n	800abce <HAL_UART_Receive+0xa4>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d104      	bne.n	800abc4 <HAL_UART_Receive+0x9a>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	22ff      	movs	r2, #255	; 0xff
 800abbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abc2:	e01b      	b.n	800abfc <HAL_UART_Receive+0xd2>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	227f      	movs	r2, #127	; 0x7f
 800abc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abcc:	e016      	b.n	800abfc <HAL_UART_Receive+0xd2>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abd6:	d10d      	bne.n	800abf4 <HAL_UART_Receive+0xca>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d104      	bne.n	800abea <HAL_UART_Receive+0xc0>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	227f      	movs	r2, #127	; 0x7f
 800abe4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abe8:	e008      	b.n	800abfc <HAL_UART_Receive+0xd2>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	223f      	movs	r2, #63	; 0x3f
 800abee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abf2:	e003      	b.n	800abfc <HAL_UART_Receive+0xd2>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac02:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac0c:	d108      	bne.n	800ac20 <HAL_UART_Receive+0xf6>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d104      	bne.n	800ac20 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ac16:	2300      	movs	r3, #0
 800ac18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	61bb      	str	r3, [r7, #24]
 800ac1e:	e003      	b.n	800ac28 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac24:	2300      	movs	r3, #0
 800ac26:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ac28:	e032      	b.n	800ac90 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	9300      	str	r3, [sp, #0]
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	2200      	movs	r2, #0
 800ac32:	2120      	movs	r1, #32
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f000 ff36 	bl	800baa6 <UART_WaitOnFlagUntilTimeout>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e032      	b.n	800acaa <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10c      	bne.n	800ac64 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	8a7b      	ldrh	r3, [r7, #18]
 800ac54:	4013      	ands	r3, r2
 800ac56:	b29a      	uxth	r2, r3
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	3302      	adds	r3, #2
 800ac60:	61bb      	str	r3, [r7, #24]
 800ac62:	e00c      	b.n	800ac7e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6a:	b2da      	uxtb	r2, r3
 800ac6c:	8a7b      	ldrh	r3, [r7, #18]
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	4013      	ands	r3, r2
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	3b01      	subs	r3, #1
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1c6      	bne.n	800ac2a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800aca4:	2300      	movs	r3, #0
 800aca6:	e000      	b.n	800acaa <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800aca8:	2302      	movs	r3, #2
  }
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3720      	adds	r7, #32
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
	...

0800acb4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b08a      	sub	sp, #40	; 0x28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	4613      	mov	r3, r2
 800acc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acc6:	2b20      	cmp	r3, #32
 800acc8:	d165      	bne.n	800ad96 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d002      	beq.n	800acd6 <HAL_UART_Transmit_DMA+0x22>
 800acd0:	88fb      	ldrh	r3, [r7, #6]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e05e      	b.n	800ad98 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	88fa      	ldrh	r2, [r7, #6]
 800ace4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	88fa      	ldrh	r2, [r7, #6]
 800acec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2221      	movs	r2, #33	; 0x21
 800acfc:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d027      	beq.n	800ad56 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad0a:	4a25      	ldr	r2, [pc, #148]	; (800ada0 <HAL_UART_Transmit_DMA+0xec>)
 800ad0c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad12:	4a24      	ldr	r2, [pc, #144]	; (800ada4 <HAL_UART_Transmit_DMA+0xf0>)
 800ad14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1a:	4a23      	ldr	r2, [pc, #140]	; (800ada8 <HAL_UART_Transmit_DMA+0xf4>)
 800ad1c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad22:	2200      	movs	r2, #0
 800ad24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad2e:	4619      	mov	r1, r3
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	3328      	adds	r3, #40	; 0x28
 800ad36:	461a      	mov	r2, r3
 800ad38:	88fb      	ldrh	r3, [r7, #6]
 800ad3a:	f7f9 fa1d 	bl	8004178 <HAL_DMA_Start_IT>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d008      	beq.n	800ad56 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2210      	movs	r2, #16
 800ad48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2220      	movs	r2, #32
 800ad50:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e020      	b.n	800ad98 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2240      	movs	r2, #64	; 0x40
 800ad5c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3308      	adds	r3, #8
 800ad64:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	e853 3f00 	ldrex	r3, [r3]
 800ad6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad74:	627b      	str	r3, [r7, #36]	; 0x24
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad7e:	623a      	str	r2, [r7, #32]
 800ad80:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad82:	69f9      	ldr	r1, [r7, #28]
 800ad84:	6a3a      	ldr	r2, [r7, #32]
 800ad86:	e841 2300 	strex	r3, r2, [r1]
 800ad8a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1e5      	bne.n	800ad5e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	e000      	b.n	800ad98 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800ad96:	2302      	movs	r3, #2
  }
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3728      	adds	r7, #40	; 0x28
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	0800be89 	.word	0x0800be89
 800ada4:	0800bf1f 	.word	0x0800bf1f
 800ada8:	0800c0a1 	.word	0x0800c0a1

0800adac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08a      	sub	sp, #40	; 0x28
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	4613      	mov	r3, r2
 800adb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adc0:	2b20      	cmp	r3, #32
 800adc2:	d132      	bne.n	800ae2a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d002      	beq.n	800add0 <HAL_UART_Receive_DMA+0x24>
 800adca:	88fb      	ldrh	r3, [r7, #6]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d101      	bne.n	800add4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	e02b      	b.n	800ae2c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d018      	beq.n	800ae1a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	e853 3f00 	ldrex	r3, [r3]
 800adf4:	613b      	str	r3, [r7, #16]
   return(result);
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800adfc:	627b      	str	r3, [r7, #36]	; 0x24
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	461a      	mov	r2, r3
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	623b      	str	r3, [r7, #32]
 800ae08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0a:	69f9      	ldr	r1, [r7, #28]
 800ae0c:	6a3a      	ldr	r2, [r7, #32]
 800ae0e:	e841 2300 	strex	r3, r2, [r1]
 800ae12:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1e6      	bne.n	800ade8 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ae1a:	88fb      	ldrh	r3, [r7, #6]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	68b9      	ldr	r1, [r7, #8]
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f000 ff07 	bl	800bc34 <UART_Start_Receive_DMA>
 800ae26:	4603      	mov	r3, r0
 800ae28:	e000      	b.n	800ae2c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800ae2a:	2302      	movs	r3, #2
  }
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3728      	adds	r7, #40	; 0x28
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b0ba      	sub	sp, #232	; 0xe8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	69db      	ldr	r3, [r3, #28]
 800ae42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ae5e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ae62:	4013      	ands	r3, r2
 800ae64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ae68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d115      	bne.n	800ae9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ae70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae74:	f003 0320 	and.w	r3, r3, #32
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00f      	beq.n	800ae9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ae7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae80:	f003 0320 	and.w	r3, r3, #32
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d009      	beq.n	800ae9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f000 8297 	beq.w	800b3c0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	4798      	blx	r3
      }
      return;
 800ae9a:	e291      	b.n	800b3c0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ae9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 8117 	beq.w	800b0d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d106      	bne.n	800aec0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aeb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aeb6:	4b85      	ldr	r3, [pc, #532]	; (800b0cc <HAL_UART_IRQHandler+0x298>)
 800aeb8:	4013      	ands	r3, r2
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 810a 	beq.w	800b0d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aec4:	f003 0301 	and.w	r3, r3, #1
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d011      	beq.n	800aef0 <HAL_UART_IRQHandler+0xbc>
 800aecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d00b      	beq.n	800aef0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2201      	movs	r2, #1
 800aede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aee6:	f043 0201 	orr.w	r2, r3, #1
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aef4:	f003 0302 	and.w	r3, r3, #2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d011      	beq.n	800af20 <HAL_UART_IRQHandler+0xec>
 800aefc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af00:	f003 0301 	and.w	r3, r3, #1
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00b      	beq.n	800af20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2202      	movs	r2, #2
 800af0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af16:	f043 0204 	orr.w	r2, r3, #4
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af24:	f003 0304 	and.w	r3, r3, #4
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d011      	beq.n	800af50 <HAL_UART_IRQHandler+0x11c>
 800af2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af30:	f003 0301 	and.w	r3, r3, #1
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00b      	beq.n	800af50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2204      	movs	r2, #4
 800af3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af46:	f043 0202 	orr.w	r2, r3, #2
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800af50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af54:	f003 0308 	and.w	r3, r3, #8
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d017      	beq.n	800af8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800af5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af60:	f003 0320 	and.w	r3, r3, #32
 800af64:	2b00      	cmp	r3, #0
 800af66:	d105      	bne.n	800af74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800af68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00b      	beq.n	800af8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2208      	movs	r2, #8
 800af7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af82:	f043 0208 	orr.w	r2, r3, #8
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af94:	2b00      	cmp	r3, #0
 800af96:	d012      	beq.n	800afbe <HAL_UART_IRQHandler+0x18a>
 800af98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00c      	beq.n	800afbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afb4:	f043 0220 	orr.w	r2, r3, #32
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f000 81fd 	beq.w	800b3c4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800afca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afce:	f003 0320 	and.w	r3, r3, #32
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00d      	beq.n	800aff2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800afd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afda:	f003 0320 	and.w	r3, r3, #32
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d007      	beq.n	800aff2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d003      	beq.n	800aff2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b006:	2b40      	cmp	r3, #64	; 0x40
 800b008:	d005      	beq.n	800b016 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b00a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b00e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b012:	2b00      	cmp	r3, #0
 800b014:	d04f      	beq.n	800b0b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fed2 	bl	800bdc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b026:	2b40      	cmp	r3, #64	; 0x40
 800b028:	d141      	bne.n	800b0ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	3308      	adds	r3, #8
 800b030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b038:	e853 3f00 	ldrex	r3, [r3]
 800b03c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	3308      	adds	r3, #8
 800b052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b056:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b05a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b062:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b066:	e841 2300 	strex	r3, r2, [r1]
 800b06a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b06e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1d9      	bne.n	800b02a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d013      	beq.n	800b0a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b082:	4a13      	ldr	r2, [pc, #76]	; (800b0d0 <HAL_UART_IRQHandler+0x29c>)
 800b084:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7f9 f944 	bl	8004318 <HAL_DMA_Abort_IT>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d017      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b09a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0a4:	e00f      	b.n	800b0c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f9aa 	bl	800b400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0ac:	e00b      	b.n	800b0c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f9a6 	bl	800b400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0b4:	e007      	b.n	800b0c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f9a2 	bl	800b400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b0c4:	e17e      	b.n	800b3c4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0c6:	bf00      	nop
    return;
 800b0c8:	e17c      	b.n	800b3c4 <HAL_UART_IRQHandler+0x590>
 800b0ca:	bf00      	nop
 800b0cc:	04000120 	.word	0x04000120
 800b0d0:	0800c11f 	.word	0x0800c11f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	f040 814c 	bne.w	800b376 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b0de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0e2:	f003 0310 	and.w	r3, r3, #16
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 8145 	beq.w	800b376 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b0ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0f0:	f003 0310 	and.w	r3, r3, #16
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 813e 	beq.w	800b376 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2210      	movs	r2, #16
 800b100:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b10c:	2b40      	cmp	r3, #64	; 0x40
 800b10e:	f040 80b6 	bne.w	800b27e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b11e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b122:	2b00      	cmp	r3, #0
 800b124:	f000 8150 	beq.w	800b3c8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b12e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b132:	429a      	cmp	r2, r3
 800b134:	f080 8148 	bcs.w	800b3c8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b13e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b146:	69db      	ldr	r3, [r3, #28]
 800b148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b14c:	f000 8086 	beq.w	800b25c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b158:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b15c:	e853 3f00 	ldrex	r3, [r3]
 800b160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b164:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b16c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	461a      	mov	r2, r3
 800b176:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b17a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b17e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b182:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b186:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b18a:	e841 2300 	strex	r3, r2, [r1]
 800b18e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1da      	bne.n	800b150 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3308      	adds	r3, #8
 800b1a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1a4:	e853 3f00 	ldrex	r3, [r3]
 800b1a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b1aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1ac:	f023 0301 	bic.w	r3, r3, #1
 800b1b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3308      	adds	r3, #8
 800b1ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b1be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b1c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b1c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b1ca:	e841 2300 	strex	r3, r2, [r1]
 800b1ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b1d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1e1      	bne.n	800b19a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3308      	adds	r3, #8
 800b1dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1e0:	e853 3f00 	ldrex	r3, [r3]
 800b1e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b1e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b1fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b1fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b200:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b202:	e841 2300 	strex	r3, r2, [r1]
 800b206:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1e3      	bne.n	800b1d6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2220      	movs	r2, #32
 800b212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b224:	e853 3f00 	ldrex	r3, [r3]
 800b228:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b22a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b22c:	f023 0310 	bic.w	r3, r3, #16
 800b230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	461a      	mov	r2, r3
 800b23a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b23e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b240:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b242:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b244:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b246:	e841 2300 	strex	r3, r2, [r1]
 800b24a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b24c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1e4      	bne.n	800b21c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b256:	4618      	mov	r0, r3
 800b258:	f7f8 ffee 	bl	8004238 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2202      	movs	r2, #2
 800b260:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b26e:	b29b      	uxth	r3, r3
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	b29b      	uxth	r3, r3
 800b274:	4619      	mov	r1, r3
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f8cc 	bl	800b414 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b27c:	e0a4      	b.n	800b3c8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b298:	b29b      	uxth	r3, r3
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 8096 	beq.w	800b3cc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800b2a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f000 8091 	beq.w	800b3cc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b2:	e853 3f00 	ldrex	r3, [r3]
 800b2b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b2cc:	647b      	str	r3, [r7, #68]	; 0x44
 800b2ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b2d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2d4:	e841 2300 	strex	r3, r2, [r1]
 800b2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e4      	bne.n	800b2aa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3308      	adds	r3, #8
 800b2e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	e853 3f00 	ldrex	r3, [r3]
 800b2ee:	623b      	str	r3, [r7, #32]
   return(result);
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	f023 0301 	bic.w	r3, r3, #1
 800b2f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3308      	adds	r3, #8
 800b300:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b304:	633a      	str	r2, [r7, #48]	; 0x30
 800b306:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b30a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b30c:	e841 2300 	strex	r3, r2, [r1]
 800b310:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1e3      	bne.n	800b2e0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2220      	movs	r2, #32
 800b31c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	e853 3f00 	ldrex	r3, [r3]
 800b338:	60fb      	str	r3, [r7, #12]
   return(result);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f023 0310 	bic.w	r3, r3, #16
 800b340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	461a      	mov	r2, r3
 800b34a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b34e:	61fb      	str	r3, [r7, #28]
 800b350:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b352:	69b9      	ldr	r1, [r7, #24]
 800b354:	69fa      	ldr	r2, [r7, #28]
 800b356:	e841 2300 	strex	r3, r2, [r1]
 800b35a:	617b      	str	r3, [r7, #20]
   return(result);
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1e4      	bne.n	800b32c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2202      	movs	r2, #2
 800b366:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b36c:	4619      	mov	r1, r3
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f850 	bl	800b414 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b374:	e02a      	b.n	800b3cc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00e      	beq.n	800b3a0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d008      	beq.n	800b3a0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b392:	2b00      	cmp	r3, #0
 800b394:	d01c      	beq.n	800b3d0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	4798      	blx	r3
    }
    return;
 800b39e:	e017      	b.n	800b3d0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b3a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d012      	beq.n	800b3d2 <HAL_UART_IRQHandler+0x59e>
 800b3ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00c      	beq.n	800b3d2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fec6 	bl	800c14a <UART_EndTransmit_IT>
    return;
 800b3be:	e008      	b.n	800b3d2 <HAL_UART_IRQHandler+0x59e>
      return;
 800b3c0:	bf00      	nop
 800b3c2:	e006      	b.n	800b3d2 <HAL_UART_IRQHandler+0x59e>
    return;
 800b3c4:	bf00      	nop
 800b3c6:	e004      	b.n	800b3d2 <HAL_UART_IRQHandler+0x59e>
      return;
 800b3c8:	bf00      	nop
 800b3ca:	e002      	b.n	800b3d2 <HAL_UART_IRQHandler+0x59e>
      return;
 800b3cc:	bf00      	nop
 800b3ce:	e000      	b.n	800b3d2 <HAL_UART_IRQHandler+0x59e>
    return;
 800b3d0:	bf00      	nop
  }

}
 800b3d2:	37e8      	adds	r7, #232	; 0xe8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	460b      	mov	r3, r1
 800b41e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b088      	sub	sp, #32
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	431a      	orrs	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	695b      	ldr	r3, [r3, #20]
 800b446:	431a      	orrs	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	69db      	ldr	r3, [r3, #28]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	4ba6      	ldr	r3, [pc, #664]	; (800b6f0 <UART_SetConfig+0x2c4>)
 800b458:	4013      	ands	r3, r2
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	6812      	ldr	r2, [r2, #0]
 800b45e:	6979      	ldr	r1, [r7, #20]
 800b460:	430b      	orrs	r3, r1
 800b462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	68da      	ldr	r2, [r3, #12]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	430a      	orrs	r2, r1
 800b478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	699b      	ldr	r3, [r3, #24]
 800b47e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6a1b      	ldr	r3, [r3, #32]
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	4313      	orrs	r3, r2
 800b488:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	430a      	orrs	r2, r1
 800b49c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a94      	ldr	r2, [pc, #592]	; (800b6f4 <UART_SetConfig+0x2c8>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d120      	bne.n	800b4ea <UART_SetConfig+0xbe>
 800b4a8:	4b93      	ldr	r3, [pc, #588]	; (800b6f8 <UART_SetConfig+0x2cc>)
 800b4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ae:	f003 0303 	and.w	r3, r3, #3
 800b4b2:	2b03      	cmp	r3, #3
 800b4b4:	d816      	bhi.n	800b4e4 <UART_SetConfig+0xb8>
 800b4b6:	a201      	add	r2, pc, #4	; (adr r2, 800b4bc <UART_SetConfig+0x90>)
 800b4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4bc:	0800b4cd 	.word	0x0800b4cd
 800b4c0:	0800b4d9 	.word	0x0800b4d9
 800b4c4:	0800b4d3 	.word	0x0800b4d3
 800b4c8:	0800b4df 	.word	0x0800b4df
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	77fb      	strb	r3, [r7, #31]
 800b4d0:	e150      	b.n	800b774 <UART_SetConfig+0x348>
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	77fb      	strb	r3, [r7, #31]
 800b4d6:	e14d      	b.n	800b774 <UART_SetConfig+0x348>
 800b4d8:	2304      	movs	r3, #4
 800b4da:	77fb      	strb	r3, [r7, #31]
 800b4dc:	e14a      	b.n	800b774 <UART_SetConfig+0x348>
 800b4de:	2308      	movs	r3, #8
 800b4e0:	77fb      	strb	r3, [r7, #31]
 800b4e2:	e147      	b.n	800b774 <UART_SetConfig+0x348>
 800b4e4:	2310      	movs	r3, #16
 800b4e6:	77fb      	strb	r3, [r7, #31]
 800b4e8:	e144      	b.n	800b774 <UART_SetConfig+0x348>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a83      	ldr	r2, [pc, #524]	; (800b6fc <UART_SetConfig+0x2d0>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d132      	bne.n	800b55a <UART_SetConfig+0x12e>
 800b4f4:	4b80      	ldr	r3, [pc, #512]	; (800b6f8 <UART_SetConfig+0x2cc>)
 800b4f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4fa:	f003 030c 	and.w	r3, r3, #12
 800b4fe:	2b0c      	cmp	r3, #12
 800b500:	d828      	bhi.n	800b554 <UART_SetConfig+0x128>
 800b502:	a201      	add	r2, pc, #4	; (adr r2, 800b508 <UART_SetConfig+0xdc>)
 800b504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b508:	0800b53d 	.word	0x0800b53d
 800b50c:	0800b555 	.word	0x0800b555
 800b510:	0800b555 	.word	0x0800b555
 800b514:	0800b555 	.word	0x0800b555
 800b518:	0800b549 	.word	0x0800b549
 800b51c:	0800b555 	.word	0x0800b555
 800b520:	0800b555 	.word	0x0800b555
 800b524:	0800b555 	.word	0x0800b555
 800b528:	0800b543 	.word	0x0800b543
 800b52c:	0800b555 	.word	0x0800b555
 800b530:	0800b555 	.word	0x0800b555
 800b534:	0800b555 	.word	0x0800b555
 800b538:	0800b54f 	.word	0x0800b54f
 800b53c:	2300      	movs	r3, #0
 800b53e:	77fb      	strb	r3, [r7, #31]
 800b540:	e118      	b.n	800b774 <UART_SetConfig+0x348>
 800b542:	2302      	movs	r3, #2
 800b544:	77fb      	strb	r3, [r7, #31]
 800b546:	e115      	b.n	800b774 <UART_SetConfig+0x348>
 800b548:	2304      	movs	r3, #4
 800b54a:	77fb      	strb	r3, [r7, #31]
 800b54c:	e112      	b.n	800b774 <UART_SetConfig+0x348>
 800b54e:	2308      	movs	r3, #8
 800b550:	77fb      	strb	r3, [r7, #31]
 800b552:	e10f      	b.n	800b774 <UART_SetConfig+0x348>
 800b554:	2310      	movs	r3, #16
 800b556:	77fb      	strb	r3, [r7, #31]
 800b558:	e10c      	b.n	800b774 <UART_SetConfig+0x348>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a68      	ldr	r2, [pc, #416]	; (800b700 <UART_SetConfig+0x2d4>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d120      	bne.n	800b5a6 <UART_SetConfig+0x17a>
 800b564:	4b64      	ldr	r3, [pc, #400]	; (800b6f8 <UART_SetConfig+0x2cc>)
 800b566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b56a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b56e:	2b30      	cmp	r3, #48	; 0x30
 800b570:	d013      	beq.n	800b59a <UART_SetConfig+0x16e>
 800b572:	2b30      	cmp	r3, #48	; 0x30
 800b574:	d814      	bhi.n	800b5a0 <UART_SetConfig+0x174>
 800b576:	2b20      	cmp	r3, #32
 800b578:	d009      	beq.n	800b58e <UART_SetConfig+0x162>
 800b57a:	2b20      	cmp	r3, #32
 800b57c:	d810      	bhi.n	800b5a0 <UART_SetConfig+0x174>
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <UART_SetConfig+0x15c>
 800b582:	2b10      	cmp	r3, #16
 800b584:	d006      	beq.n	800b594 <UART_SetConfig+0x168>
 800b586:	e00b      	b.n	800b5a0 <UART_SetConfig+0x174>
 800b588:	2300      	movs	r3, #0
 800b58a:	77fb      	strb	r3, [r7, #31]
 800b58c:	e0f2      	b.n	800b774 <UART_SetConfig+0x348>
 800b58e:	2302      	movs	r3, #2
 800b590:	77fb      	strb	r3, [r7, #31]
 800b592:	e0ef      	b.n	800b774 <UART_SetConfig+0x348>
 800b594:	2304      	movs	r3, #4
 800b596:	77fb      	strb	r3, [r7, #31]
 800b598:	e0ec      	b.n	800b774 <UART_SetConfig+0x348>
 800b59a:	2308      	movs	r3, #8
 800b59c:	77fb      	strb	r3, [r7, #31]
 800b59e:	e0e9      	b.n	800b774 <UART_SetConfig+0x348>
 800b5a0:	2310      	movs	r3, #16
 800b5a2:	77fb      	strb	r3, [r7, #31]
 800b5a4:	e0e6      	b.n	800b774 <UART_SetConfig+0x348>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a56      	ldr	r2, [pc, #344]	; (800b704 <UART_SetConfig+0x2d8>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d120      	bne.n	800b5f2 <UART_SetConfig+0x1c6>
 800b5b0:	4b51      	ldr	r3, [pc, #324]	; (800b6f8 <UART_SetConfig+0x2cc>)
 800b5b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b5ba:	2bc0      	cmp	r3, #192	; 0xc0
 800b5bc:	d013      	beq.n	800b5e6 <UART_SetConfig+0x1ba>
 800b5be:	2bc0      	cmp	r3, #192	; 0xc0
 800b5c0:	d814      	bhi.n	800b5ec <UART_SetConfig+0x1c0>
 800b5c2:	2b80      	cmp	r3, #128	; 0x80
 800b5c4:	d009      	beq.n	800b5da <UART_SetConfig+0x1ae>
 800b5c6:	2b80      	cmp	r3, #128	; 0x80
 800b5c8:	d810      	bhi.n	800b5ec <UART_SetConfig+0x1c0>
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <UART_SetConfig+0x1a8>
 800b5ce:	2b40      	cmp	r3, #64	; 0x40
 800b5d0:	d006      	beq.n	800b5e0 <UART_SetConfig+0x1b4>
 800b5d2:	e00b      	b.n	800b5ec <UART_SetConfig+0x1c0>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	77fb      	strb	r3, [r7, #31]
 800b5d8:	e0cc      	b.n	800b774 <UART_SetConfig+0x348>
 800b5da:	2302      	movs	r3, #2
 800b5dc:	77fb      	strb	r3, [r7, #31]
 800b5de:	e0c9      	b.n	800b774 <UART_SetConfig+0x348>
 800b5e0:	2304      	movs	r3, #4
 800b5e2:	77fb      	strb	r3, [r7, #31]
 800b5e4:	e0c6      	b.n	800b774 <UART_SetConfig+0x348>
 800b5e6:	2308      	movs	r3, #8
 800b5e8:	77fb      	strb	r3, [r7, #31]
 800b5ea:	e0c3      	b.n	800b774 <UART_SetConfig+0x348>
 800b5ec:	2310      	movs	r3, #16
 800b5ee:	77fb      	strb	r3, [r7, #31]
 800b5f0:	e0c0      	b.n	800b774 <UART_SetConfig+0x348>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a44      	ldr	r2, [pc, #272]	; (800b708 <UART_SetConfig+0x2dc>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d125      	bne.n	800b648 <UART_SetConfig+0x21c>
 800b5fc:	4b3e      	ldr	r3, [pc, #248]	; (800b6f8 <UART_SetConfig+0x2cc>)
 800b5fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b60a:	d017      	beq.n	800b63c <UART_SetConfig+0x210>
 800b60c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b610:	d817      	bhi.n	800b642 <UART_SetConfig+0x216>
 800b612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b616:	d00b      	beq.n	800b630 <UART_SetConfig+0x204>
 800b618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b61c:	d811      	bhi.n	800b642 <UART_SetConfig+0x216>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d003      	beq.n	800b62a <UART_SetConfig+0x1fe>
 800b622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b626:	d006      	beq.n	800b636 <UART_SetConfig+0x20a>
 800b628:	e00b      	b.n	800b642 <UART_SetConfig+0x216>
 800b62a:	2300      	movs	r3, #0
 800b62c:	77fb      	strb	r3, [r7, #31]
 800b62e:	e0a1      	b.n	800b774 <UART_SetConfig+0x348>
 800b630:	2302      	movs	r3, #2
 800b632:	77fb      	strb	r3, [r7, #31]
 800b634:	e09e      	b.n	800b774 <UART_SetConfig+0x348>
 800b636:	2304      	movs	r3, #4
 800b638:	77fb      	strb	r3, [r7, #31]
 800b63a:	e09b      	b.n	800b774 <UART_SetConfig+0x348>
 800b63c:	2308      	movs	r3, #8
 800b63e:	77fb      	strb	r3, [r7, #31]
 800b640:	e098      	b.n	800b774 <UART_SetConfig+0x348>
 800b642:	2310      	movs	r3, #16
 800b644:	77fb      	strb	r3, [r7, #31]
 800b646:	e095      	b.n	800b774 <UART_SetConfig+0x348>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a2f      	ldr	r2, [pc, #188]	; (800b70c <UART_SetConfig+0x2e0>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d125      	bne.n	800b69e <UART_SetConfig+0x272>
 800b652:	4b29      	ldr	r3, [pc, #164]	; (800b6f8 <UART_SetConfig+0x2cc>)
 800b654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b65c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b660:	d017      	beq.n	800b692 <UART_SetConfig+0x266>
 800b662:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b666:	d817      	bhi.n	800b698 <UART_SetConfig+0x26c>
 800b668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b66c:	d00b      	beq.n	800b686 <UART_SetConfig+0x25a>
 800b66e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b672:	d811      	bhi.n	800b698 <UART_SetConfig+0x26c>
 800b674:	2b00      	cmp	r3, #0
 800b676:	d003      	beq.n	800b680 <UART_SetConfig+0x254>
 800b678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b67c:	d006      	beq.n	800b68c <UART_SetConfig+0x260>
 800b67e:	e00b      	b.n	800b698 <UART_SetConfig+0x26c>
 800b680:	2301      	movs	r3, #1
 800b682:	77fb      	strb	r3, [r7, #31]
 800b684:	e076      	b.n	800b774 <UART_SetConfig+0x348>
 800b686:	2302      	movs	r3, #2
 800b688:	77fb      	strb	r3, [r7, #31]
 800b68a:	e073      	b.n	800b774 <UART_SetConfig+0x348>
 800b68c:	2304      	movs	r3, #4
 800b68e:	77fb      	strb	r3, [r7, #31]
 800b690:	e070      	b.n	800b774 <UART_SetConfig+0x348>
 800b692:	2308      	movs	r3, #8
 800b694:	77fb      	strb	r3, [r7, #31]
 800b696:	e06d      	b.n	800b774 <UART_SetConfig+0x348>
 800b698:	2310      	movs	r3, #16
 800b69a:	77fb      	strb	r3, [r7, #31]
 800b69c:	e06a      	b.n	800b774 <UART_SetConfig+0x348>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a1b      	ldr	r2, [pc, #108]	; (800b710 <UART_SetConfig+0x2e4>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d138      	bne.n	800b71a <UART_SetConfig+0x2ee>
 800b6a8:	4b13      	ldr	r3, [pc, #76]	; (800b6f8 <UART_SetConfig+0x2cc>)
 800b6aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b6b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6b6:	d017      	beq.n	800b6e8 <UART_SetConfig+0x2bc>
 800b6b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6bc:	d82a      	bhi.n	800b714 <UART_SetConfig+0x2e8>
 800b6be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6c2:	d00b      	beq.n	800b6dc <UART_SetConfig+0x2b0>
 800b6c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6c8:	d824      	bhi.n	800b714 <UART_SetConfig+0x2e8>
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d003      	beq.n	800b6d6 <UART_SetConfig+0x2aa>
 800b6ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6d2:	d006      	beq.n	800b6e2 <UART_SetConfig+0x2b6>
 800b6d4:	e01e      	b.n	800b714 <UART_SetConfig+0x2e8>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	77fb      	strb	r3, [r7, #31]
 800b6da:	e04b      	b.n	800b774 <UART_SetConfig+0x348>
 800b6dc:	2302      	movs	r3, #2
 800b6de:	77fb      	strb	r3, [r7, #31]
 800b6e0:	e048      	b.n	800b774 <UART_SetConfig+0x348>
 800b6e2:	2304      	movs	r3, #4
 800b6e4:	77fb      	strb	r3, [r7, #31]
 800b6e6:	e045      	b.n	800b774 <UART_SetConfig+0x348>
 800b6e8:	2308      	movs	r3, #8
 800b6ea:	77fb      	strb	r3, [r7, #31]
 800b6ec:	e042      	b.n	800b774 <UART_SetConfig+0x348>
 800b6ee:	bf00      	nop
 800b6f0:	efff69f3 	.word	0xefff69f3
 800b6f4:	40011000 	.word	0x40011000
 800b6f8:	40023800 	.word	0x40023800
 800b6fc:	40004400 	.word	0x40004400
 800b700:	40004800 	.word	0x40004800
 800b704:	40004c00 	.word	0x40004c00
 800b708:	40005000 	.word	0x40005000
 800b70c:	40011400 	.word	0x40011400
 800b710:	40007800 	.word	0x40007800
 800b714:	2310      	movs	r3, #16
 800b716:	77fb      	strb	r3, [r7, #31]
 800b718:	e02c      	b.n	800b774 <UART_SetConfig+0x348>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a72      	ldr	r2, [pc, #456]	; (800b8e8 <UART_SetConfig+0x4bc>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d125      	bne.n	800b770 <UART_SetConfig+0x344>
 800b724:	4b71      	ldr	r3, [pc, #452]	; (800b8ec <UART_SetConfig+0x4c0>)
 800b726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b72a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b72e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b732:	d017      	beq.n	800b764 <UART_SetConfig+0x338>
 800b734:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b738:	d817      	bhi.n	800b76a <UART_SetConfig+0x33e>
 800b73a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b73e:	d00b      	beq.n	800b758 <UART_SetConfig+0x32c>
 800b740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b744:	d811      	bhi.n	800b76a <UART_SetConfig+0x33e>
 800b746:	2b00      	cmp	r3, #0
 800b748:	d003      	beq.n	800b752 <UART_SetConfig+0x326>
 800b74a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b74e:	d006      	beq.n	800b75e <UART_SetConfig+0x332>
 800b750:	e00b      	b.n	800b76a <UART_SetConfig+0x33e>
 800b752:	2300      	movs	r3, #0
 800b754:	77fb      	strb	r3, [r7, #31]
 800b756:	e00d      	b.n	800b774 <UART_SetConfig+0x348>
 800b758:	2302      	movs	r3, #2
 800b75a:	77fb      	strb	r3, [r7, #31]
 800b75c:	e00a      	b.n	800b774 <UART_SetConfig+0x348>
 800b75e:	2304      	movs	r3, #4
 800b760:	77fb      	strb	r3, [r7, #31]
 800b762:	e007      	b.n	800b774 <UART_SetConfig+0x348>
 800b764:	2308      	movs	r3, #8
 800b766:	77fb      	strb	r3, [r7, #31]
 800b768:	e004      	b.n	800b774 <UART_SetConfig+0x348>
 800b76a:	2310      	movs	r3, #16
 800b76c:	77fb      	strb	r3, [r7, #31]
 800b76e:	e001      	b.n	800b774 <UART_SetConfig+0x348>
 800b770:	2310      	movs	r3, #16
 800b772:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	69db      	ldr	r3, [r3, #28]
 800b778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b77c:	d15b      	bne.n	800b836 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b77e:	7ffb      	ldrb	r3, [r7, #31]
 800b780:	2b08      	cmp	r3, #8
 800b782:	d828      	bhi.n	800b7d6 <UART_SetConfig+0x3aa>
 800b784:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <UART_SetConfig+0x360>)
 800b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78a:	bf00      	nop
 800b78c:	0800b7b1 	.word	0x0800b7b1
 800b790:	0800b7b9 	.word	0x0800b7b9
 800b794:	0800b7c1 	.word	0x0800b7c1
 800b798:	0800b7d7 	.word	0x0800b7d7
 800b79c:	0800b7c7 	.word	0x0800b7c7
 800b7a0:	0800b7d7 	.word	0x0800b7d7
 800b7a4:	0800b7d7 	.word	0x0800b7d7
 800b7a8:	0800b7d7 	.word	0x0800b7d7
 800b7ac:	0800b7cf 	.word	0x0800b7cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7b0:	f7fd f988 	bl	8008ac4 <HAL_RCC_GetPCLK1Freq>
 800b7b4:	61b8      	str	r0, [r7, #24]
        break;
 800b7b6:	e013      	b.n	800b7e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7b8:	f7fd f998 	bl	8008aec <HAL_RCC_GetPCLK2Freq>
 800b7bc:	61b8      	str	r0, [r7, #24]
        break;
 800b7be:	e00f      	b.n	800b7e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7c0:	4b4b      	ldr	r3, [pc, #300]	; (800b8f0 <UART_SetConfig+0x4c4>)
 800b7c2:	61bb      	str	r3, [r7, #24]
        break;
 800b7c4:	e00c      	b.n	800b7e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7c6:	f7fd f86b 	bl	80088a0 <HAL_RCC_GetSysClockFreq>
 800b7ca:	61b8      	str	r0, [r7, #24]
        break;
 800b7cc:	e008      	b.n	800b7e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7d2:	61bb      	str	r3, [r7, #24]
        break;
 800b7d4:	e004      	b.n	800b7e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	77bb      	strb	r3, [r7, #30]
        break;
 800b7de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d074      	beq.n	800b8d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	005a      	lsls	r2, r3, #1
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	085b      	lsrs	r3, r3, #1
 800b7f0:	441a      	add	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	2b0f      	cmp	r3, #15
 800b800:	d916      	bls.n	800b830 <UART_SetConfig+0x404>
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b808:	d212      	bcs.n	800b830 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	f023 030f 	bic.w	r3, r3, #15
 800b812:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	085b      	lsrs	r3, r3, #1
 800b818:	b29b      	uxth	r3, r3
 800b81a:	f003 0307 	and.w	r3, r3, #7
 800b81e:	b29a      	uxth	r2, r3
 800b820:	89fb      	ldrh	r3, [r7, #14]
 800b822:	4313      	orrs	r3, r2
 800b824:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	89fa      	ldrh	r2, [r7, #14]
 800b82c:	60da      	str	r2, [r3, #12]
 800b82e:	e04f      	b.n	800b8d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	77bb      	strb	r3, [r7, #30]
 800b834:	e04c      	b.n	800b8d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b836:	7ffb      	ldrb	r3, [r7, #31]
 800b838:	2b08      	cmp	r3, #8
 800b83a:	d828      	bhi.n	800b88e <UART_SetConfig+0x462>
 800b83c:	a201      	add	r2, pc, #4	; (adr r2, 800b844 <UART_SetConfig+0x418>)
 800b83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b842:	bf00      	nop
 800b844:	0800b869 	.word	0x0800b869
 800b848:	0800b871 	.word	0x0800b871
 800b84c:	0800b879 	.word	0x0800b879
 800b850:	0800b88f 	.word	0x0800b88f
 800b854:	0800b87f 	.word	0x0800b87f
 800b858:	0800b88f 	.word	0x0800b88f
 800b85c:	0800b88f 	.word	0x0800b88f
 800b860:	0800b88f 	.word	0x0800b88f
 800b864:	0800b887 	.word	0x0800b887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b868:	f7fd f92c 	bl	8008ac4 <HAL_RCC_GetPCLK1Freq>
 800b86c:	61b8      	str	r0, [r7, #24]
        break;
 800b86e:	e013      	b.n	800b898 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b870:	f7fd f93c 	bl	8008aec <HAL_RCC_GetPCLK2Freq>
 800b874:	61b8      	str	r0, [r7, #24]
        break;
 800b876:	e00f      	b.n	800b898 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b878:	4b1d      	ldr	r3, [pc, #116]	; (800b8f0 <UART_SetConfig+0x4c4>)
 800b87a:	61bb      	str	r3, [r7, #24]
        break;
 800b87c:	e00c      	b.n	800b898 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b87e:	f7fd f80f 	bl	80088a0 <HAL_RCC_GetSysClockFreq>
 800b882:	61b8      	str	r0, [r7, #24]
        break;
 800b884:	e008      	b.n	800b898 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b88a:	61bb      	str	r3, [r7, #24]
        break;
 800b88c:	e004      	b.n	800b898 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b88e:	2300      	movs	r3, #0
 800b890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	77bb      	strb	r3, [r7, #30]
        break;
 800b896:	bf00      	nop
    }

    if (pclk != 0U)
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d018      	beq.n	800b8d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	085a      	lsrs	r2, r3, #1
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	441a      	add	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	2b0f      	cmp	r3, #15
 800b8b6:	d909      	bls.n	800b8cc <UART_SetConfig+0x4a0>
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8be:	d205      	bcs.n	800b8cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	60da      	str	r2, [r3, #12]
 800b8ca:	e001      	b.n	800b8d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b8dc:	7fbb      	ldrb	r3, [r7, #30]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3720      	adds	r7, #32
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	40007c00 	.word	0x40007c00
 800b8ec:	40023800 	.word	0x40023800
 800b8f0:	00f42400 	.word	0x00f42400

0800b8f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	2b00      	cmp	r3, #0
 800b906:	d00a      	beq.n	800b91e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	430a      	orrs	r2, r1
 800b91c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b922:	f003 0302 	and.w	r3, r3, #2
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00a      	beq.n	800b940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	430a      	orrs	r2, r1
 800b93e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b944:	f003 0304 	and.w	r3, r3, #4
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00a      	beq.n	800b962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	430a      	orrs	r2, r1
 800b960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b966:	f003 0308 	and.w	r3, r3, #8
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00a      	beq.n	800b984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	430a      	orrs	r2, r1
 800b982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b988:	f003 0310 	and.w	r3, r3, #16
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00a      	beq.n	800b9a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	430a      	orrs	r2, r1
 800b9a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	f003 0320 	and.w	r3, r3, #32
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00a      	beq.n	800b9c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	430a      	orrs	r2, r1
 800b9c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d01a      	beq.n	800ba0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	430a      	orrs	r2, r1
 800b9e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9f2:	d10a      	bne.n	800ba0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	430a      	orrs	r2, r1
 800ba08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00a      	beq.n	800ba2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	605a      	str	r2, [r3, #4]
  }
}
 800ba2c:	bf00      	nop
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af02      	add	r7, sp, #8
 800ba3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba48:	f7f7 fcfe 	bl	8003448 <HAL_GetTick>
 800ba4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0308 	and.w	r3, r3, #8
 800ba58:	2b08      	cmp	r3, #8
 800ba5a:	d10e      	bne.n	800ba7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba60:	9300      	str	r3, [sp, #0]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f81b 	bl	800baa6 <UART_WaitOnFlagUntilTimeout>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba76:	2303      	movs	r3, #3
 800ba78:	e011      	b.n	800ba9e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2220      	movs	r2, #32
 800ba7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2220      	movs	r2, #32
 800ba84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b09c      	sub	sp, #112	; 0x70
 800baaa:	af00      	add	r7, sp, #0
 800baac:	60f8      	str	r0, [r7, #12]
 800baae:	60b9      	str	r1, [r7, #8]
 800bab0:	603b      	str	r3, [r7, #0]
 800bab2:	4613      	mov	r3, r2
 800bab4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bab6:	e0a7      	b.n	800bc08 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800baba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800babe:	f000 80a3 	beq.w	800bc08 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bac2:	f7f7 fcc1 	bl	8003448 <HAL_GetTick>
 800bac6:	4602      	mov	r2, r0
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bace:	429a      	cmp	r2, r3
 800bad0:	d302      	bcc.n	800bad8 <UART_WaitOnFlagUntilTimeout+0x32>
 800bad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d13f      	bne.n	800bb58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bae0:	e853 3f00 	ldrex	r3, [r3]
 800bae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800baec:	667b      	str	r3, [r7, #100]	; 0x64
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	461a      	mov	r2, r3
 800baf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baf8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bafc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bafe:	e841 2300 	strex	r3, r2, [r1]
 800bb02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bb04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1e6      	bne.n	800bad8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	3308      	adds	r3, #8
 800bb10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb14:	e853 3f00 	ldrex	r3, [r3]
 800bb18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1c:	f023 0301 	bic.w	r3, r3, #1
 800bb20:	663b      	str	r3, [r7, #96]	; 0x60
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3308      	adds	r3, #8
 800bb28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb2a:	64ba      	str	r2, [r7, #72]	; 0x48
 800bb2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb32:	e841 2300 	strex	r3, r2, [r1]
 800bb36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bb38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1e5      	bne.n	800bb0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2220      	movs	r2, #32
 800bb42:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2220      	movs	r2, #32
 800bb48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e068      	b.n	800bc2a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f003 0304 	and.w	r3, r3, #4
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d050      	beq.n	800bc08 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb74:	d148      	bne.n	800bc08 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	e853 3f00 	ldrex	r3, [r3]
 800bb8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb94:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb9e:	637b      	str	r3, [r7, #52]	; 0x34
 800bba0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bba6:	e841 2300 	strex	r3, r2, [r1]
 800bbaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1e6      	bne.n	800bb80 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	e853 3f00 	ldrex	r3, [r3]
 800bbc0:	613b      	str	r3, [r7, #16]
   return(result);
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	f023 0301 	bic.w	r3, r3, #1
 800bbc8:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	3308      	adds	r3, #8
 800bbd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbd2:	623a      	str	r2, [r7, #32]
 800bbd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd6:	69f9      	ldr	r1, [r7, #28]
 800bbd8:	6a3a      	ldr	r2, [r7, #32]
 800bbda:	e841 2300 	strex	r3, r2, [r1]
 800bbde:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1e5      	bne.n	800bbb2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2220      	movs	r2, #32
 800bbea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2220      	movs	r2, #32
 800bbf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bc04:	2303      	movs	r3, #3
 800bc06:	e010      	b.n	800bc2a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	69da      	ldr	r2, [r3, #28]
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	4013      	ands	r3, r2
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	bf0c      	ite	eq
 800bc18:	2301      	moveq	r3, #1
 800bc1a:	2300      	movne	r3, #0
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	461a      	mov	r2, r3
 800bc20:	79fb      	ldrb	r3, [r7, #7]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	f43f af48 	beq.w	800bab8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3770      	adds	r7, #112	; 0x70
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
	...

0800bc34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b096      	sub	sp, #88	; 0x58
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	88fa      	ldrh	r2, [r7, #6]
 800bc4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2222      	movs	r2, #34	; 0x22
 800bc5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d028      	beq.n	800bcba <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc6c:	4a3e      	ldr	r2, [pc, #248]	; (800bd68 <UART_Start_Receive_DMA+0x134>)
 800bc6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc74:	4a3d      	ldr	r2, [pc, #244]	; (800bd6c <UART_Start_Receive_DMA+0x138>)
 800bc76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc7c:	4a3c      	ldr	r2, [pc, #240]	; (800bd70 <UART_Start_Receive_DMA+0x13c>)
 800bc7e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc84:	2200      	movs	r2, #0
 800bc86:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	3324      	adds	r3, #36	; 0x24
 800bc92:	4619      	mov	r1, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc98:	461a      	mov	r2, r3
 800bc9a:	88fb      	ldrh	r3, [r7, #6]
 800bc9c:	f7f8 fa6c 	bl	8004178 <HAL_DMA_Start_IT>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d009      	beq.n	800bcba <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2210      	movs	r2, #16
 800bcaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2220      	movs	r2, #32
 800bcb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e051      	b.n	800bd5e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d018      	beq.n	800bcf4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcca:	e853 3f00 	ldrex	r3, [r3]
 800bcce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcd6:	657b      	str	r3, [r7, #84]	; 0x54
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	461a      	mov	r2, r3
 800bcde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bce0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bce2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bce8:	e841 2300 	strex	r3, r2, [r1]
 800bcec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bcee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1e6      	bne.n	800bcc2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfe:	e853 3f00 	ldrex	r3, [r3]
 800bd02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd06:	f043 0301 	orr.w	r3, r3, #1
 800bd0a:	653b      	str	r3, [r7, #80]	; 0x50
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	3308      	adds	r3, #8
 800bd12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd14:	637a      	str	r2, [r7, #52]	; 0x34
 800bd16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd1c:	e841 2300 	strex	r3, r2, [r1]
 800bd20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1e5      	bne.n	800bcf4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	e853 3f00 	ldrex	r3, [r3]
 800bd36:	613b      	str	r3, [r7, #16]
   return(result);
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3308      	adds	r3, #8
 800bd46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd48:	623a      	str	r2, [r7, #32]
 800bd4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4c:	69f9      	ldr	r1, [r7, #28]
 800bd4e:	6a3a      	ldr	r2, [r7, #32]
 800bd50:	e841 2300 	strex	r3, r2, [r1]
 800bd54:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e5      	bne.n	800bd28 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3758      	adds	r7, #88	; 0x58
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	0800bf3b 	.word	0x0800bf3b
 800bd6c:	0800c063 	.word	0x0800c063
 800bd70:	0800c0a1 	.word	0x0800c0a1

0800bd74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b089      	sub	sp, #36	; 0x24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	e853 3f00 	ldrex	r3, [r3]
 800bd88:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bd90:	61fb      	str	r3, [r7, #28]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	461a      	mov	r2, r3
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	61bb      	str	r3, [r7, #24]
 800bd9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9e:	6979      	ldr	r1, [r7, #20]
 800bda0:	69ba      	ldr	r2, [r7, #24]
 800bda2:	e841 2300 	strex	r3, r2, [r1]
 800bda6:	613b      	str	r3, [r7, #16]
   return(result);
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1e6      	bne.n	800bd7c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2220      	movs	r2, #32
 800bdb2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800bdb4:	bf00      	nop
 800bdb6:	3724      	adds	r7, #36	; 0x24
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b095      	sub	sp, #84	; 0x54
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd0:	e853 3f00 	ldrex	r3, [r3]
 800bdd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bddc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	461a      	mov	r2, r3
 800bde4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde6:	643b      	str	r3, [r7, #64]	; 0x40
 800bde8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bdec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdee:	e841 2300 	strex	r3, r2, [r1]
 800bdf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1e6      	bne.n	800bdc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	3308      	adds	r3, #8
 800be00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	e853 3f00 	ldrex	r3, [r3]
 800be08:	61fb      	str	r3, [r7, #28]
   return(result);
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	f023 0301 	bic.w	r3, r3, #1
 800be10:	64bb      	str	r3, [r7, #72]	; 0x48
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	3308      	adds	r3, #8
 800be18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be22:	e841 2300 	strex	r3, r2, [r1]
 800be26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1e5      	bne.n	800bdfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be32:	2b01      	cmp	r3, #1
 800be34:	d118      	bne.n	800be68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	e853 3f00 	ldrex	r3, [r3]
 800be42:	60bb      	str	r3, [r7, #8]
   return(result);
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	f023 0310 	bic.w	r3, r3, #16
 800be4a:	647b      	str	r3, [r7, #68]	; 0x44
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	461a      	mov	r2, r3
 800be52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be54:	61bb      	str	r3, [r7, #24]
 800be56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be58:	6979      	ldr	r1, [r7, #20]
 800be5a:	69ba      	ldr	r2, [r7, #24]
 800be5c:	e841 2300 	strex	r3, r2, [r1]
 800be60:	613b      	str	r3, [r7, #16]
   return(result);
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1e6      	bne.n	800be36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2220      	movs	r2, #32
 800be6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800be7c:	bf00      	nop
 800be7e:	3754      	adds	r7, #84	; 0x54
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b090      	sub	sp, #64	; 0x40
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be94:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	69db      	ldr	r3, [r3, #28]
 800be9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be9e:	d037      	beq.n	800bf10 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800bea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bea2:	2200      	movs	r2, #0
 800bea4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3308      	adds	r3, #8
 800beae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb2:	e853 3f00 	ldrex	r3, [r3]
 800beb6:	623b      	str	r3, [r7, #32]
   return(result);
 800beb8:	6a3b      	ldr	r3, [r7, #32]
 800beba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bebe:	63bb      	str	r3, [r7, #56]	; 0x38
 800bec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3308      	adds	r3, #8
 800bec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bec8:	633a      	str	r2, [r7, #48]	; 0x30
 800beca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800becc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bed0:	e841 2300 	strex	r3, r2, [r1]
 800bed4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1e5      	bne.n	800bea8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	e853 3f00 	ldrex	r3, [r3]
 800bee8:	60fb      	str	r3, [r7, #12]
   return(result);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bef0:	637b      	str	r3, [r7, #52]	; 0x34
 800bef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	461a      	mov	r2, r3
 800bef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800befa:	61fb      	str	r3, [r7, #28]
 800befc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befe:	69b9      	ldr	r1, [r7, #24]
 800bf00:	69fa      	ldr	r2, [r7, #28]
 800bf02:	e841 2300 	strex	r3, r2, [r1]
 800bf06:	617b      	str	r3, [r7, #20]
   return(result);
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1e6      	bne.n	800bedc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf0e:	e002      	b.n	800bf16 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800bf10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf12:	f7f6 ffdf 	bl	8002ed4 <HAL_UART_TxCpltCallback>
}
 800bf16:	bf00      	nop
 800bf18:	3740      	adds	r7, #64	; 0x40
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f7ff fa53 	bl	800b3d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf32:	bf00      	nop
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b09c      	sub	sp, #112	; 0x70
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf46:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	69db      	ldr	r3, [r3, #28]
 800bf4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf50:	d071      	beq.n	800c036 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800bf52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf54:	2200      	movs	r2, #0
 800bf56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf62:	e853 3f00 	ldrex	r3, [r3]
 800bf66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bf68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf6e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	461a      	mov	r2, r3
 800bf76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf78:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf7a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf80:	e841 2300 	strex	r3, r2, [r1]
 800bf84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bf86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1e6      	bne.n	800bf5a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	3308      	adds	r3, #8
 800bf92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf96:	e853 3f00 	ldrex	r3, [r3]
 800bf9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf9e:	f023 0301 	bic.w	r3, r3, #1
 800bfa2:	667b      	str	r3, [r7, #100]	; 0x64
 800bfa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	3308      	adds	r3, #8
 800bfaa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bfac:	647a      	str	r2, [r7, #68]	; 0x44
 800bfae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bfb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfb4:	e841 2300 	strex	r3, r2, [r1]
 800bfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bfba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1e5      	bne.n	800bf8c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	3308      	adds	r3, #8
 800bfc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfca:	e853 3f00 	ldrex	r3, [r3]
 800bfce:	623b      	str	r3, [r7, #32]
   return(result);
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfd6:	663b      	str	r3, [r7, #96]	; 0x60
 800bfd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	3308      	adds	r3, #8
 800bfde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bfe0:	633a      	str	r2, [r7, #48]	; 0x30
 800bfe2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfe8:	e841 2300 	strex	r3, r2, [r1]
 800bfec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1e5      	bne.n	800bfc0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bff6:	2220      	movs	r2, #32
 800bff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c000:	2b01      	cmp	r3, #1
 800c002:	d118      	bne.n	800c036 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	e853 3f00 	ldrex	r3, [r3]
 800c010:	60fb      	str	r3, [r7, #12]
   return(result);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f023 0310 	bic.w	r3, r3, #16
 800c018:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c01a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	461a      	mov	r2, r3
 800c020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c022:	61fb      	str	r3, [r7, #28]
 800c024:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c026:	69b9      	ldr	r1, [r7, #24]
 800c028:	69fa      	ldr	r2, [r7, #28]
 800c02a:	e841 2300 	strex	r3, r2, [r1]
 800c02e:	617b      	str	r3, [r7, #20]
   return(result);
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1e6      	bne.n	800c004 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c038:	2200      	movs	r2, #0
 800c03a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c03c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c03e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c040:	2b01      	cmp	r3, #1
 800c042:	d107      	bne.n	800c054 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c046:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c04a:	4619      	mov	r1, r3
 800c04c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c04e:	f7ff f9e1 	bl	800b414 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c052:	e002      	b.n	800c05a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c054:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c056:	f7f6 ff53 	bl	8002f00 <HAL_UART_RxCpltCallback>
}
 800c05a:	bf00      	nop
 800c05c:	3770      	adds	r7, #112	; 0x70
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b084      	sub	sp, #16
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2201      	movs	r2, #1
 800c074:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d109      	bne.n	800c092 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c084:	085b      	lsrs	r3, r3, #1
 800c086:	b29b      	uxth	r3, r3
 800c088:	4619      	mov	r1, r3
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f7ff f9c2 	bl	800b414 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c090:	e002      	b.n	800c098 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f7ff f9aa 	bl	800b3ec <HAL_UART_RxHalfCpltCallback>
}
 800c098:	bf00      	nop
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0c6:	2b80      	cmp	r3, #128	; 0x80
 800c0c8:	d109      	bne.n	800c0de <UART_DMAError+0x3e>
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	2b21      	cmp	r3, #33	; 0x21
 800c0ce:	d106      	bne.n	800c0de <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c0d8:	6978      	ldr	r0, [r7, #20]
 800c0da:	f7ff fe4b 	bl	800bd74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0e8:	2b40      	cmp	r3, #64	; 0x40
 800c0ea:	d109      	bne.n	800c100 <UART_DMAError+0x60>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b22      	cmp	r3, #34	; 0x22
 800c0f0:	d106      	bne.n	800c100 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c0fa:	6978      	ldr	r0, [r7, #20]
 800c0fc:	f7ff fe60 	bl	800bdc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c106:	f043 0210 	orr.w	r2, r3, #16
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c110:	6978      	ldr	r0, [r7, #20]
 800c112:	f7ff f975 	bl	800b400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c116:	bf00      	nop
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b084      	sub	sp, #16
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f7ff f95f 	bl	800b400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c142:	bf00      	nop
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b088      	sub	sp, #32
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	e853 3f00 	ldrex	r3, [r3]
 800c15e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c166:	61fb      	str	r3, [r7, #28]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	461a      	mov	r2, r3
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	61bb      	str	r3, [r7, #24]
 800c172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c174:	6979      	ldr	r1, [r7, #20]
 800c176:	69ba      	ldr	r2, [r7, #24]
 800c178:	e841 2300 	strex	r3, r2, [r1]
 800c17c:	613b      	str	r3, [r7, #16]
   return(result);
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1e6      	bne.n	800c152 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2220      	movs	r2, #32
 800c188:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7f6 fe9f 	bl	8002ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c196:	bf00      	nop
 800c198:	3720      	adds	r7, #32
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
	...

0800c1a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b084      	sub	sp, #16
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
 800c1aa:	f107 001c 	add.w	r0, r7, #28
 800c1ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d120      	bne.n	800c1fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	68da      	ldr	r2, [r3, #12]
 800c1c8:	4b20      	ldr	r3, [pc, #128]	; (800c24c <USB_CoreInit+0xac>)
 800c1ca:	4013      	ands	r3, r2
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d105      	bne.n	800c1ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fa96 	bl	800c720 <USB_CoreReset>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	73fb      	strb	r3, [r7, #15]
 800c1f8:	e010      	b.n	800c21c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fa8a 	bl	800c720 <USB_CoreReset>
 800c20c:	4603      	mov	r3, r0
 800c20e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c214:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d10b      	bne.n	800c23a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	f043 0206 	orr.w	r2, r3, #6
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	f043 0220 	orr.w	r2, r3, #32
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c246:	b004      	add	sp, #16
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	ffbdffbf 	.word	0xffbdffbf

0800c250 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f023 0201 	bic.w	r2, r3, #1
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	370c      	adds	r7, #12
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	460b      	mov	r3, r1
 800c27c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c27e:	2300      	movs	r3, #0
 800c280:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c28e:	78fb      	ldrb	r3, [r7, #3]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d115      	bne.n	800c2c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c2a0:	2001      	movs	r0, #1
 800c2a2:	f7f7 f8dd 	bl	8003460 <HAL_Delay>
      ms++;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 fa29 	bl	800c704 <USB_GetMode>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d01e      	beq.n	800c2f6 <USB_SetCurrentMode+0x84>
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2b31      	cmp	r3, #49	; 0x31
 800c2bc:	d9f0      	bls.n	800c2a0 <USB_SetCurrentMode+0x2e>
 800c2be:	e01a      	b.n	800c2f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c2c0:	78fb      	ldrb	r3, [r7, #3]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d115      	bne.n	800c2f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c2d2:	2001      	movs	r0, #1
 800c2d4:	f7f7 f8c4 	bl	8003460 <HAL_Delay>
      ms++;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fa10 	bl	800c704 <USB_GetMode>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d005      	beq.n	800c2f6 <USB_SetCurrentMode+0x84>
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b31      	cmp	r3, #49	; 0x31
 800c2ee:	d9f0      	bls.n	800c2d2 <USB_SetCurrentMode+0x60>
 800c2f0:	e001      	b.n	800c2f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e005      	b.n	800c302 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2b32      	cmp	r3, #50	; 0x32
 800c2fa:	d101      	bne.n	800c300 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e000      	b.n	800c302 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
	...

0800c30c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c30c:	b084      	sub	sp, #16
 800c30e:	b580      	push	{r7, lr}
 800c310:	b086      	sub	sp, #24
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c31a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c31e:	2300      	movs	r3, #0
 800c320:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c326:	2300      	movs	r3, #0
 800c328:	613b      	str	r3, [r7, #16]
 800c32a:	e009      	b.n	800c340 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	3340      	adds	r3, #64	; 0x40
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4413      	add	r3, r2
 800c336:	2200      	movs	r2, #0
 800c338:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	3301      	adds	r3, #1
 800c33e:	613b      	str	r3, [r7, #16]
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	2b0e      	cmp	r3, #14
 800c344:	d9f2      	bls.n	800c32c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d11c      	bne.n	800c386 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c35a:	f043 0302 	orr.w	r3, r3, #2
 800c35e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c364:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	e005      	b.n	800c392 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c38a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c398:	461a      	mov	r2, r3
 800c39a:	2300      	movs	r3, #0
 800c39c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	680b      	ldr	r3, [r1, #0]
 800c3b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d10c      	bne.n	800c3d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d104      	bne.n	800c3c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c3be:	2100      	movs	r1, #0
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 f965 	bl	800c690 <USB_SetDevSpeed>
 800c3c6:	e008      	b.n	800c3da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f960 	bl	800c690 <USB_SetDevSpeed>
 800c3d0:	e003      	b.n	800c3da <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c3d2:	2103      	movs	r1, #3
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 f95b 	bl	800c690 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c3da:	2110      	movs	r1, #16
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 f8f3 	bl	800c5c8 <USB_FlushTxFifo>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d001      	beq.n	800c3ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f91f 	bl	800c630 <USB_FlushRxFifo>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d001      	beq.n	800c3fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c402:	461a      	mov	r2, r3
 800c404:	2300      	movs	r3, #0
 800c406:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c40e:	461a      	mov	r2, r3
 800c410:	2300      	movs	r3, #0
 800c412:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c41a:	461a      	mov	r2, r3
 800c41c:	2300      	movs	r3, #0
 800c41e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c420:	2300      	movs	r3, #0
 800c422:	613b      	str	r3, [r7, #16]
 800c424:	e043      	b.n	800c4ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	015a      	lsls	r2, r3, #5
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	4413      	add	r3, r2
 800c42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c43c:	d118      	bne.n	800c470 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10a      	bne.n	800c45a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	015a      	lsls	r2, r3, #5
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	4413      	add	r3, r2
 800c44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c450:	461a      	mov	r2, r3
 800c452:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c456:	6013      	str	r3, [r2, #0]
 800c458:	e013      	b.n	800c482 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	015a      	lsls	r2, r3, #5
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	4413      	add	r3, r2
 800c462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c466:	461a      	mov	r2, r3
 800c468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c46c:	6013      	str	r3, [r2, #0]
 800c46e:	e008      	b.n	800c482 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	015a      	lsls	r2, r3, #5
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	4413      	add	r3, r2
 800c478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c47c:	461a      	mov	r2, r3
 800c47e:	2300      	movs	r3, #0
 800c480:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	015a      	lsls	r2, r3, #5
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	4413      	add	r3, r2
 800c48a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c48e:	461a      	mov	r2, r3
 800c490:	2300      	movs	r3, #0
 800c492:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	015a      	lsls	r2, r3, #5
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	4413      	add	r3, r2
 800c49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c4a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	613b      	str	r3, [r7, #16]
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d3b7      	bcc.n	800c426 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	613b      	str	r3, [r7, #16]
 800c4ba:	e043      	b.n	800c544 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	015a      	lsls	r2, r3, #5
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c4ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4d2:	d118      	bne.n	800c506 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d10a      	bne.n	800c4f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	015a      	lsls	r2, r3, #5
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c4ec:	6013      	str	r3, [r2, #0]
 800c4ee:	e013      	b.n	800c518 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	015a      	lsls	r2, r3, #5
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c502:	6013      	str	r3, [r2, #0]
 800c504:	e008      	b.n	800c518 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	015a      	lsls	r2, r3, #5
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	4413      	add	r3, r2
 800c50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c512:	461a      	mov	r2, r3
 800c514:	2300      	movs	r3, #0
 800c516:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	015a      	lsls	r2, r3, #5
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	4413      	add	r3, r2
 800c520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c524:	461a      	mov	r2, r3
 800c526:	2300      	movs	r3, #0
 800c528:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	015a      	lsls	r2, r3, #5
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	4413      	add	r3, r2
 800c532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c536:	461a      	mov	r2, r3
 800c538:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c53c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	3301      	adds	r3, #1
 800c542:	613b      	str	r3, [r7, #16]
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	693a      	ldr	r2, [r7, #16]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d3b7      	bcc.n	800c4bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c552:	691b      	ldr	r3, [r3, #16]
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c55a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c55e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c56c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c570:	2b00      	cmp	r3, #0
 800c572:	d105      	bne.n	800c580 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	699b      	ldr	r3, [r3, #24]
 800c578:	f043 0210 	orr.w	r2, r3, #16
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	699a      	ldr	r2, [r3, #24]
 800c584:	4b0e      	ldr	r3, [pc, #56]	; (800c5c0 <USB_DevInit+0x2b4>)
 800c586:	4313      	orrs	r3, r2
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d005      	beq.n	800c59e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	699b      	ldr	r3, [r3, #24]
 800c596:	f043 0208 	orr.w	r2, r3, #8
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c59e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d105      	bne.n	800c5b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	699a      	ldr	r2, [r3, #24]
 800c5a8:	4b06      	ldr	r3, [pc, #24]	; (800c5c4 <USB_DevInit+0x2b8>)
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c5b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3718      	adds	r7, #24
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c5bc:	b004      	add	sp, #16
 800c5be:	4770      	bx	lr
 800c5c0:	803c3800 	.word	0x803c3800
 800c5c4:	40000004 	.word	0x40000004

0800c5c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4a13      	ldr	r2, [pc, #76]	; (800c62c <USB_FlushTxFifo+0x64>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d901      	bls.n	800c5e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	e01b      	b.n	800c620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	691b      	ldr	r3, [r3, #16]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	daf2      	bge.n	800c5d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	019b      	lsls	r3, r3, #6
 800c5f8:	f043 0220 	orr.w	r2, r3, #32
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	3301      	adds	r3, #1
 800c604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	4a08      	ldr	r2, [pc, #32]	; (800c62c <USB_FlushTxFifo+0x64>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d901      	bls.n	800c612 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c60e:	2303      	movs	r3, #3
 800c610:	e006      	b.n	800c620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	691b      	ldr	r3, [r3, #16]
 800c616:	f003 0320 	and.w	r3, r3, #32
 800c61a:	2b20      	cmp	r3, #32
 800c61c:	d0f0      	beq.n	800c600 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3714      	adds	r7, #20
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	00030d40 	.word	0x00030d40

0800c630 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c630:	b480      	push	{r7}
 800c632:	b085      	sub	sp, #20
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c638:	2300      	movs	r3, #0
 800c63a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	3301      	adds	r3, #1
 800c640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	4a11      	ldr	r2, [pc, #68]	; (800c68c <USB_FlushRxFifo+0x5c>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d901      	bls.n	800c64e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c64a:	2303      	movs	r3, #3
 800c64c:	e018      	b.n	800c680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	daf2      	bge.n	800c63c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c656:	2300      	movs	r3, #0
 800c658:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2210      	movs	r2, #16
 800c65e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	3301      	adds	r3, #1
 800c664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	4a08      	ldr	r2, [pc, #32]	; (800c68c <USB_FlushRxFifo+0x5c>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d901      	bls.n	800c672 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c66e:	2303      	movs	r3, #3
 800c670:	e006      	b.n	800c680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	f003 0310 	and.w	r3, r3, #16
 800c67a:	2b10      	cmp	r3, #16
 800c67c:	d0f0      	beq.n	800c660 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3714      	adds	r7, #20
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	00030d40 	.word	0x00030d40

0800c690 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c690:	b480      	push	{r7}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	460b      	mov	r3, r1
 800c69a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	78fb      	ldrb	r3, [r7, #3]
 800c6aa:	68f9      	ldr	r1, [r7, #12]
 800c6ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b085      	sub	sp, #20
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c6dc:	f023 0303 	bic.w	r3, r3, #3
 800c6e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6f0:	f043 0302 	orr.w	r3, r3, #2
 800c6f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	695b      	ldr	r3, [r3, #20]
 800c710:	f003 0301 	and.w	r3, r3, #1
}
 800c714:	4618      	mov	r0, r3
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c728:	2300      	movs	r3, #0
 800c72a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	3301      	adds	r3, #1
 800c730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	4a13      	ldr	r2, [pc, #76]	; (800c784 <USB_CoreReset+0x64>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d901      	bls.n	800c73e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c73a:	2303      	movs	r3, #3
 800c73c:	e01b      	b.n	800c776 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	2b00      	cmp	r3, #0
 800c744:	daf2      	bge.n	800c72c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c746:	2300      	movs	r3, #0
 800c748:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	f043 0201 	orr.w	r2, r3, #1
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	3301      	adds	r3, #1
 800c75a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	4a09      	ldr	r2, [pc, #36]	; (800c784 <USB_CoreReset+0x64>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d901      	bls.n	800c768 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c764:	2303      	movs	r3, #3
 800c766:	e006      	b.n	800c776 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	691b      	ldr	r3, [r3, #16]
 800c76c:	f003 0301 	and.w	r3, r3, #1
 800c770:	2b01      	cmp	r3, #1
 800c772:	d0f0      	beq.n	800c756 <USB_CoreReset+0x36>

  return HAL_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	00030d40 	.word	0x00030d40

0800c788 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800c78e:	4b8d      	ldr	r3, [pc, #564]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c790:	22c0      	movs	r2, #192	; 0xc0
 800c792:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800c794:	4b8b      	ldr	r3, [pc, #556]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c796:	22a8      	movs	r2, #168	; 0xa8
 800c798:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800c79a:	4b8a      	ldr	r3, [pc, #552]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c79c:	2201      	movs	r2, #1
 800c79e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 59;
 800c7a0:	4b88      	ldr	r3, [pc, #544]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c7a2:	223b      	movs	r2, #59	; 0x3b
 800c7a4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800c7a6:	4b88      	ldr	r3, [pc, #544]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c7a8:	22ff      	movs	r2, #255	; 0xff
 800c7aa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800c7ac:	4b86      	ldr	r3, [pc, #536]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c7ae:	22ff      	movs	r2, #255	; 0xff
 800c7b0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800c7b2:	4b85      	ldr	r3, [pc, #532]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c7b4:	22ff      	movs	r2, #255	; 0xff
 800c7b6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800c7b8:	4b83      	ldr	r3, [pc, #524]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800c7be:	4b83      	ldr	r3, [pc, #524]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c7c0:	22c0      	movs	r2, #192	; 0xc0
 800c7c2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800c7c4:	4b81      	ldr	r3, [pc, #516]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c7c6:	22a8      	movs	r2, #168	; 0xa8
 800c7c8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800c7ca:	4b80      	ldr	r3, [pc, #512]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 66;
 800c7d0:	4b7e      	ldr	r3, [pc, #504]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c7d2:	2242      	movs	r2, #66	; 0x42
 800c7d4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800c7d6:	f000 fd1d 	bl	800d214 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c7da:	4b7a      	ldr	r3, [pc, #488]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	061a      	lsls	r2, r3, #24
 800c7e0:	4b78      	ldr	r3, [pc, #480]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c7e2:	785b      	ldrb	r3, [r3, #1]
 800c7e4:	041b      	lsls	r3, r3, #16
 800c7e6:	431a      	orrs	r2, r3
 800c7e8:	4b76      	ldr	r3, [pc, #472]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c7ea:	789b      	ldrb	r3, [r3, #2]
 800c7ec:	021b      	lsls	r3, r3, #8
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	4a74      	ldr	r2, [pc, #464]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c7f2:	78d2      	ldrb	r2, [r2, #3]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	061a      	lsls	r2, r3, #24
 800c7f8:	4b72      	ldr	r3, [pc, #456]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	0619      	lsls	r1, r3, #24
 800c7fe:	4b71      	ldr	r3, [pc, #452]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c800:	785b      	ldrb	r3, [r3, #1]
 800c802:	041b      	lsls	r3, r3, #16
 800c804:	4319      	orrs	r1, r3
 800c806:	4b6f      	ldr	r3, [pc, #444]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c808:	789b      	ldrb	r3, [r3, #2]
 800c80a:	021b      	lsls	r3, r3, #8
 800c80c:	430b      	orrs	r3, r1
 800c80e:	496d      	ldr	r1, [pc, #436]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c810:	78c9      	ldrb	r1, [r1, #3]
 800c812:	430b      	orrs	r3, r1
 800c814:	021b      	lsls	r3, r3, #8
 800c816:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c81a:	431a      	orrs	r2, r3
 800c81c:	4b69      	ldr	r3, [pc, #420]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	0619      	lsls	r1, r3, #24
 800c822:	4b68      	ldr	r3, [pc, #416]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c824:	785b      	ldrb	r3, [r3, #1]
 800c826:	041b      	lsls	r3, r3, #16
 800c828:	4319      	orrs	r1, r3
 800c82a:	4b66      	ldr	r3, [pc, #408]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c82c:	789b      	ldrb	r3, [r3, #2]
 800c82e:	021b      	lsls	r3, r3, #8
 800c830:	430b      	orrs	r3, r1
 800c832:	4964      	ldr	r1, [pc, #400]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c834:	78c9      	ldrb	r1, [r1, #3]
 800c836:	430b      	orrs	r3, r1
 800c838:	0a1b      	lsrs	r3, r3, #8
 800c83a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c83e:	431a      	orrs	r2, r3
 800c840:	4b60      	ldr	r3, [pc, #384]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	0619      	lsls	r1, r3, #24
 800c846:	4b5f      	ldr	r3, [pc, #380]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c848:	785b      	ldrb	r3, [r3, #1]
 800c84a:	041b      	lsls	r3, r3, #16
 800c84c:	4319      	orrs	r1, r3
 800c84e:	4b5d      	ldr	r3, [pc, #372]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c850:	789b      	ldrb	r3, [r3, #2]
 800c852:	021b      	lsls	r3, r3, #8
 800c854:	430b      	orrs	r3, r1
 800c856:	495b      	ldr	r1, [pc, #364]	; (800c9c4 <MX_LWIP_Init+0x23c>)
 800c858:	78c9      	ldrb	r1, [r1, #3]
 800c85a:	430b      	orrs	r3, r1
 800c85c:	0e1b      	lsrs	r3, r3, #24
 800c85e:	4313      	orrs	r3, r2
 800c860:	4a5b      	ldr	r2, [pc, #364]	; (800c9d0 <MX_LWIP_Init+0x248>)
 800c862:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c864:	4b58      	ldr	r3, [pc, #352]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	061a      	lsls	r2, r3, #24
 800c86a:	4b57      	ldr	r3, [pc, #348]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c86c:	785b      	ldrb	r3, [r3, #1]
 800c86e:	041b      	lsls	r3, r3, #16
 800c870:	431a      	orrs	r2, r3
 800c872:	4b55      	ldr	r3, [pc, #340]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c874:	789b      	ldrb	r3, [r3, #2]
 800c876:	021b      	lsls	r3, r3, #8
 800c878:	4313      	orrs	r3, r2
 800c87a:	4a53      	ldr	r2, [pc, #332]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c87c:	78d2      	ldrb	r2, [r2, #3]
 800c87e:	4313      	orrs	r3, r2
 800c880:	061a      	lsls	r2, r3, #24
 800c882:	4b51      	ldr	r3, [pc, #324]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	0619      	lsls	r1, r3, #24
 800c888:	4b4f      	ldr	r3, [pc, #316]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c88a:	785b      	ldrb	r3, [r3, #1]
 800c88c:	041b      	lsls	r3, r3, #16
 800c88e:	4319      	orrs	r1, r3
 800c890:	4b4d      	ldr	r3, [pc, #308]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c892:	789b      	ldrb	r3, [r3, #2]
 800c894:	021b      	lsls	r3, r3, #8
 800c896:	430b      	orrs	r3, r1
 800c898:	494b      	ldr	r1, [pc, #300]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c89a:	78c9      	ldrb	r1, [r1, #3]
 800c89c:	430b      	orrs	r3, r1
 800c89e:	021b      	lsls	r3, r3, #8
 800c8a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c8a4:	431a      	orrs	r2, r3
 800c8a6:	4b48      	ldr	r3, [pc, #288]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	0619      	lsls	r1, r3, #24
 800c8ac:	4b46      	ldr	r3, [pc, #280]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c8ae:	785b      	ldrb	r3, [r3, #1]
 800c8b0:	041b      	lsls	r3, r3, #16
 800c8b2:	4319      	orrs	r1, r3
 800c8b4:	4b44      	ldr	r3, [pc, #272]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c8b6:	789b      	ldrb	r3, [r3, #2]
 800c8b8:	021b      	lsls	r3, r3, #8
 800c8ba:	430b      	orrs	r3, r1
 800c8bc:	4942      	ldr	r1, [pc, #264]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c8be:	78c9      	ldrb	r1, [r1, #3]
 800c8c0:	430b      	orrs	r3, r1
 800c8c2:	0a1b      	lsrs	r3, r3, #8
 800c8c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c8c8:	431a      	orrs	r2, r3
 800c8ca:	4b3f      	ldr	r3, [pc, #252]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	0619      	lsls	r1, r3, #24
 800c8d0:	4b3d      	ldr	r3, [pc, #244]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c8d2:	785b      	ldrb	r3, [r3, #1]
 800c8d4:	041b      	lsls	r3, r3, #16
 800c8d6:	4319      	orrs	r1, r3
 800c8d8:	4b3b      	ldr	r3, [pc, #236]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c8da:	789b      	ldrb	r3, [r3, #2]
 800c8dc:	021b      	lsls	r3, r3, #8
 800c8de:	430b      	orrs	r3, r1
 800c8e0:	4939      	ldr	r1, [pc, #228]	; (800c9c8 <MX_LWIP_Init+0x240>)
 800c8e2:	78c9      	ldrb	r1, [r1, #3]
 800c8e4:	430b      	orrs	r3, r1
 800c8e6:	0e1b      	lsrs	r3, r3, #24
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	4a3a      	ldr	r2, [pc, #232]	; (800c9d4 <MX_LWIP_Init+0x24c>)
 800c8ec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c8ee:	4b37      	ldr	r3, [pc, #220]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	061a      	lsls	r2, r3, #24
 800c8f4:	4b35      	ldr	r3, [pc, #212]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c8f6:	785b      	ldrb	r3, [r3, #1]
 800c8f8:	041b      	lsls	r3, r3, #16
 800c8fa:	431a      	orrs	r2, r3
 800c8fc:	4b33      	ldr	r3, [pc, #204]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c8fe:	789b      	ldrb	r3, [r3, #2]
 800c900:	021b      	lsls	r3, r3, #8
 800c902:	4313      	orrs	r3, r2
 800c904:	4a31      	ldr	r2, [pc, #196]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c906:	78d2      	ldrb	r2, [r2, #3]
 800c908:	4313      	orrs	r3, r2
 800c90a:	061a      	lsls	r2, r3, #24
 800c90c:	4b2f      	ldr	r3, [pc, #188]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	0619      	lsls	r1, r3, #24
 800c912:	4b2e      	ldr	r3, [pc, #184]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c914:	785b      	ldrb	r3, [r3, #1]
 800c916:	041b      	lsls	r3, r3, #16
 800c918:	4319      	orrs	r1, r3
 800c91a:	4b2c      	ldr	r3, [pc, #176]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c91c:	789b      	ldrb	r3, [r3, #2]
 800c91e:	021b      	lsls	r3, r3, #8
 800c920:	430b      	orrs	r3, r1
 800c922:	492a      	ldr	r1, [pc, #168]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c924:	78c9      	ldrb	r1, [r1, #3]
 800c926:	430b      	orrs	r3, r1
 800c928:	021b      	lsls	r3, r3, #8
 800c92a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c92e:	431a      	orrs	r2, r3
 800c930:	4b26      	ldr	r3, [pc, #152]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	0619      	lsls	r1, r3, #24
 800c936:	4b25      	ldr	r3, [pc, #148]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c938:	785b      	ldrb	r3, [r3, #1]
 800c93a:	041b      	lsls	r3, r3, #16
 800c93c:	4319      	orrs	r1, r3
 800c93e:	4b23      	ldr	r3, [pc, #140]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c940:	789b      	ldrb	r3, [r3, #2]
 800c942:	021b      	lsls	r3, r3, #8
 800c944:	430b      	orrs	r3, r1
 800c946:	4921      	ldr	r1, [pc, #132]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c948:	78c9      	ldrb	r1, [r1, #3]
 800c94a:	430b      	orrs	r3, r1
 800c94c:	0a1b      	lsrs	r3, r3, #8
 800c94e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c952:	431a      	orrs	r2, r3
 800c954:	4b1d      	ldr	r3, [pc, #116]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	0619      	lsls	r1, r3, #24
 800c95a:	4b1c      	ldr	r3, [pc, #112]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c95c:	785b      	ldrb	r3, [r3, #1]
 800c95e:	041b      	lsls	r3, r3, #16
 800c960:	4319      	orrs	r1, r3
 800c962:	4b1a      	ldr	r3, [pc, #104]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c964:	789b      	ldrb	r3, [r3, #2]
 800c966:	021b      	lsls	r3, r3, #8
 800c968:	430b      	orrs	r3, r1
 800c96a:	4918      	ldr	r1, [pc, #96]	; (800c9cc <MX_LWIP_Init+0x244>)
 800c96c:	78c9      	ldrb	r1, [r1, #3]
 800c96e:	430b      	orrs	r3, r1
 800c970:	0e1b      	lsrs	r3, r3, #24
 800c972:	4313      	orrs	r3, r2
 800c974:	4a18      	ldr	r2, [pc, #96]	; (800c9d8 <MX_LWIP_Init+0x250>)
 800c976:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800c978:	4b18      	ldr	r3, [pc, #96]	; (800c9dc <MX_LWIP_Init+0x254>)
 800c97a:	9302      	str	r3, [sp, #8]
 800c97c:	4b18      	ldr	r3, [pc, #96]	; (800c9e0 <MX_LWIP_Init+0x258>)
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	2300      	movs	r3, #0
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	4b14      	ldr	r3, [pc, #80]	; (800c9d8 <MX_LWIP_Init+0x250>)
 800c986:	4a13      	ldr	r2, [pc, #76]	; (800c9d4 <MX_LWIP_Init+0x24c>)
 800c988:	4911      	ldr	r1, [pc, #68]	; (800c9d0 <MX_LWIP_Init+0x248>)
 800c98a:	4816      	ldr	r0, [pc, #88]	; (800c9e4 <MX_LWIP_Init+0x25c>)
 800c98c:	f001 f92e 	bl	800dbec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c990:	4814      	ldr	r0, [pc, #80]	; (800c9e4 <MX_LWIP_Init+0x25c>)
 800c992:	f001 fadd 	bl	800df50 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c996:	4b13      	ldr	r3, [pc, #76]	; (800c9e4 <MX_LWIP_Init+0x25c>)
 800c998:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c99c:	089b      	lsrs	r3, r3, #2
 800c99e:	f003 0301 	and.w	r3, r3, #1
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d003      	beq.n	800c9b0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800c9a8:	480e      	ldr	r0, [pc, #56]	; (800c9e4 <MX_LWIP_Init+0x25c>)
 800c9aa:	f001 fae1 	bl	800df70 <netif_set_up>
 800c9ae:	e002      	b.n	800c9b6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800c9b0:	480c      	ldr	r0, [pc, #48]	; (800c9e4 <MX_LWIP_Init+0x25c>)
 800c9b2:	f001 fb49 	bl	800e048 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c9b6:	490c      	ldr	r1, [pc, #48]	; (800c9e8 <MX_LWIP_Init+0x260>)
 800c9b8:	480a      	ldr	r0, [pc, #40]	; (800c9e4 <MX_LWIP_Init+0x25c>)
 800c9ba:	f001 fbdb 	bl	800e174 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c9be:	bf00      	nop
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	200016fc 	.word	0x200016fc
 800c9c8:	20001700 	.word	0x20001700
 800c9cc:	20001704 	.word	0x20001704
 800c9d0:	200016f0 	.word	0x200016f0
 800c9d4:	200016f4 	.word	0x200016f4
 800c9d8:	200016f8 	.word	0x200016f8
 800c9dc:	080172e9 	.word	0x080172e9
 800c9e0:	0800cd01 	.word	0x0800cd01
 800c9e4:	200016bc 	.word	0x200016bc
 800c9e8:	0800c9ed 	.word	0x0800c9ed

0800c9ec <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c9f4:	bf00      	nop
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <SCB_InvalidateDCache_by_Addr>:
{
 800ca00:	b480      	push	{r7}
 800ca02:	b087      	sub	sp, #28
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800ca12:	2320      	movs	r3, #32
 800ca14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ca16:	f3bf 8f4f 	dsb	sy
}
 800ca1a:	bf00      	nop
    while (op_size > 0) {
 800ca1c:	e00b      	b.n	800ca36 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800ca1e:	4a0d      	ldr	r2, [pc, #52]	; (800ca54 <SCB_InvalidateDCache_by_Addr+0x54>)
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	693a      	ldr	r2, [r7, #16]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800ca2e:	697a      	ldr	r2, [r7, #20]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	dcf0      	bgt.n	800ca1e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800ca3c:	f3bf 8f4f 	dsb	sy
}
 800ca40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ca42:	f3bf 8f6f 	isb	sy
}
 800ca46:	bf00      	nop
}
 800ca48:	bf00      	nop
 800ca4a:	371c      	adds	r7, #28
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr
 800ca54:	e000ed00 	.word	0xe000ed00

0800ca58 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800ca60:	2300      	movs	r3, #0
 800ca62:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ca64:	4b40      	ldr	r3, [pc, #256]	; (800cb68 <low_level_init+0x110>)
 800ca66:	4a41      	ldr	r2, [pc, #260]	; (800cb6c <low_level_init+0x114>)
 800ca68:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800ca6e:	2380      	movs	r3, #128	; 0x80
 800ca70:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800ca72:	23e1      	movs	r3, #225	; 0xe1
 800ca74:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ca76:	2300      	movs	r3, #0
 800ca78:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ca82:	4a39      	ldr	r2, [pc, #228]	; (800cb68 <low_level_init+0x110>)
 800ca84:	f107 0308 	add.w	r3, r7, #8
 800ca88:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ca8a:	4b37      	ldr	r3, [pc, #220]	; (800cb68 <low_level_init+0x110>)
 800ca8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ca90:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ca92:	4b35      	ldr	r3, [pc, #212]	; (800cb68 <low_level_init+0x110>)
 800ca94:	4a36      	ldr	r2, [pc, #216]	; (800cb70 <low_level_init+0x118>)
 800ca96:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ca98:	4b33      	ldr	r3, [pc, #204]	; (800cb68 <low_level_init+0x110>)
 800ca9a:	4a36      	ldr	r2, [pc, #216]	; (800cb74 <low_level_init+0x11c>)
 800ca9c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800ca9e:	4b32      	ldr	r3, [pc, #200]	; (800cb68 <low_level_init+0x110>)
 800caa0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800caa4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800caa6:	4830      	ldr	r0, [pc, #192]	; (800cb68 <low_level_init+0x110>)
 800caa8:	f7f7 fedc 	bl	8004864 <HAL_ETH_Init>
 800caac:	4603      	mov	r3, r0
 800caae:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800cab0:	2238      	movs	r2, #56	; 0x38
 800cab2:	2100      	movs	r1, #0
 800cab4:	4830      	ldr	r0, [pc, #192]	; (800cb78 <low_level_init+0x120>)
 800cab6:	f00a fd2f 	bl	8017518 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800caba:	4b2f      	ldr	r3, [pc, #188]	; (800cb78 <low_level_init+0x120>)
 800cabc:	2221      	movs	r2, #33	; 0x21
 800cabe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800cac0:	4b2d      	ldr	r3, [pc, #180]	; (800cb78 <low_level_init+0x120>)
 800cac2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800cac6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800cac8:	4b2b      	ldr	r3, [pc, #172]	; (800cb78 <low_level_init+0x120>)
 800caca:	2200      	movs	r2, #0
 800cacc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800cace:	482b      	ldr	r0, [pc, #172]	; (800cb7c <low_level_init+0x124>)
 800cad0:	f000 ff54 	bl	800d97c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2206      	movs	r2, #6
 800cad8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800cadc:	4b22      	ldr	r3, [pc, #136]	; (800cb68 <low_level_init+0x110>)
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	781a      	ldrb	r2, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800cae8:	4b1f      	ldr	r3, [pc, #124]	; (800cb68 <low_level_init+0x110>)
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	785a      	ldrb	r2, [r3, #1]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800caf4:	4b1c      	ldr	r3, [pc, #112]	; (800cb68 <low_level_init+0x110>)
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	789a      	ldrb	r2, [r3, #2]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800cb00:	4b19      	ldr	r3, [pc, #100]	; (800cb68 <low_level_init+0x110>)
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	78da      	ldrb	r2, [r3, #3]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800cb0c:	4b16      	ldr	r3, [pc, #88]	; (800cb68 <low_level_init+0x110>)
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	791a      	ldrb	r2, [r3, #4]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800cb18:	4b13      	ldr	r3, [pc, #76]	; (800cb68 <low_level_init+0x110>)
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	795a      	ldrb	r2, [r3, #5]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cb2a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb32:	f043 030a 	orr.w	r3, r3, #10
 800cb36:	b2da      	uxtb	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800cb3e:	4910      	ldr	r1, [pc, #64]	; (800cb80 <low_level_init+0x128>)
 800cb40:	4810      	ldr	r0, [pc, #64]	; (800cb84 <low_level_init+0x12c>)
 800cb42:	f7f6 facf 	bl	80030e4 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800cb46:	480f      	ldr	r0, [pc, #60]	; (800cb84 <low_level_init+0x12c>)
 800cb48:	f7f6 fafe 	bl	8003148 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800cb4c:	7bfb      	ldrb	r3, [r7, #15]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d103      	bne.n	800cb5a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 fa32 	bl	800cfbc <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800cb58:	e001      	b.n	800cb5e <low_level_init+0x106>
    Error_Handler();
 800cb5a:	f7f4 fe65 	bl	8001828 <Error_Handler>
}
 800cb5e:	bf00      	nop
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	20006094 	.word	0x20006094
 800cb6c:	40028000 	.word	0x40028000
 800cb70:	20000130 	.word	0x20000130
 800cb74:	20000090 	.word	0x20000090
 800cb78:	20006144 	.word	0x20006144
 800cb7c:	0801b2ac 	.word	0x0801b2ac
 800cb80:	2000000c 	.word	0x2000000c
 800cb84:	2000617c 	.word	0x2000617c

0800cb88 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b092      	sub	sp, #72	; 0x48
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800cb92:	2300      	movs	r3, #0
 800cb94:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800cb96:	2300      	movs	r3, #0
 800cb98:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800cba0:	f107 030c 	add.w	r3, r7, #12
 800cba4:	2230      	movs	r2, #48	; 0x30
 800cba6:	2100      	movs	r1, #0
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f00a fcb5 	bl	8017518 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800cbae:	f107 030c 	add.w	r3, r7, #12
 800cbb2:	2230      	movs	r2, #48	; 0x30
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f00a fcae 	bl	8017518 <memset>

  for(q = p; q != NULL; q = q->next)
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	643b      	str	r3, [r7, #64]	; 0x40
 800cbc0:	e045      	b.n	800cc4e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800cbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbc4:	2b03      	cmp	r3, #3
 800cbc6:	d902      	bls.n	800cbce <low_level_output+0x46>
      return ERR_IF;
 800cbc8:	f06f 030b 	mvn.w	r3, #11
 800cbcc:	e055      	b.n	800cc7a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800cbce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbd0:	6859      	ldr	r1, [r3, #4]
 800cbd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	4413      	add	r3, r2
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	3348      	adds	r3, #72	; 0x48
 800cbde:	443b      	add	r3, r7
 800cbe0:	3b3c      	subs	r3, #60	; 0x3c
 800cbe2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800cbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbe6:	895b      	ldrh	r3, [r3, #10]
 800cbe8:	4619      	mov	r1, r3
 800cbea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbec:	4613      	mov	r3, r2
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	4413      	add	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	3348      	adds	r3, #72	; 0x48
 800cbf6:	443b      	add	r3, r7
 800cbf8:	3b38      	subs	r3, #56	; 0x38
 800cbfa:	6019      	str	r1, [r3, #0]

    if(i>0)
 800cbfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d011      	beq.n	800cc26 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800cc02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc04:	1e5a      	subs	r2, r3, #1
 800cc06:	f107 000c 	add.w	r0, r7, #12
 800cc0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	440b      	add	r3, r1
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	18c1      	adds	r1, r0, r3
 800cc16:	4613      	mov	r3, r2
 800cc18:	005b      	lsls	r3, r3, #1
 800cc1a:	4413      	add	r3, r2
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	3348      	adds	r3, #72	; 0x48
 800cc20:	443b      	add	r3, r7
 800cc22:	3b34      	subs	r3, #52	; 0x34
 800cc24:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800cc26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d109      	bne.n	800cc42 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800cc2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc30:	4613      	mov	r3, r2
 800cc32:	005b      	lsls	r3, r3, #1
 800cc34:	4413      	add	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	3348      	adds	r3, #72	; 0x48
 800cc3a:	443b      	add	r3, r7
 800cc3c:	3b34      	subs	r3, #52	; 0x34
 800cc3e:	2200      	movs	r2, #0
 800cc40:	601a      	str	r2, [r3, #0]
    }

    i++;
 800cc42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc44:	3301      	adds	r3, #1
 800cc46:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800cc48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	643b      	str	r3, [r7, #64]	; 0x40
 800cc4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d1b6      	bne.n	800cbc2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	891b      	ldrh	r3, [r3, #8]
 800cc58:	461a      	mov	r2, r3
 800cc5a:	4b0a      	ldr	r3, [pc, #40]	; (800cc84 <low_level_output+0xfc>)
 800cc5c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800cc5e:	4a09      	ldr	r2, [pc, #36]	; (800cc84 <low_level_output+0xfc>)
 800cc60:	f107 030c 	add.w	r3, r7, #12
 800cc64:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800cc66:	4a07      	ldr	r2, [pc, #28]	; (800cc84 <low_level_output+0xfc>)
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800cc6c:	2214      	movs	r2, #20
 800cc6e:	4905      	ldr	r1, [pc, #20]	; (800cc84 <low_level_output+0xfc>)
 800cc70:	4805      	ldr	r0, [pc, #20]	; (800cc88 <low_level_output+0x100>)
 800cc72:	f7f7 ff2b 	bl	8004acc <HAL_ETH_Transmit>

  return errval;
 800cc76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3748      	adds	r7, #72	; 0x48
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	20006144 	.word	0x20006144
 800cc88:	20006094 	.word	0x20006094

0800cc8c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800cc98:	4b07      	ldr	r3, [pc, #28]	; (800ccb8 <low_level_input+0x2c>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d105      	bne.n	800ccac <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800cca0:	f107 030c 	add.w	r3, r7, #12
 800cca4:	4619      	mov	r1, r3
 800cca6:	4805      	ldr	r0, [pc, #20]	; (800ccbc <low_level_input+0x30>)
 800cca8:	f7f7 ffa4 	bl	8004bf4 <HAL_ETH_ReadData>
  }

  return p;
 800ccac:	68fb      	ldr	r3, [r7, #12]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20006090 	.word	0x20006090
 800ccbc:	20006094 	.word	0x20006094

0800ccc0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f7ff ffdd 	bl	800cc8c <low_level_input>
 800ccd2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00a      	beq.n	800ccf0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	6879      	ldr	r1, [r7, #4]
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	4798      	blx	r3
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f001 fdc2 	bl	800e874 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1ea      	bne.n	800cccc <ethernetif_input+0xc>
}
 800ccf6:	bf00      	nop
 800ccf8:	bf00      	nop
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d106      	bne.n	800cd1c <ethernetif_init+0x1c>
 800cd0e:	4b0e      	ldr	r3, [pc, #56]	; (800cd48 <ethernetif_init+0x48>)
 800cd10:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 800cd14:	490d      	ldr	r1, [pc, #52]	; (800cd4c <ethernetif_init+0x4c>)
 800cd16:	480e      	ldr	r0, [pc, #56]	; (800cd50 <ethernetif_init+0x50>)
 800cd18:	f00a fc06 	bl	8017528 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2273      	movs	r2, #115	; 0x73
 800cd20:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2274      	movs	r2, #116	; 0x74
 800cd28:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4a09      	ldr	r2, [pc, #36]	; (800cd54 <ethernetif_init+0x54>)
 800cd30:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a08      	ldr	r2, [pc, #32]	; (800cd58 <ethernetif_init+0x58>)
 800cd36:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff fe8d 	bl	800ca58 <low_level_init>

  return ERR_OK;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	080188ac 	.word	0x080188ac
 800cd4c:	080188c8 	.word	0x080188c8
 800cd50:	080188d8 	.word	0x080188d8
 800cd54:	080157a1 	.word	0x080157a1
 800cd58:	0800cb89 	.word	0x0800cb89

0800cd5c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800cd68:	68f9      	ldr	r1, [r7, #12]
 800cd6a:	4807      	ldr	r0, [pc, #28]	; (800cd88 <pbuf_free_custom+0x2c>)
 800cd6c:	f000 fee8 	bl	800db40 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800cd70:	4b06      	ldr	r3, [pc, #24]	; (800cd8c <pbuf_free_custom+0x30>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d102      	bne.n	800cd7e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800cd78:	4b04      	ldr	r3, [pc, #16]	; (800cd8c <pbuf_free_custom+0x30>)
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	701a      	strb	r2, [r3, #0]
  }
}
 800cd7e:	bf00      	nop
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	0801b2ac 	.word	0x0801b2ac
 800cd8c:	20006090 	.word	0x20006090

0800cd90 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800cd94:	f7f6 fb58 	bl	8003448 <HAL_GetTick>
 800cd98:	4603      	mov	r3, r0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	bd80      	pop	{r7, pc}
	...

0800cda0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b08e      	sub	sp, #56	; 0x38
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cda8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdac:	2200      	movs	r2, #0
 800cdae:	601a      	str	r2, [r3, #0]
 800cdb0:	605a      	str	r2, [r3, #4]
 800cdb2:	609a      	str	r2, [r3, #8]
 800cdb4:	60da      	str	r2, [r3, #12]
 800cdb6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a52      	ldr	r2, [pc, #328]	; (800cf08 <HAL_ETH_MspInit+0x168>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	f040 809e 	bne.w	800cf00 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800cdc4:	4b51      	ldr	r3, [pc, #324]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800cdc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc8:	4a50      	ldr	r2, [pc, #320]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800cdca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cdce:	6313      	str	r3, [r2, #48]	; 0x30
 800cdd0:	4b4e      	ldr	r3, [pc, #312]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800cdd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdd8:	623b      	str	r3, [r7, #32]
 800cdda:	6a3b      	ldr	r3, [r7, #32]
 800cddc:	4b4b      	ldr	r3, [pc, #300]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800cdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cde0:	4a4a      	ldr	r2, [pc, #296]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800cde2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cde6:	6313      	str	r3, [r2, #48]	; 0x30
 800cde8:	4b48      	ldr	r3, [pc, #288]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800cdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cdf0:	61fb      	str	r3, [r7, #28]
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	4b45      	ldr	r3, [pc, #276]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800cdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf8:	4a44      	ldr	r2, [pc, #272]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800cdfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cdfe:	6313      	str	r3, [r2, #48]	; 0x30
 800ce00:	4b42      	ldr	r3, [pc, #264]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce08:	61bb      	str	r3, [r7, #24]
 800ce0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ce0c:	4b3f      	ldr	r3, [pc, #252]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce10:	4a3e      	ldr	r2, [pc, #248]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce12:	f043 0304 	orr.w	r3, r3, #4
 800ce16:	6313      	str	r3, [r2, #48]	; 0x30
 800ce18:	4b3c      	ldr	r3, [pc, #240]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	617b      	str	r3, [r7, #20]
 800ce22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce24:	4b39      	ldr	r3, [pc, #228]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce28:	4a38      	ldr	r2, [pc, #224]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce2a:	f043 0301 	orr.w	r3, r3, #1
 800ce2e:	6313      	str	r3, [r2, #48]	; 0x30
 800ce30:	4b36      	ldr	r3, [pc, #216]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce34:	f003 0301 	and.w	r3, r3, #1
 800ce38:	613b      	str	r3, [r7, #16]
 800ce3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce3c:	4b33      	ldr	r3, [pc, #204]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce40:	4a32      	ldr	r2, [pc, #200]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce42:	f043 0302 	orr.w	r3, r3, #2
 800ce46:	6313      	str	r3, [r2, #48]	; 0x30
 800ce48:	4b30      	ldr	r3, [pc, #192]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce4c:	f003 0302 	and.w	r3, r3, #2
 800ce50:	60fb      	str	r3, [r7, #12]
 800ce52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ce54:	4b2d      	ldr	r3, [pc, #180]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce58:	4a2c      	ldr	r2, [pc, #176]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce5e:	6313      	str	r3, [r2, #48]	; 0x30
 800ce60:	4b2a      	ldr	r3, [pc, #168]	; (800cf0c <HAL_ETH_MspInit+0x16c>)
 800ce62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce68:	60bb      	str	r3, [r7, #8]
 800ce6a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ce6c:	2332      	movs	r3, #50	; 0x32
 800ce6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce70:	2302      	movs	r3, #2
 800ce72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce74:	2300      	movs	r3, #0
 800ce76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ce7c:	230b      	movs	r3, #11
 800ce7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ce80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce84:	4619      	mov	r1, r3
 800ce86:	4822      	ldr	r0, [pc, #136]	; (800cf10 <HAL_ETH_MspInit+0x170>)
 800ce88:	f7f8 fed2 	bl	8005c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800ce8c:	2386      	movs	r3, #134	; 0x86
 800ce8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce90:	2302      	movs	r3, #2
 800ce92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce94:	2300      	movs	r3, #0
 800ce96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ce9c:	230b      	movs	r3, #11
 800ce9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cea4:	4619      	mov	r1, r3
 800cea6:	481b      	ldr	r0, [pc, #108]	; (800cf14 <HAL_ETH_MspInit+0x174>)
 800cea8:	f7f8 fec2 	bl	8005c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800ceac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ceb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceb2:	2302      	movs	r3, #2
 800ceb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ceba:	2303      	movs	r3, #3
 800cebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cebe:	230b      	movs	r3, #11
 800cec0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800cec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cec6:	4619      	mov	r1, r3
 800cec8:	4813      	ldr	r0, [pc, #76]	; (800cf18 <HAL_ETH_MspInit+0x178>)
 800ceca:	f7f8 feb1 	bl	8005c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800cece:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ced2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ced4:	2302      	movs	r3, #2
 800ced6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ced8:	2300      	movs	r3, #0
 800ceda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cedc:	2303      	movs	r3, #3
 800cede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cee0:	230b      	movs	r3, #11
 800cee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cee8:	4619      	mov	r1, r3
 800ceea:	480c      	ldr	r0, [pc, #48]	; (800cf1c <HAL_ETH_MspInit+0x17c>)
 800ceec:	f7f8 fea0 	bl	8005c30 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800cef0:	2200      	movs	r2, #0
 800cef2:	2100      	movs	r1, #0
 800cef4:	203d      	movs	r0, #61	; 0x3d
 800cef6:	f7f7 f85a 	bl	8003fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800cefa:	203d      	movs	r0, #61	; 0x3d
 800cefc:	f7f7 f873 	bl	8003fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800cf00:	bf00      	nop
 800cf02:	3738      	adds	r7, #56	; 0x38
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	40028000 	.word	0x40028000
 800cf0c:	40023800 	.word	0x40023800
 800cf10:	40020800 	.word	0x40020800
 800cf14:	40020000 	.word	0x40020000
 800cf18:	40020400 	.word	0x40020400
 800cf1c:	40021800 	.word	0x40021800

0800cf20 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800cf24:	4802      	ldr	r0, [pc, #8]	; (800cf30 <ETH_PHY_IO_Init+0x10>)
 800cf26:	f7f8 fa29 	bl	800537c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	20006094 	.word	0x20006094

0800cf34 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800cf34:	b480      	push	{r7}
 800cf36:	af00      	add	r7, sp, #0
  return 0;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	68f9      	ldr	r1, [r7, #12]
 800cf56:	4807      	ldr	r0, [pc, #28]	; (800cf74 <ETH_PHY_IO_ReadReg+0x30>)
 800cf58:	f7f8 f878 	bl	800504c <HAL_ETH_ReadPHYRegister>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d002      	beq.n	800cf68 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800cf62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf66:	e000      	b.n	800cf6a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800cf68:	2300      	movs	r3, #0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	20006094 	.word	0x20006094

0800cf78 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	68f9      	ldr	r1, [r7, #12]
 800cf8a:	4807      	ldr	r0, [pc, #28]	; (800cfa8 <ETH_PHY_IO_WriteReg+0x30>)
 800cf8c:	f7f8 f8a9 	bl	80050e2 <HAL_ETH_WritePHYRegister>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d002      	beq.n	800cf9c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800cf96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf9a:	e000      	b.n	800cf9e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	20006094 	.word	0x20006094

0800cfac <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800cfb0:	f7f6 fa4a 	bl	8003448 <HAL_GetTick>
 800cfb4:	4603      	mov	r3, r0
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	bd80      	pop	{r7, pc}
	...

0800cfbc <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b0a0      	sub	sp, #128	; 0x80
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800cfc4:	f107 030c 	add.w	r3, r7, #12
 800cfc8:	2264      	movs	r2, #100	; 0x64
 800cfca:	2100      	movs	r1, #0
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f00a faa3 	bl	8017518 <memset>
  int32_t PHYLinkState = 0;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cfda:	2300      	movs	r3, #0
 800cfdc:	67bb      	str	r3, [r7, #120]	; 0x78
 800cfde:	2300      	movs	r3, #0
 800cfe0:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800cfe2:	483a      	ldr	r0, [pc, #232]	; (800d0cc <ethernet_link_check_state+0x110>)
 800cfe4:	f7f6 f958 	bl	8003298 <LAN8742_GetLinkState>
 800cfe8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cff0:	089b      	lsrs	r3, r3, #2
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00c      	beq.n	800d016 <ethernet_link_check_state+0x5a>
 800cffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cffe:	2b01      	cmp	r3, #1
 800d000:	dc09      	bgt.n	800d016 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800d002:	4833      	ldr	r0, [pc, #204]	; (800d0d0 <ethernet_link_check_state+0x114>)
 800d004:	f7f7 fd09 	bl	8004a1a <HAL_ETH_Stop>
    netif_set_down(netif);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f001 f81d 	bl	800e048 <netif_set_down>
    netif_set_link_down(netif);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f001 f880 	bl	800e114 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800d014:	e055      	b.n	800d0c2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d01c:	f003 0304 	and.w	r3, r3, #4
 800d020:	2b00      	cmp	r3, #0
 800d022:	d14e      	bne.n	800d0c2 <ethernet_link_check_state+0x106>
 800d024:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d026:	2b01      	cmp	r3, #1
 800d028:	dd4b      	ble.n	800d0c2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800d02a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d02c:	3b02      	subs	r3, #2
 800d02e:	2b03      	cmp	r3, #3
 800d030:	d82a      	bhi.n	800d088 <ethernet_link_check_state+0xcc>
 800d032:	a201      	add	r2, pc, #4	; (adr r2, 800d038 <ethernet_link_check_state+0x7c>)
 800d034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d038:	0800d049 	.word	0x0800d049
 800d03c:	0800d05b 	.word	0x0800d05b
 800d040:	0800d06b 	.word	0x0800d06b
 800d044:	0800d07b 	.word	0x0800d07b
      duplex = ETH_FULLDUPLEX_MODE;
 800d048:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d04c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800d04e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d052:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800d054:	2301      	movs	r3, #1
 800d056:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800d058:	e017      	b.n	800d08a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800d05a:	2300      	movs	r3, #0
 800d05c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800d05e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d062:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800d064:	2301      	movs	r3, #1
 800d066:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800d068:	e00f      	b.n	800d08a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800d06a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d06e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800d070:	2300      	movs	r3, #0
 800d072:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800d074:	2301      	movs	r3, #1
 800d076:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800d078:	e007      	b.n	800d08a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800d07a:	2300      	movs	r3, #0
 800d07c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800d07e:	2300      	movs	r3, #0
 800d080:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800d082:	2301      	movs	r3, #1
 800d084:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800d086:	e000      	b.n	800d08a <ethernet_link_check_state+0xce>
      break;
 800d088:	bf00      	nop
    if(linkchanged)
 800d08a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d018      	beq.n	800d0c2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800d090:	f107 030c 	add.w	r3, r7, #12
 800d094:	4619      	mov	r1, r3
 800d096:	480e      	ldr	r0, [pc, #56]	; (800d0d0 <ethernet_link_check_state+0x114>)
 800d098:	f7f8 f86c 	bl	8005174 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800d09c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d09e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800d0a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0a2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800d0a4:	f107 030c 	add.w	r3, r7, #12
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4809      	ldr	r0, [pc, #36]	; (800d0d0 <ethernet_link_check_state+0x114>)
 800d0ac:	f7f8 f94c 	bl	8005348 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800d0b0:	4807      	ldr	r0, [pc, #28]	; (800d0d0 <ethernet_link_check_state+0x114>)
 800d0b2:	f7f7 fc53 	bl	800495c <HAL_ETH_Start>
      netif_set_up(netif);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 ff5a 	bl	800df70 <netif_set_up>
      netif_set_link_up(netif);
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 fff5 	bl	800e0ac <netif_set_link_up>
}
 800d0c2:	bf00      	nop
 800d0c4:	3780      	adds	r7, #128	; 0x80
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	2000617c 	.word	0x2000617c
 800d0d0:	20006094 	.word	0x20006094

0800d0d4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b086      	sub	sp, #24
 800d0d8:	af02      	add	r7, sp, #8
 800d0da:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800d0dc:	4812      	ldr	r0, [pc, #72]	; (800d128 <HAL_ETH_RxAllocateCallback+0x54>)
 800d0de:	f000 fcc1 	bl	800da64 <memp_malloc_pool>
 800d0e2:	60f8      	str	r0, [r7, #12]
  if (p)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d014      	beq.n	800d114 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f103 0220 	add.w	r2, r3, #32
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	4a0d      	ldr	r2, [pc, #52]	; (800d12c <HAL_ETH_RxAllocateCallback+0x58>)
 800d0f8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d102:	9201      	str	r2, [sp, #4]
 800d104:	9300      	str	r3, [sp, #0]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2241      	movs	r2, #65	; 0x41
 800d10a:	2100      	movs	r1, #0
 800d10c:	2000      	movs	r0, #0
 800d10e:	f001 f9f7 	bl	800e500 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800d112:	e005      	b.n	800d120 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800d114:	4b06      	ldr	r3, [pc, #24]	; (800d130 <HAL_ETH_RxAllocateCallback+0x5c>)
 800d116:	2201      	movs	r2, #1
 800d118:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	601a      	str	r2, [r3, #0]
}
 800d120:	bf00      	nop
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	0801b2ac 	.word	0x0801b2ac
 800d12c:	0800cd5d 	.word	0x0800cd5d
 800d130:	20006090 	.word	0x20006090

0800d134 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b088      	sub	sp, #32
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]
 800d140:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d14a:	2300      	movs	r3, #0
 800d14c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	3b20      	subs	r3, #32
 800d152:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	2200      	movs	r2, #0
 800d158:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	2200      	movs	r2, #0
 800d15e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	887a      	ldrh	r2, [r7, #2]
 800d164:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d103      	bne.n	800d176 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800d16e:	69bb      	ldr	r3, [r7, #24]
 800d170:	69fa      	ldr	r2, [r7, #28]
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	e003      	b.n	800d17e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	69fa      	ldr	r2, [r7, #28]
 800d17c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	69fa      	ldr	r2, [r7, #28]
 800d182:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	61fb      	str	r3, [r7, #28]
 800d18a:	e009      	b.n	800d1a0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800d18c:	69fb      	ldr	r3, [r7, #28]
 800d18e:	891a      	ldrh	r2, [r3, #8]
 800d190:	887b      	ldrh	r3, [r7, #2]
 800d192:	4413      	add	r3, r2
 800d194:	b29a      	uxth	r2, r3
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	61fb      	str	r3, [r7, #28]
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1f2      	bne.n	800d18c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800d1a6:	887b      	ldrh	r3, [r7, #2]
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff fc28 	bl	800ca00 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800d1b0:	bf00      	nop
 800d1b2:	3720      	adds	r7, #32
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	4603      	mov	r3, r0
 800d1c0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d1c2:	88fb      	ldrh	r3, [r7, #6]
 800d1c4:	021b      	lsls	r3, r3, #8
 800d1c6:	b21a      	sxth	r2, r3
 800d1c8:	88fb      	ldrh	r3, [r7, #6]
 800d1ca:	0a1b      	lsrs	r3, r3, #8
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	b21b      	sxth	r3, r3
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	b21b      	sxth	r3, r3
 800d1d4:	b29b      	uxth	r3, r3
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b083      	sub	sp, #12
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	061a      	lsls	r2, r3, #24
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	021b      	lsls	r3, r3, #8
 800d1f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d1f6:	431a      	orrs	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	0a1b      	lsrs	r3, r3, #8
 800d1fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d200:	431a      	orrs	r2, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	0e1b      	lsrs	r3, r3, #24
 800d206:	4313      	orrs	r3, r2
}
 800d208:	4618      	mov	r0, r3
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800d21e:	f000 f8d5 	bl	800d3cc <mem_init>
  memp_init();
 800d222:	f000 fbdb 	bl	800d9dc <memp_init>
  pbuf_init();
  netif_init();
 800d226:	f000 fcd9 	bl	800dbdc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d22a:	f007 f8f9 	bl	8014420 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d22e:	f001 fe51 	bl	800eed4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d232:	f007 f86b 	bl	801430c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d236:	bf00      	nop
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
	...

0800d240 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	4603      	mov	r3, r0
 800d248:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d24a:	4b05      	ldr	r3, [pc, #20]	; (800d260 <ptr_to_mem+0x20>)
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	88fb      	ldrh	r3, [r7, #6]
 800d250:	4413      	add	r3, r2
}
 800d252:	4618      	mov	r0, r3
 800d254:	370c      	adds	r7, #12
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	20006808 	.word	0x20006808

0800d264 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d26c:	4b05      	ldr	r3, [pc, #20]	; (800d284 <mem_to_ptr+0x20>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	1ad3      	subs	r3, r2, r3
 800d274:	b29b      	uxth	r3, r3
}
 800d276:	4618      	mov	r0, r3
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	20006808 	.word	0x20006808

0800d288 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d288:	b590      	push	{r4, r7, lr}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d290:	4b45      	ldr	r3, [pc, #276]	; (800d3a8 <plug_holes+0x120>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	429a      	cmp	r2, r3
 800d298:	d206      	bcs.n	800d2a8 <plug_holes+0x20>
 800d29a:	4b44      	ldr	r3, [pc, #272]	; (800d3ac <plug_holes+0x124>)
 800d29c:	f240 12df 	movw	r2, #479	; 0x1df
 800d2a0:	4943      	ldr	r1, [pc, #268]	; (800d3b0 <plug_holes+0x128>)
 800d2a2:	4844      	ldr	r0, [pc, #272]	; (800d3b4 <plug_holes+0x12c>)
 800d2a4:	f00a f940 	bl	8017528 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d2a8:	4b43      	ldr	r3, [pc, #268]	; (800d3b8 <plug_holes+0x130>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d306      	bcc.n	800d2c0 <plug_holes+0x38>
 800d2b2:	4b3e      	ldr	r3, [pc, #248]	; (800d3ac <plug_holes+0x124>)
 800d2b4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d2b8:	4940      	ldr	r1, [pc, #256]	; (800d3bc <plug_holes+0x134>)
 800d2ba:	483e      	ldr	r0, [pc, #248]	; (800d3b4 <plug_holes+0x12c>)
 800d2bc:	f00a f934 	bl	8017528 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	791b      	ldrb	r3, [r3, #4]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d006      	beq.n	800d2d6 <plug_holes+0x4e>
 800d2c8:	4b38      	ldr	r3, [pc, #224]	; (800d3ac <plug_holes+0x124>)
 800d2ca:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d2ce:	493c      	ldr	r1, [pc, #240]	; (800d3c0 <plug_holes+0x138>)
 800d2d0:	4838      	ldr	r0, [pc, #224]	; (800d3b4 <plug_holes+0x12c>)
 800d2d2:	f00a f929 	bl	8017528 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d2de:	d906      	bls.n	800d2ee <plug_holes+0x66>
 800d2e0:	4b32      	ldr	r3, [pc, #200]	; (800d3ac <plug_holes+0x124>)
 800d2e2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d2e6:	4937      	ldr	r1, [pc, #220]	; (800d3c4 <plug_holes+0x13c>)
 800d2e8:	4832      	ldr	r0, [pc, #200]	; (800d3b4 <plug_holes+0x12c>)
 800d2ea:	f00a f91d 	bl	8017528 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	881b      	ldrh	r3, [r3, #0]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7ff ffa4 	bl	800d240 <ptr_to_mem>
 800d2f8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d024      	beq.n	800d34c <plug_holes+0xc4>
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	791b      	ldrb	r3, [r3, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d120      	bne.n	800d34c <plug_holes+0xc4>
 800d30a:	4b2b      	ldr	r3, [pc, #172]	; (800d3b8 <plug_holes+0x130>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	68fa      	ldr	r2, [r7, #12]
 800d310:	429a      	cmp	r2, r3
 800d312:	d01b      	beq.n	800d34c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d314:	4b2c      	ldr	r3, [pc, #176]	; (800d3c8 <plug_holes+0x140>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	68fa      	ldr	r2, [r7, #12]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d102      	bne.n	800d324 <plug_holes+0x9c>
      lfree = mem;
 800d31e:	4a2a      	ldr	r2, [pc, #168]	; (800d3c8 <plug_holes+0x140>)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	881a      	ldrh	r2, [r3, #0]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d334:	d00a      	beq.n	800d34c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	881b      	ldrh	r3, [r3, #0]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff ff80 	bl	800d240 <ptr_to_mem>
 800d340:	4604      	mov	r4, r0
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7ff ff8e 	bl	800d264 <mem_to_ptr>
 800d348:	4603      	mov	r3, r0
 800d34a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	885b      	ldrh	r3, [r3, #2]
 800d350:	4618      	mov	r0, r3
 800d352:	f7ff ff75 	bl	800d240 <ptr_to_mem>
 800d356:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d01f      	beq.n	800d3a0 <plug_holes+0x118>
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	791b      	ldrb	r3, [r3, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d11b      	bne.n	800d3a0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d368:	4b17      	ldr	r3, [pc, #92]	; (800d3c8 <plug_holes+0x140>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d102      	bne.n	800d378 <plug_holes+0xf0>
      lfree = pmem;
 800d372:	4a15      	ldr	r2, [pc, #84]	; (800d3c8 <plug_holes+0x140>)
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	881a      	ldrh	r2, [r3, #0]
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	881b      	ldrh	r3, [r3, #0]
 800d384:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d388:	d00a      	beq.n	800d3a0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	881b      	ldrh	r3, [r3, #0]
 800d38e:	4618      	mov	r0, r3
 800d390:	f7ff ff56 	bl	800d240 <ptr_to_mem>
 800d394:	4604      	mov	r4, r0
 800d396:	68b8      	ldr	r0, [r7, #8]
 800d398:	f7ff ff64 	bl	800d264 <mem_to_ptr>
 800d39c:	4603      	mov	r3, r0
 800d39e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d3a0:	bf00      	nop
 800d3a2:	3714      	adds	r7, #20
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd90      	pop	{r4, r7, pc}
 800d3a8:	20006808 	.word	0x20006808
 800d3ac:	08018900 	.word	0x08018900
 800d3b0:	08018930 	.word	0x08018930
 800d3b4:	08018948 	.word	0x08018948
 800d3b8:	2000680c 	.word	0x2000680c
 800d3bc:	08018970 	.word	0x08018970
 800d3c0:	0801898c 	.word	0x0801898c
 800d3c4:	080189a8 	.word	0x080189a8
 800d3c8:	20006810 	.word	0x20006810

0800d3cc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d3d2:	4b18      	ldr	r3, [pc, #96]	; (800d434 <mem_init+0x68>)
 800d3d4:	3303      	adds	r3, #3
 800d3d6:	f023 0303 	bic.w	r3, r3, #3
 800d3da:	461a      	mov	r2, r3
 800d3dc:	4b16      	ldr	r3, [pc, #88]	; (800d438 <mem_init+0x6c>)
 800d3de:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d3e0:	4b15      	ldr	r3, [pc, #84]	; (800d438 <mem_init+0x6c>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d3ec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d3fa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d3fe:	f7ff ff1f 	bl	800d240 <ptr_to_mem>
 800d402:	4603      	mov	r3, r0
 800d404:	4a0d      	ldr	r2, [pc, #52]	; (800d43c <mem_init+0x70>)
 800d406:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d408:	4b0c      	ldr	r3, [pc, #48]	; (800d43c <mem_init+0x70>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2201      	movs	r2, #1
 800d40e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d410:	4b0a      	ldr	r3, [pc, #40]	; (800d43c <mem_init+0x70>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d418:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d41a:	4b08      	ldr	r3, [pc, #32]	; (800d43c <mem_init+0x70>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d422:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d424:	4b04      	ldr	r3, [pc, #16]	; (800d438 <mem_init+0x6c>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a05      	ldr	r2, [pc, #20]	; (800d440 <mem_init+0x74>)
 800d42a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800d42c:	bf00      	nop
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	200061b4 	.word	0x200061b4
 800d438:	20006808 	.word	0x20006808
 800d43c:	2000680c 	.word	0x2000680c
 800d440:	20006810 	.word	0x20006810

0800d444 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b086      	sub	sp, #24
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7ff ff09 	bl	800d264 <mem_to_ptr>
 800d452:	4603      	mov	r3, r0
 800d454:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	881b      	ldrh	r3, [r3, #0]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff fef0 	bl	800d240 <ptr_to_mem>
 800d460:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	885b      	ldrh	r3, [r3, #2]
 800d466:	4618      	mov	r0, r3
 800d468:	f7ff feea 	bl	800d240 <ptr_to_mem>
 800d46c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	881b      	ldrh	r3, [r3, #0]
 800d472:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d476:	d818      	bhi.n	800d4aa <mem_link_valid+0x66>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	885b      	ldrh	r3, [r3, #2]
 800d47c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d480:	d813      	bhi.n	800d4aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d486:	8afa      	ldrh	r2, [r7, #22]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d004      	beq.n	800d496 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	881b      	ldrh	r3, [r3, #0]
 800d490:	8afa      	ldrh	r2, [r7, #22]
 800d492:	429a      	cmp	r2, r3
 800d494:	d109      	bne.n	800d4aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d496:	4b08      	ldr	r3, [pc, #32]	; (800d4b8 <mem_link_valid+0x74>)
 800d498:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d49a:	693a      	ldr	r2, [r7, #16]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d006      	beq.n	800d4ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	885b      	ldrh	r3, [r3, #2]
 800d4a4:	8afa      	ldrh	r2, [r7, #22]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d001      	beq.n	800d4ae <mem_link_valid+0x6a>
    return 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	e000      	b.n	800d4b0 <mem_link_valid+0x6c>
  }
  return 1;
 800d4ae:	2301      	movs	r3, #1
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3718      	adds	r7, #24
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	2000680c 	.word	0x2000680c

0800d4bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d04c      	beq.n	800d564 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f003 0303 	and.w	r3, r3, #3
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d007      	beq.n	800d4e4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d4d4:	4b25      	ldr	r3, [pc, #148]	; (800d56c <mem_free+0xb0>)
 800d4d6:	f240 2273 	movw	r2, #627	; 0x273
 800d4da:	4925      	ldr	r1, [pc, #148]	; (800d570 <mem_free+0xb4>)
 800d4dc:	4825      	ldr	r0, [pc, #148]	; (800d574 <mem_free+0xb8>)
 800d4de:	f00a f823 	bl	8017528 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d4e2:	e040      	b.n	800d566 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	3b08      	subs	r3, #8
 800d4e8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d4ea:	4b23      	ldr	r3, [pc, #140]	; (800d578 <mem_free+0xbc>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d306      	bcc.n	800d502 <mem_free+0x46>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f103 020c 	add.w	r2, r3, #12
 800d4fa:	4b20      	ldr	r3, [pc, #128]	; (800d57c <mem_free+0xc0>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d907      	bls.n	800d512 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d502:	4b1a      	ldr	r3, [pc, #104]	; (800d56c <mem_free+0xb0>)
 800d504:	f240 227f 	movw	r2, #639	; 0x27f
 800d508:	491d      	ldr	r1, [pc, #116]	; (800d580 <mem_free+0xc4>)
 800d50a:	481a      	ldr	r0, [pc, #104]	; (800d574 <mem_free+0xb8>)
 800d50c:	f00a f80c 	bl	8017528 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d510:	e029      	b.n	800d566 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	791b      	ldrb	r3, [r3, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d107      	bne.n	800d52a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d51a:	4b14      	ldr	r3, [pc, #80]	; (800d56c <mem_free+0xb0>)
 800d51c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d520:	4918      	ldr	r1, [pc, #96]	; (800d584 <mem_free+0xc8>)
 800d522:	4814      	ldr	r0, [pc, #80]	; (800d574 <mem_free+0xb8>)
 800d524:	f00a f800 	bl	8017528 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d528:	e01d      	b.n	800d566 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f7ff ff8a 	bl	800d444 <mem_link_valid>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d107      	bne.n	800d546 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d536:	4b0d      	ldr	r3, [pc, #52]	; (800d56c <mem_free+0xb0>)
 800d538:	f240 2295 	movw	r2, #661	; 0x295
 800d53c:	4912      	ldr	r1, [pc, #72]	; (800d588 <mem_free+0xcc>)
 800d53e:	480d      	ldr	r0, [pc, #52]	; (800d574 <mem_free+0xb8>)
 800d540:	f009 fff2 	bl	8017528 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d544:	e00f      	b.n	800d566 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2200      	movs	r2, #0
 800d54a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d54c:	4b0f      	ldr	r3, [pc, #60]	; (800d58c <mem_free+0xd0>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	68fa      	ldr	r2, [r7, #12]
 800d552:	429a      	cmp	r2, r3
 800d554:	d202      	bcs.n	800d55c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d556:	4a0d      	ldr	r2, [pc, #52]	; (800d58c <mem_free+0xd0>)
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d55c:	68f8      	ldr	r0, [r7, #12]
 800d55e:	f7ff fe93 	bl	800d288 <plug_holes>
 800d562:	e000      	b.n	800d566 <mem_free+0xaa>
    return;
 800d564:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	08018900 	.word	0x08018900
 800d570:	080189d4 	.word	0x080189d4
 800d574:	08018948 	.word	0x08018948
 800d578:	20006808 	.word	0x20006808
 800d57c:	2000680c 	.word	0x2000680c
 800d580:	080189f8 	.word	0x080189f8
 800d584:	08018a14 	.word	0x08018a14
 800d588:	08018a3c 	.word	0x08018a3c
 800d58c:	20006810 	.word	0x20006810

0800d590 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b088      	sub	sp, #32
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	460b      	mov	r3, r1
 800d59a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d59c:	887b      	ldrh	r3, [r7, #2]
 800d59e:	3303      	adds	r3, #3
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	f023 0303 	bic.w	r3, r3, #3
 800d5a6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d5a8:	8bfb      	ldrh	r3, [r7, #30]
 800d5aa:	2b0b      	cmp	r3, #11
 800d5ac:	d801      	bhi.n	800d5b2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d5ae:	230c      	movs	r3, #12
 800d5b0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d5b2:	8bfb      	ldrh	r3, [r7, #30]
 800d5b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d5b8:	d803      	bhi.n	800d5c2 <mem_trim+0x32>
 800d5ba:	8bfa      	ldrh	r2, [r7, #30]
 800d5bc:	887b      	ldrh	r3, [r7, #2]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d201      	bcs.n	800d5c6 <mem_trim+0x36>
    return NULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	e0cc      	b.n	800d760 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d5c6:	4b68      	ldr	r3, [pc, #416]	; (800d768 <mem_trim+0x1d8>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d304      	bcc.n	800d5da <mem_trim+0x4a>
 800d5d0:	4b66      	ldr	r3, [pc, #408]	; (800d76c <mem_trim+0x1dc>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d306      	bcc.n	800d5e8 <mem_trim+0x58>
 800d5da:	4b65      	ldr	r3, [pc, #404]	; (800d770 <mem_trim+0x1e0>)
 800d5dc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d5e0:	4964      	ldr	r1, [pc, #400]	; (800d774 <mem_trim+0x1e4>)
 800d5e2:	4865      	ldr	r0, [pc, #404]	; (800d778 <mem_trim+0x1e8>)
 800d5e4:	f009 ffa0 	bl	8017528 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d5e8:	4b5f      	ldr	r3, [pc, #380]	; (800d768 <mem_trim+0x1d8>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d304      	bcc.n	800d5fc <mem_trim+0x6c>
 800d5f2:	4b5e      	ldr	r3, [pc, #376]	; (800d76c <mem_trim+0x1dc>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d301      	bcc.n	800d600 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	e0af      	b.n	800d760 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	3b08      	subs	r3, #8
 800d604:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d606:	69b8      	ldr	r0, [r7, #24]
 800d608:	f7ff fe2c 	bl	800d264 <mem_to_ptr>
 800d60c:	4603      	mov	r3, r0
 800d60e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	881a      	ldrh	r2, [r3, #0]
 800d614:	8afb      	ldrh	r3, [r7, #22]
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	b29b      	uxth	r3, r3
 800d61a:	3b08      	subs	r3, #8
 800d61c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d61e:	8bfa      	ldrh	r2, [r7, #30]
 800d620:	8abb      	ldrh	r3, [r7, #20]
 800d622:	429a      	cmp	r2, r3
 800d624:	d906      	bls.n	800d634 <mem_trim+0xa4>
 800d626:	4b52      	ldr	r3, [pc, #328]	; (800d770 <mem_trim+0x1e0>)
 800d628:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d62c:	4953      	ldr	r1, [pc, #332]	; (800d77c <mem_trim+0x1ec>)
 800d62e:	4852      	ldr	r0, [pc, #328]	; (800d778 <mem_trim+0x1e8>)
 800d630:	f009 ff7a 	bl	8017528 <iprintf>
  if (newsize > size) {
 800d634:	8bfa      	ldrh	r2, [r7, #30]
 800d636:	8abb      	ldrh	r3, [r7, #20]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d901      	bls.n	800d640 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800d63c:	2300      	movs	r3, #0
 800d63e:	e08f      	b.n	800d760 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800d640:	8bfa      	ldrh	r2, [r7, #30]
 800d642:	8abb      	ldrh	r3, [r7, #20]
 800d644:	429a      	cmp	r2, r3
 800d646:	d101      	bne.n	800d64c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	e089      	b.n	800d760 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	881b      	ldrh	r3, [r3, #0]
 800d650:	4618      	mov	r0, r3
 800d652:	f7ff fdf5 	bl	800d240 <ptr_to_mem>
 800d656:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	791b      	ldrb	r3, [r3, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d13f      	bne.n	800d6e0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	881b      	ldrh	r3, [r3, #0]
 800d664:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d668:	d106      	bne.n	800d678 <mem_trim+0xe8>
 800d66a:	4b41      	ldr	r3, [pc, #260]	; (800d770 <mem_trim+0x1e0>)
 800d66c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d670:	4943      	ldr	r1, [pc, #268]	; (800d780 <mem_trim+0x1f0>)
 800d672:	4841      	ldr	r0, [pc, #260]	; (800d778 <mem_trim+0x1e8>)
 800d674:	f009 ff58 	bl	8017528 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	881b      	ldrh	r3, [r3, #0]
 800d67c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d67e:	8afa      	ldrh	r2, [r7, #22]
 800d680:	8bfb      	ldrh	r3, [r7, #30]
 800d682:	4413      	add	r3, r2
 800d684:	b29b      	uxth	r3, r3
 800d686:	3308      	adds	r3, #8
 800d688:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d68a:	4b3e      	ldr	r3, [pc, #248]	; (800d784 <mem_trim+0x1f4>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	693a      	ldr	r2, [r7, #16]
 800d690:	429a      	cmp	r2, r3
 800d692:	d106      	bne.n	800d6a2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800d694:	89fb      	ldrh	r3, [r7, #14]
 800d696:	4618      	mov	r0, r3
 800d698:	f7ff fdd2 	bl	800d240 <ptr_to_mem>
 800d69c:	4603      	mov	r3, r0
 800d69e:	4a39      	ldr	r2, [pc, #228]	; (800d784 <mem_trim+0x1f4>)
 800d6a0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d6a2:	89fb      	ldrh	r3, [r7, #14]
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff fdcb 	bl	800d240 <ptr_to_mem>
 800d6aa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	89ba      	ldrh	r2, [r7, #12]
 800d6b6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	8afa      	ldrh	r2, [r7, #22]
 800d6bc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	89fa      	ldrh	r2, [r7, #14]
 800d6c2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	881b      	ldrh	r3, [r3, #0]
 800d6c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6cc:	d047      	beq.n	800d75e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	881b      	ldrh	r3, [r3, #0]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff fdb4 	bl	800d240 <ptr_to_mem>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	89fb      	ldrh	r3, [r7, #14]
 800d6dc:	8053      	strh	r3, [r2, #2]
 800d6de:	e03e      	b.n	800d75e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d6e0:	8bfb      	ldrh	r3, [r7, #30]
 800d6e2:	f103 0214 	add.w	r2, r3, #20
 800d6e6:	8abb      	ldrh	r3, [r7, #20]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d838      	bhi.n	800d75e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d6ec:	8afa      	ldrh	r2, [r7, #22]
 800d6ee:	8bfb      	ldrh	r3, [r7, #30]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	3308      	adds	r3, #8
 800d6f6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	881b      	ldrh	r3, [r3, #0]
 800d6fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d700:	d106      	bne.n	800d710 <mem_trim+0x180>
 800d702:	4b1b      	ldr	r3, [pc, #108]	; (800d770 <mem_trim+0x1e0>)
 800d704:	f240 3216 	movw	r2, #790	; 0x316
 800d708:	491d      	ldr	r1, [pc, #116]	; (800d780 <mem_trim+0x1f0>)
 800d70a:	481b      	ldr	r0, [pc, #108]	; (800d778 <mem_trim+0x1e8>)
 800d70c:	f009 ff0c 	bl	8017528 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d710:	89fb      	ldrh	r3, [r7, #14]
 800d712:	4618      	mov	r0, r3
 800d714:	f7ff fd94 	bl	800d240 <ptr_to_mem>
 800d718:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d71a:	4b1a      	ldr	r3, [pc, #104]	; (800d784 <mem_trim+0x1f4>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	693a      	ldr	r2, [r7, #16]
 800d720:	429a      	cmp	r2, r3
 800d722:	d202      	bcs.n	800d72a <mem_trim+0x19a>
      lfree = mem2;
 800d724:	4a17      	ldr	r2, [pc, #92]	; (800d784 <mem_trim+0x1f4>)
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	2200      	movs	r2, #0
 800d72e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	881a      	ldrh	r2, [r3, #0]
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	8afa      	ldrh	r2, [r7, #22]
 800d73c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	89fa      	ldrh	r2, [r7, #14]
 800d742:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	881b      	ldrh	r3, [r3, #0]
 800d748:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d74c:	d007      	beq.n	800d75e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	881b      	ldrh	r3, [r3, #0]
 800d752:	4618      	mov	r0, r3
 800d754:	f7ff fd74 	bl	800d240 <ptr_to_mem>
 800d758:	4602      	mov	r2, r0
 800d75a:	89fb      	ldrh	r3, [r7, #14]
 800d75c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800d75e:	687b      	ldr	r3, [r7, #4]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3720      	adds	r7, #32
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	20006808 	.word	0x20006808
 800d76c:	2000680c 	.word	0x2000680c
 800d770:	08018900 	.word	0x08018900
 800d774:	08018a70 	.word	0x08018a70
 800d778:	08018948 	.word	0x08018948
 800d77c:	08018a88 	.word	0x08018a88
 800d780:	08018aa8 	.word	0x08018aa8
 800d784:	20006810 	.word	0x20006810

0800d788 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b088      	sub	sp, #32
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	4603      	mov	r3, r0
 800d790:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d792:	88fb      	ldrh	r3, [r7, #6]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d101      	bne.n	800d79c <mem_malloc+0x14>
    return NULL;
 800d798:	2300      	movs	r3, #0
 800d79a:	e0d9      	b.n	800d950 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d79c:	88fb      	ldrh	r3, [r7, #6]
 800d79e:	3303      	adds	r3, #3
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	f023 0303 	bic.w	r3, r3, #3
 800d7a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d7a8:	8bbb      	ldrh	r3, [r7, #28]
 800d7aa:	2b0b      	cmp	r3, #11
 800d7ac:	d801      	bhi.n	800d7b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d7ae:	230c      	movs	r3, #12
 800d7b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d7b2:	8bbb      	ldrh	r3, [r7, #28]
 800d7b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d7b8:	d803      	bhi.n	800d7c2 <mem_malloc+0x3a>
 800d7ba:	8bba      	ldrh	r2, [r7, #28]
 800d7bc:	88fb      	ldrh	r3, [r7, #6]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d201      	bcs.n	800d7c6 <mem_malloc+0x3e>
    return NULL;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	e0c4      	b.n	800d950 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d7c6:	4b64      	ldr	r3, [pc, #400]	; (800d958 <mem_malloc+0x1d0>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7ff fd4a 	bl	800d264 <mem_to_ptr>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	83fb      	strh	r3, [r7, #30]
 800d7d4:	e0b4      	b.n	800d940 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d7d6:	8bfb      	ldrh	r3, [r7, #30]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff fd31 	bl	800d240 <ptr_to_mem>
 800d7de:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	791b      	ldrb	r3, [r3, #4]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f040 80a4 	bne.w	800d932 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	881b      	ldrh	r3, [r3, #0]
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	8bfb      	ldrh	r3, [r7, #30]
 800d7f2:	1ad3      	subs	r3, r2, r3
 800d7f4:	f1a3 0208 	sub.w	r2, r3, #8
 800d7f8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	f0c0 8099 	bcc.w	800d932 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	881b      	ldrh	r3, [r3, #0]
 800d804:	461a      	mov	r2, r3
 800d806:	8bfb      	ldrh	r3, [r7, #30]
 800d808:	1ad3      	subs	r3, r2, r3
 800d80a:	f1a3 0208 	sub.w	r2, r3, #8
 800d80e:	8bbb      	ldrh	r3, [r7, #28]
 800d810:	3314      	adds	r3, #20
 800d812:	429a      	cmp	r2, r3
 800d814:	d333      	bcc.n	800d87e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d816:	8bfa      	ldrh	r2, [r7, #30]
 800d818:	8bbb      	ldrh	r3, [r7, #28]
 800d81a:	4413      	add	r3, r2
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	3308      	adds	r3, #8
 800d820:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d822:	8a7b      	ldrh	r3, [r7, #18]
 800d824:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d828:	d106      	bne.n	800d838 <mem_malloc+0xb0>
 800d82a:	4b4c      	ldr	r3, [pc, #304]	; (800d95c <mem_malloc+0x1d4>)
 800d82c:	f240 3287 	movw	r2, #903	; 0x387
 800d830:	494b      	ldr	r1, [pc, #300]	; (800d960 <mem_malloc+0x1d8>)
 800d832:	484c      	ldr	r0, [pc, #304]	; (800d964 <mem_malloc+0x1dc>)
 800d834:	f009 fe78 	bl	8017528 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d838:	8a7b      	ldrh	r3, [r7, #18]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7ff fd00 	bl	800d240 <ptr_to_mem>
 800d840:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2200      	movs	r2, #0
 800d846:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	881a      	ldrh	r2, [r3, #0]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	8bfa      	ldrh	r2, [r7, #30]
 800d854:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	8a7a      	ldrh	r2, [r7, #18]
 800d85a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	2201      	movs	r2, #1
 800d860:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	881b      	ldrh	r3, [r3, #0]
 800d866:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d86a:	d00b      	beq.n	800d884 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff fce5 	bl	800d240 <ptr_to_mem>
 800d876:	4602      	mov	r2, r0
 800d878:	8a7b      	ldrh	r3, [r7, #18]
 800d87a:	8053      	strh	r3, [r2, #2]
 800d87c:	e002      	b.n	800d884 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	2201      	movs	r2, #1
 800d882:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d884:	4b34      	ldr	r3, [pc, #208]	; (800d958 <mem_malloc+0x1d0>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	697a      	ldr	r2, [r7, #20]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d127      	bne.n	800d8de <mem_malloc+0x156>
          struct mem *cur = lfree;
 800d88e:	4b32      	ldr	r3, [pc, #200]	; (800d958 <mem_malloc+0x1d0>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d894:	e005      	b.n	800d8a2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	881b      	ldrh	r3, [r3, #0]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7ff fcd0 	bl	800d240 <ptr_to_mem>
 800d8a0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	791b      	ldrb	r3, [r3, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d004      	beq.n	800d8b4 <mem_malloc+0x12c>
 800d8aa:	4b2f      	ldr	r3, [pc, #188]	; (800d968 <mem_malloc+0x1e0>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	69ba      	ldr	r2, [r7, #24]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d1f0      	bne.n	800d896 <mem_malloc+0x10e>
          }
          lfree = cur;
 800d8b4:	4a28      	ldr	r2, [pc, #160]	; (800d958 <mem_malloc+0x1d0>)
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d8ba:	4b27      	ldr	r3, [pc, #156]	; (800d958 <mem_malloc+0x1d0>)
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	4b2a      	ldr	r3, [pc, #168]	; (800d968 <mem_malloc+0x1e0>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d00b      	beq.n	800d8de <mem_malloc+0x156>
 800d8c6:	4b24      	ldr	r3, [pc, #144]	; (800d958 <mem_malloc+0x1d0>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	791b      	ldrb	r3, [r3, #4]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d006      	beq.n	800d8de <mem_malloc+0x156>
 800d8d0:	4b22      	ldr	r3, [pc, #136]	; (800d95c <mem_malloc+0x1d4>)
 800d8d2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d8d6:	4925      	ldr	r1, [pc, #148]	; (800d96c <mem_malloc+0x1e4>)
 800d8d8:	4822      	ldr	r0, [pc, #136]	; (800d964 <mem_malloc+0x1dc>)
 800d8da:	f009 fe25 	bl	8017528 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d8de:	8bba      	ldrh	r2, [r7, #28]
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	3308      	adds	r3, #8
 800d8e6:	4a20      	ldr	r2, [pc, #128]	; (800d968 <mem_malloc+0x1e0>)
 800d8e8:	6812      	ldr	r2, [r2, #0]
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d906      	bls.n	800d8fc <mem_malloc+0x174>
 800d8ee:	4b1b      	ldr	r3, [pc, #108]	; (800d95c <mem_malloc+0x1d4>)
 800d8f0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d8f4:	491e      	ldr	r1, [pc, #120]	; (800d970 <mem_malloc+0x1e8>)
 800d8f6:	481b      	ldr	r0, [pc, #108]	; (800d964 <mem_malloc+0x1dc>)
 800d8f8:	f009 fe16 	bl	8017528 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	f003 0303 	and.w	r3, r3, #3
 800d902:	2b00      	cmp	r3, #0
 800d904:	d006      	beq.n	800d914 <mem_malloc+0x18c>
 800d906:	4b15      	ldr	r3, [pc, #84]	; (800d95c <mem_malloc+0x1d4>)
 800d908:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d90c:	4919      	ldr	r1, [pc, #100]	; (800d974 <mem_malloc+0x1ec>)
 800d90e:	4815      	ldr	r0, [pc, #84]	; (800d964 <mem_malloc+0x1dc>)
 800d910:	f009 fe0a 	bl	8017528 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	f003 0303 	and.w	r3, r3, #3
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d006      	beq.n	800d92c <mem_malloc+0x1a4>
 800d91e:	4b0f      	ldr	r3, [pc, #60]	; (800d95c <mem_malloc+0x1d4>)
 800d920:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d924:	4914      	ldr	r1, [pc, #80]	; (800d978 <mem_malloc+0x1f0>)
 800d926:	480f      	ldr	r0, [pc, #60]	; (800d964 <mem_malloc+0x1dc>)
 800d928:	f009 fdfe 	bl	8017528 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	3308      	adds	r3, #8
 800d930:	e00e      	b.n	800d950 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800d932:	8bfb      	ldrh	r3, [r7, #30]
 800d934:	4618      	mov	r0, r3
 800d936:	f7ff fc83 	bl	800d240 <ptr_to_mem>
 800d93a:	4603      	mov	r3, r0
 800d93c:	881b      	ldrh	r3, [r3, #0]
 800d93e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d940:	8bfa      	ldrh	r2, [r7, #30]
 800d942:	8bbb      	ldrh	r3, [r7, #28]
 800d944:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d948:	429a      	cmp	r2, r3
 800d94a:	f4ff af44 	bcc.w	800d7d6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3720      	adds	r7, #32
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	20006810 	.word	0x20006810
 800d95c:	08018900 	.word	0x08018900
 800d960:	08018aa8 	.word	0x08018aa8
 800d964:	08018948 	.word	0x08018948
 800d968:	2000680c 	.word	0x2000680c
 800d96c:	08018abc 	.word	0x08018abc
 800d970:	08018ad8 	.word	0x08018ad8
 800d974:	08018b08 	.word	0x08018b08
 800d978:	08018b38 	.word	0x08018b38

0800d97c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	2200      	movs	r2, #0
 800d98a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	3303      	adds	r3, #3
 800d992:	f023 0303 	bic.w	r3, r3, #3
 800d996:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d998:	2300      	movs	r3, #0
 800d99a:	60fb      	str	r3, [r7, #12]
 800d99c:	e011      	b.n	800d9c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	60fb      	str	r3, [r7, #12]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	885b      	ldrh	r3, [r3, #2]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	dbe7      	blt.n	800d99e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d9ce:	bf00      	nop
 800d9d0:	bf00      	nop
 800d9d2:	3714      	adds	r7, #20
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	80fb      	strh	r3, [r7, #6]
 800d9e6:	e009      	b.n	800d9fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d9e8:	88fb      	ldrh	r3, [r7, #6]
 800d9ea:	4a08      	ldr	r2, [pc, #32]	; (800da0c <memp_init+0x30>)
 800d9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7ff ffc3 	bl	800d97c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d9f6:	88fb      	ldrh	r3, [r7, #6]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	80fb      	strh	r3, [r7, #6]
 800d9fc:	88fb      	ldrh	r3, [r7, #6]
 800d9fe:	2b08      	cmp	r3, #8
 800da00:	d9f2      	bls.n	800d9e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800da02:	bf00      	nop
 800da04:	bf00      	nop
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	0801b324 	.word	0x0801b324

0800da10 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d012      	beq.n	800da4c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	6812      	ldr	r2, [r2, #0]
 800da2e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f003 0303 	and.w	r3, r3, #3
 800da36:	2b00      	cmp	r3, #0
 800da38:	d006      	beq.n	800da48 <do_memp_malloc_pool+0x38>
 800da3a:	4b07      	ldr	r3, [pc, #28]	; (800da58 <do_memp_malloc_pool+0x48>)
 800da3c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800da40:	4906      	ldr	r1, [pc, #24]	; (800da5c <do_memp_malloc_pool+0x4c>)
 800da42:	4807      	ldr	r0, [pc, #28]	; (800da60 <do_memp_malloc_pool+0x50>)
 800da44:	f009 fd70 	bl	8017528 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	e000      	b.n	800da4e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	08018b5c 	.word	0x08018b5c
 800da5c:	08018b8c 	.word	0x08018b8c
 800da60:	08018bb0 	.word	0x08018bb0

0800da64 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d106      	bne.n	800da80 <memp_malloc_pool+0x1c>
 800da72:	4b0a      	ldr	r3, [pc, #40]	; (800da9c <memp_malloc_pool+0x38>)
 800da74:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800da78:	4909      	ldr	r1, [pc, #36]	; (800daa0 <memp_malloc_pool+0x3c>)
 800da7a:	480a      	ldr	r0, [pc, #40]	; (800daa4 <memp_malloc_pool+0x40>)
 800da7c:	f009 fd54 	bl	8017528 <iprintf>
  if (desc == NULL) {
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d101      	bne.n	800da8a <memp_malloc_pool+0x26>
    return NULL;
 800da86:	2300      	movs	r3, #0
 800da88:	e003      	b.n	800da92 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7ff ffc0 	bl	800da10 <do_memp_malloc_pool>
 800da90:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800da92:	4618      	mov	r0, r3
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	08018b5c 	.word	0x08018b5c
 800daa0:	08018bd8 	.word	0x08018bd8
 800daa4:	08018bb0 	.word	0x08018bb0

0800daa8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	4603      	mov	r3, r0
 800dab0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800dab2:	79fb      	ldrb	r3, [r7, #7]
 800dab4:	2b08      	cmp	r3, #8
 800dab6:	d908      	bls.n	800daca <memp_malloc+0x22>
 800dab8:	4b0a      	ldr	r3, [pc, #40]	; (800dae4 <memp_malloc+0x3c>)
 800daba:	f240 1257 	movw	r2, #343	; 0x157
 800dabe:	490a      	ldr	r1, [pc, #40]	; (800dae8 <memp_malloc+0x40>)
 800dac0:	480a      	ldr	r0, [pc, #40]	; (800daec <memp_malloc+0x44>)
 800dac2:	f009 fd31 	bl	8017528 <iprintf>
 800dac6:	2300      	movs	r3, #0
 800dac8:	e008      	b.n	800dadc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800daca:	79fb      	ldrb	r3, [r7, #7]
 800dacc:	4a08      	ldr	r2, [pc, #32]	; (800daf0 <memp_malloc+0x48>)
 800dace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff ff9c 	bl	800da10 <do_memp_malloc_pool>
 800dad8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800dada:	68fb      	ldr	r3, [r7, #12]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3710      	adds	r7, #16
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	08018b5c 	.word	0x08018b5c
 800dae8:	08018bec 	.word	0x08018bec
 800daec:	08018bb0 	.word	0x08018bb0
 800daf0:	0801b324 	.word	0x0801b324

0800daf4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	f003 0303 	and.w	r3, r3, #3
 800db04:	2b00      	cmp	r3, #0
 800db06:	d006      	beq.n	800db16 <do_memp_free_pool+0x22>
 800db08:	4b0a      	ldr	r3, [pc, #40]	; (800db34 <do_memp_free_pool+0x40>)
 800db0a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800db0e:	490a      	ldr	r1, [pc, #40]	; (800db38 <do_memp_free_pool+0x44>)
 800db10:	480a      	ldr	r0, [pc, #40]	; (800db3c <do_memp_free_pool+0x48>)
 800db12:	f009 fd09 	bl	8017528 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	68fa      	ldr	r2, [r7, #12]
 800db2a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800db2c:	bf00      	nop
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	08018b5c 	.word	0x08018b5c
 800db38:	08018c0c 	.word	0x08018c0c
 800db3c:	08018bb0 	.word	0x08018bb0

0800db40 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d106      	bne.n	800db5e <memp_free_pool+0x1e>
 800db50:	4b0a      	ldr	r3, [pc, #40]	; (800db7c <memp_free_pool+0x3c>)
 800db52:	f240 1295 	movw	r2, #405	; 0x195
 800db56:	490a      	ldr	r1, [pc, #40]	; (800db80 <memp_free_pool+0x40>)
 800db58:	480a      	ldr	r0, [pc, #40]	; (800db84 <memp_free_pool+0x44>)
 800db5a:	f009 fce5 	bl	8017528 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d007      	beq.n	800db74 <memp_free_pool+0x34>
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d004      	beq.n	800db74 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800db6a:	6839      	ldr	r1, [r7, #0]
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f7ff ffc1 	bl	800daf4 <do_memp_free_pool>
 800db72:	e000      	b.n	800db76 <memp_free_pool+0x36>
    return;
 800db74:	bf00      	nop
}
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	08018b5c 	.word	0x08018b5c
 800db80:	08018bd8 	.word	0x08018bd8
 800db84:	08018bb0 	.word	0x08018bb0

0800db88 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	4603      	mov	r3, r0
 800db90:	6039      	str	r1, [r7, #0]
 800db92:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800db94:	79fb      	ldrb	r3, [r7, #7]
 800db96:	2b08      	cmp	r3, #8
 800db98:	d907      	bls.n	800dbaa <memp_free+0x22>
 800db9a:	4b0c      	ldr	r3, [pc, #48]	; (800dbcc <memp_free+0x44>)
 800db9c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dba0:	490b      	ldr	r1, [pc, #44]	; (800dbd0 <memp_free+0x48>)
 800dba2:	480c      	ldr	r0, [pc, #48]	; (800dbd4 <memp_free+0x4c>)
 800dba4:	f009 fcc0 	bl	8017528 <iprintf>
 800dba8:	e00c      	b.n	800dbc4 <memp_free+0x3c>

  if (mem == NULL) {
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d008      	beq.n	800dbc2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	4a09      	ldr	r2, [pc, #36]	; (800dbd8 <memp_free+0x50>)
 800dbb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbb8:	6839      	ldr	r1, [r7, #0]
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7ff ff9a 	bl	800daf4 <do_memp_free_pool>
 800dbc0:	e000      	b.n	800dbc4 <memp_free+0x3c>
    return;
 800dbc2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dbc4:	3708      	adds	r7, #8
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	08018b5c 	.word	0x08018b5c
 800dbd0:	08018c2c 	.word	0x08018c2c
 800dbd4:	08018bb0 	.word	0x08018bb0
 800dbd8:	0801b324 	.word	0x0801b324

0800dbdc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dbe0:	bf00      	nop
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
	...

0800dbec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
 800dbf8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d108      	bne.n	800dc12 <netif_add+0x26>
 800dc00:	4b57      	ldr	r3, [pc, #348]	; (800dd60 <netif_add+0x174>)
 800dc02:	f240 1227 	movw	r2, #295	; 0x127
 800dc06:	4957      	ldr	r1, [pc, #348]	; (800dd64 <netif_add+0x178>)
 800dc08:	4857      	ldr	r0, [pc, #348]	; (800dd68 <netif_add+0x17c>)
 800dc0a:	f009 fc8d 	bl	8017528 <iprintf>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e0a2      	b.n	800dd58 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d108      	bne.n	800dc2a <netif_add+0x3e>
 800dc18:	4b51      	ldr	r3, [pc, #324]	; (800dd60 <netif_add+0x174>)
 800dc1a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dc1e:	4953      	ldr	r1, [pc, #332]	; (800dd6c <netif_add+0x180>)
 800dc20:	4851      	ldr	r0, [pc, #324]	; (800dd68 <netif_add+0x17c>)
 800dc22:	f009 fc81 	bl	8017528 <iprintf>
 800dc26:	2300      	movs	r3, #0
 800dc28:	e096      	b.n	800dd58 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d101      	bne.n	800dc34 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dc30:	4b4f      	ldr	r3, [pc, #316]	; (800dd70 <netif_add+0x184>)
 800dc32:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d101      	bne.n	800dc3e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dc3a:	4b4d      	ldr	r3, [pc, #308]	; (800dd70 <netif_add+0x184>)
 800dc3c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d101      	bne.n	800dc48 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dc44:	4b4a      	ldr	r3, [pc, #296]	; (800dd70 <netif_add+0x184>)
 800dc46:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2200      	movs	r2, #0
 800dc52:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2200      	movs	r2, #0
 800dc58:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	4a45      	ldr	r2, [pc, #276]	; (800dd74 <netif_add+0x188>)
 800dc5e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2200      	movs	r2, #0
 800dc64:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	6a3a      	ldr	r2, [r7, #32]
 800dc78:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dc7a:	4b3f      	ldr	r3, [pc, #252]	; (800dd78 <netif_add+0x18c>)
 800dc7c:	781a      	ldrb	r2, [r3, #0]
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc88:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	68b9      	ldr	r1, [r7, #8]
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f000 f913 	bl	800debc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	4798      	blx	r3
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <netif_add+0xba>
    return NULL;
 800dca2:	2300      	movs	r3, #0
 800dca4:	e058      	b.n	800dd58 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcac:	2bff      	cmp	r3, #255	; 0xff
 800dcae:	d103      	bne.n	800dcb8 <netif_add+0xcc>
        netif->num = 0;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dcbc:	4b2f      	ldr	r3, [pc, #188]	; (800dd7c <netif_add+0x190>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	617b      	str	r3, [r7, #20]
 800dcc2:	e02b      	b.n	800dd1c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dcc4:	697a      	ldr	r2, [r7, #20]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d106      	bne.n	800dcda <netif_add+0xee>
 800dccc:	4b24      	ldr	r3, [pc, #144]	; (800dd60 <netif_add+0x174>)
 800dcce:	f240 128b 	movw	r2, #395	; 0x18b
 800dcd2:	492b      	ldr	r1, [pc, #172]	; (800dd80 <netif_add+0x194>)
 800dcd4:	4824      	ldr	r0, [pc, #144]	; (800dd68 <netif_add+0x17c>)
 800dcd6:	f009 fc27 	bl	8017528 <iprintf>
        num_netifs++;
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	3301      	adds	r3, #1
 800dcde:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	2bff      	cmp	r3, #255	; 0xff
 800dce4:	dd06      	ble.n	800dcf4 <netif_add+0x108>
 800dce6:	4b1e      	ldr	r3, [pc, #120]	; (800dd60 <netif_add+0x174>)
 800dce8:	f240 128d 	movw	r2, #397	; 0x18d
 800dcec:	4925      	ldr	r1, [pc, #148]	; (800dd84 <netif_add+0x198>)
 800dcee:	481e      	ldr	r0, [pc, #120]	; (800dd68 <netif_add+0x17c>)
 800dcf0:	f009 fc1a 	bl	8017528 <iprintf>
        if (netif2->num == netif->num) {
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d108      	bne.n	800dd16 <netif_add+0x12a>
          netif->num++;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800dd14:	e005      	b.n	800dd22 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	617b      	str	r3, [r7, #20]
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d1d0      	bne.n	800dcc4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d1be      	bne.n	800dca6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd2e:	2bfe      	cmp	r3, #254	; 0xfe
 800dd30:	d103      	bne.n	800dd3a <netif_add+0x14e>
    netif_num = 0;
 800dd32:	4b11      	ldr	r3, [pc, #68]	; (800dd78 <netif_add+0x18c>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	701a      	strb	r2, [r3, #0]
 800dd38:	e006      	b.n	800dd48 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd40:	3301      	adds	r3, #1
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	4b0c      	ldr	r3, [pc, #48]	; (800dd78 <netif_add+0x18c>)
 800dd46:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dd48:	4b0c      	ldr	r3, [pc, #48]	; (800dd7c <netif_add+0x190>)
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800dd50:	4a0a      	ldr	r2, [pc, #40]	; (800dd7c <netif_add+0x190>)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dd56:	68fb      	ldr	r3, [r7, #12]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3718      	adds	r7, #24
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	08018c48 	.word	0x08018c48
 800dd64:	08018cdc 	.word	0x08018cdc
 800dd68:	08018c98 	.word	0x08018c98
 800dd6c:	08018cf8 	.word	0x08018cf8
 800dd70:	0801b388 	.word	0x0801b388
 800dd74:	0800e197 	.word	0x0800e197
 800dd78:	20009708 	.word	0x20009708
 800dd7c:	20009700 	.word	0x20009700
 800dd80:	08018d1c 	.word	0x08018d1c
 800dd84:	08018d30 	.word	0x08018d30

0800dd88 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800dd92:	6839      	ldr	r1, [r7, #0]
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f002 fbe5 	bl	8010564 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800dd9a:	6839      	ldr	r1, [r7, #0]
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f007 f883 	bl	8014ea8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800dda2:	bf00      	nop
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
	...

0800ddac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b086      	sub	sp, #24
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d106      	bne.n	800ddcc <netif_do_set_ipaddr+0x20>
 800ddbe:	4b1d      	ldr	r3, [pc, #116]	; (800de34 <netif_do_set_ipaddr+0x88>)
 800ddc0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ddc4:	491c      	ldr	r1, [pc, #112]	; (800de38 <netif_do_set_ipaddr+0x8c>)
 800ddc6:	481d      	ldr	r0, [pc, #116]	; (800de3c <netif_do_set_ipaddr+0x90>)
 800ddc8:	f009 fbae 	bl	8017528 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d106      	bne.n	800dde0 <netif_do_set_ipaddr+0x34>
 800ddd2:	4b18      	ldr	r3, [pc, #96]	; (800de34 <netif_do_set_ipaddr+0x88>)
 800ddd4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ddd8:	4917      	ldr	r1, [pc, #92]	; (800de38 <netif_do_set_ipaddr+0x8c>)
 800ddda:	4818      	ldr	r0, [pc, #96]	; (800de3c <netif_do_set_ipaddr+0x90>)
 800dddc:	f009 fba4 	bl	8017528 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	3304      	adds	r3, #4
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d01c      	beq.n	800de28 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	3304      	adds	r3, #4
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ddfe:	f107 0314 	add.w	r3, r7, #20
 800de02:	4619      	mov	r1, r3
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff ffbf 	bl	800dd88 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <netif_do_set_ipaddr+0x6a>
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	e000      	b.n	800de18 <netif_do_set_ipaddr+0x6c>
 800de16:	2300      	movs	r3, #0
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800de1c:	2101      	movs	r1, #1
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f000 f8d2 	bl	800dfc8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800de24:	2301      	movs	r3, #1
 800de26:	e000      	b.n	800de2a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3718      	adds	r7, #24
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	08018c48 	.word	0x08018c48
 800de38:	08018d60 	.word	0x08018d60
 800de3c:	08018c98 	.word	0x08018c98

0800de40 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	3308      	adds	r3, #8
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	429a      	cmp	r2, r3
 800de58:	d00a      	beq.n	800de70 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <netif_do_set_netmask+0x26>
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	e000      	b.n	800de68 <netif_do_set_netmask+0x28>
 800de66:	2300      	movs	r3, #0
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800de6c:	2301      	movs	r3, #1
 800de6e:	e000      	b.n	800de72 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3714      	adds	r7, #20
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800de7e:	b480      	push	{r7}
 800de80:	b085      	sub	sp, #20
 800de82:	af00      	add	r7, sp, #0
 800de84:	60f8      	str	r0, [r7, #12]
 800de86:	60b9      	str	r1, [r7, #8]
 800de88:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	330c      	adds	r3, #12
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	429a      	cmp	r2, r3
 800de96:	d00a      	beq.n	800deae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d002      	beq.n	800dea4 <netif_do_set_gw+0x26>
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	e000      	b.n	800dea6 <netif_do_set_gw+0x28>
 800dea4:	2300      	movs	r3, #0
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800deaa:	2301      	movs	r3, #1
 800deac:	e000      	b.n	800deb0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3714      	adds	r7, #20
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b088      	sub	sp, #32
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800deca:	2300      	movs	r3, #0
 800decc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dece:	2300      	movs	r3, #0
 800ded0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d101      	bne.n	800dedc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ded8:	4b1c      	ldr	r3, [pc, #112]	; (800df4c <netif_set_addr+0x90>)
 800deda:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d101      	bne.n	800dee6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dee2:	4b1a      	ldr	r3, [pc, #104]	; (800df4c <netif_set_addr+0x90>)
 800dee4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d101      	bne.n	800def0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800deec:	4b17      	ldr	r3, [pc, #92]	; (800df4c <netif_set_addr+0x90>)
 800deee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d003      	beq.n	800defe <netif_set_addr+0x42>
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d101      	bne.n	800df02 <netif_set_addr+0x46>
 800defe:	2301      	movs	r3, #1
 800df00:	e000      	b.n	800df04 <netif_set_addr+0x48>
 800df02:	2300      	movs	r3, #0
 800df04:	617b      	str	r3, [r7, #20]
  if (remove) {
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d006      	beq.n	800df1a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800df0c:	f107 0310 	add.w	r3, r7, #16
 800df10:	461a      	mov	r2, r3
 800df12:	68b9      	ldr	r1, [r7, #8]
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f7ff ff49 	bl	800ddac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800df1a:	69fa      	ldr	r2, [r7, #28]
 800df1c:	6879      	ldr	r1, [r7, #4]
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	f7ff ff8e 	bl	800de40 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800df24:	69ba      	ldr	r2, [r7, #24]
 800df26:	6839      	ldr	r1, [r7, #0]
 800df28:	68f8      	ldr	r0, [r7, #12]
 800df2a:	f7ff ffa8 	bl	800de7e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d106      	bne.n	800df42 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800df34:	f107 0310 	add.w	r3, r7, #16
 800df38:	461a      	mov	r2, r3
 800df3a:	68b9      	ldr	r1, [r7, #8]
 800df3c:	68f8      	ldr	r0, [r7, #12]
 800df3e:	f7ff ff35 	bl	800ddac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800df42:	bf00      	nop
 800df44:	3720      	adds	r7, #32
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	0801b388 	.word	0x0801b388

0800df50 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800df50:	b480      	push	{r7}
 800df52:	b083      	sub	sp, #12
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800df58:	4a04      	ldr	r2, [pc, #16]	; (800df6c <netif_set_default+0x1c>)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800df5e:	bf00      	nop
 800df60:	370c      	adds	r7, #12
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	20009704 	.word	0x20009704

0800df70 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d107      	bne.n	800df8e <netif_set_up+0x1e>
 800df7e:	4b0f      	ldr	r3, [pc, #60]	; (800dfbc <netif_set_up+0x4c>)
 800df80:	f44f 7254 	mov.w	r2, #848	; 0x350
 800df84:	490e      	ldr	r1, [pc, #56]	; (800dfc0 <netif_set_up+0x50>)
 800df86:	480f      	ldr	r0, [pc, #60]	; (800dfc4 <netif_set_up+0x54>)
 800df88:	f009 face 	bl	8017528 <iprintf>
 800df8c:	e013      	b.n	800dfb6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df94:	f003 0301 	and.w	r3, r3, #1
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d10c      	bne.n	800dfb6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfa2:	f043 0301 	orr.w	r3, r3, #1
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dfae:	2103      	movs	r1, #3
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 f809 	bl	800dfc8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	08018c48 	.word	0x08018c48
 800dfc0:	08018dd0 	.word	0x08018dd0
 800dfc4:	08018c98 	.word	0x08018c98

0800dfc8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d106      	bne.n	800dfe8 <netif_issue_reports+0x20>
 800dfda:	4b18      	ldr	r3, [pc, #96]	; (800e03c <netif_issue_reports+0x74>)
 800dfdc:	f240 326d 	movw	r2, #877	; 0x36d
 800dfe0:	4917      	ldr	r1, [pc, #92]	; (800e040 <netif_issue_reports+0x78>)
 800dfe2:	4818      	ldr	r0, [pc, #96]	; (800e044 <netif_issue_reports+0x7c>)
 800dfe4:	f009 faa0 	bl	8017528 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfee:	f003 0304 	and.w	r3, r3, #4
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d01e      	beq.n	800e034 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dffc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e000:	2b00      	cmp	r3, #0
 800e002:	d017      	beq.n	800e034 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e004:	78fb      	ldrb	r3, [r7, #3]
 800e006:	f003 0301 	and.w	r3, r3, #1
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d013      	beq.n	800e036 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	3304      	adds	r3, #4
 800e012:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00e      	beq.n	800e036 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e01e:	f003 0308 	and.w	r3, r3, #8
 800e022:	2b00      	cmp	r3, #0
 800e024:	d007      	beq.n	800e036 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	3304      	adds	r3, #4
 800e02a:	4619      	mov	r1, r3
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f007 fea5 	bl	8015d7c <etharp_request>
 800e032:	e000      	b.n	800e036 <netif_issue_reports+0x6e>
    return;
 800e034:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	08018c48 	.word	0x08018c48
 800e040:	08018dec 	.word	0x08018dec
 800e044:	08018c98 	.word	0x08018c98

0800e048 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d107      	bne.n	800e066 <netif_set_down+0x1e>
 800e056:	4b12      	ldr	r3, [pc, #72]	; (800e0a0 <netif_set_down+0x58>)
 800e058:	f240 329b 	movw	r2, #923	; 0x39b
 800e05c:	4911      	ldr	r1, [pc, #68]	; (800e0a4 <netif_set_down+0x5c>)
 800e05e:	4812      	ldr	r0, [pc, #72]	; (800e0a8 <netif_set_down+0x60>)
 800e060:	f009 fa62 	bl	8017528 <iprintf>
 800e064:	e019      	b.n	800e09a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e06c:	f003 0301 	and.w	r3, r3, #1
 800e070:	2b00      	cmp	r3, #0
 800e072:	d012      	beq.n	800e09a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e07a:	f023 0301 	bic.w	r3, r3, #1
 800e07e:	b2da      	uxtb	r2, r3
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e08c:	f003 0308 	and.w	r3, r3, #8
 800e090:	2b00      	cmp	r3, #0
 800e092:	d002      	beq.n	800e09a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f007 fa2f 	bl	80154f8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	08018c48 	.word	0x08018c48
 800e0a4:	08018e10 	.word	0x08018e10
 800e0a8:	08018c98 	.word	0x08018c98

0800e0ac <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d107      	bne.n	800e0ca <netif_set_link_up+0x1e>
 800e0ba:	4b13      	ldr	r3, [pc, #76]	; (800e108 <netif_set_link_up+0x5c>)
 800e0bc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e0c0:	4912      	ldr	r1, [pc, #72]	; (800e10c <netif_set_link_up+0x60>)
 800e0c2:	4813      	ldr	r0, [pc, #76]	; (800e110 <netif_set_link_up+0x64>)
 800e0c4:	f009 fa30 	bl	8017528 <iprintf>
 800e0c8:	e01b      	b.n	800e102 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0d0:	f003 0304 	and.w	r3, r3, #4
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d114      	bne.n	800e102 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0de:	f043 0304 	orr.w	r3, r3, #4
 800e0e2:	b2da      	uxtb	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e0ea:	2103      	movs	r1, #3
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f7ff ff6b 	bl	800dfc8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	69db      	ldr	r3, [r3, #28]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d003      	beq.n	800e102 <netif_set_link_up+0x56>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	69db      	ldr	r3, [r3, #28]
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e102:	3708      	adds	r7, #8
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}
 800e108:	08018c48 	.word	0x08018c48
 800e10c:	08018e30 	.word	0x08018e30
 800e110:	08018c98 	.word	0x08018c98

0800e114 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d107      	bne.n	800e132 <netif_set_link_down+0x1e>
 800e122:	4b11      	ldr	r3, [pc, #68]	; (800e168 <netif_set_link_down+0x54>)
 800e124:	f240 4206 	movw	r2, #1030	; 0x406
 800e128:	4910      	ldr	r1, [pc, #64]	; (800e16c <netif_set_link_down+0x58>)
 800e12a:	4811      	ldr	r0, [pc, #68]	; (800e170 <netif_set_link_down+0x5c>)
 800e12c:	f009 f9fc 	bl	8017528 <iprintf>
 800e130:	e017      	b.n	800e162 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e138:	f003 0304 	and.w	r3, r3, #4
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d010      	beq.n	800e162 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e146:	f023 0304 	bic.w	r3, r3, #4
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	69db      	ldr	r3, [r3, #28]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d003      	beq.n	800e162 <netif_set_link_down+0x4e>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	69db      	ldr	r3, [r3, #28]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	08018c48 	.word	0x08018c48
 800e16c:	08018e54 	.word	0x08018e54
 800e170:	08018c98 	.word	0x08018c98

0800e174 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d002      	beq.n	800e18a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	683a      	ldr	r2, [r7, #0]
 800e188:	61da      	str	r2, [r3, #28]
  }
}
 800e18a:	bf00      	nop
 800e18c:	370c      	adds	r7, #12
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr

0800e196 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e196:	b480      	push	{r7}
 800e198:	b085      	sub	sp, #20
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	60f8      	str	r0, [r7, #12]
 800e19e:	60b9      	str	r1, [r7, #8]
 800e1a0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e1a2:	f06f 030b 	mvn.w	r3, #11
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3714      	adds	r7, #20
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr
	...

0800e1b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b085      	sub	sp, #20
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e1be:	79fb      	ldrb	r3, [r7, #7]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d013      	beq.n	800e1ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e1c4:	4b0d      	ldr	r3, [pc, #52]	; (800e1fc <netif_get_by_index+0x48>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	60fb      	str	r3, [r7, #12]
 800e1ca:	e00c      	b.n	800e1e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	79fa      	ldrb	r2, [r7, #7]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d101      	bne.n	800e1e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	e006      	b.n	800e1ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	60fb      	str	r3, [r7, #12]
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d1ef      	bne.n	800e1cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e1ec:	2300      	movs	r3, #0
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3714      	adds	r7, #20
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop
 800e1fc:	20009700 	.word	0x20009700

0800e200 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e206:	4b0c      	ldr	r3, [pc, #48]	; (800e238 <pbuf_free_ooseq+0x38>)
 800e208:	2200      	movs	r2, #0
 800e20a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e20c:	4b0b      	ldr	r3, [pc, #44]	; (800e23c <pbuf_free_ooseq+0x3c>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	607b      	str	r3, [r7, #4]
 800e212:	e00a      	b.n	800e22a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d003      	beq.n	800e224 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f002 f9df 	bl	80105e0 <tcp_free_ooseq>
      return;
 800e222:	e005      	b.n	800e230 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	607b      	str	r3, [r7, #4]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d1f1      	bne.n	800e214 <pbuf_free_ooseq+0x14>
    }
  }
}
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	20009709 	.word	0x20009709
 800e23c:	20009718 	.word	0x20009718

0800e240 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e240:	b480      	push	{r7}
 800e242:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800e244:	4b03      	ldr	r3, [pc, #12]	; (800e254 <pbuf_pool_is_empty+0x14>)
 800e246:	2201      	movs	r2, #1
 800e248:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e24a:	bf00      	nop
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	20009709 	.word	0x20009709

0800e258 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	4611      	mov	r1, r2
 800e264:	461a      	mov	r2, r3
 800e266:	460b      	mov	r3, r1
 800e268:	80fb      	strh	r3, [r7, #6]
 800e26a:	4613      	mov	r3, r2
 800e26c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2200      	movs	r2, #0
 800e272:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	88fa      	ldrh	r2, [r7, #6]
 800e27e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	88ba      	ldrh	r2, [r7, #4]
 800e284:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e286:	8b3b      	ldrh	r3, [r7, #24]
 800e288:	b2da      	uxtb	r2, r3
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	7f3a      	ldrb	r2, [r7, #28]
 800e292:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2201      	movs	r2, #1
 800e298:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2200      	movs	r2, #0
 800e29e:	73da      	strb	r2, [r3, #15]
}
 800e2a0:	bf00      	nop
 800e2a2:	3714      	adds	r7, #20
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b08c      	sub	sp, #48	; 0x30
 800e2b0:	af02      	add	r7, sp, #8
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	71fb      	strb	r3, [r7, #7]
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	80bb      	strh	r3, [r7, #4]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e2be:	79fb      	ldrb	r3, [r7, #7]
 800e2c0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e2c2:	887b      	ldrh	r3, [r7, #2]
 800e2c4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e2c8:	d07f      	beq.n	800e3ca <pbuf_alloc+0x11e>
 800e2ca:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e2ce:	f300 80c8 	bgt.w	800e462 <pbuf_alloc+0x1b6>
 800e2d2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e2d6:	d010      	beq.n	800e2fa <pbuf_alloc+0x4e>
 800e2d8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e2dc:	f300 80c1 	bgt.w	800e462 <pbuf_alloc+0x1b6>
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d002      	beq.n	800e2ea <pbuf_alloc+0x3e>
 800e2e4:	2b41      	cmp	r3, #65	; 0x41
 800e2e6:	f040 80bc 	bne.w	800e462 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e2ea:	887a      	ldrh	r2, [r7, #2]
 800e2ec:	88bb      	ldrh	r3, [r7, #4]
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	f000 f8d1 	bl	800e498 <pbuf_alloc_reference>
 800e2f6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e2f8:	e0bd      	b.n	800e476 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e2fe:	2300      	movs	r3, #0
 800e300:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e302:	88bb      	ldrh	r3, [r7, #4]
 800e304:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e306:	2008      	movs	r0, #8
 800e308:	f7ff fbce 	bl	800daa8 <memp_malloc>
 800e30c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d109      	bne.n	800e328 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e314:	f7ff ff94 	bl	800e240 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d002      	beq.n	800e324 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e31e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e320:	f000 faa8 	bl	800e874 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e324:	2300      	movs	r3, #0
 800e326:	e0a7      	b.n	800e478 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e328:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e32a:	3303      	adds	r3, #3
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	f023 0303 	bic.w	r3, r3, #3
 800e332:	b29b      	uxth	r3, r3
 800e334:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e338:	b29b      	uxth	r3, r3
 800e33a:	8b7a      	ldrh	r2, [r7, #26]
 800e33c:	4293      	cmp	r3, r2
 800e33e:	bf28      	it	cs
 800e340:	4613      	movcs	r3, r2
 800e342:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e346:	3310      	adds	r3, #16
 800e348:	693a      	ldr	r2, [r7, #16]
 800e34a:	4413      	add	r3, r2
 800e34c:	3303      	adds	r3, #3
 800e34e:	f023 0303 	bic.w	r3, r3, #3
 800e352:	4618      	mov	r0, r3
 800e354:	89f9      	ldrh	r1, [r7, #14]
 800e356:	8b7a      	ldrh	r2, [r7, #26]
 800e358:	2300      	movs	r3, #0
 800e35a:	9301      	str	r3, [sp, #4]
 800e35c:	887b      	ldrh	r3, [r7, #2]
 800e35e:	9300      	str	r3, [sp, #0]
 800e360:	460b      	mov	r3, r1
 800e362:	4601      	mov	r1, r0
 800e364:	6938      	ldr	r0, [r7, #16]
 800e366:	f7ff ff77 	bl	800e258 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	f003 0303 	and.w	r3, r3, #3
 800e372:	2b00      	cmp	r3, #0
 800e374:	d006      	beq.n	800e384 <pbuf_alloc+0xd8>
 800e376:	4b42      	ldr	r3, [pc, #264]	; (800e480 <pbuf_alloc+0x1d4>)
 800e378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e37c:	4941      	ldr	r1, [pc, #260]	; (800e484 <pbuf_alloc+0x1d8>)
 800e37e:	4842      	ldr	r0, [pc, #264]	; (800e488 <pbuf_alloc+0x1dc>)
 800e380:	f009 f8d2 	bl	8017528 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e384:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e386:	3303      	adds	r3, #3
 800e388:	f023 0303 	bic.w	r3, r3, #3
 800e38c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e390:	d106      	bne.n	800e3a0 <pbuf_alloc+0xf4>
 800e392:	4b3b      	ldr	r3, [pc, #236]	; (800e480 <pbuf_alloc+0x1d4>)
 800e394:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e398:	493c      	ldr	r1, [pc, #240]	; (800e48c <pbuf_alloc+0x1e0>)
 800e39a:	483b      	ldr	r0, [pc, #236]	; (800e488 <pbuf_alloc+0x1dc>)
 800e39c:	f009 f8c4 	bl	8017528 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d102      	bne.n	800e3ac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	627b      	str	r3, [r7, #36]	; 0x24
 800e3aa:	e002      	b.n	800e3b2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	693a      	ldr	r2, [r7, #16]
 800e3b0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e3b6:	8b7a      	ldrh	r2, [r7, #26]
 800e3b8:	89fb      	ldrh	r3, [r7, #14]
 800e3ba:	1ad3      	subs	r3, r2, r3
 800e3bc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e3c2:	8b7b      	ldrh	r3, [r7, #26]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d19e      	bne.n	800e306 <pbuf_alloc+0x5a>
      break;
 800e3c8:	e055      	b.n	800e476 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e3ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3cc:	3303      	adds	r3, #3
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	f023 0303 	bic.w	r3, r3, #3
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	88bb      	ldrh	r3, [r7, #4]
 800e3d8:	3303      	adds	r3, #3
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	f023 0303 	bic.w	r3, r3, #3
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	4413      	add	r3, r2
 800e3e4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e3e6:	8b3b      	ldrh	r3, [r7, #24]
 800e3e8:	3310      	adds	r3, #16
 800e3ea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e3ec:	8b3a      	ldrh	r2, [r7, #24]
 800e3ee:	88bb      	ldrh	r3, [r7, #4]
 800e3f0:	3303      	adds	r3, #3
 800e3f2:	f023 0303 	bic.w	r3, r3, #3
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d306      	bcc.n	800e408 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e3fa:	8afa      	ldrh	r2, [r7, #22]
 800e3fc:	88bb      	ldrh	r3, [r7, #4]
 800e3fe:	3303      	adds	r3, #3
 800e400:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e404:	429a      	cmp	r2, r3
 800e406:	d201      	bcs.n	800e40c <pbuf_alloc+0x160>
        return NULL;
 800e408:	2300      	movs	r3, #0
 800e40a:	e035      	b.n	800e478 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e40c:	8afb      	ldrh	r3, [r7, #22]
 800e40e:	4618      	mov	r0, r3
 800e410:	f7ff f9ba 	bl	800d788 <mem_malloc>
 800e414:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d101      	bne.n	800e420 <pbuf_alloc+0x174>
        return NULL;
 800e41c:	2300      	movs	r3, #0
 800e41e:	e02b      	b.n	800e478 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e420:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e422:	3310      	adds	r3, #16
 800e424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e426:	4413      	add	r3, r2
 800e428:	3303      	adds	r3, #3
 800e42a:	f023 0303 	bic.w	r3, r3, #3
 800e42e:	4618      	mov	r0, r3
 800e430:	88b9      	ldrh	r1, [r7, #4]
 800e432:	88ba      	ldrh	r2, [r7, #4]
 800e434:	2300      	movs	r3, #0
 800e436:	9301      	str	r3, [sp, #4]
 800e438:	887b      	ldrh	r3, [r7, #2]
 800e43a:	9300      	str	r3, [sp, #0]
 800e43c:	460b      	mov	r3, r1
 800e43e:	4601      	mov	r1, r0
 800e440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e442:	f7ff ff09 	bl	800e258 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	f003 0303 	and.w	r3, r3, #3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d010      	beq.n	800e474 <pbuf_alloc+0x1c8>
 800e452:	4b0b      	ldr	r3, [pc, #44]	; (800e480 <pbuf_alloc+0x1d4>)
 800e454:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e458:	490d      	ldr	r1, [pc, #52]	; (800e490 <pbuf_alloc+0x1e4>)
 800e45a:	480b      	ldr	r0, [pc, #44]	; (800e488 <pbuf_alloc+0x1dc>)
 800e45c:	f009 f864 	bl	8017528 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e460:	e008      	b.n	800e474 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e462:	4b07      	ldr	r3, [pc, #28]	; (800e480 <pbuf_alloc+0x1d4>)
 800e464:	f240 1227 	movw	r2, #295	; 0x127
 800e468:	490a      	ldr	r1, [pc, #40]	; (800e494 <pbuf_alloc+0x1e8>)
 800e46a:	4807      	ldr	r0, [pc, #28]	; (800e488 <pbuf_alloc+0x1dc>)
 800e46c:	f009 f85c 	bl	8017528 <iprintf>
      return NULL;
 800e470:	2300      	movs	r3, #0
 800e472:	e001      	b.n	800e478 <pbuf_alloc+0x1cc>
      break;
 800e474:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3728      	adds	r7, #40	; 0x28
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	08018e78 	.word	0x08018e78
 800e484:	08018ea8 	.word	0x08018ea8
 800e488:	08018ed8 	.word	0x08018ed8
 800e48c:	08018f00 	.word	0x08018f00
 800e490:	08018f34 	.word	0x08018f34
 800e494:	08018f60 	.word	0x08018f60

0800e498 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b086      	sub	sp, #24
 800e49c:	af02      	add	r7, sp, #8
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	807b      	strh	r3, [r7, #2]
 800e4a4:	4613      	mov	r3, r2
 800e4a6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e4a8:	883b      	ldrh	r3, [r7, #0]
 800e4aa:	2b41      	cmp	r3, #65	; 0x41
 800e4ac:	d009      	beq.n	800e4c2 <pbuf_alloc_reference+0x2a>
 800e4ae:	883b      	ldrh	r3, [r7, #0]
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d006      	beq.n	800e4c2 <pbuf_alloc_reference+0x2a>
 800e4b4:	4b0f      	ldr	r3, [pc, #60]	; (800e4f4 <pbuf_alloc_reference+0x5c>)
 800e4b6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e4ba:	490f      	ldr	r1, [pc, #60]	; (800e4f8 <pbuf_alloc_reference+0x60>)
 800e4bc:	480f      	ldr	r0, [pc, #60]	; (800e4fc <pbuf_alloc_reference+0x64>)
 800e4be:	f009 f833 	bl	8017528 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e4c2:	2007      	movs	r0, #7
 800e4c4:	f7ff faf0 	bl	800daa8 <memp_malloc>
 800e4c8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d101      	bne.n	800e4d4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e00b      	b.n	800e4ec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e4d4:	8879      	ldrh	r1, [r7, #2]
 800e4d6:	887a      	ldrh	r2, [r7, #2]
 800e4d8:	2300      	movs	r3, #0
 800e4da:	9301      	str	r3, [sp, #4]
 800e4dc:	883b      	ldrh	r3, [r7, #0]
 800e4de:	9300      	str	r3, [sp, #0]
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	6879      	ldr	r1, [r7, #4]
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f7ff feb7 	bl	800e258 <pbuf_init_alloced_pbuf>
  return p;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3710      	adds	r7, #16
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	08018e78 	.word	0x08018e78
 800e4f8:	08018f7c 	.word	0x08018f7c
 800e4fc:	08018ed8 	.word	0x08018ed8

0800e500 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b088      	sub	sp, #32
 800e504:	af02      	add	r7, sp, #8
 800e506:	607b      	str	r3, [r7, #4]
 800e508:	4603      	mov	r3, r0
 800e50a:	73fb      	strb	r3, [r7, #15]
 800e50c:	460b      	mov	r3, r1
 800e50e:	81bb      	strh	r3, [r7, #12]
 800e510:	4613      	mov	r3, r2
 800e512:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e514:	7bfb      	ldrb	r3, [r7, #15]
 800e516:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e518:	8a7b      	ldrh	r3, [r7, #18]
 800e51a:	3303      	adds	r3, #3
 800e51c:	f023 0203 	bic.w	r2, r3, #3
 800e520:	89bb      	ldrh	r3, [r7, #12]
 800e522:	441a      	add	r2, r3
 800e524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e526:	429a      	cmp	r2, r3
 800e528:	d901      	bls.n	800e52e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e52a:	2300      	movs	r3, #0
 800e52c:	e018      	b.n	800e560 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e52e:	6a3b      	ldr	r3, [r7, #32]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d007      	beq.n	800e544 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e534:	8a7b      	ldrh	r3, [r7, #18]
 800e536:	3303      	adds	r3, #3
 800e538:	f023 0303 	bic.w	r3, r3, #3
 800e53c:	6a3a      	ldr	r2, [r7, #32]
 800e53e:	4413      	add	r3, r2
 800e540:	617b      	str	r3, [r7, #20]
 800e542:	e001      	b.n	800e548 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e544:	2300      	movs	r3, #0
 800e546:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	89b9      	ldrh	r1, [r7, #12]
 800e54c:	89ba      	ldrh	r2, [r7, #12]
 800e54e:	2302      	movs	r3, #2
 800e550:	9301      	str	r3, [sp, #4]
 800e552:	897b      	ldrh	r3, [r7, #10]
 800e554:	9300      	str	r3, [sp, #0]
 800e556:	460b      	mov	r3, r1
 800e558:	6979      	ldr	r1, [r7, #20]
 800e55a:	f7ff fe7d 	bl	800e258 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e55e:	687b      	ldr	r3, [r7, #4]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3718      	adds	r7, #24
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	460b      	mov	r3, r1
 800e572:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d106      	bne.n	800e588 <pbuf_realloc+0x20>
 800e57a:	4b3a      	ldr	r3, [pc, #232]	; (800e664 <pbuf_realloc+0xfc>)
 800e57c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e580:	4939      	ldr	r1, [pc, #228]	; (800e668 <pbuf_realloc+0x100>)
 800e582:	483a      	ldr	r0, [pc, #232]	; (800e66c <pbuf_realloc+0x104>)
 800e584:	f008 ffd0 	bl	8017528 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	891b      	ldrh	r3, [r3, #8]
 800e58c:	887a      	ldrh	r2, [r7, #2]
 800e58e:	429a      	cmp	r2, r3
 800e590:	d263      	bcs.n	800e65a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	891a      	ldrh	r2, [r3, #8]
 800e596:	887b      	ldrh	r3, [r7, #2]
 800e598:	1ad3      	subs	r3, r2, r3
 800e59a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e59c:	887b      	ldrh	r3, [r7, #2]
 800e59e:	817b      	strh	r3, [r7, #10]
  q = p;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e5a4:	e018      	b.n	800e5d8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	895b      	ldrh	r3, [r3, #10]
 800e5aa:	897a      	ldrh	r2, [r7, #10]
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	891a      	ldrh	r2, [r3, #8]
 800e5b4:	893b      	ldrh	r3, [r7, #8]
 800e5b6:	1ad3      	subs	r3, r2, r3
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d106      	bne.n	800e5d8 <pbuf_realloc+0x70>
 800e5ca:	4b26      	ldr	r3, [pc, #152]	; (800e664 <pbuf_realloc+0xfc>)
 800e5cc:	f240 12af 	movw	r2, #431	; 0x1af
 800e5d0:	4927      	ldr	r1, [pc, #156]	; (800e670 <pbuf_realloc+0x108>)
 800e5d2:	4826      	ldr	r0, [pc, #152]	; (800e66c <pbuf_realloc+0x104>)
 800e5d4:	f008 ffa8 	bl	8017528 <iprintf>
  while (rem_len > q->len) {
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	895b      	ldrh	r3, [r3, #10]
 800e5dc:	897a      	ldrh	r2, [r7, #10]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d8e1      	bhi.n	800e5a6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	7b1b      	ldrb	r3, [r3, #12]
 800e5e6:	f003 030f 	and.w	r3, r3, #15
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d121      	bne.n	800e632 <pbuf_realloc+0xca>
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	895b      	ldrh	r3, [r3, #10]
 800e5f2:	897a      	ldrh	r2, [r7, #10]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d01c      	beq.n	800e632 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	7b5b      	ldrb	r3, [r3, #13]
 800e5fc:	f003 0302 	and.w	r3, r3, #2
 800e600:	2b00      	cmp	r3, #0
 800e602:	d116      	bne.n	800e632 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	685a      	ldr	r2, [r3, #4]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	1ad3      	subs	r3, r2, r3
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	897b      	ldrh	r3, [r7, #10]
 800e610:	4413      	add	r3, r2
 800e612:	b29b      	uxth	r3, r3
 800e614:	4619      	mov	r1, r3
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f7fe ffba 	bl	800d590 <mem_trim>
 800e61c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d106      	bne.n	800e632 <pbuf_realloc+0xca>
 800e624:	4b0f      	ldr	r3, [pc, #60]	; (800e664 <pbuf_realloc+0xfc>)
 800e626:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e62a:	4912      	ldr	r1, [pc, #72]	; (800e674 <pbuf_realloc+0x10c>)
 800e62c:	480f      	ldr	r0, [pc, #60]	; (800e66c <pbuf_realloc+0x104>)
 800e62e:	f008 ff7b 	bl	8017528 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	897a      	ldrh	r2, [r7, #10]
 800e636:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	895a      	ldrh	r2, [r3, #10]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d004      	beq.n	800e652 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4618      	mov	r0, r3
 800e64e:	f000 f911 	bl	800e874 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2200      	movs	r2, #0
 800e656:	601a      	str	r2, [r3, #0]
 800e658:	e000      	b.n	800e65c <pbuf_realloc+0xf4>
    return;
 800e65a:	bf00      	nop

}
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop
 800e664:	08018e78 	.word	0x08018e78
 800e668:	08018f90 	.word	0x08018f90
 800e66c:	08018ed8 	.word	0x08018ed8
 800e670:	08018fa8 	.word	0x08018fa8
 800e674:	08018fc0 	.word	0x08018fc0

0800e678 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b086      	sub	sp, #24
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	4613      	mov	r3, r2
 800e684:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d106      	bne.n	800e69a <pbuf_add_header_impl+0x22>
 800e68c:	4b2b      	ldr	r3, [pc, #172]	; (800e73c <pbuf_add_header_impl+0xc4>)
 800e68e:	f240 12df 	movw	r2, #479	; 0x1df
 800e692:	492b      	ldr	r1, [pc, #172]	; (800e740 <pbuf_add_header_impl+0xc8>)
 800e694:	482b      	ldr	r0, [pc, #172]	; (800e744 <pbuf_add_header_impl+0xcc>)
 800e696:	f008 ff47 	bl	8017528 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d003      	beq.n	800e6a8 <pbuf_add_header_impl+0x30>
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6a6:	d301      	bcc.n	800e6ac <pbuf_add_header_impl+0x34>
    return 1;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	e043      	b.n	800e734 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d101      	bne.n	800e6b6 <pbuf_add_header_impl+0x3e>
    return 0;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	e03e      	b.n	800e734 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	891a      	ldrh	r2, [r3, #8]
 800e6be:	8a7b      	ldrh	r3, [r7, #18]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	8a7a      	ldrh	r2, [r7, #18]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d901      	bls.n	800e6ce <pbuf_add_header_impl+0x56>
    return 1;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	e032      	b.n	800e734 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	7b1b      	ldrb	r3, [r3, #12]
 800e6d2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e6d4:	8a3b      	ldrh	r3, [r7, #16]
 800e6d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00c      	beq.n	800e6f8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	685a      	ldr	r2, [r3, #4]
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	425b      	negs	r3, r3
 800e6e6:	4413      	add	r3, r2
 800e6e8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	3310      	adds	r3, #16
 800e6ee:	697a      	ldr	r2, [r7, #20]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d20d      	bcs.n	800e710 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	e01d      	b.n	800e734 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d006      	beq.n	800e70c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	685a      	ldr	r2, [r3, #4]
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	425b      	negs	r3, r3
 800e706:	4413      	add	r3, r2
 800e708:	617b      	str	r3, [r7, #20]
 800e70a:	e001      	b.n	800e710 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e70c:	2301      	movs	r3, #1
 800e70e:	e011      	b.n	800e734 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	697a      	ldr	r2, [r7, #20]
 800e714:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	895a      	ldrh	r2, [r3, #10]
 800e71a:	8a7b      	ldrh	r3, [r7, #18]
 800e71c:	4413      	add	r3, r2
 800e71e:	b29a      	uxth	r2, r3
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	891a      	ldrh	r2, [r3, #8]
 800e728:	8a7b      	ldrh	r3, [r7, #18]
 800e72a:	4413      	add	r3, r2
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	811a      	strh	r2, [r3, #8]


  return 0;
 800e732:	2300      	movs	r3, #0
}
 800e734:	4618      	mov	r0, r3
 800e736:	3718      	adds	r7, #24
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	08018e78 	.word	0x08018e78
 800e740:	08018fdc 	.word	0x08018fdc
 800e744:	08018ed8 	.word	0x08018ed8

0800e748 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e752:	2200      	movs	r2, #0
 800e754:	6839      	ldr	r1, [r7, #0]
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f7ff ff8e 	bl	800e678 <pbuf_add_header_impl>
 800e75c:	4603      	mov	r3, r0
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3708      	adds	r7, #8
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
	...

0800e768 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d106      	bne.n	800e786 <pbuf_remove_header+0x1e>
 800e778:	4b20      	ldr	r3, [pc, #128]	; (800e7fc <pbuf_remove_header+0x94>)
 800e77a:	f240 224b 	movw	r2, #587	; 0x24b
 800e77e:	4920      	ldr	r1, [pc, #128]	; (800e800 <pbuf_remove_header+0x98>)
 800e780:	4820      	ldr	r0, [pc, #128]	; (800e804 <pbuf_remove_header+0x9c>)
 800e782:	f008 fed1 	bl	8017528 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d003      	beq.n	800e794 <pbuf_remove_header+0x2c>
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e792:	d301      	bcc.n	800e798 <pbuf_remove_header+0x30>
    return 1;
 800e794:	2301      	movs	r3, #1
 800e796:	e02c      	b.n	800e7f2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d101      	bne.n	800e7a2 <pbuf_remove_header+0x3a>
    return 0;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	e027      	b.n	800e7f2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	895b      	ldrh	r3, [r3, #10]
 800e7aa:	89fa      	ldrh	r2, [r7, #14]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d908      	bls.n	800e7c2 <pbuf_remove_header+0x5a>
 800e7b0:	4b12      	ldr	r3, [pc, #72]	; (800e7fc <pbuf_remove_header+0x94>)
 800e7b2:	f240 2255 	movw	r2, #597	; 0x255
 800e7b6:	4914      	ldr	r1, [pc, #80]	; (800e808 <pbuf_remove_header+0xa0>)
 800e7b8:	4812      	ldr	r0, [pc, #72]	; (800e804 <pbuf_remove_header+0x9c>)
 800e7ba:	f008 feb5 	bl	8017528 <iprintf>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e017      	b.n	800e7f2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	441a      	add	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	895a      	ldrh	r2, [r3, #10]
 800e7d8:	89fb      	ldrh	r3, [r7, #14]
 800e7da:	1ad3      	subs	r3, r2, r3
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	891a      	ldrh	r2, [r3, #8]
 800e7e6:	89fb      	ldrh	r3, [r7, #14]
 800e7e8:	1ad3      	subs	r3, r2, r3
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e7f0:	2300      	movs	r3, #0
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3710      	adds	r7, #16
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	08018e78 	.word	0x08018e78
 800e800:	08018fdc 	.word	0x08018fdc
 800e804:	08018ed8 	.word	0x08018ed8
 800e808:	08018fe8 	.word	0x08018fe8

0800e80c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	460b      	mov	r3, r1
 800e816:	807b      	strh	r3, [r7, #2]
 800e818:	4613      	mov	r3, r2
 800e81a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e81c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e820:	2b00      	cmp	r3, #0
 800e822:	da08      	bge.n	800e836 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e824:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e828:	425b      	negs	r3, r3
 800e82a:	4619      	mov	r1, r3
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f7ff ff9b 	bl	800e768 <pbuf_remove_header>
 800e832:	4603      	mov	r3, r0
 800e834:	e007      	b.n	800e846 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e836:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e83a:	787a      	ldrb	r2, [r7, #1]
 800e83c:	4619      	mov	r1, r3
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f7ff ff1a 	bl	800e678 <pbuf_add_header_impl>
 800e844:	4603      	mov	r3, r0
  }
}
 800e846:	4618      	mov	r0, r3
 800e848:	3708      	adds	r7, #8
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}

0800e84e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e84e:	b580      	push	{r7, lr}
 800e850:	b082      	sub	sp, #8
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
 800e856:	460b      	mov	r3, r1
 800e858:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e85a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e85e:	2201      	movs	r2, #1
 800e860:	4619      	mov	r1, r3
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7ff ffd2 	bl	800e80c <pbuf_header_impl>
 800e868:	4603      	mov	r3, r0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
	...

0800e874 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b086      	sub	sp, #24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10b      	bne.n	800e89a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d106      	bne.n	800e896 <pbuf_free+0x22>
 800e888:	4b38      	ldr	r3, [pc, #224]	; (800e96c <pbuf_free+0xf8>)
 800e88a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e88e:	4938      	ldr	r1, [pc, #224]	; (800e970 <pbuf_free+0xfc>)
 800e890:	4838      	ldr	r0, [pc, #224]	; (800e974 <pbuf_free+0x100>)
 800e892:	f008 fe49 	bl	8017528 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e896:	2300      	movs	r3, #0
 800e898:	e063      	b.n	800e962 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e89a:	2300      	movs	r3, #0
 800e89c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e89e:	e05c      	b.n	800e95a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	7b9b      	ldrb	r3, [r3, #14]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d106      	bne.n	800e8b6 <pbuf_free+0x42>
 800e8a8:	4b30      	ldr	r3, [pc, #192]	; (800e96c <pbuf_free+0xf8>)
 800e8aa:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e8ae:	4932      	ldr	r1, [pc, #200]	; (800e978 <pbuf_free+0x104>)
 800e8b0:	4830      	ldr	r0, [pc, #192]	; (800e974 <pbuf_free+0x100>)
 800e8b2:	f008 fe39 	bl	8017528 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	7b9b      	ldrb	r3, [r3, #14]
 800e8ba:	3b01      	subs	r3, #1
 800e8bc:	b2da      	uxtb	r2, r3
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	739a      	strb	r2, [r3, #14]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	7b9b      	ldrb	r3, [r3, #14]
 800e8c6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e8c8:	7dbb      	ldrb	r3, [r7, #22]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d143      	bne.n	800e956 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	7b1b      	ldrb	r3, [r3, #12]
 800e8d8:	f003 030f 	and.w	r3, r3, #15
 800e8dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	7b5b      	ldrb	r3, [r3, #13]
 800e8e2:	f003 0302 	and.w	r3, r3, #2
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d011      	beq.n	800e90e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	691b      	ldr	r3, [r3, #16]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d106      	bne.n	800e904 <pbuf_free+0x90>
 800e8f6:	4b1d      	ldr	r3, [pc, #116]	; (800e96c <pbuf_free+0xf8>)
 800e8f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e8fc:	491f      	ldr	r1, [pc, #124]	; (800e97c <pbuf_free+0x108>)
 800e8fe:	481d      	ldr	r0, [pc, #116]	; (800e974 <pbuf_free+0x100>)
 800e900:	f008 fe12 	bl	8017528 <iprintf>
        pc->custom_free_function(p);
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	691b      	ldr	r3, [r3, #16]
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	4798      	blx	r3
 800e90c:	e01d      	b.n	800e94a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e90e:	7bfb      	ldrb	r3, [r7, #15]
 800e910:	2b02      	cmp	r3, #2
 800e912:	d104      	bne.n	800e91e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800e914:	6879      	ldr	r1, [r7, #4]
 800e916:	2008      	movs	r0, #8
 800e918:	f7ff f936 	bl	800db88 <memp_free>
 800e91c:	e015      	b.n	800e94a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e91e:	7bfb      	ldrb	r3, [r7, #15]
 800e920:	2b01      	cmp	r3, #1
 800e922:	d104      	bne.n	800e92e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800e924:	6879      	ldr	r1, [r7, #4]
 800e926:	2007      	movs	r0, #7
 800e928:	f7ff f92e 	bl	800db88 <memp_free>
 800e92c:	e00d      	b.n	800e94a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e92e:	7bfb      	ldrb	r3, [r7, #15]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d103      	bne.n	800e93c <pbuf_free+0xc8>
          mem_free(p);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7fe fdc1 	bl	800d4bc <mem_free>
 800e93a:	e006      	b.n	800e94a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e93c:	4b0b      	ldr	r3, [pc, #44]	; (800e96c <pbuf_free+0xf8>)
 800e93e:	f240 320f 	movw	r2, #783	; 0x30f
 800e942:	490f      	ldr	r1, [pc, #60]	; (800e980 <pbuf_free+0x10c>)
 800e944:	480b      	ldr	r0, [pc, #44]	; (800e974 <pbuf_free+0x100>)
 800e946:	f008 fdef 	bl	8017528 <iprintf>
        }
      }
      count++;
 800e94a:	7dfb      	ldrb	r3, [r7, #23]
 800e94c:	3301      	adds	r3, #1
 800e94e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	607b      	str	r3, [r7, #4]
 800e954:	e001      	b.n	800e95a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e956:	2300      	movs	r3, #0
 800e958:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d19f      	bne.n	800e8a0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e960:	7dfb      	ldrb	r3, [r7, #23]
}
 800e962:	4618      	mov	r0, r3
 800e964:	3718      	adds	r7, #24
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	08018e78 	.word	0x08018e78
 800e970:	08018fdc 	.word	0x08018fdc
 800e974:	08018ed8 	.word	0x08018ed8
 800e978:	08019008 	.word	0x08019008
 800e97c:	08019020 	.word	0x08019020
 800e980:	08019044 	.word	0x08019044

0800e984 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e984:	b480      	push	{r7}
 800e986:	b085      	sub	sp, #20
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e990:	e005      	b.n	800e99e <pbuf_clen+0x1a>
    ++len;
 800e992:	89fb      	ldrh	r3, [r7, #14]
 800e994:	3301      	adds	r3, #1
 800e996:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1f6      	bne.n	800e992 <pbuf_clen+0xe>
  }
  return len;
 800e9a4:	89fb      	ldrh	r3, [r7, #14]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3714      	adds	r7, #20
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
	...

0800e9b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d010      	beq.n	800e9e4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	7b9b      	ldrb	r3, [r3, #14]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	b2da      	uxtb	r2, r3
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	7b9b      	ldrb	r3, [r3, #14]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d106      	bne.n	800e9e4 <pbuf_ref+0x30>
 800e9d6:	4b05      	ldr	r3, [pc, #20]	; (800e9ec <pbuf_ref+0x38>)
 800e9d8:	f240 3242 	movw	r2, #834	; 0x342
 800e9dc:	4904      	ldr	r1, [pc, #16]	; (800e9f0 <pbuf_ref+0x3c>)
 800e9de:	4805      	ldr	r0, [pc, #20]	; (800e9f4 <pbuf_ref+0x40>)
 800e9e0:	f008 fda2 	bl	8017528 <iprintf>
  }
}
 800e9e4:	bf00      	nop
 800e9e6:	3708      	adds	r7, #8
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	08018e78 	.word	0x08018e78
 800e9f0:	08019058 	.word	0x08019058
 800e9f4:	08018ed8 	.word	0x08018ed8

0800e9f8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d002      	beq.n	800ea0e <pbuf_cat+0x16>
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d107      	bne.n	800ea1e <pbuf_cat+0x26>
 800ea0e:	4b20      	ldr	r3, [pc, #128]	; (800ea90 <pbuf_cat+0x98>)
 800ea10:	f240 3259 	movw	r2, #857	; 0x359
 800ea14:	491f      	ldr	r1, [pc, #124]	; (800ea94 <pbuf_cat+0x9c>)
 800ea16:	4820      	ldr	r0, [pc, #128]	; (800ea98 <pbuf_cat+0xa0>)
 800ea18:	f008 fd86 	bl	8017528 <iprintf>
 800ea1c:	e034      	b.n	800ea88 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	60fb      	str	r3, [r7, #12]
 800ea22:	e00a      	b.n	800ea3a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	891a      	ldrh	r2, [r3, #8]
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	891b      	ldrh	r3, [r3, #8]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	b29a      	uxth	r2, r3
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	60fb      	str	r3, [r7, #12]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1f0      	bne.n	800ea24 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	891a      	ldrh	r2, [r3, #8]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	895b      	ldrh	r3, [r3, #10]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d006      	beq.n	800ea5c <pbuf_cat+0x64>
 800ea4e:	4b10      	ldr	r3, [pc, #64]	; (800ea90 <pbuf_cat+0x98>)
 800ea50:	f240 3262 	movw	r2, #866	; 0x362
 800ea54:	4911      	ldr	r1, [pc, #68]	; (800ea9c <pbuf_cat+0xa4>)
 800ea56:	4810      	ldr	r0, [pc, #64]	; (800ea98 <pbuf_cat+0xa0>)
 800ea58:	f008 fd66 	bl	8017528 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d006      	beq.n	800ea72 <pbuf_cat+0x7a>
 800ea64:	4b0a      	ldr	r3, [pc, #40]	; (800ea90 <pbuf_cat+0x98>)
 800ea66:	f240 3263 	movw	r2, #867	; 0x363
 800ea6a:	490d      	ldr	r1, [pc, #52]	; (800eaa0 <pbuf_cat+0xa8>)
 800ea6c:	480a      	ldr	r0, [pc, #40]	; (800ea98 <pbuf_cat+0xa0>)
 800ea6e:	f008 fd5b 	bl	8017528 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	891a      	ldrh	r2, [r3, #8]
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	891b      	ldrh	r3, [r3, #8]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	b29a      	uxth	r2, r3
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	683a      	ldr	r2, [r7, #0]
 800ea86:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	08018e78 	.word	0x08018e78
 800ea94:	0801906c 	.word	0x0801906c
 800ea98:	08018ed8 	.word	0x08018ed8
 800ea9c:	080190a4 	.word	0x080190a4
 800eaa0:	080190d4 	.word	0x080190d4

0800eaa4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800eaae:	6839      	ldr	r1, [r7, #0]
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f7ff ffa1 	bl	800e9f8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800eab6:	6838      	ldr	r0, [r7, #0]
 800eab8:	f7ff ff7c 	bl	800e9b4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800eabc:	bf00      	nop
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800eace:	2300      	movs	r3, #0
 800ead0:	617b      	str	r3, [r7, #20]
 800ead2:	2300      	movs	r3, #0
 800ead4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d008      	beq.n	800eaee <pbuf_copy+0x2a>
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d005      	beq.n	800eaee <pbuf_copy+0x2a>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	891a      	ldrh	r2, [r3, #8]
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	891b      	ldrh	r3, [r3, #8]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d209      	bcs.n	800eb02 <pbuf_copy+0x3e>
 800eaee:	4b57      	ldr	r3, [pc, #348]	; (800ec4c <pbuf_copy+0x188>)
 800eaf0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800eaf4:	4956      	ldr	r1, [pc, #344]	; (800ec50 <pbuf_copy+0x18c>)
 800eaf6:	4857      	ldr	r0, [pc, #348]	; (800ec54 <pbuf_copy+0x190>)
 800eaf8:	f008 fd16 	bl	8017528 <iprintf>
 800eafc:	f06f 030f 	mvn.w	r3, #15
 800eb00:	e09f      	b.n	800ec42 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	895b      	ldrh	r3, [r3, #10]
 800eb06:	461a      	mov	r2, r3
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	1ad2      	subs	r2, r2, r3
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	895b      	ldrh	r3, [r3, #10]
 800eb10:	4619      	mov	r1, r3
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	1acb      	subs	r3, r1, r3
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d306      	bcc.n	800eb28 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	895b      	ldrh	r3, [r3, #10]
 800eb1e:	461a      	mov	r2, r3
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	60fb      	str	r3, [r7, #12]
 800eb26:	e005      	b.n	800eb34 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	895b      	ldrh	r3, [r3, #10]
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	685a      	ldr	r2, [r3, #4]
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	18d0      	adds	r0, r2, r3
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	685a      	ldr	r2, [r3, #4]
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	4413      	add	r3, r2
 800eb44:	68fa      	ldr	r2, [r7, #12]
 800eb46:	4619      	mov	r1, r3
 800eb48:	f008 fcd8 	bl	80174fc <memcpy>
    offset_to += len;
 800eb4c:	697a      	ldr	r2, [r7, #20]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	4413      	add	r3, r2
 800eb52:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eb54:	693a      	ldr	r2, [r7, #16]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	4413      	add	r3, r2
 800eb5a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	895b      	ldrh	r3, [r3, #10]
 800eb60:	461a      	mov	r2, r3
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d906      	bls.n	800eb76 <pbuf_copy+0xb2>
 800eb68:	4b38      	ldr	r3, [pc, #224]	; (800ec4c <pbuf_copy+0x188>)
 800eb6a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800eb6e:	493a      	ldr	r1, [pc, #232]	; (800ec58 <pbuf_copy+0x194>)
 800eb70:	4838      	ldr	r0, [pc, #224]	; (800ec54 <pbuf_copy+0x190>)
 800eb72:	f008 fcd9 	bl	8017528 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	895b      	ldrh	r3, [r3, #10]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d906      	bls.n	800eb90 <pbuf_copy+0xcc>
 800eb82:	4b32      	ldr	r3, [pc, #200]	; (800ec4c <pbuf_copy+0x188>)
 800eb84:	f240 32da 	movw	r2, #986	; 0x3da
 800eb88:	4934      	ldr	r1, [pc, #208]	; (800ec5c <pbuf_copy+0x198>)
 800eb8a:	4832      	ldr	r0, [pc, #200]	; (800ec54 <pbuf_copy+0x190>)
 800eb8c:	f008 fccc 	bl	8017528 <iprintf>
    if (offset_from >= p_from->len) {
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	895b      	ldrh	r3, [r3, #10]
 800eb94:	461a      	mov	r2, r3
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d304      	bcc.n	800eba6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	895b      	ldrh	r3, [r3, #10]
 800ebaa:	461a      	mov	r2, r3
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d114      	bne.n	800ebdc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d10c      	bne.n	800ebdc <pbuf_copy+0x118>
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d009      	beq.n	800ebdc <pbuf_copy+0x118>
 800ebc8:	4b20      	ldr	r3, [pc, #128]	; (800ec4c <pbuf_copy+0x188>)
 800ebca:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ebce:	4924      	ldr	r1, [pc, #144]	; (800ec60 <pbuf_copy+0x19c>)
 800ebd0:	4820      	ldr	r0, [pc, #128]	; (800ec54 <pbuf_copy+0x190>)
 800ebd2:	f008 fca9 	bl	8017528 <iprintf>
 800ebd6:	f06f 030f 	mvn.w	r3, #15
 800ebda:	e032      	b.n	800ec42 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d013      	beq.n	800ec0a <pbuf_copy+0x146>
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	895a      	ldrh	r2, [r3, #10]
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	891b      	ldrh	r3, [r3, #8]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d10d      	bne.n	800ec0a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d009      	beq.n	800ec0a <pbuf_copy+0x146>
 800ebf6:	4b15      	ldr	r3, [pc, #84]	; (800ec4c <pbuf_copy+0x188>)
 800ebf8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ebfc:	4919      	ldr	r1, [pc, #100]	; (800ec64 <pbuf_copy+0x1a0>)
 800ebfe:	4815      	ldr	r0, [pc, #84]	; (800ec54 <pbuf_copy+0x190>)
 800ec00:	f008 fc92 	bl	8017528 <iprintf>
 800ec04:	f06f 0305 	mvn.w	r3, #5
 800ec08:	e01b      	b.n	800ec42 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d013      	beq.n	800ec38 <pbuf_copy+0x174>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	895a      	ldrh	r2, [r3, #10]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	891b      	ldrh	r3, [r3, #8]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d10d      	bne.n	800ec38 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d009      	beq.n	800ec38 <pbuf_copy+0x174>
 800ec24:	4b09      	ldr	r3, [pc, #36]	; (800ec4c <pbuf_copy+0x188>)
 800ec26:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ec2a:	490e      	ldr	r1, [pc, #56]	; (800ec64 <pbuf_copy+0x1a0>)
 800ec2c:	4809      	ldr	r0, [pc, #36]	; (800ec54 <pbuf_copy+0x190>)
 800ec2e:	f008 fc7b 	bl	8017528 <iprintf>
 800ec32:	f06f 0305 	mvn.w	r3, #5
 800ec36:	e004      	b.n	800ec42 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	f47f af61 	bne.w	800eb02 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ec40:	2300      	movs	r3, #0
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3718      	adds	r7, #24
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	08018e78 	.word	0x08018e78
 800ec50:	08019120 	.word	0x08019120
 800ec54:	08018ed8 	.word	0x08018ed8
 800ec58:	08019150 	.word	0x08019150
 800ec5c:	08019168 	.word	0x08019168
 800ec60:	08019184 	.word	0x08019184
 800ec64:	08019194 	.word	0x08019194

0800ec68 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b088      	sub	sp, #32
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	4611      	mov	r1, r2
 800ec74:	461a      	mov	r2, r3
 800ec76:	460b      	mov	r3, r1
 800ec78:	80fb      	strh	r3, [r7, #6]
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d108      	bne.n	800ec9e <pbuf_copy_partial+0x36>
 800ec8c:	4b2b      	ldr	r3, [pc, #172]	; (800ed3c <pbuf_copy_partial+0xd4>)
 800ec8e:	f240 420a 	movw	r2, #1034	; 0x40a
 800ec92:	492b      	ldr	r1, [pc, #172]	; (800ed40 <pbuf_copy_partial+0xd8>)
 800ec94:	482b      	ldr	r0, [pc, #172]	; (800ed44 <pbuf_copy_partial+0xdc>)
 800ec96:	f008 fc47 	bl	8017528 <iprintf>
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	e04a      	b.n	800ed34 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d108      	bne.n	800ecb6 <pbuf_copy_partial+0x4e>
 800eca4:	4b25      	ldr	r3, [pc, #148]	; (800ed3c <pbuf_copy_partial+0xd4>)
 800eca6:	f240 420b 	movw	r2, #1035	; 0x40b
 800ecaa:	4927      	ldr	r1, [pc, #156]	; (800ed48 <pbuf_copy_partial+0xe0>)
 800ecac:	4825      	ldr	r0, [pc, #148]	; (800ed44 <pbuf_copy_partial+0xdc>)
 800ecae:	f008 fc3b 	bl	8017528 <iprintf>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	e03e      	b.n	800ed34 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	61fb      	str	r3, [r7, #28]
 800ecba:	e034      	b.n	800ed26 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ecbc:	88bb      	ldrh	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d00a      	beq.n	800ecd8 <pbuf_copy_partial+0x70>
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	895b      	ldrh	r3, [r3, #10]
 800ecc6:	88ba      	ldrh	r2, [r7, #4]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d305      	bcc.n	800ecd8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	895b      	ldrh	r3, [r3, #10]
 800ecd0:	88ba      	ldrh	r2, [r7, #4]
 800ecd2:	1ad3      	subs	r3, r2, r3
 800ecd4:	80bb      	strh	r3, [r7, #4]
 800ecd6:	e023      	b.n	800ed20 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	895a      	ldrh	r2, [r3, #10]
 800ecdc:	88bb      	ldrh	r3, [r7, #4]
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ece2:	8b3a      	ldrh	r2, [r7, #24]
 800ece4:	88fb      	ldrh	r3, [r7, #6]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d901      	bls.n	800ecee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ecea:	88fb      	ldrh	r3, [r7, #6]
 800ecec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ecee:	8b7b      	ldrh	r3, [r7, #26]
 800ecf0:	68ba      	ldr	r2, [r7, #8]
 800ecf2:	18d0      	adds	r0, r2, r3
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	685a      	ldr	r2, [r3, #4]
 800ecf8:	88bb      	ldrh	r3, [r7, #4]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	8b3a      	ldrh	r2, [r7, #24]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	f008 fbfc 	bl	80174fc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ed04:	8afa      	ldrh	r2, [r7, #22]
 800ed06:	8b3b      	ldrh	r3, [r7, #24]
 800ed08:	4413      	add	r3, r2
 800ed0a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ed0c:	8b7a      	ldrh	r2, [r7, #26]
 800ed0e:	8b3b      	ldrh	r3, [r7, #24]
 800ed10:	4413      	add	r3, r2
 800ed12:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ed14:	88fa      	ldrh	r2, [r7, #6]
 800ed16:	8b3b      	ldrh	r3, [r7, #24]
 800ed18:	1ad3      	subs	r3, r2, r3
 800ed1a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	61fb      	str	r3, [r7, #28]
 800ed26:	88fb      	ldrh	r3, [r7, #6]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d002      	beq.n	800ed32 <pbuf_copy_partial+0xca>
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d1c4      	bne.n	800ecbc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ed32:	8afb      	ldrh	r3, [r7, #22]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3720      	adds	r7, #32
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	08018e78 	.word	0x08018e78
 800ed40:	080191c0 	.word	0x080191c0
 800ed44:	08018ed8 	.word	0x08018ed8
 800ed48:	080191e0 	.word	0x080191e0

0800ed4c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b088      	sub	sp, #32
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	4613      	mov	r3, r2
 800ed58:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800ed5a:	88fb      	ldrh	r3, [r7, #6]
 800ed5c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d109      	bne.n	800ed7c <pbuf_take+0x30>
 800ed68:	4b3a      	ldr	r3, [pc, #232]	; (800ee54 <pbuf_take+0x108>)
 800ed6a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800ed6e:	493a      	ldr	r1, [pc, #232]	; (800ee58 <pbuf_take+0x10c>)
 800ed70:	483a      	ldr	r0, [pc, #232]	; (800ee5c <pbuf_take+0x110>)
 800ed72:	f008 fbd9 	bl	8017528 <iprintf>
 800ed76:	f06f 030f 	mvn.w	r3, #15
 800ed7a:	e067      	b.n	800ee4c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d109      	bne.n	800ed96 <pbuf_take+0x4a>
 800ed82:	4b34      	ldr	r3, [pc, #208]	; (800ee54 <pbuf_take+0x108>)
 800ed84:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800ed88:	4935      	ldr	r1, [pc, #212]	; (800ee60 <pbuf_take+0x114>)
 800ed8a:	4834      	ldr	r0, [pc, #208]	; (800ee5c <pbuf_take+0x110>)
 800ed8c:	f008 fbcc 	bl	8017528 <iprintf>
 800ed90:	f06f 030f 	mvn.w	r3, #15
 800ed94:	e05a      	b.n	800ee4c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	891b      	ldrh	r3, [r3, #8]
 800ed9a:	88fa      	ldrh	r2, [r7, #6]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d909      	bls.n	800edb4 <pbuf_take+0x68>
 800eda0:	4b2c      	ldr	r3, [pc, #176]	; (800ee54 <pbuf_take+0x108>)
 800eda2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800eda6:	492f      	ldr	r1, [pc, #188]	; (800ee64 <pbuf_take+0x118>)
 800eda8:	482c      	ldr	r0, [pc, #176]	; (800ee5c <pbuf_take+0x110>)
 800edaa:	f008 fbbd 	bl	8017528 <iprintf>
 800edae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edb2:	e04b      	b.n	800ee4c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d007      	beq.n	800edca <pbuf_take+0x7e>
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d004      	beq.n	800edca <pbuf_take+0x7e>
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	891b      	ldrh	r3, [r3, #8]
 800edc4:	88fa      	ldrh	r2, [r7, #6]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d902      	bls.n	800edd0 <pbuf_take+0x84>
    return ERR_ARG;
 800edca:	f06f 030f 	mvn.w	r3, #15
 800edce:	e03d      	b.n	800ee4c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	61fb      	str	r3, [r7, #28]
 800edd4:	e028      	b.n	800ee28 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800edd6:	69fb      	ldr	r3, [r7, #28]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d106      	bne.n	800edea <pbuf_take+0x9e>
 800eddc:	4b1d      	ldr	r3, [pc, #116]	; (800ee54 <pbuf_take+0x108>)
 800edde:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ede2:	4921      	ldr	r1, [pc, #132]	; (800ee68 <pbuf_take+0x11c>)
 800ede4:	481d      	ldr	r0, [pc, #116]	; (800ee5c <pbuf_take+0x110>)
 800ede6:	f008 fb9f 	bl	8017528 <iprintf>
    buf_copy_len = total_copy_len;
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	895b      	ldrh	r3, [r3, #10]
 800edf2:	461a      	mov	r2, r3
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d902      	bls.n	800ee00 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800edfa:	69fb      	ldr	r3, [r7, #28]
 800edfc:	895b      	ldrh	r3, [r3, #10]
 800edfe:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	6858      	ldr	r0, [r3, #4]
 800ee04:	68ba      	ldr	r2, [r7, #8]
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	4413      	add	r3, r2
 800ee0a:	69ba      	ldr	r2, [r7, #24]
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	f008 fb75 	bl	80174fc <memcpy>
    total_copy_len -= buf_copy_len;
 800ee12:	697a      	ldr	r2, [r7, #20]
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	1ad3      	subs	r3, r2, r3
 800ee18:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800ee1a:	693a      	ldr	r2, [r7, #16]
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	4413      	add	r3, r2
 800ee20:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	61fb      	str	r3, [r7, #28]
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d1d3      	bne.n	800edd6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d103      	bne.n	800ee3c <pbuf_take+0xf0>
 800ee34:	88fb      	ldrh	r3, [r7, #6]
 800ee36:	693a      	ldr	r2, [r7, #16]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d006      	beq.n	800ee4a <pbuf_take+0xfe>
 800ee3c:	4b05      	ldr	r3, [pc, #20]	; (800ee54 <pbuf_take+0x108>)
 800ee3e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800ee42:	490a      	ldr	r1, [pc, #40]	; (800ee6c <pbuf_take+0x120>)
 800ee44:	4805      	ldr	r0, [pc, #20]	; (800ee5c <pbuf_take+0x110>)
 800ee46:	f008 fb6f 	bl	8017528 <iprintf>
  return ERR_OK;
 800ee4a:	2300      	movs	r3, #0
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3720      	adds	r7, #32
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	08018e78 	.word	0x08018e78
 800ee58:	08019250 	.word	0x08019250
 800ee5c:	08018ed8 	.word	0x08018ed8
 800ee60:	08019268 	.word	0x08019268
 800ee64:	08019284 	.word	0x08019284
 800ee68:	080192a4 	.word	0x080192a4
 800ee6c:	080192bc 	.word	0x080192bc

0800ee70 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	4603      	mov	r3, r0
 800ee78:	603a      	str	r2, [r7, #0]
 800ee7a:	71fb      	strb	r3, [r7, #7]
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	8919      	ldrh	r1, [r3, #8]
 800ee84:	88ba      	ldrh	r2, [r7, #4]
 800ee86:	79fb      	ldrb	r3, [r7, #7]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7ff fa0f 	bl	800e2ac <pbuf_alloc>
 800ee8e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d101      	bne.n	800ee9a <pbuf_clone+0x2a>
    return NULL;
 800ee96:	2300      	movs	r3, #0
 800ee98:	e011      	b.n	800eebe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ee9a:	6839      	ldr	r1, [r7, #0]
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	f7ff fe11 	bl	800eac4 <pbuf_copy>
 800eea2:	4603      	mov	r3, r0
 800eea4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800eea6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d006      	beq.n	800eebc <pbuf_clone+0x4c>
 800eeae:	4b06      	ldr	r3, [pc, #24]	; (800eec8 <pbuf_clone+0x58>)
 800eeb0:	f240 5224 	movw	r2, #1316	; 0x524
 800eeb4:	4905      	ldr	r1, [pc, #20]	; (800eecc <pbuf_clone+0x5c>)
 800eeb6:	4806      	ldr	r0, [pc, #24]	; (800eed0 <pbuf_clone+0x60>)
 800eeb8:	f008 fb36 	bl	8017528 <iprintf>
  return q;
 800eebc:	68fb      	ldr	r3, [r7, #12]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	08018e78 	.word	0x08018e78
 800eecc:	080192ec 	.word	0x080192ec
 800eed0:	08018ed8 	.word	0x08018ed8

0800eed4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800eed8:	f008 fbb4 	bl	8017644 <rand>
 800eedc:	4603      	mov	r3, r0
 800eede:	b29b      	uxth	r3, r3
 800eee0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800eeea:	b29a      	uxth	r2, r3
 800eeec:	4b01      	ldr	r3, [pc, #4]	; (800eef4 <tcp_init+0x20>)
 800eeee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800eef0:	bf00      	nop
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	20000020 	.word	0x20000020

0800eef8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	7d1b      	ldrb	r3, [r3, #20]
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d105      	bne.n	800ef14 <tcp_free+0x1c>
 800ef08:	4b06      	ldr	r3, [pc, #24]	; (800ef24 <tcp_free+0x2c>)
 800ef0a:	22d4      	movs	r2, #212	; 0xd4
 800ef0c:	4906      	ldr	r1, [pc, #24]	; (800ef28 <tcp_free+0x30>)
 800ef0e:	4807      	ldr	r0, [pc, #28]	; (800ef2c <tcp_free+0x34>)
 800ef10:	f008 fb0a 	bl	8017528 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ef14:	6879      	ldr	r1, [r7, #4]
 800ef16:	2001      	movs	r0, #1
 800ef18:	f7fe fe36 	bl	800db88 <memp_free>
}
 800ef1c:	bf00      	nop
 800ef1e:	3708      	adds	r7, #8
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	08019378 	.word	0x08019378
 800ef28:	080193a8 	.word	0x080193a8
 800ef2c:	080193bc 	.word	0x080193bc

0800ef30 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	7d1b      	ldrb	r3, [r3, #20]
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d105      	bne.n	800ef4c <tcp_free_listen+0x1c>
 800ef40:	4b06      	ldr	r3, [pc, #24]	; (800ef5c <tcp_free_listen+0x2c>)
 800ef42:	22df      	movs	r2, #223	; 0xdf
 800ef44:	4906      	ldr	r1, [pc, #24]	; (800ef60 <tcp_free_listen+0x30>)
 800ef46:	4807      	ldr	r0, [pc, #28]	; (800ef64 <tcp_free_listen+0x34>)
 800ef48:	f008 faee 	bl	8017528 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ef4c:	6879      	ldr	r1, [r7, #4]
 800ef4e:	2002      	movs	r0, #2
 800ef50:	f7fe fe1a 	bl	800db88 <memp_free>
}
 800ef54:	bf00      	nop
 800ef56:	3708      	adds	r7, #8
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	08019378 	.word	0x08019378
 800ef60:	080193e4 	.word	0x080193e4
 800ef64:	080193bc 	.word	0x080193bc

0800ef68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ef6c:	f000 fea2 	bl	800fcb4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ef70:	4b07      	ldr	r3, [pc, #28]	; (800ef90 <tcp_tmr+0x28>)
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	3301      	adds	r3, #1
 800ef76:	b2da      	uxtb	r2, r3
 800ef78:	4b05      	ldr	r3, [pc, #20]	; (800ef90 <tcp_tmr+0x28>)
 800ef7a:	701a      	strb	r2, [r3, #0]
 800ef7c:	4b04      	ldr	r3, [pc, #16]	; (800ef90 <tcp_tmr+0x28>)
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	f003 0301 	and.w	r3, r3, #1
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d001      	beq.n	800ef8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ef88:	f000 fb54 	bl	800f634 <tcp_slowtmr>
  }
}
 800ef8c:	bf00      	nop
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	20009721 	.word	0x20009721

0800ef94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d105      	bne.n	800efb0 <tcp_remove_listener+0x1c>
 800efa4:	4b0d      	ldr	r3, [pc, #52]	; (800efdc <tcp_remove_listener+0x48>)
 800efa6:	22ff      	movs	r2, #255	; 0xff
 800efa8:	490d      	ldr	r1, [pc, #52]	; (800efe0 <tcp_remove_listener+0x4c>)
 800efaa:	480e      	ldr	r0, [pc, #56]	; (800efe4 <tcp_remove_listener+0x50>)
 800efac:	f008 fabc 	bl	8017528 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	60fb      	str	r3, [r7, #12]
 800efb4:	e00a      	b.n	800efcc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d102      	bne.n	800efc6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2200      	movs	r2, #0
 800efc4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	68db      	ldr	r3, [r3, #12]
 800efca:	60fb      	str	r3, [r7, #12]
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1f1      	bne.n	800efb6 <tcp_remove_listener+0x22>
    }
  }
}
 800efd2:	bf00      	nop
 800efd4:	bf00      	nop
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	08019378 	.word	0x08019378
 800efe0:	08019400 	.word	0x08019400
 800efe4:	080193bc 	.word	0x080193bc

0800efe8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d106      	bne.n	800f004 <tcp_listen_closed+0x1c>
 800eff6:	4b14      	ldr	r3, [pc, #80]	; (800f048 <tcp_listen_closed+0x60>)
 800eff8:	f240 1211 	movw	r2, #273	; 0x111
 800effc:	4913      	ldr	r1, [pc, #76]	; (800f04c <tcp_listen_closed+0x64>)
 800effe:	4814      	ldr	r0, [pc, #80]	; (800f050 <tcp_listen_closed+0x68>)
 800f000:	f008 fa92 	bl	8017528 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	7d1b      	ldrb	r3, [r3, #20]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d006      	beq.n	800f01a <tcp_listen_closed+0x32>
 800f00c:	4b0e      	ldr	r3, [pc, #56]	; (800f048 <tcp_listen_closed+0x60>)
 800f00e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f012:	4910      	ldr	r1, [pc, #64]	; (800f054 <tcp_listen_closed+0x6c>)
 800f014:	480e      	ldr	r0, [pc, #56]	; (800f050 <tcp_listen_closed+0x68>)
 800f016:	f008 fa87 	bl	8017528 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f01a:	2301      	movs	r3, #1
 800f01c:	60fb      	str	r3, [r7, #12]
 800f01e:	e00b      	b.n	800f038 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f020:	4a0d      	ldr	r2, [pc, #52]	; (800f058 <tcp_listen_closed+0x70>)
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	6879      	ldr	r1, [r7, #4]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7ff ffb1 	bl	800ef94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	3301      	adds	r3, #1
 800f036:	60fb      	str	r3, [r7, #12]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b03      	cmp	r3, #3
 800f03c:	d9f0      	bls.n	800f020 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f03e:	bf00      	nop
 800f040:	bf00      	nop
 800f042:	3710      	adds	r7, #16
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	08019378 	.word	0x08019378
 800f04c:	08019428 	.word	0x08019428
 800f050:	080193bc 	.word	0x080193bc
 800f054:	08019434 	.word	0x08019434
 800f058:	0801b360 	.word	0x0801b360

0800f05c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f05c:	b5b0      	push	{r4, r5, r7, lr}
 800f05e:	b088      	sub	sp, #32
 800f060:	af04      	add	r7, sp, #16
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	460b      	mov	r3, r1
 800f066:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d106      	bne.n	800f07c <tcp_close_shutdown+0x20>
 800f06e:	4b63      	ldr	r3, [pc, #396]	; (800f1fc <tcp_close_shutdown+0x1a0>)
 800f070:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f074:	4962      	ldr	r1, [pc, #392]	; (800f200 <tcp_close_shutdown+0x1a4>)
 800f076:	4863      	ldr	r0, [pc, #396]	; (800f204 <tcp_close_shutdown+0x1a8>)
 800f078:	f008 fa56 	bl	8017528 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f07c:	78fb      	ldrb	r3, [r7, #3]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d066      	beq.n	800f150 <tcp_close_shutdown+0xf4>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	7d1b      	ldrb	r3, [r3, #20]
 800f086:	2b04      	cmp	r3, #4
 800f088:	d003      	beq.n	800f092 <tcp_close_shutdown+0x36>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	7d1b      	ldrb	r3, [r3, #20]
 800f08e:	2b07      	cmp	r3, #7
 800f090:	d15e      	bne.n	800f150 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f096:	2b00      	cmp	r3, #0
 800f098:	d104      	bne.n	800f0a4 <tcp_close_shutdown+0x48>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f09e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f0a2:	d055      	beq.n	800f150 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	8b5b      	ldrh	r3, [r3, #26]
 800f0a8:	f003 0310 	and.w	r3, r3, #16
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d106      	bne.n	800f0be <tcp_close_shutdown+0x62>
 800f0b0:	4b52      	ldr	r3, [pc, #328]	; (800f1fc <tcp_close_shutdown+0x1a0>)
 800f0b2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f0b6:	4954      	ldr	r1, [pc, #336]	; (800f208 <tcp_close_shutdown+0x1ac>)
 800f0b8:	4852      	ldr	r0, [pc, #328]	; (800f204 <tcp_close_shutdown+0x1a8>)
 800f0ba:	f008 fa35 	bl	8017528 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f0c6:	687d      	ldr	r5, [r7, #4]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	3304      	adds	r3, #4
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	8ad2      	ldrh	r2, [r2, #22]
 800f0d0:	6879      	ldr	r1, [r7, #4]
 800f0d2:	8b09      	ldrh	r1, [r1, #24]
 800f0d4:	9102      	str	r1, [sp, #8]
 800f0d6:	9201      	str	r2, [sp, #4]
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	462b      	mov	r3, r5
 800f0dc:	4622      	mov	r2, r4
 800f0de:	4601      	mov	r1, r0
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f004 fe91 	bl	8013e08 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f001 f8c6 	bl	8010278 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f0ec:	4b47      	ldr	r3, [pc, #284]	; (800f20c <tcp_close_shutdown+0x1b0>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d105      	bne.n	800f102 <tcp_close_shutdown+0xa6>
 800f0f6:	4b45      	ldr	r3, [pc, #276]	; (800f20c <tcp_close_shutdown+0x1b0>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	4a43      	ldr	r2, [pc, #268]	; (800f20c <tcp_close_shutdown+0x1b0>)
 800f0fe:	6013      	str	r3, [r2, #0]
 800f100:	e013      	b.n	800f12a <tcp_close_shutdown+0xce>
 800f102:	4b42      	ldr	r3, [pc, #264]	; (800f20c <tcp_close_shutdown+0x1b0>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	60fb      	str	r3, [r7, #12]
 800f108:	e00c      	b.n	800f124 <tcp_close_shutdown+0xc8>
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	68db      	ldr	r3, [r3, #12]
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	429a      	cmp	r2, r3
 800f112:	d104      	bne.n	800f11e <tcp_close_shutdown+0xc2>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	68da      	ldr	r2, [r3, #12]
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	60da      	str	r2, [r3, #12]
 800f11c:	e005      	b.n	800f12a <tcp_close_shutdown+0xce>
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	60fb      	str	r3, [r7, #12]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d1ef      	bne.n	800f10a <tcp_close_shutdown+0xae>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	60da      	str	r2, [r3, #12]
 800f130:	4b37      	ldr	r3, [pc, #220]	; (800f210 <tcp_close_shutdown+0x1b4>)
 800f132:	2201      	movs	r2, #1
 800f134:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f136:	4b37      	ldr	r3, [pc, #220]	; (800f214 <tcp_close_shutdown+0x1b8>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d102      	bne.n	800f146 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f140:	f003 fd5e 	bl	8012c00 <tcp_trigger_input_pcb_close>
 800f144:	e002      	b.n	800f14c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f7ff fed6 	bl	800eef8 <tcp_free>
      }
      return ERR_OK;
 800f14c:	2300      	movs	r3, #0
 800f14e:	e050      	b.n	800f1f2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	7d1b      	ldrb	r3, [r3, #20]
 800f154:	2b02      	cmp	r3, #2
 800f156:	d03b      	beq.n	800f1d0 <tcp_close_shutdown+0x174>
 800f158:	2b02      	cmp	r3, #2
 800f15a:	dc44      	bgt.n	800f1e6 <tcp_close_shutdown+0x18a>
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d002      	beq.n	800f166 <tcp_close_shutdown+0x10a>
 800f160:	2b01      	cmp	r3, #1
 800f162:	d02a      	beq.n	800f1ba <tcp_close_shutdown+0x15e>
 800f164:	e03f      	b.n	800f1e6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	8adb      	ldrh	r3, [r3, #22]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d021      	beq.n	800f1b2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f16e:	4b2a      	ldr	r3, [pc, #168]	; (800f218 <tcp_close_shutdown+0x1bc>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	429a      	cmp	r2, r3
 800f176:	d105      	bne.n	800f184 <tcp_close_shutdown+0x128>
 800f178:	4b27      	ldr	r3, [pc, #156]	; (800f218 <tcp_close_shutdown+0x1bc>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	4a26      	ldr	r2, [pc, #152]	; (800f218 <tcp_close_shutdown+0x1bc>)
 800f180:	6013      	str	r3, [r2, #0]
 800f182:	e013      	b.n	800f1ac <tcp_close_shutdown+0x150>
 800f184:	4b24      	ldr	r3, [pc, #144]	; (800f218 <tcp_close_shutdown+0x1bc>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	60bb      	str	r3, [r7, #8]
 800f18a:	e00c      	b.n	800f1a6 <tcp_close_shutdown+0x14a>
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	429a      	cmp	r2, r3
 800f194:	d104      	bne.n	800f1a0 <tcp_close_shutdown+0x144>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	68da      	ldr	r2, [r3, #12]
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	60da      	str	r2, [r3, #12]
 800f19e:	e005      	b.n	800f1ac <tcp_close_shutdown+0x150>
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	60bb      	str	r3, [r7, #8]
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d1ef      	bne.n	800f18c <tcp_close_shutdown+0x130>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7ff fea0 	bl	800eef8 <tcp_free>
      break;
 800f1b8:	e01a      	b.n	800f1f0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7ff ff14 	bl	800efe8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f1c0:	6879      	ldr	r1, [r7, #4]
 800f1c2:	4816      	ldr	r0, [pc, #88]	; (800f21c <tcp_close_shutdown+0x1c0>)
 800f1c4:	f001 f8a8 	bl	8010318 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f7ff feb1 	bl	800ef30 <tcp_free_listen>
      break;
 800f1ce:	e00f      	b.n	800f1f0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f1d0:	6879      	ldr	r1, [r7, #4]
 800f1d2:	480e      	ldr	r0, [pc, #56]	; (800f20c <tcp_close_shutdown+0x1b0>)
 800f1d4:	f001 f8a0 	bl	8010318 <tcp_pcb_remove>
 800f1d8:	4b0d      	ldr	r3, [pc, #52]	; (800f210 <tcp_close_shutdown+0x1b4>)
 800f1da:	2201      	movs	r2, #1
 800f1dc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f7ff fe8a 	bl	800eef8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f1e4:	e004      	b.n	800f1f0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 f81a 	bl	800f220 <tcp_close_shutdown_fin>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	e000      	b.n	800f1f2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f1f0:	2300      	movs	r3, #0
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3710      	adds	r7, #16
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bdb0      	pop	{r4, r5, r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	08019378 	.word	0x08019378
 800f200:	0801944c 	.word	0x0801944c
 800f204:	080193bc 	.word	0x080193bc
 800f208:	0801946c 	.word	0x0801946c
 800f20c:	20009718 	.word	0x20009718
 800f210:	20009720 	.word	0x20009720
 800f214:	20009758 	.word	0x20009758
 800f218:	20009710 	.word	0x20009710
 800f21c:	20009714 	.word	0x20009714

0800f220 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b084      	sub	sp, #16
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d106      	bne.n	800f23c <tcp_close_shutdown_fin+0x1c>
 800f22e:	4b2e      	ldr	r3, [pc, #184]	; (800f2e8 <tcp_close_shutdown_fin+0xc8>)
 800f230:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f234:	492d      	ldr	r1, [pc, #180]	; (800f2ec <tcp_close_shutdown_fin+0xcc>)
 800f236:	482e      	ldr	r0, [pc, #184]	; (800f2f0 <tcp_close_shutdown_fin+0xd0>)
 800f238:	f008 f976 	bl	8017528 <iprintf>

  switch (pcb->state) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	7d1b      	ldrb	r3, [r3, #20]
 800f240:	2b07      	cmp	r3, #7
 800f242:	d020      	beq.n	800f286 <tcp_close_shutdown_fin+0x66>
 800f244:	2b07      	cmp	r3, #7
 800f246:	dc2b      	bgt.n	800f2a0 <tcp_close_shutdown_fin+0x80>
 800f248:	2b03      	cmp	r3, #3
 800f24a:	d002      	beq.n	800f252 <tcp_close_shutdown_fin+0x32>
 800f24c:	2b04      	cmp	r3, #4
 800f24e:	d00d      	beq.n	800f26c <tcp_close_shutdown_fin+0x4c>
 800f250:	e026      	b.n	800f2a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f003 fee6 	bl	8013024 <tcp_send_fin>
 800f258:	4603      	mov	r3, r0
 800f25a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f25c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d11f      	bne.n	800f2a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2205      	movs	r2, #5
 800f268:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f26a:	e01b      	b.n	800f2a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f003 fed9 	bl	8013024 <tcp_send_fin>
 800f272:	4603      	mov	r3, r0
 800f274:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d114      	bne.n	800f2a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2205      	movs	r2, #5
 800f282:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f284:	e010      	b.n	800f2a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f003 fecc 	bl	8013024 <tcp_send_fin>
 800f28c:	4603      	mov	r3, r0
 800f28e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d109      	bne.n	800f2ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2209      	movs	r2, #9
 800f29c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f29e:	e005      	b.n	800f2ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	e01c      	b.n	800f2de <tcp_close_shutdown_fin+0xbe>
      break;
 800f2a4:	bf00      	nop
 800f2a6:	e002      	b.n	800f2ae <tcp_close_shutdown_fin+0x8e>
      break;
 800f2a8:	bf00      	nop
 800f2aa:	e000      	b.n	800f2ae <tcp_close_shutdown_fin+0x8e>
      break;
 800f2ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f2ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d103      	bne.n	800f2be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f003 fff2 	bl	80132a0 <tcp_output>
 800f2bc:	e00d      	b.n	800f2da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2c6:	d108      	bne.n	800f2da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	8b5b      	ldrh	r3, [r3, #26]
 800f2cc:	f043 0308 	orr.w	r3, r3, #8
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	e001      	b.n	800f2de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f2da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	08019378 	.word	0x08019378
 800f2ec:	08019428 	.word	0x08019428
 800f2f0:	080193bc 	.word	0x080193bc

0800f2f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d109      	bne.n	800f316 <tcp_close+0x22>
 800f302:	4b0f      	ldr	r3, [pc, #60]	; (800f340 <tcp_close+0x4c>)
 800f304:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f308:	490e      	ldr	r1, [pc, #56]	; (800f344 <tcp_close+0x50>)
 800f30a:	480f      	ldr	r0, [pc, #60]	; (800f348 <tcp_close+0x54>)
 800f30c:	f008 f90c 	bl	8017528 <iprintf>
 800f310:	f06f 030f 	mvn.w	r3, #15
 800f314:	e00f      	b.n	800f336 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	7d1b      	ldrb	r3, [r3, #20]
 800f31a:	2b01      	cmp	r3, #1
 800f31c:	d006      	beq.n	800f32c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	8b5b      	ldrh	r3, [r3, #26]
 800f322:	f043 0310 	orr.w	r3, r3, #16
 800f326:	b29a      	uxth	r2, r3
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f32c:	2101      	movs	r1, #1
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f7ff fe94 	bl	800f05c <tcp_close_shutdown>
 800f334:	4603      	mov	r3, r0
}
 800f336:	4618      	mov	r0, r3
 800f338:	3708      	adds	r7, #8
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	08019378 	.word	0x08019378
 800f344:	08019488 	.word	0x08019488
 800f348:	080193bc 	.word	0x080193bc

0800f34c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b08e      	sub	sp, #56	; 0x38
 800f350:	af04      	add	r7, sp, #16
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d107      	bne.n	800f36c <tcp_abandon+0x20>
 800f35c:	4b52      	ldr	r3, [pc, #328]	; (800f4a8 <tcp_abandon+0x15c>)
 800f35e:	f240 223d 	movw	r2, #573	; 0x23d
 800f362:	4952      	ldr	r1, [pc, #328]	; (800f4ac <tcp_abandon+0x160>)
 800f364:	4852      	ldr	r0, [pc, #328]	; (800f4b0 <tcp_abandon+0x164>)
 800f366:	f008 f8df 	bl	8017528 <iprintf>
 800f36a:	e099      	b.n	800f4a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	7d1b      	ldrb	r3, [r3, #20]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d106      	bne.n	800f382 <tcp_abandon+0x36>
 800f374:	4b4c      	ldr	r3, [pc, #304]	; (800f4a8 <tcp_abandon+0x15c>)
 800f376:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f37a:	494e      	ldr	r1, [pc, #312]	; (800f4b4 <tcp_abandon+0x168>)
 800f37c:	484c      	ldr	r0, [pc, #304]	; (800f4b0 <tcp_abandon+0x164>)
 800f37e:	f008 f8d3 	bl	8017528 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	7d1b      	ldrb	r3, [r3, #20]
 800f386:	2b0a      	cmp	r3, #10
 800f388:	d107      	bne.n	800f39a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f38a:	6879      	ldr	r1, [r7, #4]
 800f38c:	484a      	ldr	r0, [pc, #296]	; (800f4b8 <tcp_abandon+0x16c>)
 800f38e:	f000 ffc3 	bl	8010318 <tcp_pcb_remove>
    tcp_free(pcb);
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7ff fdb0 	bl	800eef8 <tcp_free>
 800f398:	e082      	b.n	800f4a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f39a:	2300      	movs	r3, #0
 800f39c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	691b      	ldr	r3, [r3, #16]
 800f3ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	7d1b      	ldrb	r3, [r3, #20]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d126      	bne.n	800f412 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	8adb      	ldrh	r3, [r3, #22]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d02e      	beq.n	800f42a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f3cc:	4b3b      	ldr	r3, [pc, #236]	; (800f4bc <tcp_abandon+0x170>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d105      	bne.n	800f3e2 <tcp_abandon+0x96>
 800f3d6:	4b39      	ldr	r3, [pc, #228]	; (800f4bc <tcp_abandon+0x170>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	4a37      	ldr	r2, [pc, #220]	; (800f4bc <tcp_abandon+0x170>)
 800f3de:	6013      	str	r3, [r2, #0]
 800f3e0:	e013      	b.n	800f40a <tcp_abandon+0xbe>
 800f3e2:	4b36      	ldr	r3, [pc, #216]	; (800f4bc <tcp_abandon+0x170>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	61fb      	str	r3, [r7, #28]
 800f3e8:	e00c      	b.n	800f404 <tcp_abandon+0xb8>
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d104      	bne.n	800f3fe <tcp_abandon+0xb2>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	68da      	ldr	r2, [r3, #12]
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	60da      	str	r2, [r3, #12]
 800f3fc:	e005      	b.n	800f40a <tcp_abandon+0xbe>
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	61fb      	str	r3, [r7, #28]
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1ef      	bne.n	800f3ea <tcp_abandon+0x9e>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2200      	movs	r2, #0
 800f40e:	60da      	str	r2, [r3, #12]
 800f410:	e00b      	b.n	800f42a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	8adb      	ldrh	r3, [r3, #22]
 800f41a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f41c:	6879      	ldr	r1, [r7, #4]
 800f41e:	4828      	ldr	r0, [pc, #160]	; (800f4c0 <tcp_abandon+0x174>)
 800f420:	f000 ff7a 	bl	8010318 <tcp_pcb_remove>
 800f424:	4b27      	ldr	r3, [pc, #156]	; (800f4c4 <tcp_abandon+0x178>)
 800f426:	2201      	movs	r2, #1
 800f428:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d004      	beq.n	800f43c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f436:	4618      	mov	r0, r3
 800f438:	f000 fd1c 	bl	800fe74 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f440:	2b00      	cmp	r3, #0
 800f442:	d004      	beq.n	800f44e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f448:	4618      	mov	r0, r3
 800f44a:	f000 fd13 	bl	800fe74 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f452:	2b00      	cmp	r3, #0
 800f454:	d004      	beq.n	800f460 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 fd0a 	bl	800fe74 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f462:	2b00      	cmp	r3, #0
 800f464:	d00e      	beq.n	800f484 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f466:	6879      	ldr	r1, [r7, #4]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	3304      	adds	r3, #4
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	8b12      	ldrh	r2, [r2, #24]
 800f470:	9202      	str	r2, [sp, #8]
 800f472:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f474:	9201      	str	r2, [sp, #4]
 800f476:	9300      	str	r3, [sp, #0]
 800f478:	460b      	mov	r3, r1
 800f47a:	697a      	ldr	r2, [r7, #20]
 800f47c:	69b9      	ldr	r1, [r7, #24]
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f004 fcc2 	bl	8013e08 <tcp_rst>
    }
    last_state = pcb->state;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	7d1b      	ldrb	r3, [r3, #20]
 800f488:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f7ff fd34 	bl	800eef8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d004      	beq.n	800f4a0 <tcp_abandon+0x154>
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	f06f 010c 	mvn.w	r1, #12
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	4798      	blx	r3
  }
}
 800f4a0:	3728      	adds	r7, #40	; 0x28
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	08019378 	.word	0x08019378
 800f4ac:	080194bc 	.word	0x080194bc
 800f4b0:	080193bc 	.word	0x080193bc
 800f4b4:	080194d8 	.word	0x080194d8
 800f4b8:	2000971c 	.word	0x2000971c
 800f4bc:	20009710 	.word	0x20009710
 800f4c0:	20009718 	.word	0x20009718
 800f4c4:	20009720 	.word	0x20009720

0800f4c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f4d0:	2101      	movs	r1, #1
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f7ff ff3a 	bl	800f34c <tcp_abandon>
}
 800f4d8:	bf00      	nop
 800f4da:	3708      	adds	r7, #8
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d106      	bne.n	800f4fc <tcp_update_rcv_ann_wnd+0x1c>
 800f4ee:	4b25      	ldr	r3, [pc, #148]	; (800f584 <tcp_update_rcv_ann_wnd+0xa4>)
 800f4f0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f4f4:	4924      	ldr	r1, [pc, #144]	; (800f588 <tcp_update_rcv_ann_wnd+0xa8>)
 800f4f6:	4825      	ldr	r0, [pc, #148]	; (800f58c <tcp_update_rcv_ann_wnd+0xac>)
 800f4f8:	f008 f816 	bl	8017528 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f504:	4413      	add	r3, r2
 800f506:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f510:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f514:	bf28      	it	cs
 800f516:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f51a:	b292      	uxth	r2, r2
 800f51c:	4413      	add	r3, r2
 800f51e:	68fa      	ldr	r2, [r7, #12]
 800f520:	1ad3      	subs	r3, r2, r3
 800f522:	2b00      	cmp	r3, #0
 800f524:	db08      	blt.n	800f538 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	1ad3      	subs	r3, r2, r3
 800f536:	e020      	b.n	800f57a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f540:	1ad3      	subs	r3, r2, r3
 800f542:	2b00      	cmp	r3, #0
 800f544:	dd03      	ble.n	800f54e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2200      	movs	r2, #0
 800f54a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f54c:	e014      	b.n	800f578 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f556:	1ad3      	subs	r3, r2, r3
 800f558:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f560:	d306      	bcc.n	800f570 <tcp_update_rcv_ann_wnd+0x90>
 800f562:	4b08      	ldr	r3, [pc, #32]	; (800f584 <tcp_update_rcv_ann_wnd+0xa4>)
 800f564:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f568:	4909      	ldr	r1, [pc, #36]	; (800f590 <tcp_update_rcv_ann_wnd+0xb0>)
 800f56a:	4808      	ldr	r0, [pc, #32]	; (800f58c <tcp_update_rcv_ann_wnd+0xac>)
 800f56c:	f007 ffdc 	bl	8017528 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	b29a      	uxth	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f578:	2300      	movs	r3, #0
  }
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3710      	adds	r7, #16
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	08019378 	.word	0x08019378
 800f588:	080195d4 	.word	0x080195d4
 800f58c:	080193bc 	.word	0x080193bc
 800f590:	080195f8 	.word	0x080195f8

0800f594 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	460b      	mov	r3, r1
 800f59e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d107      	bne.n	800f5b6 <tcp_recved+0x22>
 800f5a6:	4b1f      	ldr	r3, [pc, #124]	; (800f624 <tcp_recved+0x90>)
 800f5a8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f5ac:	491e      	ldr	r1, [pc, #120]	; (800f628 <tcp_recved+0x94>)
 800f5ae:	481f      	ldr	r0, [pc, #124]	; (800f62c <tcp_recved+0x98>)
 800f5b0:	f007 ffba 	bl	8017528 <iprintf>
 800f5b4:	e032      	b.n	800f61c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	7d1b      	ldrb	r3, [r3, #20]
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d106      	bne.n	800f5cc <tcp_recved+0x38>
 800f5be:	4b19      	ldr	r3, [pc, #100]	; (800f624 <tcp_recved+0x90>)
 800f5c0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f5c4:	491a      	ldr	r1, [pc, #104]	; (800f630 <tcp_recved+0x9c>)
 800f5c6:	4819      	ldr	r0, [pc, #100]	; (800f62c <tcp_recved+0x98>)
 800f5c8:	f007 ffae 	bl	8017528 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5d0:	887b      	ldrh	r3, [r7, #2]
 800f5d2:	4413      	add	r3, r2
 800f5d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f5d6:	89fb      	ldrh	r3, [r7, #14]
 800f5d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f5dc:	d804      	bhi.n	800f5e8 <tcp_recved+0x54>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5e2:	89fa      	ldrh	r2, [r7, #14]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d204      	bcs.n	800f5f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f5ee:	851a      	strh	r2, [r3, #40]	; 0x28
 800f5f0:	e002      	b.n	800f5f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	89fa      	ldrh	r2, [r7, #14]
 800f5f6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f7ff ff71 	bl	800f4e0 <tcp_update_rcv_ann_wnd>
 800f5fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f606:	d309      	bcc.n	800f61c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	8b5b      	ldrh	r3, [r3, #26]
 800f60c:	f043 0302 	orr.w	r3, r3, #2
 800f610:	b29a      	uxth	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f003 fe42 	bl	80132a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f61c:	3710      	adds	r7, #16
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	08019378 	.word	0x08019378
 800f628:	08019614 	.word	0x08019614
 800f62c:	080193bc 	.word	0x080193bc
 800f630:	0801962c 	.word	0x0801962c

0800f634 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f634:	b5b0      	push	{r4, r5, r7, lr}
 800f636:	b090      	sub	sp, #64	; 0x40
 800f638:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f63a:	2300      	movs	r3, #0
 800f63c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f640:	4b94      	ldr	r3, [pc, #592]	; (800f894 <tcp_slowtmr+0x260>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	3301      	adds	r3, #1
 800f646:	4a93      	ldr	r2, [pc, #588]	; (800f894 <tcp_slowtmr+0x260>)
 800f648:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f64a:	4b93      	ldr	r3, [pc, #588]	; (800f898 <tcp_slowtmr+0x264>)
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	3301      	adds	r3, #1
 800f650:	b2da      	uxtb	r2, r3
 800f652:	4b91      	ldr	r3, [pc, #580]	; (800f898 <tcp_slowtmr+0x264>)
 800f654:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f656:	2300      	movs	r3, #0
 800f658:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f65a:	4b90      	ldr	r3, [pc, #576]	; (800f89c <tcp_slowtmr+0x268>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f660:	e29d      	b.n	800fb9e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f664:	7d1b      	ldrb	r3, [r3, #20]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d106      	bne.n	800f678 <tcp_slowtmr+0x44>
 800f66a:	4b8d      	ldr	r3, [pc, #564]	; (800f8a0 <tcp_slowtmr+0x26c>)
 800f66c:	f240 42be 	movw	r2, #1214	; 0x4be
 800f670:	498c      	ldr	r1, [pc, #560]	; (800f8a4 <tcp_slowtmr+0x270>)
 800f672:	488d      	ldr	r0, [pc, #564]	; (800f8a8 <tcp_slowtmr+0x274>)
 800f674:	f007 ff58 	bl	8017528 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67a:	7d1b      	ldrb	r3, [r3, #20]
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d106      	bne.n	800f68e <tcp_slowtmr+0x5a>
 800f680:	4b87      	ldr	r3, [pc, #540]	; (800f8a0 <tcp_slowtmr+0x26c>)
 800f682:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f686:	4989      	ldr	r1, [pc, #548]	; (800f8ac <tcp_slowtmr+0x278>)
 800f688:	4887      	ldr	r0, [pc, #540]	; (800f8a8 <tcp_slowtmr+0x274>)
 800f68a:	f007 ff4d 	bl	8017528 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f690:	7d1b      	ldrb	r3, [r3, #20]
 800f692:	2b0a      	cmp	r3, #10
 800f694:	d106      	bne.n	800f6a4 <tcp_slowtmr+0x70>
 800f696:	4b82      	ldr	r3, [pc, #520]	; (800f8a0 <tcp_slowtmr+0x26c>)
 800f698:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f69c:	4984      	ldr	r1, [pc, #528]	; (800f8b0 <tcp_slowtmr+0x27c>)
 800f69e:	4882      	ldr	r0, [pc, #520]	; (800f8a8 <tcp_slowtmr+0x274>)
 800f6a0:	f007 ff42 	bl	8017528 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a6:	7f9a      	ldrb	r2, [r3, #30]
 800f6a8:	4b7b      	ldr	r3, [pc, #492]	; (800f898 <tcp_slowtmr+0x264>)
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d105      	bne.n	800f6bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b6:	68db      	ldr	r3, [r3, #12]
 800f6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f6ba:	e270      	b.n	800fb9e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f6bc:	4b76      	ldr	r3, [pc, #472]	; (800f898 <tcp_slowtmr+0x264>)
 800f6be:	781a      	ldrb	r2, [r3, #0]
 800f6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d2:	7d1b      	ldrb	r3, [r3, #20]
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	d10a      	bne.n	800f6ee <tcp_slowtmr+0xba>
 800f6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6de:	2b05      	cmp	r3, #5
 800f6e0:	d905      	bls.n	800f6ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f6e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6ec:	e11e      	b.n	800f92c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6f4:	2b0b      	cmp	r3, #11
 800f6f6:	d905      	bls.n	800f704 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f702:	e113      	b.n	800f92c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f706:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d075      	beq.n	800f7fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f712:	2b00      	cmp	r3, #0
 800f714:	d006      	beq.n	800f724 <tcp_slowtmr+0xf0>
 800f716:	4b62      	ldr	r3, [pc, #392]	; (800f8a0 <tcp_slowtmr+0x26c>)
 800f718:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f71c:	4965      	ldr	r1, [pc, #404]	; (800f8b4 <tcp_slowtmr+0x280>)
 800f71e:	4862      	ldr	r0, [pc, #392]	; (800f8a8 <tcp_slowtmr+0x274>)
 800f720:	f007 ff02 	bl	8017528 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d106      	bne.n	800f73a <tcp_slowtmr+0x106>
 800f72c:	4b5c      	ldr	r3, [pc, #368]	; (800f8a0 <tcp_slowtmr+0x26c>)
 800f72e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f732:	4961      	ldr	r1, [pc, #388]	; (800f8b8 <tcp_slowtmr+0x284>)
 800f734:	485c      	ldr	r0, [pc, #368]	; (800f8a8 <tcp_slowtmr+0x274>)
 800f736:	f007 fef7 	bl	8017528 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f740:	2b0b      	cmp	r3, #11
 800f742:	d905      	bls.n	800f750 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f748:	3301      	adds	r3, #1
 800f74a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f74e:	e0ed      	b.n	800f92c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f752:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f756:	3b01      	subs	r3, #1
 800f758:	4a58      	ldr	r2, [pc, #352]	; (800f8bc <tcp_slowtmr+0x288>)
 800f75a:	5cd3      	ldrb	r3, [r2, r3]
 800f75c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f760:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f764:	7c7a      	ldrb	r2, [r7, #17]
 800f766:	429a      	cmp	r2, r3
 800f768:	d907      	bls.n	800f77a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f770:	3301      	adds	r3, #1
 800f772:	b2da      	uxtb	r2, r3
 800f774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f776:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f780:	7c7a      	ldrb	r2, [r7, #17]
 800f782:	429a      	cmp	r2, r3
 800f784:	f200 80d2 	bhi.w	800f92c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f788:	2301      	movs	r3, #1
 800f78a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f78e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f792:	2b00      	cmp	r3, #0
 800f794:	d108      	bne.n	800f7a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f798:	f004 fc2a 	bl	8013ff0 <tcp_zero_window_probe>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d014      	beq.n	800f7cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	623b      	str	r3, [r7, #32]
 800f7a6:	e011      	b.n	800f7cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7b2:	f003 faef 	bl	8012d94 <tcp_split_unsent_seg>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d107      	bne.n	800f7cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f7bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7be:	f003 fd6f 	bl	80132a0 <tcp_output>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d101      	bne.n	800f7cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f7cc:	6a3b      	ldr	r3, [r7, #32]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f000 80ac 	beq.w	800f92c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f7e2:	2b06      	cmp	r3, #6
 800f7e4:	f200 80a2 	bhi.w	800f92c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	b2da      	uxtb	r2, r3
 800f7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f7f8:	e098      	b.n	800f92c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f800:	2b00      	cmp	r3, #0
 800f802:	db0f      	blt.n	800f824 <tcp_slowtmr+0x1f0>
 800f804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f806:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f80a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f80e:	4293      	cmp	r3, r2
 800f810:	d008      	beq.n	800f824 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f814:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f818:	b29b      	uxth	r3, r3
 800f81a:	3301      	adds	r3, #1
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	b21a      	sxth	r2, r3
 800f820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f822:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f826:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f830:	429a      	cmp	r2, r3
 800f832:	db7b      	blt.n	800f92c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f836:	f004 f825 	bl	8013884 <tcp_rexmit_rto_prepare>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d007      	beq.n	800f850 <tcp_slowtmr+0x21c>
 800f840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f844:	2b00      	cmp	r3, #0
 800f846:	d171      	bne.n	800f92c <tcp_slowtmr+0x2f8>
 800f848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d06d      	beq.n	800f92c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f852:	7d1b      	ldrb	r3, [r3, #20]
 800f854:	2b02      	cmp	r3, #2
 800f856:	d03a      	beq.n	800f8ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f85e:	2b0c      	cmp	r3, #12
 800f860:	bf28      	it	cs
 800f862:	230c      	movcs	r3, #12
 800f864:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f868:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f86c:	10db      	asrs	r3, r3, #3
 800f86e:	b21b      	sxth	r3, r3
 800f870:	461a      	mov	r2, r3
 800f872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f874:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f878:	4413      	add	r3, r2
 800f87a:	7efa      	ldrb	r2, [r7, #27]
 800f87c:	4910      	ldr	r1, [pc, #64]	; (800f8c0 <tcp_slowtmr+0x28c>)
 800f87e:	5c8a      	ldrb	r2, [r1, r2]
 800f880:	4093      	lsls	r3, r2
 800f882:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f88a:	4293      	cmp	r3, r2
 800f88c:	dc1a      	bgt.n	800f8c4 <tcp_slowtmr+0x290>
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	b21a      	sxth	r2, r3
 800f892:	e019      	b.n	800f8c8 <tcp_slowtmr+0x294>
 800f894:	2000970c 	.word	0x2000970c
 800f898:	20009722 	.word	0x20009722
 800f89c:	20009718 	.word	0x20009718
 800f8a0:	08019378 	.word	0x08019378
 800f8a4:	080196bc 	.word	0x080196bc
 800f8a8:	080193bc 	.word	0x080193bc
 800f8ac:	080196e8 	.word	0x080196e8
 800f8b0:	08019714 	.word	0x08019714
 800f8b4:	08019744 	.word	0x08019744
 800f8b8:	08019778 	.word	0x08019778
 800f8bc:	0801b358 	.word	0x0801b358
 800f8c0:	0801b348 	.word	0x0801b348
 800f8c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	bf28      	it	cs
 800f8e4:	4613      	movcs	r3, r2
 800f8e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f8e8:	8a7b      	ldrh	r3, [r7, #18]
 800f8ea:	085b      	lsrs	r3, r3, #1
 800f8ec:	b29a      	uxth	r2, r3
 800f8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8fe:	005b      	lsls	r3, r3, #1
 800f900:	b29b      	uxth	r3, r3
 800f902:	429a      	cmp	r2, r3
 800f904:	d206      	bcs.n	800f914 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f90a:	005b      	lsls	r3, r3, #1
 800f90c:	b29a      	uxth	r2, r3
 800f90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f910:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f916:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f920:	2200      	movs	r2, #0
 800f922:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f928:	f004 f81c 	bl	8013964 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92e:	7d1b      	ldrb	r3, [r3, #20]
 800f930:	2b06      	cmp	r3, #6
 800f932:	d111      	bne.n	800f958 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f936:	8b5b      	ldrh	r3, [r3, #26]
 800f938:	f003 0310 	and.w	r3, r3, #16
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d00b      	beq.n	800f958 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f940:	4b9c      	ldr	r3, [pc, #624]	; (800fbb4 <tcp_slowtmr+0x580>)
 800f942:	681a      	ldr	r2, [r3, #0]
 800f944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f946:	6a1b      	ldr	r3, [r3, #32]
 800f948:	1ad3      	subs	r3, r2, r3
 800f94a:	2b28      	cmp	r3, #40	; 0x28
 800f94c:	d904      	bls.n	800f958 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f94e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f952:	3301      	adds	r3, #1
 800f954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95a:	7a5b      	ldrb	r3, [r3, #9]
 800f95c:	f003 0308 	and.w	r3, r3, #8
 800f960:	2b00      	cmp	r3, #0
 800f962:	d04a      	beq.n	800f9fa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f966:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f968:	2b04      	cmp	r3, #4
 800f96a:	d003      	beq.n	800f974 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f970:	2b07      	cmp	r3, #7
 800f972:	d142      	bne.n	800f9fa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f974:	4b8f      	ldr	r3, [pc, #572]	; (800fbb4 <tcp_slowtmr+0x580>)
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97a:	6a1b      	ldr	r3, [r3, #32]
 800f97c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f980:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f984:	4b8c      	ldr	r3, [pc, #560]	; (800fbb8 <tcp_slowtmr+0x584>)
 800f986:	440b      	add	r3, r1
 800f988:	498c      	ldr	r1, [pc, #560]	; (800fbbc <tcp_slowtmr+0x588>)
 800f98a:	fba1 1303 	umull	r1, r3, r1, r3
 800f98e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f990:	429a      	cmp	r2, r3
 800f992:	d90a      	bls.n	800f9aa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f998:	3301      	adds	r3, #1
 800f99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f99e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f9a8:	e027      	b.n	800f9fa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9aa:	4b82      	ldr	r3, [pc, #520]	; (800fbb4 <tcp_slowtmr+0x580>)
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b0:	6a1b      	ldr	r3, [r3, #32]
 800f9b2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	4b7f      	ldr	r3, [pc, #508]	; (800fbc0 <tcp_slowtmr+0x58c>)
 800f9c4:	fb00 f303 	mul.w	r3, r0, r3
 800f9c8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f9ca:	497c      	ldr	r1, [pc, #496]	; (800fbbc <tcp_slowtmr+0x588>)
 800f9cc:	fba1 1303 	umull	r1, r3, r1, r3
 800f9d0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d911      	bls.n	800f9fa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f9d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9d8:	f004 faca 	bl	8013f70 <tcp_keepalive>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f9e2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d107      	bne.n	800f9fa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	b2da      	uxtb	r2, r3
 800f9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d011      	beq.n	800fa26 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fa02:	4b6c      	ldr	r3, [pc, #432]	; (800fbb4 <tcp_slowtmr+0x580>)
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa08:	6a1b      	ldr	r3, [r3, #32]
 800fa0a:	1ad2      	subs	r2, r2, r3
 800fa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa0e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fa12:	4619      	mov	r1, r3
 800fa14:	460b      	mov	r3, r1
 800fa16:	005b      	lsls	r3, r3, #1
 800fa18:	440b      	add	r3, r1
 800fa1a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d302      	bcc.n	800fa26 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fa20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa22:	f000 fddd 	bl	80105e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fa26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa28:	7d1b      	ldrb	r3, [r3, #20]
 800fa2a:	2b03      	cmp	r3, #3
 800fa2c:	d10b      	bne.n	800fa46 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa2e:	4b61      	ldr	r3, [pc, #388]	; (800fbb4 <tcp_slowtmr+0x580>)
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa34:	6a1b      	ldr	r3, [r3, #32]
 800fa36:	1ad3      	subs	r3, r2, r3
 800fa38:	2b28      	cmp	r3, #40	; 0x28
 800fa3a:	d904      	bls.n	800fa46 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fa3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa40:	3301      	adds	r3, #1
 800fa42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fa46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa48:	7d1b      	ldrb	r3, [r3, #20]
 800fa4a:	2b09      	cmp	r3, #9
 800fa4c:	d10b      	bne.n	800fa66 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fa4e:	4b59      	ldr	r3, [pc, #356]	; (800fbb4 <tcp_slowtmr+0x580>)
 800fa50:	681a      	ldr	r2, [r3, #0]
 800fa52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa54:	6a1b      	ldr	r3, [r3, #32]
 800fa56:	1ad3      	subs	r3, r2, r3
 800fa58:	2bf0      	cmp	r3, #240	; 0xf0
 800fa5a:	d904      	bls.n	800fa66 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fa5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa60:	3301      	adds	r3, #1
 800fa62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fa66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d060      	beq.n	800fb30 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa74:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fa76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa78:	f000 fbfe 	bl	8010278 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d010      	beq.n	800faa4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fa82:	4b50      	ldr	r3, [pc, #320]	; (800fbc4 <tcp_slowtmr+0x590>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d106      	bne.n	800fa9a <tcp_slowtmr+0x466>
 800fa8c:	4b4e      	ldr	r3, [pc, #312]	; (800fbc8 <tcp_slowtmr+0x594>)
 800fa8e:	f240 526d 	movw	r2, #1389	; 0x56d
 800fa92:	494e      	ldr	r1, [pc, #312]	; (800fbcc <tcp_slowtmr+0x598>)
 800fa94:	484e      	ldr	r0, [pc, #312]	; (800fbd0 <tcp_slowtmr+0x59c>)
 800fa96:	f007 fd47 	bl	8017528 <iprintf>
        prev->next = pcb->next;
 800fa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9c:	68da      	ldr	r2, [r3, #12]
 800fa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa0:	60da      	str	r2, [r3, #12]
 800faa2:	e00f      	b.n	800fac4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800faa4:	4b47      	ldr	r3, [pc, #284]	; (800fbc4 <tcp_slowtmr+0x590>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800faaa:	429a      	cmp	r2, r3
 800faac:	d006      	beq.n	800fabc <tcp_slowtmr+0x488>
 800faae:	4b46      	ldr	r3, [pc, #280]	; (800fbc8 <tcp_slowtmr+0x594>)
 800fab0:	f240 5271 	movw	r2, #1393	; 0x571
 800fab4:	4947      	ldr	r1, [pc, #284]	; (800fbd4 <tcp_slowtmr+0x5a0>)
 800fab6:	4846      	ldr	r0, [pc, #280]	; (800fbd0 <tcp_slowtmr+0x59c>)
 800fab8:	f007 fd36 	bl	8017528 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabe:	68db      	ldr	r3, [r3, #12]
 800fac0:	4a40      	ldr	r2, [pc, #256]	; (800fbc4 <tcp_slowtmr+0x590>)
 800fac2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d013      	beq.n	800faf4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800facc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800face:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fad4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad8:	3304      	adds	r3, #4
 800fada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fadc:	8ad2      	ldrh	r2, [r2, #22]
 800fade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fae0:	8b09      	ldrh	r1, [r1, #24]
 800fae2:	9102      	str	r1, [sp, #8]
 800fae4:	9201      	str	r2, [sp, #4]
 800fae6:	9300      	str	r3, [sp, #0]
 800fae8:	462b      	mov	r3, r5
 800faea:	4622      	mov	r2, r4
 800faec:	4601      	mov	r1, r0
 800faee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800faf0:	f004 f98a 	bl	8013e08 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800faf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafc:	7d1b      	ldrb	r3, [r3, #20]
 800fafe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb02:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fb0a:	6838      	ldr	r0, [r7, #0]
 800fb0c:	f7ff f9f4 	bl	800eef8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fb10:	4b31      	ldr	r3, [pc, #196]	; (800fbd8 <tcp_slowtmr+0x5a4>)
 800fb12:	2200      	movs	r2, #0
 800fb14:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d004      	beq.n	800fb26 <tcp_slowtmr+0x4f2>
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f06f 010c 	mvn.w	r1, #12
 800fb22:	68b8      	ldr	r0, [r7, #8]
 800fb24:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fb26:	4b2c      	ldr	r3, [pc, #176]	; (800fbd8 <tcp_slowtmr+0x5a4>)
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d037      	beq.n	800fb9e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fb2e:	e592      	b.n	800f656 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb32:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb3c:	7f1b      	ldrb	r3, [r3, #28]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	b2da      	uxtb	r2, r3
 800fb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb44:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb48:	7f1a      	ldrb	r2, [r3, #28]
 800fb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb4c:	7f5b      	ldrb	r3, [r3, #29]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d325      	bcc.n	800fb9e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb54:	2200      	movs	r2, #0
 800fb56:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fb58:	4b1f      	ldr	r3, [pc, #124]	; (800fbd8 <tcp_slowtmr+0x5a4>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d00b      	beq.n	800fb80 <tcp_slowtmr+0x54c>
 800fb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb70:	6912      	ldr	r2, [r2, #16]
 800fb72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb74:	4610      	mov	r0, r2
 800fb76:	4798      	blx	r3
 800fb78:	4603      	mov	r3, r0
 800fb7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fb7e:	e002      	b.n	800fb86 <tcp_slowtmr+0x552>
 800fb80:	2300      	movs	r3, #0
 800fb82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fb86:	4b14      	ldr	r3, [pc, #80]	; (800fbd8 <tcp_slowtmr+0x5a4>)
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d000      	beq.n	800fb90 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800fb8e:	e562      	b.n	800f656 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fb90:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d102      	bne.n	800fb9e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fb98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb9a:	f003 fb81 	bl	80132a0 <tcp_output>
  while (pcb != NULL) {
 800fb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	f47f ad5e 	bne.w	800f662 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fba6:	2300      	movs	r3, #0
 800fba8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fbaa:	4b0c      	ldr	r3, [pc, #48]	; (800fbdc <tcp_slowtmr+0x5a8>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fbb0:	e069      	b.n	800fc86 <tcp_slowtmr+0x652>
 800fbb2:	bf00      	nop
 800fbb4:	2000970c 	.word	0x2000970c
 800fbb8:	000a4cb8 	.word	0x000a4cb8
 800fbbc:	10624dd3 	.word	0x10624dd3
 800fbc0:	000124f8 	.word	0x000124f8
 800fbc4:	20009718 	.word	0x20009718
 800fbc8:	08019378 	.word	0x08019378
 800fbcc:	080197b0 	.word	0x080197b0
 800fbd0:	080193bc 	.word	0x080193bc
 800fbd4:	080197dc 	.word	0x080197dc
 800fbd8:	20009720 	.word	0x20009720
 800fbdc:	2000971c 	.word	0x2000971c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe2:	7d1b      	ldrb	r3, [r3, #20]
 800fbe4:	2b0a      	cmp	r3, #10
 800fbe6:	d006      	beq.n	800fbf6 <tcp_slowtmr+0x5c2>
 800fbe8:	4b2b      	ldr	r3, [pc, #172]	; (800fc98 <tcp_slowtmr+0x664>)
 800fbea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fbee:	492b      	ldr	r1, [pc, #172]	; (800fc9c <tcp_slowtmr+0x668>)
 800fbf0:	482b      	ldr	r0, [pc, #172]	; (800fca0 <tcp_slowtmr+0x66c>)
 800fbf2:	f007 fc99 	bl	8017528 <iprintf>
    pcb_remove = 0;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fbfc:	4b29      	ldr	r3, [pc, #164]	; (800fca4 <tcp_slowtmr+0x670>)
 800fbfe:	681a      	ldr	r2, [r3, #0]
 800fc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc02:	6a1b      	ldr	r3, [r3, #32]
 800fc04:	1ad3      	subs	r3, r2, r3
 800fc06:	2bf0      	cmp	r3, #240	; 0xf0
 800fc08:	d904      	bls.n	800fc14 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fc0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc0e:	3301      	adds	r3, #1
 800fc10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fc14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d02f      	beq.n	800fc7c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fc1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc1e:	f000 fb2b 	bl	8010278 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d010      	beq.n	800fc4a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fc28:	4b1f      	ldr	r3, [pc, #124]	; (800fca8 <tcp_slowtmr+0x674>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d106      	bne.n	800fc40 <tcp_slowtmr+0x60c>
 800fc32:	4b19      	ldr	r3, [pc, #100]	; (800fc98 <tcp_slowtmr+0x664>)
 800fc34:	f240 52af 	movw	r2, #1455	; 0x5af
 800fc38:	491c      	ldr	r1, [pc, #112]	; (800fcac <tcp_slowtmr+0x678>)
 800fc3a:	4819      	ldr	r0, [pc, #100]	; (800fca0 <tcp_slowtmr+0x66c>)
 800fc3c:	f007 fc74 	bl	8017528 <iprintf>
        prev->next = pcb->next;
 800fc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc42:	68da      	ldr	r2, [r3, #12]
 800fc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc46:	60da      	str	r2, [r3, #12]
 800fc48:	e00f      	b.n	800fc6a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fc4a:	4b17      	ldr	r3, [pc, #92]	; (800fca8 <tcp_slowtmr+0x674>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d006      	beq.n	800fc62 <tcp_slowtmr+0x62e>
 800fc54:	4b10      	ldr	r3, [pc, #64]	; (800fc98 <tcp_slowtmr+0x664>)
 800fc56:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fc5a:	4915      	ldr	r1, [pc, #84]	; (800fcb0 <tcp_slowtmr+0x67c>)
 800fc5c:	4810      	ldr	r0, [pc, #64]	; (800fca0 <tcp_slowtmr+0x66c>)
 800fc5e:	f007 fc63 	bl	8017528 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	4a10      	ldr	r2, [pc, #64]	; (800fca8 <tcp_slowtmr+0x674>)
 800fc68:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fc74:	69f8      	ldr	r0, [r7, #28]
 800fc76:	f7ff f93f 	bl	800eef8 <tcp_free>
 800fc7a:	e004      	b.n	800fc86 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d1a9      	bne.n	800fbe0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fc8c:	bf00      	nop
 800fc8e:	bf00      	nop
 800fc90:	3730      	adds	r7, #48	; 0x30
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bdb0      	pop	{r4, r5, r7, pc}
 800fc96:	bf00      	nop
 800fc98:	08019378 	.word	0x08019378
 800fc9c:	08019808 	.word	0x08019808
 800fca0:	080193bc 	.word	0x080193bc
 800fca4:	2000970c 	.word	0x2000970c
 800fca8:	2000971c 	.word	0x2000971c
 800fcac:	08019838 	.word	0x08019838
 800fcb0:	08019860 	.word	0x08019860

0800fcb4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fcba:	4b2d      	ldr	r3, [pc, #180]	; (800fd70 <tcp_fasttmr+0xbc>)
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	b2da      	uxtb	r2, r3
 800fcc2:	4b2b      	ldr	r3, [pc, #172]	; (800fd70 <tcp_fasttmr+0xbc>)
 800fcc4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fcc6:	4b2b      	ldr	r3, [pc, #172]	; (800fd74 <tcp_fasttmr+0xc0>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fccc:	e048      	b.n	800fd60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	7f9a      	ldrb	r2, [r3, #30]
 800fcd2:	4b27      	ldr	r3, [pc, #156]	; (800fd70 <tcp_fasttmr+0xbc>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d03f      	beq.n	800fd5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fcda:	4b25      	ldr	r3, [pc, #148]	; (800fd70 <tcp_fasttmr+0xbc>)
 800fcdc:	781a      	ldrb	r2, [r3, #0]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	8b5b      	ldrh	r3, [r3, #26]
 800fce6:	f003 0301 	and.w	r3, r3, #1
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d010      	beq.n	800fd10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	8b5b      	ldrh	r3, [r3, #26]
 800fcf2:	f043 0302 	orr.w	r3, r3, #2
 800fcf6:	b29a      	uxth	r2, r3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f003 facf 	bl	80132a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	8b5b      	ldrh	r3, [r3, #26]
 800fd06:	f023 0303 	bic.w	r3, r3, #3
 800fd0a:	b29a      	uxth	r2, r3
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	8b5b      	ldrh	r3, [r3, #26]
 800fd14:	f003 0308 	and.w	r3, r3, #8
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d009      	beq.n	800fd30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	8b5b      	ldrh	r3, [r3, #26]
 800fd20:	f023 0308 	bic.w	r3, r3, #8
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f7ff fa78 	bl	800f220 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00a      	beq.n	800fd54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fd3e:	4b0e      	ldr	r3, [pc, #56]	; (800fd78 <tcp_fasttmr+0xc4>)
 800fd40:	2200      	movs	r2, #0
 800fd42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 f819 	bl	800fd7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fd4a:	4b0b      	ldr	r3, [pc, #44]	; (800fd78 <tcp_fasttmr+0xc4>)
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d000      	beq.n	800fd54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fd52:	e7b8      	b.n	800fcc6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	607b      	str	r3, [r7, #4]
 800fd58:	e002      	b.n	800fd60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d1b3      	bne.n	800fcce <tcp_fasttmr+0x1a>
    }
  }
}
 800fd66:	bf00      	nop
 800fd68:	bf00      	nop
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	20009722 	.word	0x20009722
 800fd74:	20009718 	.word	0x20009718
 800fd78:	20009720 	.word	0x20009720

0800fd7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fd7c:	b590      	push	{r4, r7, lr}
 800fd7e:	b085      	sub	sp, #20
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d109      	bne.n	800fd9e <tcp_process_refused_data+0x22>
 800fd8a:	4b37      	ldr	r3, [pc, #220]	; (800fe68 <tcp_process_refused_data+0xec>)
 800fd8c:	f240 6209 	movw	r2, #1545	; 0x609
 800fd90:	4936      	ldr	r1, [pc, #216]	; (800fe6c <tcp_process_refused_data+0xf0>)
 800fd92:	4837      	ldr	r0, [pc, #220]	; (800fe70 <tcp_process_refused_data+0xf4>)
 800fd94:	f007 fbc8 	bl	8017528 <iprintf>
 800fd98:	f06f 030f 	mvn.w	r3, #15
 800fd9c:	e060      	b.n	800fe60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fda2:	7b5b      	ldrb	r3, [r3, #13]
 800fda4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdaa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00b      	beq.n	800fdd4 <tcp_process_refused_data+0x58>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6918      	ldr	r0, [r3, #16]
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	68ba      	ldr	r2, [r7, #8]
 800fdca:	6879      	ldr	r1, [r7, #4]
 800fdcc:	47a0      	blx	r4
 800fdce:	4603      	mov	r3, r0
 800fdd0:	73fb      	strb	r3, [r7, #15]
 800fdd2:	e007      	b.n	800fde4 <tcp_process_refused_data+0x68>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	68ba      	ldr	r2, [r7, #8]
 800fdd8:	6879      	ldr	r1, [r7, #4]
 800fdda:	2000      	movs	r0, #0
 800fddc:	f000 f8a4 	bl	800ff28 <tcp_recv_null>
 800fde0:	4603      	mov	r3, r0
 800fde2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fde4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d12a      	bne.n	800fe42 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fdec:	7bbb      	ldrb	r3, [r7, #14]
 800fdee:	f003 0320 	and.w	r3, r3, #32
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d033      	beq.n	800fe5e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdfa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fdfe:	d005      	beq.n	800fe0c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe04:	3301      	adds	r3, #1
 800fe06:	b29a      	uxth	r2, r3
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d00b      	beq.n	800fe2e <tcp_process_refused_data+0xb2>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6918      	ldr	r0, [r3, #16]
 800fe20:	2300      	movs	r3, #0
 800fe22:	2200      	movs	r2, #0
 800fe24:	6879      	ldr	r1, [r7, #4]
 800fe26:	47a0      	blx	r4
 800fe28:	4603      	mov	r3, r0
 800fe2a:	73fb      	strb	r3, [r7, #15]
 800fe2c:	e001      	b.n	800fe32 <tcp_process_refused_data+0xb6>
 800fe2e:	2300      	movs	r3, #0
 800fe30:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fe32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe36:	f113 0f0d 	cmn.w	r3, #13
 800fe3a:	d110      	bne.n	800fe5e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fe3c:	f06f 030c 	mvn.w	r3, #12
 800fe40:	e00e      	b.n	800fe60 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fe42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe46:	f113 0f0d 	cmn.w	r3, #13
 800fe4a:	d102      	bne.n	800fe52 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fe4c:	f06f 030c 	mvn.w	r3, #12
 800fe50:	e006      	b.n	800fe60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	68ba      	ldr	r2, [r7, #8]
 800fe56:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fe58:	f06f 0304 	mvn.w	r3, #4
 800fe5c:	e000      	b.n	800fe60 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fe5e:	2300      	movs	r3, #0
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3714      	adds	r7, #20
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd90      	pop	{r4, r7, pc}
 800fe68:	08019378 	.word	0x08019378
 800fe6c:	08019888 	.word	0x08019888
 800fe70:	080193bc 	.word	0x080193bc

0800fe74 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fe7c:	e007      	b.n	800fe8e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 f80a 	bl	800fe9e <tcp_seg_free>
    seg = next;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d1f4      	bne.n	800fe7e <tcp_segs_free+0xa>
  }
}
 800fe94:	bf00      	nop
 800fe96:	bf00      	nop
 800fe98:	3710      	adds	r7, #16
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}

0800fe9e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fe9e:	b580      	push	{r7, lr}
 800fea0:	b082      	sub	sp, #8
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d00c      	beq.n	800fec6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d004      	beq.n	800febe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fe fcdb 	bl	800e874 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800febe:	6879      	ldr	r1, [r7, #4]
 800fec0:	2003      	movs	r0, #3
 800fec2:	f7fd fe61 	bl	800db88 <memp_free>
  }
}
 800fec6:	bf00      	nop
 800fec8:	3708      	adds	r7, #8
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
	...

0800fed0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d106      	bne.n	800feec <tcp_seg_copy+0x1c>
 800fede:	4b0f      	ldr	r3, [pc, #60]	; (800ff1c <tcp_seg_copy+0x4c>)
 800fee0:	f240 6282 	movw	r2, #1666	; 0x682
 800fee4:	490e      	ldr	r1, [pc, #56]	; (800ff20 <tcp_seg_copy+0x50>)
 800fee6:	480f      	ldr	r0, [pc, #60]	; (800ff24 <tcp_seg_copy+0x54>)
 800fee8:	f007 fb1e 	bl	8017528 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800feec:	2003      	movs	r0, #3
 800feee:	f7fd fddb 	bl	800daa8 <memp_malloc>
 800fef2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d101      	bne.n	800fefe <tcp_seg_copy+0x2e>
    return NULL;
 800fefa:	2300      	movs	r3, #0
 800fefc:	e00a      	b.n	800ff14 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fefe:	2210      	movs	r2, #16
 800ff00:	6879      	ldr	r1, [r7, #4]
 800ff02:	68f8      	ldr	r0, [r7, #12]
 800ff04:	f007 fafa 	bl	80174fc <memcpy>
  pbuf_ref(cseg->p);
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7fe fd51 	bl	800e9b4 <pbuf_ref>
  return cseg;
 800ff12:	68fb      	ldr	r3, [r7, #12]
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3710      	adds	r7, #16
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	08019378 	.word	0x08019378
 800ff20:	080198cc 	.word	0x080198cc
 800ff24:	080193bc 	.word	0x080193bc

0800ff28 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	607a      	str	r2, [r7, #4]
 800ff34:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d109      	bne.n	800ff50 <tcp_recv_null+0x28>
 800ff3c:	4b12      	ldr	r3, [pc, #72]	; (800ff88 <tcp_recv_null+0x60>)
 800ff3e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ff42:	4912      	ldr	r1, [pc, #72]	; (800ff8c <tcp_recv_null+0x64>)
 800ff44:	4812      	ldr	r0, [pc, #72]	; (800ff90 <tcp_recv_null+0x68>)
 800ff46:	f007 faef 	bl	8017528 <iprintf>
 800ff4a:	f06f 030f 	mvn.w	r3, #15
 800ff4e:	e016      	b.n	800ff7e <tcp_recv_null+0x56>

  if (p != NULL) {
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d009      	beq.n	800ff6a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	891b      	ldrh	r3, [r3, #8]
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	68b8      	ldr	r0, [r7, #8]
 800ff5e:	f7ff fb19 	bl	800f594 <tcp_recved>
    pbuf_free(p);
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f7fe fc86 	bl	800e874 <pbuf_free>
 800ff68:	e008      	b.n	800ff7c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ff6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d104      	bne.n	800ff7c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ff72:	68b8      	ldr	r0, [r7, #8]
 800ff74:	f7ff f9be 	bl	800f2f4 <tcp_close>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	e000      	b.n	800ff7e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ff7c:	2300      	movs	r3, #0
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop
 800ff88:	08019378 	.word	0x08019378
 800ff8c:	080198e8 	.word	0x080198e8
 800ff90:	080193bc 	.word	0x080193bc

0800ff94 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b086      	sub	sp, #24
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ff9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	db01      	blt.n	800ffaa <tcp_kill_prio+0x16>
 800ffa6:	79fb      	ldrb	r3, [r7, #7]
 800ffa8:	e000      	b.n	800ffac <tcp_kill_prio+0x18>
 800ffaa:	237f      	movs	r3, #127	; 0x7f
 800ffac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ffae:	7afb      	ldrb	r3, [r7, #11]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d034      	beq.n	801001e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ffb4:	7afb      	ldrb	r3, [r7, #11]
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffc2:	4b19      	ldr	r3, [pc, #100]	; (8010028 <tcp_kill_prio+0x94>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	617b      	str	r3, [r7, #20]
 800ffc8:	e01f      	b.n	801000a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	7d5b      	ldrb	r3, [r3, #21]
 800ffce:	7afa      	ldrb	r2, [r7, #11]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d80c      	bhi.n	800ffee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ffd8:	7afa      	ldrb	r2, [r7, #11]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d112      	bne.n	8010004 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ffde:	4b13      	ldr	r3, [pc, #76]	; (801002c <tcp_kill_prio+0x98>)
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	6a1b      	ldr	r3, [r3, #32]
 800ffe6:	1ad3      	subs	r3, r2, r3
 800ffe8:	68fa      	ldr	r2, [r7, #12]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d80a      	bhi.n	8010004 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ffee:	4b0f      	ldr	r3, [pc, #60]	; (801002c <tcp_kill_prio+0x98>)
 800fff0:	681a      	ldr	r2, [r3, #0]
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	6a1b      	ldr	r3, [r3, #32]
 800fff6:	1ad3      	subs	r3, r2, r3
 800fff8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	7d5b      	ldrb	r3, [r3, #21]
 8010002:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	617b      	str	r3, [r7, #20]
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d1dc      	bne.n	800ffca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d004      	beq.n	8010020 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010016:	6938      	ldr	r0, [r7, #16]
 8010018:	f7ff fa56 	bl	800f4c8 <tcp_abort>
 801001c:	e000      	b.n	8010020 <tcp_kill_prio+0x8c>
    return;
 801001e:	bf00      	nop
  }
}
 8010020:	3718      	adds	r7, #24
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	20009718 	.word	0x20009718
 801002c:	2000970c 	.word	0x2000970c

08010030 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b086      	sub	sp, #24
 8010034:	af00      	add	r7, sp, #0
 8010036:	4603      	mov	r3, r0
 8010038:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801003a:	79fb      	ldrb	r3, [r7, #7]
 801003c:	2b08      	cmp	r3, #8
 801003e:	d009      	beq.n	8010054 <tcp_kill_state+0x24>
 8010040:	79fb      	ldrb	r3, [r7, #7]
 8010042:	2b09      	cmp	r3, #9
 8010044:	d006      	beq.n	8010054 <tcp_kill_state+0x24>
 8010046:	4b1a      	ldr	r3, [pc, #104]	; (80100b0 <tcp_kill_state+0x80>)
 8010048:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801004c:	4919      	ldr	r1, [pc, #100]	; (80100b4 <tcp_kill_state+0x84>)
 801004e:	481a      	ldr	r0, [pc, #104]	; (80100b8 <tcp_kill_state+0x88>)
 8010050:	f007 fa6a 	bl	8017528 <iprintf>

  inactivity = 0;
 8010054:	2300      	movs	r3, #0
 8010056:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010058:	2300      	movs	r3, #0
 801005a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801005c:	4b17      	ldr	r3, [pc, #92]	; (80100bc <tcp_kill_state+0x8c>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	617b      	str	r3, [r7, #20]
 8010062:	e017      	b.n	8010094 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	7d1b      	ldrb	r3, [r3, #20]
 8010068:	79fa      	ldrb	r2, [r7, #7]
 801006a:	429a      	cmp	r2, r3
 801006c:	d10f      	bne.n	801008e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801006e:	4b14      	ldr	r3, [pc, #80]	; (80100c0 <tcp_kill_state+0x90>)
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	6a1b      	ldr	r3, [r3, #32]
 8010076:	1ad3      	subs	r3, r2, r3
 8010078:	68fa      	ldr	r2, [r7, #12]
 801007a:	429a      	cmp	r2, r3
 801007c:	d807      	bhi.n	801008e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801007e:	4b10      	ldr	r3, [pc, #64]	; (80100c0 <tcp_kill_state+0x90>)
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	6a1b      	ldr	r3, [r3, #32]
 8010086:	1ad3      	subs	r3, r2, r3
 8010088:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	68db      	ldr	r3, [r3, #12]
 8010092:	617b      	str	r3, [r7, #20]
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d1e4      	bne.n	8010064 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d003      	beq.n	80100a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80100a0:	2100      	movs	r1, #0
 80100a2:	6938      	ldr	r0, [r7, #16]
 80100a4:	f7ff f952 	bl	800f34c <tcp_abandon>
  }
}
 80100a8:	bf00      	nop
 80100aa:	3718      	adds	r7, #24
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	08019378 	.word	0x08019378
 80100b4:	08019904 	.word	0x08019904
 80100b8:	080193bc 	.word	0x080193bc
 80100bc:	20009718 	.word	0x20009718
 80100c0:	2000970c 	.word	0x2000970c

080100c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80100ca:	2300      	movs	r3, #0
 80100cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80100ce:	2300      	movs	r3, #0
 80100d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100d2:	4b12      	ldr	r3, [pc, #72]	; (801011c <tcp_kill_timewait+0x58>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	60fb      	str	r3, [r7, #12]
 80100d8:	e012      	b.n	8010100 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80100da:	4b11      	ldr	r3, [pc, #68]	; (8010120 <tcp_kill_timewait+0x5c>)
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	6a1b      	ldr	r3, [r3, #32]
 80100e2:	1ad3      	subs	r3, r2, r3
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d807      	bhi.n	80100fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80100ea:	4b0d      	ldr	r3, [pc, #52]	; (8010120 <tcp_kill_timewait+0x5c>)
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	6a1b      	ldr	r3, [r3, #32]
 80100f2:	1ad3      	subs	r3, r2, r3
 80100f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	60fb      	str	r3, [r7, #12]
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d1e9      	bne.n	80100da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d002      	beq.n	8010112 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801010c:	68b8      	ldr	r0, [r7, #8]
 801010e:	f7ff f9db 	bl	800f4c8 <tcp_abort>
  }
}
 8010112:	bf00      	nop
 8010114:	3710      	adds	r7, #16
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	2000971c 	.word	0x2000971c
 8010120:	2000970c 	.word	0x2000970c

08010124 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801012a:	4b10      	ldr	r3, [pc, #64]	; (801016c <tcp_handle_closepend+0x48>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010130:	e014      	b.n	801015c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	68db      	ldr	r3, [r3, #12]
 8010136:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	8b5b      	ldrh	r3, [r3, #26]
 801013c:	f003 0308 	and.w	r3, r3, #8
 8010140:	2b00      	cmp	r3, #0
 8010142:	d009      	beq.n	8010158 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	8b5b      	ldrh	r3, [r3, #26]
 8010148:	f023 0308 	bic.w	r3, r3, #8
 801014c:	b29a      	uxth	r2, r3
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7ff f864 	bl	800f220 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d1e7      	bne.n	8010132 <tcp_handle_closepend+0xe>
  }
}
 8010162:	bf00      	nop
 8010164:	bf00      	nop
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	20009718 	.word	0x20009718

08010170 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	4603      	mov	r3, r0
 8010178:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801017a:	2001      	movs	r0, #1
 801017c:	f7fd fc94 	bl	800daa8 <memp_malloc>
 8010180:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d126      	bne.n	80101d6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010188:	f7ff ffcc 	bl	8010124 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801018c:	f7ff ff9a 	bl	80100c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010190:	2001      	movs	r0, #1
 8010192:	f7fd fc89 	bl	800daa8 <memp_malloc>
 8010196:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d11b      	bne.n	80101d6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801019e:	2009      	movs	r0, #9
 80101a0:	f7ff ff46 	bl	8010030 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101a4:	2001      	movs	r0, #1
 80101a6:	f7fd fc7f 	bl	800daa8 <memp_malloc>
 80101aa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d111      	bne.n	80101d6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80101b2:	2008      	movs	r0, #8
 80101b4:	f7ff ff3c 	bl	8010030 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101b8:	2001      	movs	r0, #1
 80101ba:	f7fd fc75 	bl	800daa8 <memp_malloc>
 80101be:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d107      	bne.n	80101d6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80101c6:	79fb      	ldrb	r3, [r7, #7]
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7ff fee3 	bl	800ff94 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101ce:	2001      	movs	r0, #1
 80101d0:	f7fd fc6a 	bl	800daa8 <memp_malloc>
 80101d4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d03f      	beq.n	801025c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80101dc:	229c      	movs	r2, #156	; 0x9c
 80101de:	2100      	movs	r1, #0
 80101e0:	68f8      	ldr	r0, [r7, #12]
 80101e2:	f007 f999 	bl	8017518 <memset>
    pcb->prio = prio;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	79fa      	ldrb	r2, [r7, #7]
 80101ea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80101f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80101fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	22ff      	movs	r2, #255	; 0xff
 801020a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010212:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2206      	movs	r2, #6
 8010218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2206      	movs	r2, #6
 8010220:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010228:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2201      	movs	r2, #1
 801022e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010232:	4b0d      	ldr	r3, [pc, #52]	; (8010268 <tcp_alloc+0xf8>)
 8010234:	681a      	ldr	r2, [r3, #0]
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801023a:	4b0c      	ldr	r3, [pc, #48]	; (801026c <tcp_alloc+0xfc>)
 801023c:	781a      	ldrb	r2, [r3, #0]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010248:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	4a08      	ldr	r2, [pc, #32]	; (8010270 <tcp_alloc+0x100>)
 8010250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	4a07      	ldr	r2, [pc, #28]	; (8010274 <tcp_alloc+0x104>)
 8010258:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801025c:	68fb      	ldr	r3, [r7, #12]
}
 801025e:	4618      	mov	r0, r3
 8010260:	3710      	adds	r7, #16
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop
 8010268:	2000970c 	.word	0x2000970c
 801026c:	20009722 	.word	0x20009722
 8010270:	0800ff29 	.word	0x0800ff29
 8010274:	006ddd00 	.word	0x006ddd00

08010278 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d107      	bne.n	8010296 <tcp_pcb_purge+0x1e>
 8010286:	4b21      	ldr	r3, [pc, #132]	; (801030c <tcp_pcb_purge+0x94>)
 8010288:	f640 0251 	movw	r2, #2129	; 0x851
 801028c:	4920      	ldr	r1, [pc, #128]	; (8010310 <tcp_pcb_purge+0x98>)
 801028e:	4821      	ldr	r0, [pc, #132]	; (8010314 <tcp_pcb_purge+0x9c>)
 8010290:	f007 f94a 	bl	8017528 <iprintf>
 8010294:	e037      	b.n	8010306 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	7d1b      	ldrb	r3, [r3, #20]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d033      	beq.n	8010306 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80102a2:	2b0a      	cmp	r3, #10
 80102a4:	d02f      	beq.n	8010306 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80102aa:	2b01      	cmp	r3, #1
 80102ac:	d02b      	beq.n	8010306 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d007      	beq.n	80102c6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7fe fada 	bl	800e874 <pbuf_free>
      pcb->refused_data = NULL;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d002      	beq.n	80102d4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 f986 	bl	80105e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102da:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102e0:	4618      	mov	r0, r3
 80102e2:	f7ff fdc7 	bl	800fe74 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7ff fdc2 	bl	800fe74 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2200      	movs	r2, #0
 80102f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2200      	movs	r2, #0
 8010302:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	08019378 	.word	0x08019378
 8010310:	080199c4 	.word	0x080199c4
 8010314:	080193bc 	.word	0x080193bc

08010318 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b084      	sub	sp, #16
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d106      	bne.n	8010336 <tcp_pcb_remove+0x1e>
 8010328:	4b3e      	ldr	r3, [pc, #248]	; (8010424 <tcp_pcb_remove+0x10c>)
 801032a:	f640 0283 	movw	r2, #2179	; 0x883
 801032e:	493e      	ldr	r1, [pc, #248]	; (8010428 <tcp_pcb_remove+0x110>)
 8010330:	483e      	ldr	r0, [pc, #248]	; (801042c <tcp_pcb_remove+0x114>)
 8010332:	f007 f8f9 	bl	8017528 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d106      	bne.n	801034a <tcp_pcb_remove+0x32>
 801033c:	4b39      	ldr	r3, [pc, #228]	; (8010424 <tcp_pcb_remove+0x10c>)
 801033e:	f640 0284 	movw	r2, #2180	; 0x884
 8010342:	493b      	ldr	r1, [pc, #236]	; (8010430 <tcp_pcb_remove+0x118>)
 8010344:	4839      	ldr	r0, [pc, #228]	; (801042c <tcp_pcb_remove+0x114>)
 8010346:	f007 f8ef 	bl	8017528 <iprintf>

  TCP_RMV(pcblist, pcb);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	683a      	ldr	r2, [r7, #0]
 8010350:	429a      	cmp	r2, r3
 8010352:	d105      	bne.n	8010360 <tcp_pcb_remove+0x48>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	68da      	ldr	r2, [r3, #12]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	601a      	str	r2, [r3, #0]
 801035e:	e013      	b.n	8010388 <tcp_pcb_remove+0x70>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	60fb      	str	r3, [r7, #12]
 8010366:	e00c      	b.n	8010382 <tcp_pcb_remove+0x6a>
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	68db      	ldr	r3, [r3, #12]
 801036c:	683a      	ldr	r2, [r7, #0]
 801036e:	429a      	cmp	r2, r3
 8010370:	d104      	bne.n	801037c <tcp_pcb_remove+0x64>
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	68da      	ldr	r2, [r3, #12]
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	60da      	str	r2, [r3, #12]
 801037a:	e005      	b.n	8010388 <tcp_pcb_remove+0x70>
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	60fb      	str	r3, [r7, #12]
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d1ef      	bne.n	8010368 <tcp_pcb_remove+0x50>
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	2200      	movs	r2, #0
 801038c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801038e:	6838      	ldr	r0, [r7, #0]
 8010390:	f7ff ff72 	bl	8010278 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	7d1b      	ldrb	r3, [r3, #20]
 8010398:	2b0a      	cmp	r3, #10
 801039a:	d013      	beq.n	80103c4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d00f      	beq.n	80103c4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	8b5b      	ldrh	r3, [r3, #26]
 80103a8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d009      	beq.n	80103c4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	8b5b      	ldrh	r3, [r3, #26]
 80103b4:	f043 0302 	orr.w	r3, r3, #2
 80103b8:	b29a      	uxth	r2, r3
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80103be:	6838      	ldr	r0, [r7, #0]
 80103c0:	f002 ff6e 	bl	80132a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	7d1b      	ldrb	r3, [r3, #20]
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d020      	beq.n	801040e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d006      	beq.n	80103e2 <tcp_pcb_remove+0xca>
 80103d4:	4b13      	ldr	r3, [pc, #76]	; (8010424 <tcp_pcb_remove+0x10c>)
 80103d6:	f640 0293 	movw	r2, #2195	; 0x893
 80103da:	4916      	ldr	r1, [pc, #88]	; (8010434 <tcp_pcb_remove+0x11c>)
 80103dc:	4813      	ldr	r0, [pc, #76]	; (801042c <tcp_pcb_remove+0x114>)
 80103de:	f007 f8a3 	bl	8017528 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d006      	beq.n	80103f8 <tcp_pcb_remove+0xe0>
 80103ea:	4b0e      	ldr	r3, [pc, #56]	; (8010424 <tcp_pcb_remove+0x10c>)
 80103ec:	f640 0294 	movw	r2, #2196	; 0x894
 80103f0:	4911      	ldr	r1, [pc, #68]	; (8010438 <tcp_pcb_remove+0x120>)
 80103f2:	480e      	ldr	r0, [pc, #56]	; (801042c <tcp_pcb_remove+0x114>)
 80103f4:	f007 f898 	bl	8017528 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d006      	beq.n	801040e <tcp_pcb_remove+0xf6>
 8010400:	4b08      	ldr	r3, [pc, #32]	; (8010424 <tcp_pcb_remove+0x10c>)
 8010402:	f640 0296 	movw	r2, #2198	; 0x896
 8010406:	490d      	ldr	r1, [pc, #52]	; (801043c <tcp_pcb_remove+0x124>)
 8010408:	4808      	ldr	r0, [pc, #32]	; (801042c <tcp_pcb_remove+0x114>)
 801040a:	f007 f88d 	bl	8017528 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	2200      	movs	r2, #0
 8010412:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	2200      	movs	r2, #0
 8010418:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801041a:	bf00      	nop
 801041c:	3710      	adds	r7, #16
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
 8010422:	bf00      	nop
 8010424:	08019378 	.word	0x08019378
 8010428:	080199e0 	.word	0x080199e0
 801042c:	080193bc 	.word	0x080193bc
 8010430:	080199fc 	.word	0x080199fc
 8010434:	08019a1c 	.word	0x08019a1c
 8010438:	08019a34 	.word	0x08019a34
 801043c:	08019a50 	.word	0x08019a50

08010440 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d106      	bne.n	801045c <tcp_next_iss+0x1c>
 801044e:	4b0a      	ldr	r3, [pc, #40]	; (8010478 <tcp_next_iss+0x38>)
 8010450:	f640 02af 	movw	r2, #2223	; 0x8af
 8010454:	4909      	ldr	r1, [pc, #36]	; (801047c <tcp_next_iss+0x3c>)
 8010456:	480a      	ldr	r0, [pc, #40]	; (8010480 <tcp_next_iss+0x40>)
 8010458:	f007 f866 	bl	8017528 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801045c:	4b09      	ldr	r3, [pc, #36]	; (8010484 <tcp_next_iss+0x44>)
 801045e:	681a      	ldr	r2, [r3, #0]
 8010460:	4b09      	ldr	r3, [pc, #36]	; (8010488 <tcp_next_iss+0x48>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4413      	add	r3, r2
 8010466:	4a07      	ldr	r2, [pc, #28]	; (8010484 <tcp_next_iss+0x44>)
 8010468:	6013      	str	r3, [r2, #0]
  return iss;
 801046a:	4b06      	ldr	r3, [pc, #24]	; (8010484 <tcp_next_iss+0x44>)
 801046c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801046e:	4618      	mov	r0, r3
 8010470:	3708      	adds	r7, #8
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	08019378 	.word	0x08019378
 801047c:	08019a68 	.word	0x08019a68
 8010480:	080193bc 	.word	0x080193bc
 8010484:	20000024 	.word	0x20000024
 8010488:	2000970c 	.word	0x2000970c

0801048c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b086      	sub	sp, #24
 8010490:	af00      	add	r7, sp, #0
 8010492:	4603      	mov	r3, r0
 8010494:	60b9      	str	r1, [r7, #8]
 8010496:	607a      	str	r2, [r7, #4]
 8010498:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d106      	bne.n	80104ae <tcp_eff_send_mss_netif+0x22>
 80104a0:	4b14      	ldr	r3, [pc, #80]	; (80104f4 <tcp_eff_send_mss_netif+0x68>)
 80104a2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80104a6:	4914      	ldr	r1, [pc, #80]	; (80104f8 <tcp_eff_send_mss_netif+0x6c>)
 80104a8:	4814      	ldr	r0, [pc, #80]	; (80104fc <tcp_eff_send_mss_netif+0x70>)
 80104aa:	f007 f83d 	bl	8017528 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d101      	bne.n	80104b8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80104b4:	89fb      	ldrh	r3, [r7, #14]
 80104b6:	e019      	b.n	80104ec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80104bc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80104be:	8afb      	ldrh	r3, [r7, #22]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d012      	beq.n	80104ea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80104c4:	2328      	movs	r3, #40	; 0x28
 80104c6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80104c8:	8afa      	ldrh	r2, [r7, #22]
 80104ca:	8abb      	ldrh	r3, [r7, #20]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d904      	bls.n	80104da <tcp_eff_send_mss_netif+0x4e>
 80104d0:	8afa      	ldrh	r2, [r7, #22]
 80104d2:	8abb      	ldrh	r3, [r7, #20]
 80104d4:	1ad3      	subs	r3, r2, r3
 80104d6:	b29b      	uxth	r3, r3
 80104d8:	e000      	b.n	80104dc <tcp_eff_send_mss_netif+0x50>
 80104da:	2300      	movs	r3, #0
 80104dc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80104de:	8a7a      	ldrh	r2, [r7, #18]
 80104e0:	89fb      	ldrh	r3, [r7, #14]
 80104e2:	4293      	cmp	r3, r2
 80104e4:	bf28      	it	cs
 80104e6:	4613      	movcs	r3, r2
 80104e8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80104ea:	89fb      	ldrh	r3, [r7, #14]
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3718      	adds	r7, #24
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	08019378 	.word	0x08019378
 80104f8:	08019a84 	.word	0x08019a84
 80104fc:	080193bc 	.word	0x080193bc

08010500 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d119      	bne.n	8010548 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010514:	4b10      	ldr	r3, [pc, #64]	; (8010558 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010516:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801051a:	4910      	ldr	r1, [pc, #64]	; (801055c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801051c:	4810      	ldr	r0, [pc, #64]	; (8010560 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801051e:	f007 f803 	bl	8017528 <iprintf>

  while (pcb != NULL) {
 8010522:	e011      	b.n	8010548 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	681a      	ldr	r2, [r3, #0]
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	429a      	cmp	r2, r3
 801052e:	d108      	bne.n	8010542 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010536:	68f8      	ldr	r0, [r7, #12]
 8010538:	f7fe ffc6 	bl	800f4c8 <tcp_abort>
      pcb = next;
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	60fb      	str	r3, [r7, #12]
 8010540:	e002      	b.n	8010548 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	68db      	ldr	r3, [r3, #12]
 8010546:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1ea      	bne.n	8010524 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801054e:	bf00      	nop
 8010550:	bf00      	nop
 8010552:	3710      	adds	r7, #16
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	08019378 	.word	0x08019378
 801055c:	08019aac 	.word	0x08019aac
 8010560:	080193bc 	.word	0x080193bc

08010564 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d02a      	beq.n	80105ca <tcp_netif_ip_addr_changed+0x66>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d026      	beq.n	80105ca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801057c:	4b15      	ldr	r3, [pc, #84]	; (80105d4 <tcp_netif_ip_addr_changed+0x70>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4619      	mov	r1, r3
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f7ff ffbc 	bl	8010500 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010588:	4b13      	ldr	r3, [pc, #76]	; (80105d8 <tcp_netif_ip_addr_changed+0x74>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	4619      	mov	r1, r3
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f7ff ffb6 	bl	8010500 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d017      	beq.n	80105ca <tcp_netif_ip_addr_changed+0x66>
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d013      	beq.n	80105ca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80105a2:	4b0e      	ldr	r3, [pc, #56]	; (80105dc <tcp_netif_ip_addr_changed+0x78>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	60fb      	str	r3, [r7, #12]
 80105a8:	e00c      	b.n	80105c4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d103      	bne.n	80105be <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	681a      	ldr	r2, [r3, #0]
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	68db      	ldr	r3, [r3, #12]
 80105c2:	60fb      	str	r3, [r7, #12]
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d1ef      	bne.n	80105aa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80105ca:	bf00      	nop
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	20009718 	.word	0x20009718
 80105d8:	20009710 	.word	0x20009710
 80105dc:	20009714 	.word	0x20009714

080105e0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d007      	beq.n	8010600 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7ff fc3d 	bl	800fe74 <tcp_segs_free>
    pcb->ooseq = NULL;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2200      	movs	r2, #0
 80105fe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010600:	bf00      	nop
 8010602:	3708      	adds	r7, #8
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010608:	b590      	push	{r4, r7, lr}
 801060a:	b08d      	sub	sp, #52	; 0x34
 801060c:	af04      	add	r7, sp, #16
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d105      	bne.n	8010624 <tcp_input+0x1c>
 8010618:	4b9b      	ldr	r3, [pc, #620]	; (8010888 <tcp_input+0x280>)
 801061a:	2283      	movs	r2, #131	; 0x83
 801061c:	499b      	ldr	r1, [pc, #620]	; (801088c <tcp_input+0x284>)
 801061e:	489c      	ldr	r0, [pc, #624]	; (8010890 <tcp_input+0x288>)
 8010620:	f006 ff82 	bl	8017528 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	4a9a      	ldr	r2, [pc, #616]	; (8010894 <tcp_input+0x28c>)
 801062a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	895b      	ldrh	r3, [r3, #10]
 8010630:	2b13      	cmp	r3, #19
 8010632:	f240 83d1 	bls.w	8010dd8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010636:	4b98      	ldr	r3, [pc, #608]	; (8010898 <tcp_input+0x290>)
 8010638:	695b      	ldr	r3, [r3, #20]
 801063a:	4a97      	ldr	r2, [pc, #604]	; (8010898 <tcp_input+0x290>)
 801063c:	6812      	ldr	r2, [r2, #0]
 801063e:	4611      	mov	r1, r2
 8010640:	4618      	mov	r0, r3
 8010642:	f005 ffd1 	bl	80165e8 <ip4_addr_isbroadcast_u32>
 8010646:	4603      	mov	r3, r0
 8010648:	2b00      	cmp	r3, #0
 801064a:	f040 83c7 	bne.w	8010ddc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801064e:	4b92      	ldr	r3, [pc, #584]	; (8010898 <tcp_input+0x290>)
 8010650:	695b      	ldr	r3, [r3, #20]
 8010652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010656:	2be0      	cmp	r3, #224	; 0xe0
 8010658:	f000 83c0 	beq.w	8010ddc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801065c:	4b8d      	ldr	r3, [pc, #564]	; (8010894 <tcp_input+0x28c>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	899b      	ldrh	r3, [r3, #12]
 8010662:	b29b      	uxth	r3, r3
 8010664:	4618      	mov	r0, r3
 8010666:	f7fc fda7 	bl	800d1b8 <lwip_htons>
 801066a:	4603      	mov	r3, r0
 801066c:	0b1b      	lsrs	r3, r3, #12
 801066e:	b29b      	uxth	r3, r3
 8010670:	b2db      	uxtb	r3, r3
 8010672:	009b      	lsls	r3, r3, #2
 8010674:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010676:	7cbb      	ldrb	r3, [r7, #18]
 8010678:	2b13      	cmp	r3, #19
 801067a:	f240 83b1 	bls.w	8010de0 <tcp_input+0x7d8>
 801067e:	7cbb      	ldrb	r3, [r7, #18]
 8010680:	b29a      	uxth	r2, r3
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	891b      	ldrh	r3, [r3, #8]
 8010686:	429a      	cmp	r2, r3
 8010688:	f200 83aa 	bhi.w	8010de0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801068c:	7cbb      	ldrb	r3, [r7, #18]
 801068e:	b29b      	uxth	r3, r3
 8010690:	3b14      	subs	r3, #20
 8010692:	b29a      	uxth	r2, r3
 8010694:	4b81      	ldr	r3, [pc, #516]	; (801089c <tcp_input+0x294>)
 8010696:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010698:	4b81      	ldr	r3, [pc, #516]	; (80108a0 <tcp_input+0x298>)
 801069a:	2200      	movs	r2, #0
 801069c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	895a      	ldrh	r2, [r3, #10]
 80106a2:	7cbb      	ldrb	r3, [r7, #18]
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d309      	bcc.n	80106be <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80106aa:	4b7c      	ldr	r3, [pc, #496]	; (801089c <tcp_input+0x294>)
 80106ac:	881a      	ldrh	r2, [r3, #0]
 80106ae:	4b7d      	ldr	r3, [pc, #500]	; (80108a4 <tcp_input+0x29c>)
 80106b0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80106b2:	7cbb      	ldrb	r3, [r7, #18]
 80106b4:	4619      	mov	r1, r3
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f7fe f856 	bl	800e768 <pbuf_remove_header>
 80106bc:	e04e      	b.n	801075c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d105      	bne.n	80106d2 <tcp_input+0xca>
 80106c6:	4b70      	ldr	r3, [pc, #448]	; (8010888 <tcp_input+0x280>)
 80106c8:	22c2      	movs	r2, #194	; 0xc2
 80106ca:	4977      	ldr	r1, [pc, #476]	; (80108a8 <tcp_input+0x2a0>)
 80106cc:	4870      	ldr	r0, [pc, #448]	; (8010890 <tcp_input+0x288>)
 80106ce:	f006 ff2b 	bl	8017528 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80106d2:	2114      	movs	r1, #20
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7fe f847 	bl	800e768 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	895a      	ldrh	r2, [r3, #10]
 80106de:	4b71      	ldr	r3, [pc, #452]	; (80108a4 <tcp_input+0x29c>)
 80106e0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80106e2:	4b6e      	ldr	r3, [pc, #440]	; (801089c <tcp_input+0x294>)
 80106e4:	881a      	ldrh	r2, [r3, #0]
 80106e6:	4b6f      	ldr	r3, [pc, #444]	; (80108a4 <tcp_input+0x29c>)
 80106e8:	881b      	ldrh	r3, [r3, #0]
 80106ea:	1ad3      	subs	r3, r2, r3
 80106ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80106ee:	4b6d      	ldr	r3, [pc, #436]	; (80108a4 <tcp_input+0x29c>)
 80106f0:	881b      	ldrh	r3, [r3, #0]
 80106f2:	4619      	mov	r1, r3
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f7fe f837 	bl	800e768 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	895b      	ldrh	r3, [r3, #10]
 8010700:	8a3a      	ldrh	r2, [r7, #16]
 8010702:	429a      	cmp	r2, r3
 8010704:	f200 836e 	bhi.w	8010de4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	4a64      	ldr	r2, [pc, #400]	; (80108a0 <tcp_input+0x298>)
 8010710:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	8a3a      	ldrh	r2, [r7, #16]
 8010718:	4611      	mov	r1, r2
 801071a:	4618      	mov	r0, r3
 801071c:	f7fe f824 	bl	800e768 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	891a      	ldrh	r2, [r3, #8]
 8010724:	8a3b      	ldrh	r3, [r7, #16]
 8010726:	1ad3      	subs	r3, r2, r3
 8010728:	b29a      	uxth	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	895b      	ldrh	r3, [r3, #10]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d005      	beq.n	8010742 <tcp_input+0x13a>
 8010736:	4b54      	ldr	r3, [pc, #336]	; (8010888 <tcp_input+0x280>)
 8010738:	22df      	movs	r2, #223	; 0xdf
 801073a:	495c      	ldr	r1, [pc, #368]	; (80108ac <tcp_input+0x2a4>)
 801073c:	4854      	ldr	r0, [pc, #336]	; (8010890 <tcp_input+0x288>)
 801073e:	f006 fef3 	bl	8017528 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	891a      	ldrh	r2, [r3, #8]
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	891b      	ldrh	r3, [r3, #8]
 801074c:	429a      	cmp	r2, r3
 801074e:	d005      	beq.n	801075c <tcp_input+0x154>
 8010750:	4b4d      	ldr	r3, [pc, #308]	; (8010888 <tcp_input+0x280>)
 8010752:	22e0      	movs	r2, #224	; 0xe0
 8010754:	4956      	ldr	r1, [pc, #344]	; (80108b0 <tcp_input+0x2a8>)
 8010756:	484e      	ldr	r0, [pc, #312]	; (8010890 <tcp_input+0x288>)
 8010758:	f006 fee6 	bl	8017528 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801075c:	4b4d      	ldr	r3, [pc, #308]	; (8010894 <tcp_input+0x28c>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	881b      	ldrh	r3, [r3, #0]
 8010762:	b29b      	uxth	r3, r3
 8010764:	4a4b      	ldr	r2, [pc, #300]	; (8010894 <tcp_input+0x28c>)
 8010766:	6814      	ldr	r4, [r2, #0]
 8010768:	4618      	mov	r0, r3
 801076a:	f7fc fd25 	bl	800d1b8 <lwip_htons>
 801076e:	4603      	mov	r3, r0
 8010770:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010772:	4b48      	ldr	r3, [pc, #288]	; (8010894 <tcp_input+0x28c>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	885b      	ldrh	r3, [r3, #2]
 8010778:	b29b      	uxth	r3, r3
 801077a:	4a46      	ldr	r2, [pc, #280]	; (8010894 <tcp_input+0x28c>)
 801077c:	6814      	ldr	r4, [r2, #0]
 801077e:	4618      	mov	r0, r3
 8010780:	f7fc fd1a 	bl	800d1b8 <lwip_htons>
 8010784:	4603      	mov	r3, r0
 8010786:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010788:	4b42      	ldr	r3, [pc, #264]	; (8010894 <tcp_input+0x28c>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	4a41      	ldr	r2, [pc, #260]	; (8010894 <tcp_input+0x28c>)
 8010790:	6814      	ldr	r4, [r2, #0]
 8010792:	4618      	mov	r0, r3
 8010794:	f7fc fd25 	bl	800d1e2 <lwip_htonl>
 8010798:	4603      	mov	r3, r0
 801079a:	6063      	str	r3, [r4, #4]
 801079c:	6863      	ldr	r3, [r4, #4]
 801079e:	4a45      	ldr	r2, [pc, #276]	; (80108b4 <tcp_input+0x2ac>)
 80107a0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80107a2:	4b3c      	ldr	r3, [pc, #240]	; (8010894 <tcp_input+0x28c>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	689b      	ldr	r3, [r3, #8]
 80107a8:	4a3a      	ldr	r2, [pc, #232]	; (8010894 <tcp_input+0x28c>)
 80107aa:	6814      	ldr	r4, [r2, #0]
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fc fd18 	bl	800d1e2 <lwip_htonl>
 80107b2:	4603      	mov	r3, r0
 80107b4:	60a3      	str	r3, [r4, #8]
 80107b6:	68a3      	ldr	r3, [r4, #8]
 80107b8:	4a3f      	ldr	r2, [pc, #252]	; (80108b8 <tcp_input+0x2b0>)
 80107ba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80107bc:	4b35      	ldr	r3, [pc, #212]	; (8010894 <tcp_input+0x28c>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	89db      	ldrh	r3, [r3, #14]
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	4a33      	ldr	r2, [pc, #204]	; (8010894 <tcp_input+0x28c>)
 80107c6:	6814      	ldr	r4, [r2, #0]
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fc fcf5 	bl	800d1b8 <lwip_htons>
 80107ce:	4603      	mov	r3, r0
 80107d0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80107d2:	4b30      	ldr	r3, [pc, #192]	; (8010894 <tcp_input+0x28c>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	899b      	ldrh	r3, [r3, #12]
 80107d8:	b29b      	uxth	r3, r3
 80107da:	4618      	mov	r0, r3
 80107dc:	f7fc fcec 	bl	800d1b8 <lwip_htons>
 80107e0:	4603      	mov	r3, r0
 80107e2:	b2db      	uxtb	r3, r3
 80107e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80107e8:	b2da      	uxtb	r2, r3
 80107ea:	4b34      	ldr	r3, [pc, #208]	; (80108bc <tcp_input+0x2b4>)
 80107ec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	891a      	ldrh	r2, [r3, #8]
 80107f2:	4b33      	ldr	r3, [pc, #204]	; (80108c0 <tcp_input+0x2b8>)
 80107f4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80107f6:	4b31      	ldr	r3, [pc, #196]	; (80108bc <tcp_input+0x2b4>)
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	f003 0303 	and.w	r3, r3, #3
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d00c      	beq.n	801081c <tcp_input+0x214>
    tcplen++;
 8010802:	4b2f      	ldr	r3, [pc, #188]	; (80108c0 <tcp_input+0x2b8>)
 8010804:	881b      	ldrh	r3, [r3, #0]
 8010806:	3301      	adds	r3, #1
 8010808:	b29a      	uxth	r2, r3
 801080a:	4b2d      	ldr	r3, [pc, #180]	; (80108c0 <tcp_input+0x2b8>)
 801080c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	891a      	ldrh	r2, [r3, #8]
 8010812:	4b2b      	ldr	r3, [pc, #172]	; (80108c0 <tcp_input+0x2b8>)
 8010814:	881b      	ldrh	r3, [r3, #0]
 8010816:	429a      	cmp	r2, r3
 8010818:	f200 82e6 	bhi.w	8010de8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801081c:	2300      	movs	r3, #0
 801081e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010820:	4b28      	ldr	r3, [pc, #160]	; (80108c4 <tcp_input+0x2bc>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	61fb      	str	r3, [r7, #28]
 8010826:	e09d      	b.n	8010964 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	7d1b      	ldrb	r3, [r3, #20]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d105      	bne.n	801083c <tcp_input+0x234>
 8010830:	4b15      	ldr	r3, [pc, #84]	; (8010888 <tcp_input+0x280>)
 8010832:	22fb      	movs	r2, #251	; 0xfb
 8010834:	4924      	ldr	r1, [pc, #144]	; (80108c8 <tcp_input+0x2c0>)
 8010836:	4816      	ldr	r0, [pc, #88]	; (8010890 <tcp_input+0x288>)
 8010838:	f006 fe76 	bl	8017528 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801083c:	69fb      	ldr	r3, [r7, #28]
 801083e:	7d1b      	ldrb	r3, [r3, #20]
 8010840:	2b0a      	cmp	r3, #10
 8010842:	d105      	bne.n	8010850 <tcp_input+0x248>
 8010844:	4b10      	ldr	r3, [pc, #64]	; (8010888 <tcp_input+0x280>)
 8010846:	22fc      	movs	r2, #252	; 0xfc
 8010848:	4920      	ldr	r1, [pc, #128]	; (80108cc <tcp_input+0x2c4>)
 801084a:	4811      	ldr	r0, [pc, #68]	; (8010890 <tcp_input+0x288>)
 801084c:	f006 fe6c 	bl	8017528 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010850:	69fb      	ldr	r3, [r7, #28]
 8010852:	7d1b      	ldrb	r3, [r3, #20]
 8010854:	2b01      	cmp	r3, #1
 8010856:	d105      	bne.n	8010864 <tcp_input+0x25c>
 8010858:	4b0b      	ldr	r3, [pc, #44]	; (8010888 <tcp_input+0x280>)
 801085a:	22fd      	movs	r2, #253	; 0xfd
 801085c:	491c      	ldr	r1, [pc, #112]	; (80108d0 <tcp_input+0x2c8>)
 801085e:	480c      	ldr	r0, [pc, #48]	; (8010890 <tcp_input+0x288>)
 8010860:	f006 fe62 	bl	8017528 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	7a1b      	ldrb	r3, [r3, #8]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d033      	beq.n	80108d4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801086c:	69fb      	ldr	r3, [r7, #28]
 801086e:	7a1a      	ldrb	r2, [r3, #8]
 8010870:	4b09      	ldr	r3, [pc, #36]	; (8010898 <tcp_input+0x290>)
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010878:	3301      	adds	r3, #1
 801087a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801087c:	429a      	cmp	r2, r3
 801087e:	d029      	beq.n	80108d4 <tcp_input+0x2cc>
      prev = pcb;
 8010880:	69fb      	ldr	r3, [r7, #28]
 8010882:	61bb      	str	r3, [r7, #24]
      continue;
 8010884:	e06b      	b.n	801095e <tcp_input+0x356>
 8010886:	bf00      	nop
 8010888:	08019ae0 	.word	0x08019ae0
 801088c:	08019b14 	.word	0x08019b14
 8010890:	08019b2c 	.word	0x08019b2c
 8010894:	20009734 	.word	0x20009734
 8010898:	2000619c 	.word	0x2000619c
 801089c:	20009738 	.word	0x20009738
 80108a0:	2000973c 	.word	0x2000973c
 80108a4:	2000973a 	.word	0x2000973a
 80108a8:	08019b54 	.word	0x08019b54
 80108ac:	08019b64 	.word	0x08019b64
 80108b0:	08019b70 	.word	0x08019b70
 80108b4:	20009744 	.word	0x20009744
 80108b8:	20009748 	.word	0x20009748
 80108bc:	20009750 	.word	0x20009750
 80108c0:	2000974e 	.word	0x2000974e
 80108c4:	20009718 	.word	0x20009718
 80108c8:	08019b90 	.word	0x08019b90
 80108cc:	08019bb8 	.word	0x08019bb8
 80108d0:	08019be4 	.word	0x08019be4
    }

    if (pcb->remote_port == tcphdr->src &&
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	8b1a      	ldrh	r2, [r3, #24]
 80108d8:	4b72      	ldr	r3, [pc, #456]	; (8010aa4 <tcp_input+0x49c>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	881b      	ldrh	r3, [r3, #0]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d13a      	bne.n	801095a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	8ada      	ldrh	r2, [r3, #22]
 80108e8:	4b6e      	ldr	r3, [pc, #440]	; (8010aa4 <tcp_input+0x49c>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	885b      	ldrh	r3, [r3, #2]
 80108ee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d132      	bne.n	801095a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80108f4:	69fb      	ldr	r3, [r7, #28]
 80108f6:	685a      	ldr	r2, [r3, #4]
 80108f8:	4b6b      	ldr	r3, [pc, #428]	; (8010aa8 <tcp_input+0x4a0>)
 80108fa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d12c      	bne.n	801095a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010900:	69fb      	ldr	r3, [r7, #28]
 8010902:	681a      	ldr	r2, [r3, #0]
 8010904:	4b68      	ldr	r3, [pc, #416]	; (8010aa8 <tcp_input+0x4a0>)
 8010906:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010908:	429a      	cmp	r2, r3
 801090a:	d126      	bne.n	801095a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	69fa      	ldr	r2, [r7, #28]
 8010912:	429a      	cmp	r2, r3
 8010914:	d106      	bne.n	8010924 <tcp_input+0x31c>
 8010916:	4b65      	ldr	r3, [pc, #404]	; (8010aac <tcp_input+0x4a4>)
 8010918:	f240 120d 	movw	r2, #269	; 0x10d
 801091c:	4964      	ldr	r1, [pc, #400]	; (8010ab0 <tcp_input+0x4a8>)
 801091e:	4865      	ldr	r0, [pc, #404]	; (8010ab4 <tcp_input+0x4ac>)
 8010920:	f006 fe02 	bl	8017528 <iprintf>
      if (prev != NULL) {
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d00a      	beq.n	8010940 <tcp_input+0x338>
        prev->next = pcb->next;
 801092a:	69fb      	ldr	r3, [r7, #28]
 801092c:	68da      	ldr	r2, [r3, #12]
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010932:	4b61      	ldr	r3, [pc, #388]	; (8010ab8 <tcp_input+0x4b0>)
 8010934:	681a      	ldr	r2, [r3, #0]
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801093a:	4a5f      	ldr	r2, [pc, #380]	; (8010ab8 <tcp_input+0x4b0>)
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010940:	69fb      	ldr	r3, [r7, #28]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	69fa      	ldr	r2, [r7, #28]
 8010946:	429a      	cmp	r2, r3
 8010948:	d111      	bne.n	801096e <tcp_input+0x366>
 801094a:	4b58      	ldr	r3, [pc, #352]	; (8010aac <tcp_input+0x4a4>)
 801094c:	f240 1215 	movw	r2, #277	; 0x115
 8010950:	495a      	ldr	r1, [pc, #360]	; (8010abc <tcp_input+0x4b4>)
 8010952:	4858      	ldr	r0, [pc, #352]	; (8010ab4 <tcp_input+0x4ac>)
 8010954:	f006 fde8 	bl	8017528 <iprintf>
      break;
 8010958:	e009      	b.n	801096e <tcp_input+0x366>
    }
    prev = pcb;
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801095e:	69fb      	ldr	r3, [r7, #28]
 8010960:	68db      	ldr	r3, [r3, #12]
 8010962:	61fb      	str	r3, [r7, #28]
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	2b00      	cmp	r3, #0
 8010968:	f47f af5e 	bne.w	8010828 <tcp_input+0x220>
 801096c:	e000      	b.n	8010970 <tcp_input+0x368>
      break;
 801096e:	bf00      	nop
  }

  if (pcb == NULL) {
 8010970:	69fb      	ldr	r3, [r7, #28]
 8010972:	2b00      	cmp	r3, #0
 8010974:	f040 80aa 	bne.w	8010acc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010978:	4b51      	ldr	r3, [pc, #324]	; (8010ac0 <tcp_input+0x4b8>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	61fb      	str	r3, [r7, #28]
 801097e:	e03f      	b.n	8010a00 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010980:	69fb      	ldr	r3, [r7, #28]
 8010982:	7d1b      	ldrb	r3, [r3, #20]
 8010984:	2b0a      	cmp	r3, #10
 8010986:	d006      	beq.n	8010996 <tcp_input+0x38e>
 8010988:	4b48      	ldr	r3, [pc, #288]	; (8010aac <tcp_input+0x4a4>)
 801098a:	f240 121f 	movw	r2, #287	; 0x11f
 801098e:	494d      	ldr	r1, [pc, #308]	; (8010ac4 <tcp_input+0x4bc>)
 8010990:	4848      	ldr	r0, [pc, #288]	; (8010ab4 <tcp_input+0x4ac>)
 8010992:	f006 fdc9 	bl	8017528 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	7a1b      	ldrb	r3, [r3, #8]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d009      	beq.n	80109b2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801099e:	69fb      	ldr	r3, [r7, #28]
 80109a0:	7a1a      	ldrb	r2, [r3, #8]
 80109a2:	4b41      	ldr	r3, [pc, #260]	; (8010aa8 <tcp_input+0x4a0>)
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109aa:	3301      	adds	r3, #1
 80109ac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d122      	bne.n	80109f8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80109b2:	69fb      	ldr	r3, [r7, #28]
 80109b4:	8b1a      	ldrh	r2, [r3, #24]
 80109b6:	4b3b      	ldr	r3, [pc, #236]	; (8010aa4 <tcp_input+0x49c>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	b29b      	uxth	r3, r3
 80109be:	429a      	cmp	r2, r3
 80109c0:	d11b      	bne.n	80109fa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	8ada      	ldrh	r2, [r3, #22]
 80109c6:	4b37      	ldr	r3, [pc, #220]	; (8010aa4 <tcp_input+0x49c>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	885b      	ldrh	r3, [r3, #2]
 80109cc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d113      	bne.n	80109fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	685a      	ldr	r2, [r3, #4]
 80109d6:	4b34      	ldr	r3, [pc, #208]	; (8010aa8 <tcp_input+0x4a0>)
 80109d8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80109da:	429a      	cmp	r2, r3
 80109dc:	d10d      	bne.n	80109fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80109de:	69fb      	ldr	r3, [r7, #28]
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	4b31      	ldr	r3, [pc, #196]	; (8010aa8 <tcp_input+0x4a0>)
 80109e4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d107      	bne.n	80109fa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80109ea:	69f8      	ldr	r0, [r7, #28]
 80109ec:	f000 fb56 	bl	801109c <tcp_timewait_input>
        }
        pbuf_free(p);
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f7fd ff3f 	bl	800e874 <pbuf_free>
        return;
 80109f6:	e1fd      	b.n	8010df4 <tcp_input+0x7ec>
        continue;
 80109f8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	68db      	ldr	r3, [r3, #12]
 80109fe:	61fb      	str	r3, [r7, #28]
 8010a00:	69fb      	ldr	r3, [r7, #28]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d1bc      	bne.n	8010980 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010a06:	2300      	movs	r3, #0
 8010a08:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a0a:	4b2f      	ldr	r3, [pc, #188]	; (8010ac8 <tcp_input+0x4c0>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	617b      	str	r3, [r7, #20]
 8010a10:	e02a      	b.n	8010a68 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	7a1b      	ldrb	r3, [r3, #8]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d00c      	beq.n	8010a34 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	7a1a      	ldrb	r2, [r3, #8]
 8010a1e:	4b22      	ldr	r3, [pc, #136]	; (8010aa8 <tcp_input+0x4a0>)
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a26:	3301      	adds	r3, #1
 8010a28:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d002      	beq.n	8010a34 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	61bb      	str	r3, [r7, #24]
        continue;
 8010a32:	e016      	b.n	8010a62 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	8ada      	ldrh	r2, [r3, #22]
 8010a38:	4b1a      	ldr	r3, [pc, #104]	; (8010aa4 <tcp_input+0x49c>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	885b      	ldrh	r3, [r3, #2]
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d10c      	bne.n	8010a5e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	681a      	ldr	r2, [r3, #0]
 8010a48:	4b17      	ldr	r3, [pc, #92]	; (8010aa8 <tcp_input+0x4a0>)
 8010a4a:	695b      	ldr	r3, [r3, #20]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d00f      	beq.n	8010a70 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d00d      	beq.n	8010a72 <tcp_input+0x46a>
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d009      	beq.n	8010a72 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	68db      	ldr	r3, [r3, #12]
 8010a66:	617b      	str	r3, [r7, #20]
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d1d1      	bne.n	8010a12 <tcp_input+0x40a>
 8010a6e:	e000      	b.n	8010a72 <tcp_input+0x46a>
            break;
 8010a70:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d029      	beq.n	8010acc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d00a      	beq.n	8010a94 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	68da      	ldr	r2, [r3, #12]
 8010a82:	69bb      	ldr	r3, [r7, #24]
 8010a84:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010a86:	4b10      	ldr	r3, [pc, #64]	; (8010ac8 <tcp_input+0x4c0>)
 8010a88:	681a      	ldr	r2, [r3, #0]
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010a8e:	4a0e      	ldr	r2, [pc, #56]	; (8010ac8 <tcp_input+0x4c0>)
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010a94:	6978      	ldr	r0, [r7, #20]
 8010a96:	f000 fa03 	bl	8010ea0 <tcp_listen_input>
      }
      pbuf_free(p);
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f7fd feea 	bl	800e874 <pbuf_free>
      return;
 8010aa0:	e1a8      	b.n	8010df4 <tcp_input+0x7ec>
 8010aa2:	bf00      	nop
 8010aa4:	20009734 	.word	0x20009734
 8010aa8:	2000619c 	.word	0x2000619c
 8010aac:	08019ae0 	.word	0x08019ae0
 8010ab0:	08019c0c 	.word	0x08019c0c
 8010ab4:	08019b2c 	.word	0x08019b2c
 8010ab8:	20009718 	.word	0x20009718
 8010abc:	08019c38 	.word	0x08019c38
 8010ac0:	2000971c 	.word	0x2000971c
 8010ac4:	08019c64 	.word	0x08019c64
 8010ac8:	20009714 	.word	0x20009714
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010acc:	69fb      	ldr	r3, [r7, #28]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	f000 8158 	beq.w	8010d84 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010ad4:	4b95      	ldr	r3, [pc, #596]	; (8010d2c <tcp_input+0x724>)
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	891a      	ldrh	r2, [r3, #8]
 8010ade:	4b93      	ldr	r3, [pc, #588]	; (8010d2c <tcp_input+0x724>)
 8010ae0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010ae2:	4a92      	ldr	r2, [pc, #584]	; (8010d2c <tcp_input+0x724>)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010ae8:	4b91      	ldr	r3, [pc, #580]	; (8010d30 <tcp_input+0x728>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	4a8f      	ldr	r2, [pc, #572]	; (8010d2c <tcp_input+0x724>)
 8010aee:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010af0:	4b90      	ldr	r3, [pc, #576]	; (8010d34 <tcp_input+0x72c>)
 8010af2:	2200      	movs	r2, #0
 8010af4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010af6:	4b90      	ldr	r3, [pc, #576]	; (8010d38 <tcp_input+0x730>)
 8010af8:	2200      	movs	r2, #0
 8010afa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010afc:	4b8f      	ldr	r3, [pc, #572]	; (8010d3c <tcp_input+0x734>)
 8010afe:	2200      	movs	r2, #0
 8010b00:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010b02:	4b8f      	ldr	r3, [pc, #572]	; (8010d40 <tcp_input+0x738>)
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	f003 0308 	and.w	r3, r3, #8
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d006      	beq.n	8010b1c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	7b5b      	ldrb	r3, [r3, #13]
 8010b12:	f043 0301 	orr.w	r3, r3, #1
 8010b16:	b2da      	uxtb	r2, r3
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d017      	beq.n	8010b54 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010b24:	69f8      	ldr	r0, [r7, #28]
 8010b26:	f7ff f929 	bl	800fd7c <tcp_process_refused_data>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	f113 0f0d 	cmn.w	r3, #13
 8010b30:	d007      	beq.n	8010b42 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d00c      	beq.n	8010b54 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010b3a:	4b82      	ldr	r3, [pc, #520]	; (8010d44 <tcp_input+0x73c>)
 8010b3c:	881b      	ldrh	r3, [r3, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d008      	beq.n	8010b54 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	f040 80e3 	bne.w	8010d12 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010b4c:	69f8      	ldr	r0, [r7, #28]
 8010b4e:	f003 f9ad 	bl	8013eac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010b52:	e0de      	b.n	8010d12 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010b54:	4a7c      	ldr	r2, [pc, #496]	; (8010d48 <tcp_input+0x740>)
 8010b56:	69fb      	ldr	r3, [r7, #28]
 8010b58:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010b5a:	69f8      	ldr	r0, [r7, #28]
 8010b5c:	f000 fb18 	bl	8011190 <tcp_process>
 8010b60:	4603      	mov	r3, r0
 8010b62:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010b64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b68:	f113 0f0d 	cmn.w	r3, #13
 8010b6c:	f000 80d3 	beq.w	8010d16 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010b70:	4b71      	ldr	r3, [pc, #452]	; (8010d38 <tcp_input+0x730>)
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	f003 0308 	and.w	r3, r3, #8
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d015      	beq.n	8010ba8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010b7c:	69fb      	ldr	r3, [r7, #28]
 8010b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d008      	beq.n	8010b98 <tcp_input+0x590>
 8010b86:	69fb      	ldr	r3, [r7, #28]
 8010b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b8c:	69fa      	ldr	r2, [r7, #28]
 8010b8e:	6912      	ldr	r2, [r2, #16]
 8010b90:	f06f 010d 	mvn.w	r1, #13
 8010b94:	4610      	mov	r0, r2
 8010b96:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010b98:	69f9      	ldr	r1, [r7, #28]
 8010b9a:	486c      	ldr	r0, [pc, #432]	; (8010d4c <tcp_input+0x744>)
 8010b9c:	f7ff fbbc 	bl	8010318 <tcp_pcb_remove>
        tcp_free(pcb);
 8010ba0:	69f8      	ldr	r0, [r7, #28]
 8010ba2:	f7fe f9a9 	bl	800eef8 <tcp_free>
 8010ba6:	e0da      	b.n	8010d5e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010bac:	4b63      	ldr	r3, [pc, #396]	; (8010d3c <tcp_input+0x734>)
 8010bae:	881b      	ldrh	r3, [r3, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d01d      	beq.n	8010bf0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010bb4:	4b61      	ldr	r3, [pc, #388]	; (8010d3c <tcp_input+0x734>)
 8010bb6:	881b      	ldrh	r3, [r3, #0]
 8010bb8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010bba:	69fb      	ldr	r3, [r7, #28]
 8010bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d00a      	beq.n	8010bda <tcp_input+0x5d2>
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bca:	69fa      	ldr	r2, [r7, #28]
 8010bcc:	6910      	ldr	r0, [r2, #16]
 8010bce:	89fa      	ldrh	r2, [r7, #14]
 8010bd0:	69f9      	ldr	r1, [r7, #28]
 8010bd2:	4798      	blx	r3
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	74fb      	strb	r3, [r7, #19]
 8010bd8:	e001      	b.n	8010bde <tcp_input+0x5d6>
 8010bda:	2300      	movs	r3, #0
 8010bdc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010bde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010be2:	f113 0f0d 	cmn.w	r3, #13
 8010be6:	f000 8098 	beq.w	8010d1a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010bea:	4b54      	ldr	r3, [pc, #336]	; (8010d3c <tcp_input+0x734>)
 8010bec:	2200      	movs	r2, #0
 8010bee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010bf0:	69f8      	ldr	r0, [r7, #28]
 8010bf2:	f000 f915 	bl	8010e20 <tcp_input_delayed_close>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	f040 8090 	bne.w	8010d1e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010bfe:	4b4d      	ldr	r3, [pc, #308]	; (8010d34 <tcp_input+0x72c>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d041      	beq.n	8010c8a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010c06:	69fb      	ldr	r3, [r7, #28]
 8010c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d006      	beq.n	8010c1c <tcp_input+0x614>
 8010c0e:	4b50      	ldr	r3, [pc, #320]	; (8010d50 <tcp_input+0x748>)
 8010c10:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010c14:	494f      	ldr	r1, [pc, #316]	; (8010d54 <tcp_input+0x74c>)
 8010c16:	4850      	ldr	r0, [pc, #320]	; (8010d58 <tcp_input+0x750>)
 8010c18:	f006 fc86 	bl	8017528 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010c1c:	69fb      	ldr	r3, [r7, #28]
 8010c1e:	8b5b      	ldrh	r3, [r3, #26]
 8010c20:	f003 0310 	and.w	r3, r3, #16
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d008      	beq.n	8010c3a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010c28:	4b42      	ldr	r3, [pc, #264]	; (8010d34 <tcp_input+0x72c>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fd fe21 	bl	800e874 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010c32:	69f8      	ldr	r0, [r7, #28]
 8010c34:	f7fe fc48 	bl	800f4c8 <tcp_abort>
            goto aborted;
 8010c38:	e091      	b.n	8010d5e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d00c      	beq.n	8010c5e <tcp_input+0x656>
 8010c44:	69fb      	ldr	r3, [r7, #28]
 8010c46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010c4a:	69fb      	ldr	r3, [r7, #28]
 8010c4c:	6918      	ldr	r0, [r3, #16]
 8010c4e:	4b39      	ldr	r3, [pc, #228]	; (8010d34 <tcp_input+0x72c>)
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	2300      	movs	r3, #0
 8010c54:	69f9      	ldr	r1, [r7, #28]
 8010c56:	47a0      	blx	r4
 8010c58:	4603      	mov	r3, r0
 8010c5a:	74fb      	strb	r3, [r7, #19]
 8010c5c:	e008      	b.n	8010c70 <tcp_input+0x668>
 8010c5e:	4b35      	ldr	r3, [pc, #212]	; (8010d34 <tcp_input+0x72c>)
 8010c60:	681a      	ldr	r2, [r3, #0]
 8010c62:	2300      	movs	r3, #0
 8010c64:	69f9      	ldr	r1, [r7, #28]
 8010c66:	2000      	movs	r0, #0
 8010c68:	f7ff f95e 	bl	800ff28 <tcp_recv_null>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010c70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c74:	f113 0f0d 	cmn.w	r3, #13
 8010c78:	d053      	beq.n	8010d22 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010c7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d003      	beq.n	8010c8a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010c82:	4b2c      	ldr	r3, [pc, #176]	; (8010d34 <tcp_input+0x72c>)
 8010c84:	681a      	ldr	r2, [r3, #0]
 8010c86:	69fb      	ldr	r3, [r7, #28]
 8010c88:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010c8a:	4b2b      	ldr	r3, [pc, #172]	; (8010d38 <tcp_input+0x730>)
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	f003 0320 	and.w	r3, r3, #32
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d030      	beq.n	8010cf8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010c96:	69fb      	ldr	r3, [r7, #28]
 8010c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d009      	beq.n	8010cb2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ca2:	7b5a      	ldrb	r2, [r3, #13]
 8010ca4:	69fb      	ldr	r3, [r7, #28]
 8010ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ca8:	f042 0220 	orr.w	r2, r2, #32
 8010cac:	b2d2      	uxtb	r2, r2
 8010cae:	735a      	strb	r2, [r3, #13]
 8010cb0:	e022      	b.n	8010cf8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010cb2:	69fb      	ldr	r3, [r7, #28]
 8010cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cb6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010cba:	d005      	beq.n	8010cc8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010cbc:	69fb      	ldr	r3, [r7, #28]
 8010cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	b29a      	uxth	r2, r3
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010cc8:	69fb      	ldr	r3, [r7, #28]
 8010cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d00b      	beq.n	8010cea <tcp_input+0x6e2>
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	6918      	ldr	r0, [r3, #16]
 8010cdc:	2300      	movs	r3, #0
 8010cde:	2200      	movs	r2, #0
 8010ce0:	69f9      	ldr	r1, [r7, #28]
 8010ce2:	47a0      	blx	r4
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	74fb      	strb	r3, [r7, #19]
 8010ce8:	e001      	b.n	8010cee <tcp_input+0x6e6>
 8010cea:	2300      	movs	r3, #0
 8010cec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010cee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010cf2:	f113 0f0d 	cmn.w	r3, #13
 8010cf6:	d016      	beq.n	8010d26 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010cf8:	4b13      	ldr	r3, [pc, #76]	; (8010d48 <tcp_input+0x740>)
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010cfe:	69f8      	ldr	r0, [r7, #28]
 8010d00:	f000 f88e 	bl	8010e20 <tcp_input_delayed_close>
 8010d04:	4603      	mov	r3, r0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d128      	bne.n	8010d5c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010d0a:	69f8      	ldr	r0, [r7, #28]
 8010d0c:	f002 fac8 	bl	80132a0 <tcp_output>
 8010d10:	e025      	b.n	8010d5e <tcp_input+0x756>
        goto aborted;
 8010d12:	bf00      	nop
 8010d14:	e023      	b.n	8010d5e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010d16:	bf00      	nop
 8010d18:	e021      	b.n	8010d5e <tcp_input+0x756>
              goto aborted;
 8010d1a:	bf00      	nop
 8010d1c:	e01f      	b.n	8010d5e <tcp_input+0x756>
          goto aborted;
 8010d1e:	bf00      	nop
 8010d20:	e01d      	b.n	8010d5e <tcp_input+0x756>
            goto aborted;
 8010d22:	bf00      	nop
 8010d24:	e01b      	b.n	8010d5e <tcp_input+0x756>
              goto aborted;
 8010d26:	bf00      	nop
 8010d28:	e019      	b.n	8010d5e <tcp_input+0x756>
 8010d2a:	bf00      	nop
 8010d2c:	20009724 	.word	0x20009724
 8010d30:	20009734 	.word	0x20009734
 8010d34:	20009754 	.word	0x20009754
 8010d38:	20009751 	.word	0x20009751
 8010d3c:	2000974c 	.word	0x2000974c
 8010d40:	20009750 	.word	0x20009750
 8010d44:	2000974e 	.word	0x2000974e
 8010d48:	20009758 	.word	0x20009758
 8010d4c:	20009718 	.word	0x20009718
 8010d50:	08019ae0 	.word	0x08019ae0
 8010d54:	08019c94 	.word	0x08019c94
 8010d58:	08019b2c 	.word	0x08019b2c
          goto aborted;
 8010d5c:	bf00      	nop
    tcp_input_pcb = NULL;
 8010d5e:	4b27      	ldr	r3, [pc, #156]	; (8010dfc <tcp_input+0x7f4>)
 8010d60:	2200      	movs	r2, #0
 8010d62:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010d64:	4b26      	ldr	r3, [pc, #152]	; (8010e00 <tcp_input+0x7f8>)
 8010d66:	2200      	movs	r2, #0
 8010d68:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010d6a:	4b26      	ldr	r3, [pc, #152]	; (8010e04 <tcp_input+0x7fc>)
 8010d6c:	685b      	ldr	r3, [r3, #4]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d03f      	beq.n	8010df2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010d72:	4b24      	ldr	r3, [pc, #144]	; (8010e04 <tcp_input+0x7fc>)
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7fd fd7c 	bl	800e874 <pbuf_free>
      inseg.p = NULL;
 8010d7c:	4b21      	ldr	r3, [pc, #132]	; (8010e04 <tcp_input+0x7fc>)
 8010d7e:	2200      	movs	r2, #0
 8010d80:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010d82:	e036      	b.n	8010df2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010d84:	4b20      	ldr	r3, [pc, #128]	; (8010e08 <tcp_input+0x800>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	899b      	ldrh	r3, [r3, #12]
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7fc fa13 	bl	800d1b8 <lwip_htons>
 8010d92:	4603      	mov	r3, r0
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	f003 0304 	and.w	r3, r3, #4
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d118      	bne.n	8010dd0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d9e:	4b1b      	ldr	r3, [pc, #108]	; (8010e0c <tcp_input+0x804>)
 8010da0:	6819      	ldr	r1, [r3, #0]
 8010da2:	4b1b      	ldr	r3, [pc, #108]	; (8010e10 <tcp_input+0x808>)
 8010da4:	881b      	ldrh	r3, [r3, #0]
 8010da6:	461a      	mov	r2, r3
 8010da8:	4b1a      	ldr	r3, [pc, #104]	; (8010e14 <tcp_input+0x80c>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010dae:	4b16      	ldr	r3, [pc, #88]	; (8010e08 <tcp_input+0x800>)
 8010db0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010db2:	885b      	ldrh	r3, [r3, #2]
 8010db4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010db6:	4a14      	ldr	r2, [pc, #80]	; (8010e08 <tcp_input+0x800>)
 8010db8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010dba:	8812      	ldrh	r2, [r2, #0]
 8010dbc:	b292      	uxth	r2, r2
 8010dbe:	9202      	str	r2, [sp, #8]
 8010dc0:	9301      	str	r3, [sp, #4]
 8010dc2:	4b15      	ldr	r3, [pc, #84]	; (8010e18 <tcp_input+0x810>)
 8010dc4:	9300      	str	r3, [sp, #0]
 8010dc6:	4b15      	ldr	r3, [pc, #84]	; (8010e1c <tcp_input+0x814>)
 8010dc8:	4602      	mov	r2, r0
 8010dca:	2000      	movs	r0, #0
 8010dcc:	f003 f81c 	bl	8013e08 <tcp_rst>
    pbuf_free(p);
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f7fd fd4f 	bl	800e874 <pbuf_free>
  return;
 8010dd6:	e00c      	b.n	8010df2 <tcp_input+0x7ea>
    goto dropped;
 8010dd8:	bf00      	nop
 8010dda:	e006      	b.n	8010dea <tcp_input+0x7e2>
    goto dropped;
 8010ddc:	bf00      	nop
 8010dde:	e004      	b.n	8010dea <tcp_input+0x7e2>
    goto dropped;
 8010de0:	bf00      	nop
 8010de2:	e002      	b.n	8010dea <tcp_input+0x7e2>
      goto dropped;
 8010de4:	bf00      	nop
 8010de6:	e000      	b.n	8010dea <tcp_input+0x7e2>
      goto dropped;
 8010de8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f7fd fd42 	bl	800e874 <pbuf_free>
 8010df0:	e000      	b.n	8010df4 <tcp_input+0x7ec>
  return;
 8010df2:	bf00      	nop
}
 8010df4:	3724      	adds	r7, #36	; 0x24
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd90      	pop	{r4, r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	20009758 	.word	0x20009758
 8010e00:	20009754 	.word	0x20009754
 8010e04:	20009724 	.word	0x20009724
 8010e08:	20009734 	.word	0x20009734
 8010e0c:	20009748 	.word	0x20009748
 8010e10:	2000974e 	.word	0x2000974e
 8010e14:	20009744 	.word	0x20009744
 8010e18:	200061ac 	.word	0x200061ac
 8010e1c:	200061b0 	.word	0x200061b0

08010e20 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d106      	bne.n	8010e3c <tcp_input_delayed_close+0x1c>
 8010e2e:	4b17      	ldr	r3, [pc, #92]	; (8010e8c <tcp_input_delayed_close+0x6c>)
 8010e30:	f240 225a 	movw	r2, #602	; 0x25a
 8010e34:	4916      	ldr	r1, [pc, #88]	; (8010e90 <tcp_input_delayed_close+0x70>)
 8010e36:	4817      	ldr	r0, [pc, #92]	; (8010e94 <tcp_input_delayed_close+0x74>)
 8010e38:	f006 fb76 	bl	8017528 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010e3c:	4b16      	ldr	r3, [pc, #88]	; (8010e98 <tcp_input_delayed_close+0x78>)
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	f003 0310 	and.w	r3, r3, #16
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d01c      	beq.n	8010e82 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	8b5b      	ldrh	r3, [r3, #26]
 8010e4c:	f003 0310 	and.w	r3, r3, #16
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d10d      	bne.n	8010e70 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d008      	beq.n	8010e70 <tcp_input_delayed_close+0x50>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	6912      	ldr	r2, [r2, #16]
 8010e68:	f06f 010e 	mvn.w	r1, #14
 8010e6c:	4610      	mov	r0, r2
 8010e6e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010e70:	6879      	ldr	r1, [r7, #4]
 8010e72:	480a      	ldr	r0, [pc, #40]	; (8010e9c <tcp_input_delayed_close+0x7c>)
 8010e74:	f7ff fa50 	bl	8010318 <tcp_pcb_remove>
    tcp_free(pcb);
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f7fe f83d 	bl	800eef8 <tcp_free>
    return 1;
 8010e7e:	2301      	movs	r3, #1
 8010e80:	e000      	b.n	8010e84 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010e82:	2300      	movs	r3, #0
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3708      	adds	r7, #8
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}
 8010e8c:	08019ae0 	.word	0x08019ae0
 8010e90:	08019cb0 	.word	0x08019cb0
 8010e94:	08019b2c 	.word	0x08019b2c
 8010e98:	20009751 	.word	0x20009751
 8010e9c:	20009718 	.word	0x20009718

08010ea0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010ea0:	b590      	push	{r4, r7, lr}
 8010ea2:	b08b      	sub	sp, #44	; 0x2c
 8010ea4:	af04      	add	r7, sp, #16
 8010ea6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010ea8:	4b6f      	ldr	r3, [pc, #444]	; (8011068 <tcp_listen_input+0x1c8>)
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	f003 0304 	and.w	r3, r3, #4
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f040 80d2 	bne.w	801105a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d106      	bne.n	8010eca <tcp_listen_input+0x2a>
 8010ebc:	4b6b      	ldr	r3, [pc, #428]	; (801106c <tcp_listen_input+0x1cc>)
 8010ebe:	f240 2281 	movw	r2, #641	; 0x281
 8010ec2:	496b      	ldr	r1, [pc, #428]	; (8011070 <tcp_listen_input+0x1d0>)
 8010ec4:	486b      	ldr	r0, [pc, #428]	; (8011074 <tcp_listen_input+0x1d4>)
 8010ec6:	f006 fb2f 	bl	8017528 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010eca:	4b67      	ldr	r3, [pc, #412]	; (8011068 <tcp_listen_input+0x1c8>)
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	f003 0310 	and.w	r3, r3, #16
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d019      	beq.n	8010f0a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ed6:	4b68      	ldr	r3, [pc, #416]	; (8011078 <tcp_listen_input+0x1d8>)
 8010ed8:	6819      	ldr	r1, [r3, #0]
 8010eda:	4b68      	ldr	r3, [pc, #416]	; (801107c <tcp_listen_input+0x1dc>)
 8010edc:	881b      	ldrh	r3, [r3, #0]
 8010ede:	461a      	mov	r2, r3
 8010ee0:	4b67      	ldr	r3, [pc, #412]	; (8011080 <tcp_listen_input+0x1e0>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ee6:	4b67      	ldr	r3, [pc, #412]	; (8011084 <tcp_listen_input+0x1e4>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010eea:	885b      	ldrh	r3, [r3, #2]
 8010eec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010eee:	4a65      	ldr	r2, [pc, #404]	; (8011084 <tcp_listen_input+0x1e4>)
 8010ef0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ef2:	8812      	ldrh	r2, [r2, #0]
 8010ef4:	b292      	uxth	r2, r2
 8010ef6:	9202      	str	r2, [sp, #8]
 8010ef8:	9301      	str	r3, [sp, #4]
 8010efa:	4b63      	ldr	r3, [pc, #396]	; (8011088 <tcp_listen_input+0x1e8>)
 8010efc:	9300      	str	r3, [sp, #0]
 8010efe:	4b63      	ldr	r3, [pc, #396]	; (801108c <tcp_listen_input+0x1ec>)
 8010f00:	4602      	mov	r2, r0
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f002 ff80 	bl	8013e08 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010f08:	e0a9      	b.n	801105e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010f0a:	4b57      	ldr	r3, [pc, #348]	; (8011068 <tcp_listen_input+0x1c8>)
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	f003 0302 	and.w	r3, r3, #2
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	f000 80a3 	beq.w	801105e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	7d5b      	ldrb	r3, [r3, #21]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7ff f927 	bl	8010170 <tcp_alloc>
 8010f22:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d111      	bne.n	8010f4e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	699b      	ldr	r3, [r3, #24]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d00a      	beq.n	8010f48 <tcp_listen_input+0xa8>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	699b      	ldr	r3, [r3, #24]
 8010f36:	687a      	ldr	r2, [r7, #4]
 8010f38:	6910      	ldr	r0, [r2, #16]
 8010f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f3e:	2100      	movs	r1, #0
 8010f40:	4798      	blx	r3
 8010f42:	4603      	mov	r3, r0
 8010f44:	73bb      	strb	r3, [r7, #14]
      return;
 8010f46:	e08b      	b.n	8011060 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010f48:	23f0      	movs	r3, #240	; 0xf0
 8010f4a:	73bb      	strb	r3, [r7, #14]
      return;
 8010f4c:	e088      	b.n	8011060 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010f4e:	4b50      	ldr	r3, [pc, #320]	; (8011090 <tcp_listen_input+0x1f0>)
 8010f50:	695a      	ldr	r2, [r3, #20]
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010f56:	4b4e      	ldr	r3, [pc, #312]	; (8011090 <tcp_listen_input+0x1f0>)
 8010f58:	691a      	ldr	r2, [r3, #16]
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	8ada      	ldrh	r2, [r3, #22]
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010f66:	4b47      	ldr	r3, [pc, #284]	; (8011084 <tcp_listen_input+0x1e4>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	881b      	ldrh	r3, [r3, #0]
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	2203      	movs	r2, #3
 8010f76:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010f78:	4b41      	ldr	r3, [pc, #260]	; (8011080 <tcp_listen_input+0x1e0>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	1c5a      	adds	r2, r3, #1
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010f8a:	6978      	ldr	r0, [r7, #20]
 8010f8c:	f7ff fa58 	bl	8010440 <tcp_next_iss>
 8010f90:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	693a      	ldr	r2, [r7, #16]
 8010f96:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	693a      	ldr	r2, [r7, #16]
 8010f9c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	693a      	ldr	r2, [r7, #16]
 8010fa2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	693a      	ldr	r2, [r7, #16]
 8010fa8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010faa:	4b35      	ldr	r3, [pc, #212]	; (8011080 <tcp_listen_input+0x1e0>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	1e5a      	subs	r2, r3, #1
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	691a      	ldr	r2, [r3, #16]
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	687a      	ldr	r2, [r7, #4]
 8010fc0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	7a5b      	ldrb	r3, [r3, #9]
 8010fc6:	f003 030c 	and.w	r3, r3, #12
 8010fca:	b2da      	uxtb	r2, r3
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	7a1a      	ldrb	r2, [r3, #8]
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010fd8:	4b2e      	ldr	r3, [pc, #184]	; (8011094 <tcp_listen_input+0x1f4>)
 8010fda:	681a      	ldr	r2, [r3, #0]
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	60da      	str	r2, [r3, #12]
 8010fe0:	4a2c      	ldr	r2, [pc, #176]	; (8011094 <tcp_listen_input+0x1f4>)
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	6013      	str	r3, [r2, #0]
 8010fe6:	f003 f8d1 	bl	801418c <tcp_timer_needed>
 8010fea:	4b2b      	ldr	r3, [pc, #172]	; (8011098 <tcp_listen_input+0x1f8>)
 8010fec:	2201      	movs	r2, #1
 8010fee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010ff0:	6978      	ldr	r0, [r7, #20]
 8010ff2:	f001 fd8f 	bl	8012b14 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010ff6:	4b23      	ldr	r3, [pc, #140]	; (8011084 <tcp_listen_input+0x1e4>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	89db      	ldrh	r3, [r3, #14]
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	3304      	adds	r3, #4
 8011018:	4618      	mov	r0, r3
 801101a:	f005 f84f 	bl	80160bc <ip4_route>
 801101e:	4601      	mov	r1, r0
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	3304      	adds	r3, #4
 8011024:	461a      	mov	r2, r3
 8011026:	4620      	mov	r0, r4
 8011028:	f7ff fa30 	bl	801048c <tcp_eff_send_mss_netif>
 801102c:	4603      	mov	r3, r0
 801102e:	461a      	mov	r2, r3
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011034:	2112      	movs	r1, #18
 8011036:	6978      	ldr	r0, [r7, #20]
 8011038:	f002 f844 	bl	80130c4 <tcp_enqueue_flags>
 801103c:	4603      	mov	r3, r0
 801103e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d004      	beq.n	8011052 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011048:	2100      	movs	r1, #0
 801104a:	6978      	ldr	r0, [r7, #20]
 801104c:	f7fe f97e 	bl	800f34c <tcp_abandon>
      return;
 8011050:	e006      	b.n	8011060 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011052:	6978      	ldr	r0, [r7, #20]
 8011054:	f002 f924 	bl	80132a0 <tcp_output>
  return;
 8011058:	e001      	b.n	801105e <tcp_listen_input+0x1be>
    return;
 801105a:	bf00      	nop
 801105c:	e000      	b.n	8011060 <tcp_listen_input+0x1c0>
  return;
 801105e:	bf00      	nop
}
 8011060:	371c      	adds	r7, #28
 8011062:	46bd      	mov	sp, r7
 8011064:	bd90      	pop	{r4, r7, pc}
 8011066:	bf00      	nop
 8011068:	20009750 	.word	0x20009750
 801106c:	08019ae0 	.word	0x08019ae0
 8011070:	08019cd8 	.word	0x08019cd8
 8011074:	08019b2c 	.word	0x08019b2c
 8011078:	20009748 	.word	0x20009748
 801107c:	2000974e 	.word	0x2000974e
 8011080:	20009744 	.word	0x20009744
 8011084:	20009734 	.word	0x20009734
 8011088:	200061ac 	.word	0x200061ac
 801108c:	200061b0 	.word	0x200061b0
 8011090:	2000619c 	.word	0x2000619c
 8011094:	20009718 	.word	0x20009718
 8011098:	20009720 	.word	0x20009720

0801109c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b086      	sub	sp, #24
 80110a0:	af04      	add	r7, sp, #16
 80110a2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80110a4:	4b2f      	ldr	r3, [pc, #188]	; (8011164 <tcp_timewait_input+0xc8>)
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	f003 0304 	and.w	r3, r3, #4
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d153      	bne.n	8011158 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d106      	bne.n	80110c4 <tcp_timewait_input+0x28>
 80110b6:	4b2c      	ldr	r3, [pc, #176]	; (8011168 <tcp_timewait_input+0xcc>)
 80110b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80110bc:	492b      	ldr	r1, [pc, #172]	; (801116c <tcp_timewait_input+0xd0>)
 80110be:	482c      	ldr	r0, [pc, #176]	; (8011170 <tcp_timewait_input+0xd4>)
 80110c0:	f006 fa32 	bl	8017528 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80110c4:	4b27      	ldr	r3, [pc, #156]	; (8011164 <tcp_timewait_input+0xc8>)
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	f003 0302 	and.w	r3, r3, #2
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d02a      	beq.n	8011126 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80110d0:	4b28      	ldr	r3, [pc, #160]	; (8011174 <tcp_timewait_input+0xd8>)
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d8:	1ad3      	subs	r3, r2, r3
 80110da:	2b00      	cmp	r3, #0
 80110dc:	db2d      	blt.n	801113a <tcp_timewait_input+0x9e>
 80110de:	4b25      	ldr	r3, [pc, #148]	; (8011174 <tcp_timewait_input+0xd8>)
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80110ea:	440b      	add	r3, r1
 80110ec:	1ad3      	subs	r3, r2, r3
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	dc23      	bgt.n	801113a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110f2:	4b21      	ldr	r3, [pc, #132]	; (8011178 <tcp_timewait_input+0xdc>)
 80110f4:	6819      	ldr	r1, [r3, #0]
 80110f6:	4b21      	ldr	r3, [pc, #132]	; (801117c <tcp_timewait_input+0xe0>)
 80110f8:	881b      	ldrh	r3, [r3, #0]
 80110fa:	461a      	mov	r2, r3
 80110fc:	4b1d      	ldr	r3, [pc, #116]	; (8011174 <tcp_timewait_input+0xd8>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011102:	4b1f      	ldr	r3, [pc, #124]	; (8011180 <tcp_timewait_input+0xe4>)
 8011104:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011106:	885b      	ldrh	r3, [r3, #2]
 8011108:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801110a:	4a1d      	ldr	r2, [pc, #116]	; (8011180 <tcp_timewait_input+0xe4>)
 801110c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801110e:	8812      	ldrh	r2, [r2, #0]
 8011110:	b292      	uxth	r2, r2
 8011112:	9202      	str	r2, [sp, #8]
 8011114:	9301      	str	r3, [sp, #4]
 8011116:	4b1b      	ldr	r3, [pc, #108]	; (8011184 <tcp_timewait_input+0xe8>)
 8011118:	9300      	str	r3, [sp, #0]
 801111a:	4b1b      	ldr	r3, [pc, #108]	; (8011188 <tcp_timewait_input+0xec>)
 801111c:	4602      	mov	r2, r0
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f002 fe72 	bl	8013e08 <tcp_rst>
      return;
 8011124:	e01b      	b.n	801115e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011126:	4b0f      	ldr	r3, [pc, #60]	; (8011164 <tcp_timewait_input+0xc8>)
 8011128:	781b      	ldrb	r3, [r3, #0]
 801112a:	f003 0301 	and.w	r3, r3, #1
 801112e:	2b00      	cmp	r3, #0
 8011130:	d003      	beq.n	801113a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011132:	4b16      	ldr	r3, [pc, #88]	; (801118c <tcp_timewait_input+0xf0>)
 8011134:	681a      	ldr	r2, [r3, #0]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801113a:	4b10      	ldr	r3, [pc, #64]	; (801117c <tcp_timewait_input+0xe0>)
 801113c:	881b      	ldrh	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d00c      	beq.n	801115c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	8b5b      	ldrh	r3, [r3, #26]
 8011146:	f043 0302 	orr.w	r3, r3, #2
 801114a:	b29a      	uxth	r2, r3
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f002 f8a5 	bl	80132a0 <tcp_output>
  }
  return;
 8011156:	e001      	b.n	801115c <tcp_timewait_input+0xc0>
    return;
 8011158:	bf00      	nop
 801115a:	e000      	b.n	801115e <tcp_timewait_input+0xc2>
  return;
 801115c:	bf00      	nop
}
 801115e:	3708      	adds	r7, #8
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}
 8011164:	20009750 	.word	0x20009750
 8011168:	08019ae0 	.word	0x08019ae0
 801116c:	08019cf8 	.word	0x08019cf8
 8011170:	08019b2c 	.word	0x08019b2c
 8011174:	20009744 	.word	0x20009744
 8011178:	20009748 	.word	0x20009748
 801117c:	2000974e 	.word	0x2000974e
 8011180:	20009734 	.word	0x20009734
 8011184:	200061ac 	.word	0x200061ac
 8011188:	200061b0 	.word	0x200061b0
 801118c:	2000970c 	.word	0x2000970c

08011190 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011190:	b590      	push	{r4, r7, lr}
 8011192:	b08d      	sub	sp, #52	; 0x34
 8011194:	af04      	add	r7, sp, #16
 8011196:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011198:	2300      	movs	r3, #0
 801119a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801119c:	2300      	movs	r3, #0
 801119e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d106      	bne.n	80111b4 <tcp_process+0x24>
 80111a6:	4b9d      	ldr	r3, [pc, #628]	; (801141c <tcp_process+0x28c>)
 80111a8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80111ac:	499c      	ldr	r1, [pc, #624]	; (8011420 <tcp_process+0x290>)
 80111ae:	489d      	ldr	r0, [pc, #628]	; (8011424 <tcp_process+0x294>)
 80111b0:	f006 f9ba 	bl	8017528 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80111b4:	4b9c      	ldr	r3, [pc, #624]	; (8011428 <tcp_process+0x298>)
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	f003 0304 	and.w	r3, r3, #4
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d04e      	beq.n	801125e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	7d1b      	ldrb	r3, [r3, #20]
 80111c4:	2b02      	cmp	r3, #2
 80111c6:	d108      	bne.n	80111da <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111cc:	4b97      	ldr	r3, [pc, #604]	; (801142c <tcp_process+0x29c>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d123      	bne.n	801121c <tcp_process+0x8c>
        acceptable = 1;
 80111d4:	2301      	movs	r3, #1
 80111d6:	76fb      	strb	r3, [r7, #27]
 80111d8:	e020      	b.n	801121c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111de:	4b94      	ldr	r3, [pc, #592]	; (8011430 <tcp_process+0x2a0>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d102      	bne.n	80111ec <tcp_process+0x5c>
        acceptable = 1;
 80111e6:	2301      	movs	r3, #1
 80111e8:	76fb      	strb	r3, [r7, #27]
 80111ea:	e017      	b.n	801121c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80111ec:	4b90      	ldr	r3, [pc, #576]	; (8011430 <tcp_process+0x2a0>)
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f4:	1ad3      	subs	r3, r2, r3
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	db10      	blt.n	801121c <tcp_process+0x8c>
 80111fa:	4b8d      	ldr	r3, [pc, #564]	; (8011430 <tcp_process+0x2a0>)
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011202:	6879      	ldr	r1, [r7, #4]
 8011204:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011206:	440b      	add	r3, r1
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	2b00      	cmp	r3, #0
 801120c:	dc06      	bgt.n	801121c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	8b5b      	ldrh	r3, [r3, #26]
 8011212:	f043 0302 	orr.w	r3, r3, #2
 8011216:	b29a      	uxth	r2, r3
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801121c:	7efb      	ldrb	r3, [r7, #27]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d01b      	beq.n	801125a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	7d1b      	ldrb	r3, [r3, #20]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d106      	bne.n	8011238 <tcp_process+0xa8>
 801122a:	4b7c      	ldr	r3, [pc, #496]	; (801141c <tcp_process+0x28c>)
 801122c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011230:	4980      	ldr	r1, [pc, #512]	; (8011434 <tcp_process+0x2a4>)
 8011232:	487c      	ldr	r0, [pc, #496]	; (8011424 <tcp_process+0x294>)
 8011234:	f006 f978 	bl	8017528 <iprintf>
      recv_flags |= TF_RESET;
 8011238:	4b7f      	ldr	r3, [pc, #508]	; (8011438 <tcp_process+0x2a8>)
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	f043 0308 	orr.w	r3, r3, #8
 8011240:	b2da      	uxtb	r2, r3
 8011242:	4b7d      	ldr	r3, [pc, #500]	; (8011438 <tcp_process+0x2a8>)
 8011244:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	8b5b      	ldrh	r3, [r3, #26]
 801124a:	f023 0301 	bic.w	r3, r3, #1
 801124e:	b29a      	uxth	r2, r3
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011254:	f06f 030d 	mvn.w	r3, #13
 8011258:	e37a      	b.n	8011950 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801125a:	2300      	movs	r3, #0
 801125c:	e378      	b.n	8011950 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801125e:	4b72      	ldr	r3, [pc, #456]	; (8011428 <tcp_process+0x298>)
 8011260:	781b      	ldrb	r3, [r3, #0]
 8011262:	f003 0302 	and.w	r3, r3, #2
 8011266:	2b00      	cmp	r3, #0
 8011268:	d010      	beq.n	801128c <tcp_process+0xfc>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	7d1b      	ldrb	r3, [r3, #20]
 801126e:	2b02      	cmp	r3, #2
 8011270:	d00c      	beq.n	801128c <tcp_process+0xfc>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	7d1b      	ldrb	r3, [r3, #20]
 8011276:	2b03      	cmp	r3, #3
 8011278:	d008      	beq.n	801128c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	8b5b      	ldrh	r3, [r3, #26]
 801127e:	f043 0302 	orr.w	r3, r3, #2
 8011282:	b29a      	uxth	r2, r3
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011288:	2300      	movs	r3, #0
 801128a:	e361      	b.n	8011950 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	8b5b      	ldrh	r3, [r3, #26]
 8011290:	f003 0310 	and.w	r3, r3, #16
 8011294:	2b00      	cmp	r3, #0
 8011296:	d103      	bne.n	80112a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011298:	4b68      	ldr	r3, [pc, #416]	; (801143c <tcp_process+0x2ac>)
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2200      	movs	r2, #0
 80112a4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2200      	movs	r2, #0
 80112ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f001 fc2f 	bl	8012b14 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	7d1b      	ldrb	r3, [r3, #20]
 80112ba:	3b02      	subs	r3, #2
 80112bc:	2b07      	cmp	r3, #7
 80112be:	f200 8337 	bhi.w	8011930 <tcp_process+0x7a0>
 80112c2:	a201      	add	r2, pc, #4	; (adr r2, 80112c8 <tcp_process+0x138>)
 80112c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c8:	080112e9 	.word	0x080112e9
 80112cc:	08011519 	.word	0x08011519
 80112d0:	08011691 	.word	0x08011691
 80112d4:	080116bb 	.word	0x080116bb
 80112d8:	080117df 	.word	0x080117df
 80112dc:	08011691 	.word	0x08011691
 80112e0:	0801186b 	.word	0x0801186b
 80112e4:	080118fb 	.word	0x080118fb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80112e8:	4b4f      	ldr	r3, [pc, #316]	; (8011428 <tcp_process+0x298>)
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	f003 0310 	and.w	r3, r3, #16
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	f000 80e4 	beq.w	80114be <tcp_process+0x32e>
 80112f6:	4b4c      	ldr	r3, [pc, #304]	; (8011428 <tcp_process+0x298>)
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	f003 0302 	and.w	r3, r3, #2
 80112fe:	2b00      	cmp	r3, #0
 8011300:	f000 80dd 	beq.w	80114be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011308:	1c5a      	adds	r2, r3, #1
 801130a:	4b48      	ldr	r3, [pc, #288]	; (801142c <tcp_process+0x29c>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	429a      	cmp	r2, r3
 8011310:	f040 80d5 	bne.w	80114be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011314:	4b46      	ldr	r3, [pc, #280]	; (8011430 <tcp_process+0x2a0>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	1c5a      	adds	r2, r3, #1
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011326:	4b41      	ldr	r3, [pc, #260]	; (801142c <tcp_process+0x29c>)
 8011328:	681a      	ldr	r2, [r3, #0]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801132e:	4b44      	ldr	r3, [pc, #272]	; (8011440 <tcp_process+0x2b0>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	89db      	ldrh	r3, [r3, #14]
 8011334:	b29a      	uxth	r2, r3
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011348:	4b39      	ldr	r3, [pc, #228]	; (8011430 <tcp_process+0x2a0>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	1e5a      	subs	r2, r3, #1
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2204      	movs	r2, #4
 8011356:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	3304      	adds	r3, #4
 8011360:	4618      	mov	r0, r3
 8011362:	f004 feab 	bl	80160bc <ip4_route>
 8011366:	4601      	mov	r1, r0
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	3304      	adds	r3, #4
 801136c:	461a      	mov	r2, r3
 801136e:	4620      	mov	r0, r4
 8011370:	f7ff f88c 	bl	801048c <tcp_eff_send_mss_netif>
 8011374:	4603      	mov	r3, r0
 8011376:	461a      	mov	r2, r3
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011380:	009a      	lsls	r2, r3, #2
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011386:	005b      	lsls	r3, r3, #1
 8011388:	f241 111c 	movw	r1, #4380	; 0x111c
 801138c:	428b      	cmp	r3, r1
 801138e:	bf38      	it	cc
 8011390:	460b      	movcc	r3, r1
 8011392:	429a      	cmp	r2, r3
 8011394:	d204      	bcs.n	80113a0 <tcp_process+0x210>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801139a:	009b      	lsls	r3, r3, #2
 801139c:	b29b      	uxth	r3, r3
 801139e:	e00d      	b.n	80113bc <tcp_process+0x22c>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113a4:	005b      	lsls	r3, r3, #1
 80113a6:	f241 121c 	movw	r2, #4380	; 0x111c
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d904      	bls.n	80113b8 <tcp_process+0x228>
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113b2:	005b      	lsls	r3, r3, #1
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	e001      	b.n	80113bc <tcp_process+0x22c>
 80113b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80113bc:	687a      	ldr	r2, [r7, #4]
 80113be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d106      	bne.n	80113da <tcp_process+0x24a>
 80113cc:	4b13      	ldr	r3, [pc, #76]	; (801141c <tcp_process+0x28c>)
 80113ce:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80113d2:	491c      	ldr	r1, [pc, #112]	; (8011444 <tcp_process+0x2b4>)
 80113d4:	4813      	ldr	r0, [pc, #76]	; (8011424 <tcp_process+0x294>)
 80113d6:	f006 f8a7 	bl	8017528 <iprintf>
        --pcb->snd_queuelen;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113e0:	3b01      	subs	r3, #1
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113ee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d12a      	bne.n	801144c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113fa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d106      	bne.n	8011410 <tcp_process+0x280>
 8011402:	4b06      	ldr	r3, [pc, #24]	; (801141c <tcp_process+0x28c>)
 8011404:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011408:	490f      	ldr	r1, [pc, #60]	; (8011448 <tcp_process+0x2b8>)
 801140a:	4806      	ldr	r0, [pc, #24]	; (8011424 <tcp_process+0x294>)
 801140c:	f006 f88c 	bl	8017528 <iprintf>
          pcb->unsent = rseg->next;
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	66da      	str	r2, [r3, #108]	; 0x6c
 8011418:	e01c      	b.n	8011454 <tcp_process+0x2c4>
 801141a:	bf00      	nop
 801141c:	08019ae0 	.word	0x08019ae0
 8011420:	08019d18 	.word	0x08019d18
 8011424:	08019b2c 	.word	0x08019b2c
 8011428:	20009750 	.word	0x20009750
 801142c:	20009748 	.word	0x20009748
 8011430:	20009744 	.word	0x20009744
 8011434:	08019d34 	.word	0x08019d34
 8011438:	20009751 	.word	0x20009751
 801143c:	2000970c 	.word	0x2000970c
 8011440:	20009734 	.word	0x20009734
 8011444:	08019d54 	.word	0x08019d54
 8011448:	08019d6c 	.word	0x08019d6c
        } else {
          pcb->unacked = rseg->next;
 801144c:	69fb      	ldr	r3, [r7, #28]
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011454:	69f8      	ldr	r0, [r7, #28]
 8011456:	f7fe fd22 	bl	800fe9e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801145e:	2b00      	cmp	r3, #0
 8011460:	d104      	bne.n	801146c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011468:	861a      	strh	r2, [r3, #48]	; 0x30
 801146a:	e006      	b.n	801147a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2200      	movs	r2, #0
 8011470:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2200      	movs	r2, #0
 8011476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011480:	2b00      	cmp	r3, #0
 8011482:	d00a      	beq.n	801149a <tcp_process+0x30a>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801148a:	687a      	ldr	r2, [r7, #4]
 801148c:	6910      	ldr	r0, [r2, #16]
 801148e:	2200      	movs	r2, #0
 8011490:	6879      	ldr	r1, [r7, #4]
 8011492:	4798      	blx	r3
 8011494:	4603      	mov	r3, r0
 8011496:	76bb      	strb	r3, [r7, #26]
 8011498:	e001      	b.n	801149e <tcp_process+0x30e>
 801149a:	2300      	movs	r3, #0
 801149c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801149e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80114a2:	f113 0f0d 	cmn.w	r3, #13
 80114a6:	d102      	bne.n	80114ae <tcp_process+0x31e>
          return ERR_ABRT;
 80114a8:	f06f 030c 	mvn.w	r3, #12
 80114ac:	e250      	b.n	8011950 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	8b5b      	ldrh	r3, [r3, #26]
 80114b2:	f043 0302 	orr.w	r3, r3, #2
 80114b6:	b29a      	uxth	r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80114bc:	e23a      	b.n	8011934 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80114be:	4b98      	ldr	r3, [pc, #608]	; (8011720 <tcp_process+0x590>)
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	f003 0310 	and.w	r3, r3, #16
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	f000 8234 	beq.w	8011934 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114cc:	4b95      	ldr	r3, [pc, #596]	; (8011724 <tcp_process+0x594>)
 80114ce:	6819      	ldr	r1, [r3, #0]
 80114d0:	4b95      	ldr	r3, [pc, #596]	; (8011728 <tcp_process+0x598>)
 80114d2:	881b      	ldrh	r3, [r3, #0]
 80114d4:	461a      	mov	r2, r3
 80114d6:	4b95      	ldr	r3, [pc, #596]	; (801172c <tcp_process+0x59c>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114dc:	4b94      	ldr	r3, [pc, #592]	; (8011730 <tcp_process+0x5a0>)
 80114de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114e0:	885b      	ldrh	r3, [r3, #2]
 80114e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114e4:	4a92      	ldr	r2, [pc, #584]	; (8011730 <tcp_process+0x5a0>)
 80114e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114e8:	8812      	ldrh	r2, [r2, #0]
 80114ea:	b292      	uxth	r2, r2
 80114ec:	9202      	str	r2, [sp, #8]
 80114ee:	9301      	str	r3, [sp, #4]
 80114f0:	4b90      	ldr	r3, [pc, #576]	; (8011734 <tcp_process+0x5a4>)
 80114f2:	9300      	str	r3, [sp, #0]
 80114f4:	4b90      	ldr	r3, [pc, #576]	; (8011738 <tcp_process+0x5a8>)
 80114f6:	4602      	mov	r2, r0
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f002 fc85 	bl	8013e08 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011504:	2b05      	cmp	r3, #5
 8011506:	f200 8215 	bhi.w	8011934 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2200      	movs	r2, #0
 801150e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f002 fa4f 	bl	80139b4 <tcp_rexmit_rto>
      break;
 8011516:	e20d      	b.n	8011934 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011518:	4b81      	ldr	r3, [pc, #516]	; (8011720 <tcp_process+0x590>)
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	f003 0310 	and.w	r3, r3, #16
 8011520:	2b00      	cmp	r3, #0
 8011522:	f000 80a1 	beq.w	8011668 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011526:	4b7f      	ldr	r3, [pc, #508]	; (8011724 <tcp_process+0x594>)
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	3b01      	subs	r3, #1
 8011532:	2b00      	cmp	r3, #0
 8011534:	db7e      	blt.n	8011634 <tcp_process+0x4a4>
 8011536:	4b7b      	ldr	r3, [pc, #492]	; (8011724 <tcp_process+0x594>)
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801153e:	1ad3      	subs	r3, r2, r3
 8011540:	2b00      	cmp	r3, #0
 8011542:	dc77      	bgt.n	8011634 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2204      	movs	r2, #4
 8011548:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801154e:	2b00      	cmp	r3, #0
 8011550:	d102      	bne.n	8011558 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011552:	23fa      	movs	r3, #250	; 0xfa
 8011554:	76bb      	strb	r3, [r7, #26]
 8011556:	e01d      	b.n	8011594 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801155c:	699b      	ldr	r3, [r3, #24]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d106      	bne.n	8011570 <tcp_process+0x3e0>
 8011562:	4b76      	ldr	r3, [pc, #472]	; (801173c <tcp_process+0x5ac>)
 8011564:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011568:	4975      	ldr	r1, [pc, #468]	; (8011740 <tcp_process+0x5b0>)
 801156a:	4876      	ldr	r0, [pc, #472]	; (8011744 <tcp_process+0x5b4>)
 801156c:	f005 ffdc 	bl	8017528 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011574:	699b      	ldr	r3, [r3, #24]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d00a      	beq.n	8011590 <tcp_process+0x400>
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801157e:	699b      	ldr	r3, [r3, #24]
 8011580:	687a      	ldr	r2, [r7, #4]
 8011582:	6910      	ldr	r0, [r2, #16]
 8011584:	2200      	movs	r2, #0
 8011586:	6879      	ldr	r1, [r7, #4]
 8011588:	4798      	blx	r3
 801158a:	4603      	mov	r3, r0
 801158c:	76bb      	strb	r3, [r7, #26]
 801158e:	e001      	b.n	8011594 <tcp_process+0x404>
 8011590:	23f0      	movs	r3, #240	; 0xf0
 8011592:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011594:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d00a      	beq.n	80115b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801159c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80115a0:	f113 0f0d 	cmn.w	r3, #13
 80115a4:	d002      	beq.n	80115ac <tcp_process+0x41c>
              tcp_abort(pcb);
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f7fd ff8e 	bl	800f4c8 <tcp_abort>
            }
            return ERR_ABRT;
 80115ac:	f06f 030c 	mvn.w	r3, #12
 80115b0:	e1ce      	b.n	8011950 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f000 fae0 	bl	8011b78 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80115b8:	4b63      	ldr	r3, [pc, #396]	; (8011748 <tcp_process+0x5b8>)
 80115ba:	881b      	ldrh	r3, [r3, #0]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d005      	beq.n	80115cc <tcp_process+0x43c>
            recv_acked--;
 80115c0:	4b61      	ldr	r3, [pc, #388]	; (8011748 <tcp_process+0x5b8>)
 80115c2:	881b      	ldrh	r3, [r3, #0]
 80115c4:	3b01      	subs	r3, #1
 80115c6:	b29a      	uxth	r2, r3
 80115c8:	4b5f      	ldr	r3, [pc, #380]	; (8011748 <tcp_process+0x5b8>)
 80115ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115d0:	009a      	lsls	r2, r3, #2
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115d6:	005b      	lsls	r3, r3, #1
 80115d8:	f241 111c 	movw	r1, #4380	; 0x111c
 80115dc:	428b      	cmp	r3, r1
 80115de:	bf38      	it	cc
 80115e0:	460b      	movcc	r3, r1
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d204      	bcs.n	80115f0 <tcp_process+0x460>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115ea:	009b      	lsls	r3, r3, #2
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	e00d      	b.n	801160c <tcp_process+0x47c>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115f4:	005b      	lsls	r3, r3, #1
 80115f6:	f241 121c 	movw	r2, #4380	; 0x111c
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d904      	bls.n	8011608 <tcp_process+0x478>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011602:	005b      	lsls	r3, r3, #1
 8011604:	b29b      	uxth	r3, r3
 8011606:	e001      	b.n	801160c <tcp_process+0x47c>
 8011608:	f241 131c 	movw	r3, #4380	; 0x111c
 801160c:	687a      	ldr	r2, [r7, #4]
 801160e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011612:	4b4e      	ldr	r3, [pc, #312]	; (801174c <tcp_process+0x5bc>)
 8011614:	781b      	ldrb	r3, [r3, #0]
 8011616:	f003 0320 	and.w	r3, r3, #32
 801161a:	2b00      	cmp	r3, #0
 801161c:	d037      	beq.n	801168e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	8b5b      	ldrh	r3, [r3, #26]
 8011622:	f043 0302 	orr.w	r3, r3, #2
 8011626:	b29a      	uxth	r2, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2207      	movs	r2, #7
 8011630:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011632:	e02c      	b.n	801168e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011634:	4b3b      	ldr	r3, [pc, #236]	; (8011724 <tcp_process+0x594>)
 8011636:	6819      	ldr	r1, [r3, #0]
 8011638:	4b3b      	ldr	r3, [pc, #236]	; (8011728 <tcp_process+0x598>)
 801163a:	881b      	ldrh	r3, [r3, #0]
 801163c:	461a      	mov	r2, r3
 801163e:	4b3b      	ldr	r3, [pc, #236]	; (801172c <tcp_process+0x59c>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011644:	4b3a      	ldr	r3, [pc, #232]	; (8011730 <tcp_process+0x5a0>)
 8011646:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011648:	885b      	ldrh	r3, [r3, #2]
 801164a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801164c:	4a38      	ldr	r2, [pc, #224]	; (8011730 <tcp_process+0x5a0>)
 801164e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011650:	8812      	ldrh	r2, [r2, #0]
 8011652:	b292      	uxth	r2, r2
 8011654:	9202      	str	r2, [sp, #8]
 8011656:	9301      	str	r3, [sp, #4]
 8011658:	4b36      	ldr	r3, [pc, #216]	; (8011734 <tcp_process+0x5a4>)
 801165a:	9300      	str	r3, [sp, #0]
 801165c:	4b36      	ldr	r3, [pc, #216]	; (8011738 <tcp_process+0x5a8>)
 801165e:	4602      	mov	r2, r0
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f002 fbd1 	bl	8013e08 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011666:	e167      	b.n	8011938 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011668:	4b2d      	ldr	r3, [pc, #180]	; (8011720 <tcp_process+0x590>)
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	f003 0302 	and.w	r3, r3, #2
 8011670:	2b00      	cmp	r3, #0
 8011672:	f000 8161 	beq.w	8011938 <tcp_process+0x7a8>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801167a:	1e5a      	subs	r2, r3, #1
 801167c:	4b2b      	ldr	r3, [pc, #172]	; (801172c <tcp_process+0x59c>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	429a      	cmp	r2, r3
 8011682:	f040 8159 	bne.w	8011938 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f002 f9b6 	bl	80139f8 <tcp_rexmit>
      break;
 801168c:	e154      	b.n	8011938 <tcp_process+0x7a8>
 801168e:	e153      	b.n	8011938 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f000 fa71 	bl	8011b78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011696:	4b2d      	ldr	r3, [pc, #180]	; (801174c <tcp_process+0x5bc>)
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	f003 0320 	and.w	r3, r3, #32
 801169e:	2b00      	cmp	r3, #0
 80116a0:	f000 814c 	beq.w	801193c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	8b5b      	ldrh	r3, [r3, #26]
 80116a8:	f043 0302 	orr.w	r3, r3, #2
 80116ac:	b29a      	uxth	r2, r3
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2207      	movs	r2, #7
 80116b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80116b8:	e140      	b.n	801193c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 fa5c 	bl	8011b78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80116c0:	4b22      	ldr	r3, [pc, #136]	; (801174c <tcp_process+0x5bc>)
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	f003 0320 	and.w	r3, r3, #32
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d071      	beq.n	80117b0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80116cc:	4b14      	ldr	r3, [pc, #80]	; (8011720 <tcp_process+0x590>)
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	f003 0310 	and.w	r3, r3, #16
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d060      	beq.n	801179a <tcp_process+0x60a>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80116dc:	4b11      	ldr	r3, [pc, #68]	; (8011724 <tcp_process+0x594>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	429a      	cmp	r2, r3
 80116e2:	d15a      	bne.n	801179a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d156      	bne.n	801179a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	8b5b      	ldrh	r3, [r3, #26]
 80116f0:	f043 0302 	orr.w	r3, r3, #2
 80116f4:	b29a      	uxth	r2, r3
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f7fe fdbc 	bl	8010278 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011700:	4b13      	ldr	r3, [pc, #76]	; (8011750 <tcp_process+0x5c0>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	429a      	cmp	r2, r3
 8011708:	d105      	bne.n	8011716 <tcp_process+0x586>
 801170a:	4b11      	ldr	r3, [pc, #68]	; (8011750 <tcp_process+0x5c0>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	4a0f      	ldr	r2, [pc, #60]	; (8011750 <tcp_process+0x5c0>)
 8011712:	6013      	str	r3, [r2, #0]
 8011714:	e02e      	b.n	8011774 <tcp_process+0x5e4>
 8011716:	4b0e      	ldr	r3, [pc, #56]	; (8011750 <tcp_process+0x5c0>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	617b      	str	r3, [r7, #20]
 801171c:	e027      	b.n	801176e <tcp_process+0x5de>
 801171e:	bf00      	nop
 8011720:	20009750 	.word	0x20009750
 8011724:	20009748 	.word	0x20009748
 8011728:	2000974e 	.word	0x2000974e
 801172c:	20009744 	.word	0x20009744
 8011730:	20009734 	.word	0x20009734
 8011734:	200061ac 	.word	0x200061ac
 8011738:	200061b0 	.word	0x200061b0
 801173c:	08019ae0 	.word	0x08019ae0
 8011740:	08019d80 	.word	0x08019d80
 8011744:	08019b2c 	.word	0x08019b2c
 8011748:	2000974c 	.word	0x2000974c
 801174c:	20009751 	.word	0x20009751
 8011750:	20009718 	.word	0x20009718
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	68db      	ldr	r3, [r3, #12]
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	429a      	cmp	r2, r3
 801175c:	d104      	bne.n	8011768 <tcp_process+0x5d8>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	68da      	ldr	r2, [r3, #12]
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	60da      	str	r2, [r3, #12]
 8011766:	e005      	b.n	8011774 <tcp_process+0x5e4>
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	68db      	ldr	r3, [r3, #12]
 801176c:	617b      	str	r3, [r7, #20]
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d1ef      	bne.n	8011754 <tcp_process+0x5c4>
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2200      	movs	r2, #0
 8011778:	60da      	str	r2, [r3, #12]
 801177a:	4b77      	ldr	r3, [pc, #476]	; (8011958 <tcp_process+0x7c8>)
 801177c:	2201      	movs	r2, #1
 801177e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	220a      	movs	r2, #10
 8011784:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011786:	4b75      	ldr	r3, [pc, #468]	; (801195c <tcp_process+0x7cc>)
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	60da      	str	r2, [r3, #12]
 801178e:	4a73      	ldr	r2, [pc, #460]	; (801195c <tcp_process+0x7cc>)
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6013      	str	r3, [r2, #0]
 8011794:	f002 fcfa 	bl	801418c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011798:	e0d2      	b.n	8011940 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	8b5b      	ldrh	r3, [r3, #26]
 801179e:	f043 0302 	orr.w	r3, r3, #2
 80117a2:	b29a      	uxth	r2, r3
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2208      	movs	r2, #8
 80117ac:	751a      	strb	r2, [r3, #20]
      break;
 80117ae:	e0c7      	b.n	8011940 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80117b0:	4b6b      	ldr	r3, [pc, #428]	; (8011960 <tcp_process+0x7d0>)
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	f003 0310 	and.w	r3, r3, #16
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	f000 80c1 	beq.w	8011940 <tcp_process+0x7b0>
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80117c2:	4b68      	ldr	r3, [pc, #416]	; (8011964 <tcp_process+0x7d4>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	f040 80ba 	bne.w	8011940 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	f040 80b5 	bne.w	8011940 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2206      	movs	r2, #6
 80117da:	751a      	strb	r2, [r3, #20]
      break;
 80117dc:	e0b0      	b.n	8011940 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 f9ca 	bl	8011b78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80117e4:	4b60      	ldr	r3, [pc, #384]	; (8011968 <tcp_process+0x7d8>)
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	f003 0320 	and.w	r3, r3, #32
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	f000 80a9 	beq.w	8011944 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	8b5b      	ldrh	r3, [r3, #26]
 80117f6:	f043 0302 	orr.w	r3, r3, #2
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f7fe fd39 	bl	8010278 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011806:	4b59      	ldr	r3, [pc, #356]	; (801196c <tcp_process+0x7dc>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	687a      	ldr	r2, [r7, #4]
 801180c:	429a      	cmp	r2, r3
 801180e:	d105      	bne.n	801181c <tcp_process+0x68c>
 8011810:	4b56      	ldr	r3, [pc, #344]	; (801196c <tcp_process+0x7dc>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	4a55      	ldr	r2, [pc, #340]	; (801196c <tcp_process+0x7dc>)
 8011818:	6013      	str	r3, [r2, #0]
 801181a:	e013      	b.n	8011844 <tcp_process+0x6b4>
 801181c:	4b53      	ldr	r3, [pc, #332]	; (801196c <tcp_process+0x7dc>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	613b      	str	r3, [r7, #16]
 8011822:	e00c      	b.n	801183e <tcp_process+0x6ae>
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	429a      	cmp	r2, r3
 801182c:	d104      	bne.n	8011838 <tcp_process+0x6a8>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	68da      	ldr	r2, [r3, #12]
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	60da      	str	r2, [r3, #12]
 8011836:	e005      	b.n	8011844 <tcp_process+0x6b4>
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	68db      	ldr	r3, [r3, #12]
 801183c:	613b      	str	r3, [r7, #16]
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d1ef      	bne.n	8011824 <tcp_process+0x694>
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2200      	movs	r2, #0
 8011848:	60da      	str	r2, [r3, #12]
 801184a:	4b43      	ldr	r3, [pc, #268]	; (8011958 <tcp_process+0x7c8>)
 801184c:	2201      	movs	r2, #1
 801184e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	220a      	movs	r2, #10
 8011854:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011856:	4b41      	ldr	r3, [pc, #260]	; (801195c <tcp_process+0x7cc>)
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	60da      	str	r2, [r3, #12]
 801185e:	4a3f      	ldr	r2, [pc, #252]	; (801195c <tcp_process+0x7cc>)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6013      	str	r3, [r2, #0]
 8011864:	f002 fc92 	bl	801418c <tcp_timer_needed>
      }
      break;
 8011868:	e06c      	b.n	8011944 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f000 f984 	bl	8011b78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011870:	4b3b      	ldr	r3, [pc, #236]	; (8011960 <tcp_process+0x7d0>)
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	f003 0310 	and.w	r3, r3, #16
 8011878:	2b00      	cmp	r3, #0
 801187a:	d065      	beq.n	8011948 <tcp_process+0x7b8>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011880:	4b38      	ldr	r3, [pc, #224]	; (8011964 <tcp_process+0x7d4>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	429a      	cmp	r2, r3
 8011886:	d15f      	bne.n	8011948 <tcp_process+0x7b8>
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801188c:	2b00      	cmp	r3, #0
 801188e:	d15b      	bne.n	8011948 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f7fe fcf1 	bl	8010278 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011896:	4b35      	ldr	r3, [pc, #212]	; (801196c <tcp_process+0x7dc>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	429a      	cmp	r2, r3
 801189e:	d105      	bne.n	80118ac <tcp_process+0x71c>
 80118a0:	4b32      	ldr	r3, [pc, #200]	; (801196c <tcp_process+0x7dc>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	4a31      	ldr	r2, [pc, #196]	; (801196c <tcp_process+0x7dc>)
 80118a8:	6013      	str	r3, [r2, #0]
 80118aa:	e013      	b.n	80118d4 <tcp_process+0x744>
 80118ac:	4b2f      	ldr	r3, [pc, #188]	; (801196c <tcp_process+0x7dc>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	60fb      	str	r3, [r7, #12]
 80118b2:	e00c      	b.n	80118ce <tcp_process+0x73e>
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	687a      	ldr	r2, [r7, #4]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d104      	bne.n	80118c8 <tcp_process+0x738>
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	68da      	ldr	r2, [r3, #12]
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	60da      	str	r2, [r3, #12]
 80118c6:	e005      	b.n	80118d4 <tcp_process+0x744>
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	68db      	ldr	r3, [r3, #12]
 80118cc:	60fb      	str	r3, [r7, #12]
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d1ef      	bne.n	80118b4 <tcp_process+0x724>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2200      	movs	r2, #0
 80118d8:	60da      	str	r2, [r3, #12]
 80118da:	4b1f      	ldr	r3, [pc, #124]	; (8011958 <tcp_process+0x7c8>)
 80118dc:	2201      	movs	r2, #1
 80118de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	220a      	movs	r2, #10
 80118e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80118e6:	4b1d      	ldr	r3, [pc, #116]	; (801195c <tcp_process+0x7cc>)
 80118e8:	681a      	ldr	r2, [r3, #0]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	60da      	str	r2, [r3, #12]
 80118ee:	4a1b      	ldr	r2, [pc, #108]	; (801195c <tcp_process+0x7cc>)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6013      	str	r3, [r2, #0]
 80118f4:	f002 fc4a 	bl	801418c <tcp_timer_needed>
      }
      break;
 80118f8:	e026      	b.n	8011948 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f000 f93c 	bl	8011b78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011900:	4b17      	ldr	r3, [pc, #92]	; (8011960 <tcp_process+0x7d0>)
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	f003 0310 	and.w	r3, r3, #16
 8011908:	2b00      	cmp	r3, #0
 801190a:	d01f      	beq.n	801194c <tcp_process+0x7bc>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011910:	4b14      	ldr	r3, [pc, #80]	; (8011964 <tcp_process+0x7d4>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	429a      	cmp	r2, r3
 8011916:	d119      	bne.n	801194c <tcp_process+0x7bc>
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801191c:	2b00      	cmp	r3, #0
 801191e:	d115      	bne.n	801194c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011920:	4b11      	ldr	r3, [pc, #68]	; (8011968 <tcp_process+0x7d8>)
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	f043 0310 	orr.w	r3, r3, #16
 8011928:	b2da      	uxtb	r2, r3
 801192a:	4b0f      	ldr	r3, [pc, #60]	; (8011968 <tcp_process+0x7d8>)
 801192c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801192e:	e00d      	b.n	801194c <tcp_process+0x7bc>
    default:
      break;
 8011930:	bf00      	nop
 8011932:	e00c      	b.n	801194e <tcp_process+0x7be>
      break;
 8011934:	bf00      	nop
 8011936:	e00a      	b.n	801194e <tcp_process+0x7be>
      break;
 8011938:	bf00      	nop
 801193a:	e008      	b.n	801194e <tcp_process+0x7be>
      break;
 801193c:	bf00      	nop
 801193e:	e006      	b.n	801194e <tcp_process+0x7be>
      break;
 8011940:	bf00      	nop
 8011942:	e004      	b.n	801194e <tcp_process+0x7be>
      break;
 8011944:	bf00      	nop
 8011946:	e002      	b.n	801194e <tcp_process+0x7be>
      break;
 8011948:	bf00      	nop
 801194a:	e000      	b.n	801194e <tcp_process+0x7be>
      break;
 801194c:	bf00      	nop
  }
  return ERR_OK;
 801194e:	2300      	movs	r3, #0
}
 8011950:	4618      	mov	r0, r3
 8011952:	3724      	adds	r7, #36	; 0x24
 8011954:	46bd      	mov	sp, r7
 8011956:	bd90      	pop	{r4, r7, pc}
 8011958:	20009720 	.word	0x20009720
 801195c:	2000971c 	.word	0x2000971c
 8011960:	20009750 	.word	0x20009750
 8011964:	20009748 	.word	0x20009748
 8011968:	20009751 	.word	0x20009751
 801196c:	20009718 	.word	0x20009718

08011970 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011970:	b590      	push	{r4, r7, lr}
 8011972:	b085      	sub	sp, #20
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d106      	bne.n	801198e <tcp_oos_insert_segment+0x1e>
 8011980:	4b3b      	ldr	r3, [pc, #236]	; (8011a70 <tcp_oos_insert_segment+0x100>)
 8011982:	f240 421f 	movw	r2, #1055	; 0x41f
 8011986:	493b      	ldr	r1, [pc, #236]	; (8011a74 <tcp_oos_insert_segment+0x104>)
 8011988:	483b      	ldr	r0, [pc, #236]	; (8011a78 <tcp_oos_insert_segment+0x108>)
 801198a:	f005 fdcd 	bl	8017528 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	68db      	ldr	r3, [r3, #12]
 8011992:	899b      	ldrh	r3, [r3, #12]
 8011994:	b29b      	uxth	r3, r3
 8011996:	4618      	mov	r0, r3
 8011998:	f7fb fc0e 	bl	800d1b8 <lwip_htons>
 801199c:	4603      	mov	r3, r0
 801199e:	b2db      	uxtb	r3, r3
 80119a0:	f003 0301 	and.w	r3, r3, #1
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d028      	beq.n	80119fa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80119a8:	6838      	ldr	r0, [r7, #0]
 80119aa:	f7fe fa63 	bl	800fe74 <tcp_segs_free>
    next = NULL;
 80119ae:	2300      	movs	r3, #0
 80119b0:	603b      	str	r3, [r7, #0]
 80119b2:	e056      	b.n	8011a62 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	68db      	ldr	r3, [r3, #12]
 80119b8:	899b      	ldrh	r3, [r3, #12]
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fb fbfb 	bl	800d1b8 <lwip_htons>
 80119c2:	4603      	mov	r3, r0
 80119c4:	b2db      	uxtb	r3, r3
 80119c6:	f003 0301 	and.w	r3, r3, #1
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d00d      	beq.n	80119ea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	68db      	ldr	r3, [r3, #12]
 80119d2:	899b      	ldrh	r3, [r3, #12]
 80119d4:	b29c      	uxth	r4, r3
 80119d6:	2001      	movs	r0, #1
 80119d8:	f7fb fbee 	bl	800d1b8 <lwip_htons>
 80119dc:	4603      	mov	r3, r0
 80119de:	461a      	mov	r2, r3
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	68db      	ldr	r3, [r3, #12]
 80119e4:	4322      	orrs	r2, r4
 80119e6:	b292      	uxth	r2, r2
 80119e8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80119f4:	68f8      	ldr	r0, [r7, #12]
 80119f6:	f7fe fa52 	bl	800fe9e <tcp_seg_free>
    while (next &&
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d00e      	beq.n	8011a1e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	891b      	ldrh	r3, [r3, #8]
 8011a04:	461a      	mov	r2, r3
 8011a06:	4b1d      	ldr	r3, [pc, #116]	; (8011a7c <tcp_oos_insert_segment+0x10c>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	441a      	add	r2, r3
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	68db      	ldr	r3, [r3, #12]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	6839      	ldr	r1, [r7, #0]
 8011a14:	8909      	ldrh	r1, [r1, #8]
 8011a16:	440b      	add	r3, r1
 8011a18:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	daca      	bge.n	80119b4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d01e      	beq.n	8011a62 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	891b      	ldrh	r3, [r3, #8]
 8011a28:	461a      	mov	r2, r3
 8011a2a:	4b14      	ldr	r3, [pc, #80]	; (8011a7c <tcp_oos_insert_segment+0x10c>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	441a      	add	r2, r3
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	dd12      	ble.n	8011a62 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	68db      	ldr	r3, [r3, #12]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	b29a      	uxth	r2, r3
 8011a44:	4b0d      	ldr	r3, [pc, #52]	; (8011a7c <tcp_oos_insert_segment+0x10c>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	1ad3      	subs	r3, r2, r3
 8011a4c:	b29a      	uxth	r2, r3
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	685a      	ldr	r2, [r3, #4]
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	891b      	ldrh	r3, [r3, #8]
 8011a5a:	4619      	mov	r1, r3
 8011a5c:	4610      	mov	r0, r2
 8011a5e:	f7fc fd83 	bl	800e568 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	683a      	ldr	r2, [r7, #0]
 8011a66:	601a      	str	r2, [r3, #0]
}
 8011a68:	bf00      	nop
 8011a6a:	3714      	adds	r7, #20
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd90      	pop	{r4, r7, pc}
 8011a70:	08019ae0 	.word	0x08019ae0
 8011a74:	08019da0 	.word	0x08019da0
 8011a78:	08019b2c 	.word	0x08019b2c
 8011a7c:	20009744 	.word	0x20009744

08011a80 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011a80:	b5b0      	push	{r4, r5, r7, lr}
 8011a82:	b086      	sub	sp, #24
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	60f8      	str	r0, [r7, #12]
 8011a88:	60b9      	str	r1, [r7, #8]
 8011a8a:	607a      	str	r2, [r7, #4]
 8011a8c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011a8e:	e03e      	b.n	8011b0e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7fc ff70 	bl	800e984 <pbuf_clen>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011aae:	8a7a      	ldrh	r2, [r7, #18]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d906      	bls.n	8011ac2 <tcp_free_acked_segments+0x42>
 8011ab4:	4b2a      	ldr	r3, [pc, #168]	; (8011b60 <tcp_free_acked_segments+0xe0>)
 8011ab6:	f240 4257 	movw	r2, #1111	; 0x457
 8011aba:	492a      	ldr	r1, [pc, #168]	; (8011b64 <tcp_free_acked_segments+0xe4>)
 8011abc:	482a      	ldr	r0, [pc, #168]	; (8011b68 <tcp_free_acked_segments+0xe8>)
 8011abe:	f005 fd33 	bl	8017528 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011ac8:	8a7b      	ldrh	r3, [r7, #18]
 8011aca:	1ad3      	subs	r3, r2, r3
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	891a      	ldrh	r2, [r3, #8]
 8011ad8:	4b24      	ldr	r3, [pc, #144]	; (8011b6c <tcp_free_acked_segments+0xec>)
 8011ada:	881b      	ldrh	r3, [r3, #0]
 8011adc:	4413      	add	r3, r2
 8011ade:	b29a      	uxth	r2, r3
 8011ae0:	4b22      	ldr	r3, [pc, #136]	; (8011b6c <tcp_free_acked_segments+0xec>)
 8011ae2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011ae4:	6978      	ldr	r0, [r7, #20]
 8011ae6:	f7fe f9da 	bl	800fe9e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d00c      	beq.n	8011b0e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d109      	bne.n	8011b0e <tcp_free_acked_segments+0x8e>
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d106      	bne.n	8011b0e <tcp_free_acked_segments+0x8e>
 8011b00:	4b17      	ldr	r3, [pc, #92]	; (8011b60 <tcp_free_acked_segments+0xe0>)
 8011b02:	f240 4261 	movw	r2, #1121	; 0x461
 8011b06:	491a      	ldr	r1, [pc, #104]	; (8011b70 <tcp_free_acked_segments+0xf0>)
 8011b08:	4817      	ldr	r0, [pc, #92]	; (8011b68 <tcp_free_acked_segments+0xe8>)
 8011b0a:	f005 fd0d 	bl	8017528 <iprintf>
  while (seg_list != NULL &&
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d020      	beq.n	8011b56 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7fb fb61 	bl	800d1e2 <lwip_htonl>
 8011b20:	4604      	mov	r4, r0
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	891b      	ldrh	r3, [r3, #8]
 8011b26:	461d      	mov	r5, r3
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	68db      	ldr	r3, [r3, #12]
 8011b2c:	899b      	ldrh	r3, [r3, #12]
 8011b2e:	b29b      	uxth	r3, r3
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7fb fb41 	bl	800d1b8 <lwip_htons>
 8011b36:	4603      	mov	r3, r0
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	f003 0303 	and.w	r3, r3, #3
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d001      	beq.n	8011b46 <tcp_free_acked_segments+0xc6>
 8011b42:	2301      	movs	r3, #1
 8011b44:	e000      	b.n	8011b48 <tcp_free_acked_segments+0xc8>
 8011b46:	2300      	movs	r3, #0
 8011b48:	442b      	add	r3, r5
 8011b4a:	18e2      	adds	r2, r4, r3
 8011b4c:	4b09      	ldr	r3, [pc, #36]	; (8011b74 <tcp_free_acked_segments+0xf4>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	dd9c      	ble.n	8011a90 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011b56:	68bb      	ldr	r3, [r7, #8]
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3718      	adds	r7, #24
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8011b60:	08019ae0 	.word	0x08019ae0
 8011b64:	08019dc8 	.word	0x08019dc8
 8011b68:	08019b2c 	.word	0x08019b2c
 8011b6c:	2000974c 	.word	0x2000974c
 8011b70:	08019df0 	.word	0x08019df0
 8011b74:	20009748 	.word	0x20009748

08011b78 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011b78:	b5b0      	push	{r4, r5, r7, lr}
 8011b7a:	b094      	sub	sp, #80	; 0x50
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011b80:	2300      	movs	r3, #0
 8011b82:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d106      	bne.n	8011b98 <tcp_receive+0x20>
 8011b8a:	4b91      	ldr	r3, [pc, #580]	; (8011dd0 <tcp_receive+0x258>)
 8011b8c:	f240 427b 	movw	r2, #1147	; 0x47b
 8011b90:	4990      	ldr	r1, [pc, #576]	; (8011dd4 <tcp_receive+0x25c>)
 8011b92:	4891      	ldr	r0, [pc, #580]	; (8011dd8 <tcp_receive+0x260>)
 8011b94:	f005 fcc8 	bl	8017528 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	7d1b      	ldrb	r3, [r3, #20]
 8011b9c:	2b03      	cmp	r3, #3
 8011b9e:	d806      	bhi.n	8011bae <tcp_receive+0x36>
 8011ba0:	4b8b      	ldr	r3, [pc, #556]	; (8011dd0 <tcp_receive+0x258>)
 8011ba2:	f240 427c 	movw	r2, #1148	; 0x47c
 8011ba6:	498d      	ldr	r1, [pc, #564]	; (8011ddc <tcp_receive+0x264>)
 8011ba8:	488b      	ldr	r0, [pc, #556]	; (8011dd8 <tcp_receive+0x260>)
 8011baa:	f005 fcbd 	bl	8017528 <iprintf>

  if (flags & TCP_ACK) {
 8011bae:	4b8c      	ldr	r3, [pc, #560]	; (8011de0 <tcp_receive+0x268>)
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	f003 0310 	and.w	r3, r3, #16
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	f000 8264 	beq.w	8012084 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bc8:	4413      	add	r3, r2
 8011bca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011bd0:	4b84      	ldr	r3, [pc, #528]	; (8011de4 <tcp_receive+0x26c>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	1ad3      	subs	r3, r2, r3
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	db1b      	blt.n	8011c12 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011bde:	4b81      	ldr	r3, [pc, #516]	; (8011de4 <tcp_receive+0x26c>)
 8011be0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d106      	bne.n	8011bf4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011bea:	4b7f      	ldr	r3, [pc, #508]	; (8011de8 <tcp_receive+0x270>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	1ad3      	subs	r3, r2, r3
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	db0e      	blt.n	8011c12 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011bf8:	4b7b      	ldr	r3, [pc, #492]	; (8011de8 <tcp_receive+0x270>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d125      	bne.n	8011c4c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011c00:	4b7a      	ldr	r3, [pc, #488]	; (8011dec <tcp_receive+0x274>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	89db      	ldrh	r3, [r3, #14]
 8011c06:	b29a      	uxth	r2, r3
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d91c      	bls.n	8011c4c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011c12:	4b76      	ldr	r3, [pc, #472]	; (8011dec <tcp_receive+0x274>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	89db      	ldrh	r3, [r3, #14]
 8011c18:	b29a      	uxth	r2, r3
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d205      	bcs.n	8011c3c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011c3c:	4b69      	ldr	r3, [pc, #420]	; (8011de4 <tcp_receive+0x26c>)
 8011c3e:	681a      	ldr	r2, [r3, #0]
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011c44:	4b68      	ldr	r3, [pc, #416]	; (8011de8 <tcp_receive+0x270>)
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011c4c:	4b66      	ldr	r3, [pc, #408]	; (8011de8 <tcp_receive+0x270>)
 8011c4e:	681a      	ldr	r2, [r3, #0]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c54:	1ad3      	subs	r3, r2, r3
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	dc58      	bgt.n	8011d0c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011c5a:	4b65      	ldr	r3, [pc, #404]	; (8011df0 <tcp_receive+0x278>)
 8011c5c:	881b      	ldrh	r3, [r3, #0]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d14b      	bne.n	8011cfa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c66:	687a      	ldr	r2, [r7, #4]
 8011c68:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011c6c:	4413      	add	r3, r2
 8011c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d142      	bne.n	8011cfa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	db3d      	blt.n	8011cfa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c82:	4b59      	ldr	r3, [pc, #356]	; (8011de8 <tcp_receive+0x270>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d137      	bne.n	8011cfa <tcp_receive+0x182>
              found_dupack = 1;
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011c94:	2bff      	cmp	r3, #255	; 0xff
 8011c96:	d007      	beq.n	8011ca8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	b2da      	uxtb	r2, r3
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011cae:	2b03      	cmp	r3, #3
 8011cb0:	d91b      	bls.n	8011cea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cbc:	4413      	add	r3, r2
 8011cbe:	b29a      	uxth	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d30a      	bcc.n	8011ce0 <tcp_receive+0x168>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cd4:	4413      	add	r3, r2
 8011cd6:	b29a      	uxth	r2, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011cde:	e004      	b.n	8011cea <tcp_receive+0x172>
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ce6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011cf0:	2b02      	cmp	r3, #2
 8011cf2:	d902      	bls.n	8011cfa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f001 feeb 	bl	8013ad0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	f040 8161 	bne.w	8011fc4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2200      	movs	r2, #0
 8011d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011d0a:	e15b      	b.n	8011fc4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011d0c:	4b36      	ldr	r3, [pc, #216]	; (8011de8 <tcp_receive+0x270>)
 8011d0e:	681a      	ldr	r2, [r3, #0]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d14:	1ad3      	subs	r3, r2, r3
 8011d16:	3b01      	subs	r3, #1
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f2c0 814e 	blt.w	8011fba <tcp_receive+0x442>
 8011d1e:	4b32      	ldr	r3, [pc, #200]	; (8011de8 <tcp_receive+0x270>)
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d26:	1ad3      	subs	r3, r2, r3
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	f300 8146 	bgt.w	8011fba <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	8b5b      	ldrh	r3, [r3, #26]
 8011d32:	f003 0304 	and.w	r3, r3, #4
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d010      	beq.n	8011d5c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	8b5b      	ldrh	r3, [r3, #26]
 8011d3e:	f023 0304 	bic.w	r3, r3, #4
 8011d42:	b29a      	uxth	r2, r3
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2200      	movs	r2, #0
 8011d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011d6a:	10db      	asrs	r3, r3, #3
 8011d6c:	b21b      	sxth	r3, r3
 8011d6e:	b29a      	uxth	r2, r3
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	4413      	add	r3, r2
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	b21a      	sxth	r2, r3
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011d84:	4b18      	ldr	r3, [pc, #96]	; (8011de8 <tcp_receive+0x270>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	b29a      	uxth	r2, r3
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	1ad3      	subs	r3, r2, r3
 8011d92:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2200      	movs	r2, #0
 8011d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011d9c:	4b12      	ldr	r3, [pc, #72]	; (8011de8 <tcp_receive+0x270>)
 8011d9e:	681a      	ldr	r2, [r3, #0]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	7d1b      	ldrb	r3, [r3, #20]
 8011da8:	2b03      	cmp	r3, #3
 8011daa:	f240 8097 	bls.w	8011edc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d245      	bcs.n	8011e4a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	8b5b      	ldrh	r3, [r3, #26]
 8011dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d014      	beq.n	8011df4 <tcp_receive+0x27c>
 8011dca:	2301      	movs	r3, #1
 8011dcc:	e013      	b.n	8011df6 <tcp_receive+0x27e>
 8011dce:	bf00      	nop
 8011dd0:	08019ae0 	.word	0x08019ae0
 8011dd4:	08019e10 	.word	0x08019e10
 8011dd8:	08019b2c 	.word	0x08019b2c
 8011ddc:	08019e2c 	.word	0x08019e2c
 8011de0:	20009750 	.word	0x20009750
 8011de4:	20009744 	.word	0x20009744
 8011de8:	20009748 	.word	0x20009748
 8011dec:	20009734 	.word	0x20009734
 8011df0:	2000974e 	.word	0x2000974e
 8011df4:	2302      	movs	r3, #2
 8011df6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011dfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011dfe:	b29a      	uxth	r2, r3
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e04:	fb12 f303 	smulbb	r3, r2, r3
 8011e08:	b29b      	uxth	r3, r3
 8011e0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	bf28      	it	cs
 8011e10:	4613      	movcs	r3, r2
 8011e12:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011e1c:	4413      	add	r3, r2
 8011e1e:	b29a      	uxth	r2, r3
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d309      	bcc.n	8011e3e <tcp_receive+0x2c6>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011e32:	4413      	add	r3, r2
 8011e34:	b29a      	uxth	r2, r3
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011e3c:	e04e      	b.n	8011edc <tcp_receive+0x364>
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011e48:	e048      	b.n	8011edc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011e50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011e52:	4413      	add	r3, r2
 8011e54:	b29a      	uxth	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	d309      	bcc.n	8011e74 <tcp_receive+0x2fc>
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011e66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011e68:	4413      	add	r3, r2
 8011e6a:	b29a      	uxth	r2, r3
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011e72:	e004      	b.n	8011e7e <tcp_receive+0x306>
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d326      	bcc.n	8011edc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e9a:	1ad3      	subs	r3, r2, r3
 8011e9c:	b29a      	uxth	r2, r3
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011eae:	4413      	add	r3, r2
 8011eb0:	b29a      	uxth	r2, r3
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d30a      	bcc.n	8011ed2 <tcp_receive+0x35a>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ec6:	4413      	add	r3, r2
 8011ec8:	b29a      	uxth	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011ed0:	e004      	b.n	8011edc <tcp_receive+0x364>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ed8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ee4:	4a98      	ldr	r2, [pc, #608]	; (8012148 <tcp_receive+0x5d0>)
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f7ff fdca 	bl	8011a80 <tcp_free_acked_segments>
 8011eec:	4602      	mov	r2, r0
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011efa:	4a94      	ldr	r2, [pc, #592]	; (801214c <tcp_receive+0x5d4>)
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f7ff fdbf 	bl	8011a80 <tcp_free_acked_segments>
 8011f02:	4602      	mov	r2, r0
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d104      	bne.n	8011f1a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f16:	861a      	strh	r2, [r3, #48]	; 0x30
 8011f18:	e002      	b.n	8011f20 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2200      	movs	r2, #0
 8011f24:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d103      	bne.n	8011f36 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2200      	movs	r2, #0
 8011f32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011f3c:	4b84      	ldr	r3, [pc, #528]	; (8012150 <tcp_receive+0x5d8>)
 8011f3e:	881b      	ldrh	r3, [r3, #0]
 8011f40:	4413      	add	r3, r2
 8011f42:	b29a      	uxth	r2, r3
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	8b5b      	ldrh	r3, [r3, #26]
 8011f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d035      	beq.n	8011fc2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d118      	bne.n	8011f90 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d00c      	beq.n	8011f80 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f6e:	68db      	ldr	r3, [r3, #12]
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7fb f935 	bl	800d1e2 <lwip_htonl>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	dc20      	bgt.n	8011fc2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	8b5b      	ldrh	r3, [r3, #26]
 8011f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011f8e:	e018      	b.n	8011fc2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f98:	68db      	ldr	r3, [r3, #12]
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fb f920 	bl	800d1e2 <lwip_htonl>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	1ae3      	subs	r3, r4, r3
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	dc0b      	bgt.n	8011fc2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	8b5b      	ldrh	r3, [r3, #26]
 8011fae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011fb2:	b29a      	uxth	r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011fb8:	e003      	b.n	8011fc2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f001 ff76 	bl	8013eac <tcp_send_empty_ack>
 8011fc0:	e000      	b.n	8011fc4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011fc2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d05b      	beq.n	8012084 <tcp_receive+0x50c>
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011fd0:	4b60      	ldr	r3, [pc, #384]	; (8012154 <tcp_receive+0x5dc>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	1ad3      	subs	r3, r2, r3
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	da54      	bge.n	8012084 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011fda:	4b5f      	ldr	r3, [pc, #380]	; (8012158 <tcp_receive+0x5e0>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	b29a      	uxth	r2, r3
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	1ad3      	subs	r3, r2, r3
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011fee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011ff8:	10db      	asrs	r3, r3, #3
 8011ffa:	b21b      	sxth	r3, r3
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	1ad3      	subs	r3, r2, r3
 8012000:	b29b      	uxth	r3, r3
 8012002:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801200c:	b29a      	uxth	r2, r3
 801200e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012012:	4413      	add	r3, r2
 8012014:	b29b      	uxth	r3, r3
 8012016:	b21a      	sxth	r2, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801201c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012020:	2b00      	cmp	r3, #0
 8012022:	da05      	bge.n	8012030 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012024:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012028:	425b      	negs	r3, r3
 801202a:	b29b      	uxth	r3, r3
 801202c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012030:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801203a:	109b      	asrs	r3, r3, #2
 801203c:	b21b      	sxth	r3, r3
 801203e:	b29b      	uxth	r3, r3
 8012040:	1ad3      	subs	r3, r2, r3
 8012042:	b29b      	uxth	r3, r3
 8012044:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801204e:	b29a      	uxth	r2, r3
 8012050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012054:	4413      	add	r3, r2
 8012056:	b29b      	uxth	r3, r3
 8012058:	b21a      	sxth	r2, r3
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012064:	10db      	asrs	r3, r3, #3
 8012066:	b21b      	sxth	r3, r3
 8012068:	b29a      	uxth	r2, r3
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012070:	b29b      	uxth	r3, r3
 8012072:	4413      	add	r3, r2
 8012074:	b29b      	uxth	r3, r3
 8012076:	b21a      	sxth	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2200      	movs	r2, #0
 8012082:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012084:	4b35      	ldr	r3, [pc, #212]	; (801215c <tcp_receive+0x5e4>)
 8012086:	881b      	ldrh	r3, [r3, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	f000 84e2 	beq.w	8012a52 <tcp_receive+0xeda>
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	7d1b      	ldrb	r3, [r3, #20]
 8012092:	2b06      	cmp	r3, #6
 8012094:	f200 84dd 	bhi.w	8012a52 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801209c:	4b30      	ldr	r3, [pc, #192]	; (8012160 <tcp_receive+0x5e8>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	1ad3      	subs	r3, r2, r3
 80120a2:	3b01      	subs	r3, #1
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	f2c0 808f 	blt.w	80121c8 <tcp_receive+0x650>
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120ae:	4b2b      	ldr	r3, [pc, #172]	; (801215c <tcp_receive+0x5e4>)
 80120b0:	881b      	ldrh	r3, [r3, #0]
 80120b2:	4619      	mov	r1, r3
 80120b4:	4b2a      	ldr	r3, [pc, #168]	; (8012160 <tcp_receive+0x5e8>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	440b      	add	r3, r1
 80120ba:	1ad3      	subs	r3, r2, r3
 80120bc:	3301      	adds	r3, #1
 80120be:	2b00      	cmp	r3, #0
 80120c0:	f300 8082 	bgt.w	80121c8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80120c4:	4b27      	ldr	r3, [pc, #156]	; (8012164 <tcp_receive+0x5ec>)
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120ce:	4b24      	ldr	r3, [pc, #144]	; (8012160 <tcp_receive+0x5e8>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	1ad3      	subs	r3, r2, r3
 80120d4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80120d6:	4b23      	ldr	r3, [pc, #140]	; (8012164 <tcp_receive+0x5ec>)
 80120d8:	685b      	ldr	r3, [r3, #4]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d106      	bne.n	80120ec <tcp_receive+0x574>
 80120de:	4b22      	ldr	r3, [pc, #136]	; (8012168 <tcp_receive+0x5f0>)
 80120e0:	f240 5294 	movw	r2, #1428	; 0x594
 80120e4:	4921      	ldr	r1, [pc, #132]	; (801216c <tcp_receive+0x5f4>)
 80120e6:	4822      	ldr	r0, [pc, #136]	; (8012170 <tcp_receive+0x5f8>)
 80120e8:	f005 fa1e 	bl	8017528 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80120ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80120f2:	4293      	cmp	r3, r2
 80120f4:	d906      	bls.n	8012104 <tcp_receive+0x58c>
 80120f6:	4b1c      	ldr	r3, [pc, #112]	; (8012168 <tcp_receive+0x5f0>)
 80120f8:	f240 5295 	movw	r2, #1429	; 0x595
 80120fc:	491d      	ldr	r1, [pc, #116]	; (8012174 <tcp_receive+0x5fc>)
 80120fe:	481c      	ldr	r0, [pc, #112]	; (8012170 <tcp_receive+0x5f8>)
 8012100:	f005 fa12 	bl	8017528 <iprintf>
      off = (u16_t)off32;
 8012104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012106:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801210a:	4b16      	ldr	r3, [pc, #88]	; (8012164 <tcp_receive+0x5ec>)
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	891b      	ldrh	r3, [r3, #8]
 8012110:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012114:	429a      	cmp	r2, r3
 8012116:	d906      	bls.n	8012126 <tcp_receive+0x5ae>
 8012118:	4b13      	ldr	r3, [pc, #76]	; (8012168 <tcp_receive+0x5f0>)
 801211a:	f240 5297 	movw	r2, #1431	; 0x597
 801211e:	4916      	ldr	r1, [pc, #88]	; (8012178 <tcp_receive+0x600>)
 8012120:	4813      	ldr	r0, [pc, #76]	; (8012170 <tcp_receive+0x5f8>)
 8012122:	f005 fa01 	bl	8017528 <iprintf>
      inseg.len -= off;
 8012126:	4b0f      	ldr	r3, [pc, #60]	; (8012164 <tcp_receive+0x5ec>)
 8012128:	891a      	ldrh	r2, [r3, #8]
 801212a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801212e:	1ad3      	subs	r3, r2, r3
 8012130:	b29a      	uxth	r2, r3
 8012132:	4b0c      	ldr	r3, [pc, #48]	; (8012164 <tcp_receive+0x5ec>)
 8012134:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012136:	4b0b      	ldr	r3, [pc, #44]	; (8012164 <tcp_receive+0x5ec>)
 8012138:	685b      	ldr	r3, [r3, #4]
 801213a:	891a      	ldrh	r2, [r3, #8]
 801213c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012140:	1ad3      	subs	r3, r2, r3
 8012142:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012144:	e02a      	b.n	801219c <tcp_receive+0x624>
 8012146:	bf00      	nop
 8012148:	08019e48 	.word	0x08019e48
 801214c:	08019e50 	.word	0x08019e50
 8012150:	2000974c 	.word	0x2000974c
 8012154:	20009748 	.word	0x20009748
 8012158:	2000970c 	.word	0x2000970c
 801215c:	2000974e 	.word	0x2000974e
 8012160:	20009744 	.word	0x20009744
 8012164:	20009724 	.word	0x20009724
 8012168:	08019ae0 	.word	0x08019ae0
 801216c:	08019e58 	.word	0x08019e58
 8012170:	08019b2c 	.word	0x08019b2c
 8012174:	08019e68 	.word	0x08019e68
 8012178:	08019e78 	.word	0x08019e78
        off -= p->len;
 801217c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801217e:	895b      	ldrh	r3, [r3, #10]
 8012180:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012184:	1ad3      	subs	r3, r2, r3
 8012186:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801218a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801218c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801218e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012192:	2200      	movs	r2, #0
 8012194:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801219c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801219e:	895b      	ldrh	r3, [r3, #10]
 80121a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80121a4:	429a      	cmp	r2, r3
 80121a6:	d8e9      	bhi.n	801217c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80121a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121ac:	4619      	mov	r1, r3
 80121ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80121b0:	f7fc fada 	bl	800e768 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b8:	4a91      	ldr	r2, [pc, #580]	; (8012400 <tcp_receive+0x888>)
 80121ba:	6013      	str	r3, [r2, #0]
 80121bc:	4b91      	ldr	r3, [pc, #580]	; (8012404 <tcp_receive+0x88c>)
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	4a8f      	ldr	r2, [pc, #572]	; (8012400 <tcp_receive+0x888>)
 80121c2:	6812      	ldr	r2, [r2, #0]
 80121c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80121c6:	e00d      	b.n	80121e4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80121c8:	4b8d      	ldr	r3, [pc, #564]	; (8012400 <tcp_receive+0x888>)
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d0:	1ad3      	subs	r3, r2, r3
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	da06      	bge.n	80121e4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	8b5b      	ldrh	r3, [r3, #26]
 80121da:	f043 0302 	orr.w	r3, r3, #2
 80121de:	b29a      	uxth	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80121e4:	4b86      	ldr	r3, [pc, #536]	; (8012400 <tcp_receive+0x888>)
 80121e6:	681a      	ldr	r2, [r3, #0]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ec:	1ad3      	subs	r3, r2, r3
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	f2c0 842a 	blt.w	8012a48 <tcp_receive+0xed0>
 80121f4:	4b82      	ldr	r3, [pc, #520]	; (8012400 <tcp_receive+0x888>)
 80121f6:	681a      	ldr	r2, [r3, #0]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121fc:	6879      	ldr	r1, [r7, #4]
 80121fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012200:	440b      	add	r3, r1
 8012202:	1ad3      	subs	r3, r2, r3
 8012204:	3301      	adds	r3, #1
 8012206:	2b00      	cmp	r3, #0
 8012208:	f300 841e 	bgt.w	8012a48 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012210:	4b7b      	ldr	r3, [pc, #492]	; (8012400 <tcp_receive+0x888>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	429a      	cmp	r2, r3
 8012216:	f040 829a 	bne.w	801274e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801221a:	4b7a      	ldr	r3, [pc, #488]	; (8012404 <tcp_receive+0x88c>)
 801221c:	891c      	ldrh	r4, [r3, #8]
 801221e:	4b79      	ldr	r3, [pc, #484]	; (8012404 <tcp_receive+0x88c>)
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	899b      	ldrh	r3, [r3, #12]
 8012224:	b29b      	uxth	r3, r3
 8012226:	4618      	mov	r0, r3
 8012228:	f7fa ffc6 	bl	800d1b8 <lwip_htons>
 801222c:	4603      	mov	r3, r0
 801222e:	b2db      	uxtb	r3, r3
 8012230:	f003 0303 	and.w	r3, r3, #3
 8012234:	2b00      	cmp	r3, #0
 8012236:	d001      	beq.n	801223c <tcp_receive+0x6c4>
 8012238:	2301      	movs	r3, #1
 801223a:	e000      	b.n	801223e <tcp_receive+0x6c6>
 801223c:	2300      	movs	r3, #0
 801223e:	4423      	add	r3, r4
 8012240:	b29a      	uxth	r2, r3
 8012242:	4b71      	ldr	r3, [pc, #452]	; (8012408 <tcp_receive+0x890>)
 8012244:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801224a:	4b6f      	ldr	r3, [pc, #444]	; (8012408 <tcp_receive+0x890>)
 801224c:	881b      	ldrh	r3, [r3, #0]
 801224e:	429a      	cmp	r2, r3
 8012250:	d275      	bcs.n	801233e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012252:	4b6c      	ldr	r3, [pc, #432]	; (8012404 <tcp_receive+0x88c>)
 8012254:	68db      	ldr	r3, [r3, #12]
 8012256:	899b      	ldrh	r3, [r3, #12]
 8012258:	b29b      	uxth	r3, r3
 801225a:	4618      	mov	r0, r3
 801225c:	f7fa ffac 	bl	800d1b8 <lwip_htons>
 8012260:	4603      	mov	r3, r0
 8012262:	b2db      	uxtb	r3, r3
 8012264:	f003 0301 	and.w	r3, r3, #1
 8012268:	2b00      	cmp	r3, #0
 801226a:	d01f      	beq.n	80122ac <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801226c:	4b65      	ldr	r3, [pc, #404]	; (8012404 <tcp_receive+0x88c>)
 801226e:	68db      	ldr	r3, [r3, #12]
 8012270:	899b      	ldrh	r3, [r3, #12]
 8012272:	b29b      	uxth	r3, r3
 8012274:	b21b      	sxth	r3, r3
 8012276:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801227a:	b21c      	sxth	r4, r3
 801227c:	4b61      	ldr	r3, [pc, #388]	; (8012404 <tcp_receive+0x88c>)
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	899b      	ldrh	r3, [r3, #12]
 8012282:	b29b      	uxth	r3, r3
 8012284:	4618      	mov	r0, r3
 8012286:	f7fa ff97 	bl	800d1b8 <lwip_htons>
 801228a:	4603      	mov	r3, r0
 801228c:	b2db      	uxtb	r3, r3
 801228e:	b29b      	uxth	r3, r3
 8012290:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012294:	b29b      	uxth	r3, r3
 8012296:	4618      	mov	r0, r3
 8012298:	f7fa ff8e 	bl	800d1b8 <lwip_htons>
 801229c:	4603      	mov	r3, r0
 801229e:	b21b      	sxth	r3, r3
 80122a0:	4323      	orrs	r3, r4
 80122a2:	b21a      	sxth	r2, r3
 80122a4:	4b57      	ldr	r3, [pc, #348]	; (8012404 <tcp_receive+0x88c>)
 80122a6:	68db      	ldr	r3, [r3, #12]
 80122a8:	b292      	uxth	r2, r2
 80122aa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80122b0:	4b54      	ldr	r3, [pc, #336]	; (8012404 <tcp_receive+0x88c>)
 80122b2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80122b4:	4b53      	ldr	r3, [pc, #332]	; (8012404 <tcp_receive+0x88c>)
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	899b      	ldrh	r3, [r3, #12]
 80122ba:	b29b      	uxth	r3, r3
 80122bc:	4618      	mov	r0, r3
 80122be:	f7fa ff7b 	bl	800d1b8 <lwip_htons>
 80122c2:	4603      	mov	r3, r0
 80122c4:	b2db      	uxtb	r3, r3
 80122c6:	f003 0302 	and.w	r3, r3, #2
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d005      	beq.n	80122da <tcp_receive+0x762>
            inseg.len -= 1;
 80122ce:	4b4d      	ldr	r3, [pc, #308]	; (8012404 <tcp_receive+0x88c>)
 80122d0:	891b      	ldrh	r3, [r3, #8]
 80122d2:	3b01      	subs	r3, #1
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	4b4b      	ldr	r3, [pc, #300]	; (8012404 <tcp_receive+0x88c>)
 80122d8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80122da:	4b4a      	ldr	r3, [pc, #296]	; (8012404 <tcp_receive+0x88c>)
 80122dc:	685b      	ldr	r3, [r3, #4]
 80122de:	4a49      	ldr	r2, [pc, #292]	; (8012404 <tcp_receive+0x88c>)
 80122e0:	8912      	ldrh	r2, [r2, #8]
 80122e2:	4611      	mov	r1, r2
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7fc f93f 	bl	800e568 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80122ea:	4b46      	ldr	r3, [pc, #280]	; (8012404 <tcp_receive+0x88c>)
 80122ec:	891c      	ldrh	r4, [r3, #8]
 80122ee:	4b45      	ldr	r3, [pc, #276]	; (8012404 <tcp_receive+0x88c>)
 80122f0:	68db      	ldr	r3, [r3, #12]
 80122f2:	899b      	ldrh	r3, [r3, #12]
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7fa ff5e 	bl	800d1b8 <lwip_htons>
 80122fc:	4603      	mov	r3, r0
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	f003 0303 	and.w	r3, r3, #3
 8012304:	2b00      	cmp	r3, #0
 8012306:	d001      	beq.n	801230c <tcp_receive+0x794>
 8012308:	2301      	movs	r3, #1
 801230a:	e000      	b.n	801230e <tcp_receive+0x796>
 801230c:	2300      	movs	r3, #0
 801230e:	4423      	add	r3, r4
 8012310:	b29a      	uxth	r2, r3
 8012312:	4b3d      	ldr	r3, [pc, #244]	; (8012408 <tcp_receive+0x890>)
 8012314:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012316:	4b3c      	ldr	r3, [pc, #240]	; (8012408 <tcp_receive+0x890>)
 8012318:	881b      	ldrh	r3, [r3, #0]
 801231a:	461a      	mov	r2, r3
 801231c:	4b38      	ldr	r3, [pc, #224]	; (8012400 <tcp_receive+0x888>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	441a      	add	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012326:	6879      	ldr	r1, [r7, #4]
 8012328:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801232a:	440b      	add	r3, r1
 801232c:	429a      	cmp	r2, r3
 801232e:	d006      	beq.n	801233e <tcp_receive+0x7c6>
 8012330:	4b36      	ldr	r3, [pc, #216]	; (801240c <tcp_receive+0x894>)
 8012332:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012336:	4936      	ldr	r1, [pc, #216]	; (8012410 <tcp_receive+0x898>)
 8012338:	4836      	ldr	r0, [pc, #216]	; (8012414 <tcp_receive+0x89c>)
 801233a:	f005 f8f5 	bl	8017528 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012342:	2b00      	cmp	r3, #0
 8012344:	f000 80e7 	beq.w	8012516 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012348:	4b2e      	ldr	r3, [pc, #184]	; (8012404 <tcp_receive+0x88c>)
 801234a:	68db      	ldr	r3, [r3, #12]
 801234c:	899b      	ldrh	r3, [r3, #12]
 801234e:	b29b      	uxth	r3, r3
 8012350:	4618      	mov	r0, r3
 8012352:	f7fa ff31 	bl	800d1b8 <lwip_htons>
 8012356:	4603      	mov	r3, r0
 8012358:	b2db      	uxtb	r3, r3
 801235a:	f003 0301 	and.w	r3, r3, #1
 801235e:	2b00      	cmp	r3, #0
 8012360:	d010      	beq.n	8012384 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012362:	e00a      	b.n	801237a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012368:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801236e:	681a      	ldr	r2, [r3, #0]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012374:	68f8      	ldr	r0, [r7, #12]
 8012376:	f7fd fd92 	bl	800fe9e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801237e:	2b00      	cmp	r3, #0
 8012380:	d1f0      	bne.n	8012364 <tcp_receive+0x7ec>
 8012382:	e0c8      	b.n	8012516 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012388:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801238a:	e052      	b.n	8012432 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801238c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801238e:	68db      	ldr	r3, [r3, #12]
 8012390:	899b      	ldrh	r3, [r3, #12]
 8012392:	b29b      	uxth	r3, r3
 8012394:	4618      	mov	r0, r3
 8012396:	f7fa ff0f 	bl	800d1b8 <lwip_htons>
 801239a:	4603      	mov	r3, r0
 801239c:	b2db      	uxtb	r3, r3
 801239e:	f003 0301 	and.w	r3, r3, #1
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d03d      	beq.n	8012422 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80123a6:	4b17      	ldr	r3, [pc, #92]	; (8012404 <tcp_receive+0x88c>)
 80123a8:	68db      	ldr	r3, [r3, #12]
 80123aa:	899b      	ldrh	r3, [r3, #12]
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7fa ff02 	bl	800d1b8 <lwip_htons>
 80123b4:	4603      	mov	r3, r0
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d130      	bne.n	8012422 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80123c0:	4b10      	ldr	r3, [pc, #64]	; (8012404 <tcp_receive+0x88c>)
 80123c2:	68db      	ldr	r3, [r3, #12]
 80123c4:	899b      	ldrh	r3, [r3, #12]
 80123c6:	b29c      	uxth	r4, r3
 80123c8:	2001      	movs	r0, #1
 80123ca:	f7fa fef5 	bl	800d1b8 <lwip_htons>
 80123ce:	4603      	mov	r3, r0
 80123d0:	461a      	mov	r2, r3
 80123d2:	4b0c      	ldr	r3, [pc, #48]	; (8012404 <tcp_receive+0x88c>)
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	4322      	orrs	r2, r4
 80123d8:	b292      	uxth	r2, r2
 80123da:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80123dc:	4b09      	ldr	r3, [pc, #36]	; (8012404 <tcp_receive+0x88c>)
 80123de:	891c      	ldrh	r4, [r3, #8]
 80123e0:	4b08      	ldr	r3, [pc, #32]	; (8012404 <tcp_receive+0x88c>)
 80123e2:	68db      	ldr	r3, [r3, #12]
 80123e4:	899b      	ldrh	r3, [r3, #12]
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7fa fee5 	bl	800d1b8 <lwip_htons>
 80123ee:	4603      	mov	r3, r0
 80123f0:	b2db      	uxtb	r3, r3
 80123f2:	f003 0303 	and.w	r3, r3, #3
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d00e      	beq.n	8012418 <tcp_receive+0x8a0>
 80123fa:	2301      	movs	r3, #1
 80123fc:	e00d      	b.n	801241a <tcp_receive+0x8a2>
 80123fe:	bf00      	nop
 8012400:	20009744 	.word	0x20009744
 8012404:	20009724 	.word	0x20009724
 8012408:	2000974e 	.word	0x2000974e
 801240c:	08019ae0 	.word	0x08019ae0
 8012410:	08019e88 	.word	0x08019e88
 8012414:	08019b2c 	.word	0x08019b2c
 8012418:	2300      	movs	r3, #0
 801241a:	4423      	add	r3, r4
 801241c:	b29a      	uxth	r2, r3
 801241e:	4b98      	ldr	r3, [pc, #608]	; (8012680 <tcp_receive+0xb08>)
 8012420:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012424:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801242c:	6938      	ldr	r0, [r7, #16]
 801242e:	f7fd fd36 	bl	800fe9e <tcp_seg_free>
            while (next &&
 8012432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012434:	2b00      	cmp	r3, #0
 8012436:	d00e      	beq.n	8012456 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012438:	4b91      	ldr	r3, [pc, #580]	; (8012680 <tcp_receive+0xb08>)
 801243a:	881b      	ldrh	r3, [r3, #0]
 801243c:	461a      	mov	r2, r3
 801243e:	4b91      	ldr	r3, [pc, #580]	; (8012684 <tcp_receive+0xb0c>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	441a      	add	r2, r3
 8012444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012446:	68db      	ldr	r3, [r3, #12]
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801244c:	8909      	ldrh	r1, [r1, #8]
 801244e:	440b      	add	r3, r1
 8012450:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012452:	2b00      	cmp	r3, #0
 8012454:	da9a      	bge.n	801238c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012458:	2b00      	cmp	r3, #0
 801245a:	d059      	beq.n	8012510 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801245c:	4b88      	ldr	r3, [pc, #544]	; (8012680 <tcp_receive+0xb08>)
 801245e:	881b      	ldrh	r3, [r3, #0]
 8012460:	461a      	mov	r2, r3
 8012462:	4b88      	ldr	r3, [pc, #544]	; (8012684 <tcp_receive+0xb0c>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	441a      	add	r2, r3
 8012468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801246a:	68db      	ldr	r3, [r3, #12]
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012470:	2b00      	cmp	r3, #0
 8012472:	dd4d      	ble.n	8012510 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012476:	68db      	ldr	r3, [r3, #12]
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	b29a      	uxth	r2, r3
 801247c:	4b81      	ldr	r3, [pc, #516]	; (8012684 <tcp_receive+0xb0c>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	b29b      	uxth	r3, r3
 8012482:	1ad3      	subs	r3, r2, r3
 8012484:	b29a      	uxth	r2, r3
 8012486:	4b80      	ldr	r3, [pc, #512]	; (8012688 <tcp_receive+0xb10>)
 8012488:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801248a:	4b7f      	ldr	r3, [pc, #508]	; (8012688 <tcp_receive+0xb10>)
 801248c:	68db      	ldr	r3, [r3, #12]
 801248e:	899b      	ldrh	r3, [r3, #12]
 8012490:	b29b      	uxth	r3, r3
 8012492:	4618      	mov	r0, r3
 8012494:	f7fa fe90 	bl	800d1b8 <lwip_htons>
 8012498:	4603      	mov	r3, r0
 801249a:	b2db      	uxtb	r3, r3
 801249c:	f003 0302 	and.w	r3, r3, #2
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d005      	beq.n	80124b0 <tcp_receive+0x938>
                inseg.len -= 1;
 80124a4:	4b78      	ldr	r3, [pc, #480]	; (8012688 <tcp_receive+0xb10>)
 80124a6:	891b      	ldrh	r3, [r3, #8]
 80124a8:	3b01      	subs	r3, #1
 80124aa:	b29a      	uxth	r2, r3
 80124ac:	4b76      	ldr	r3, [pc, #472]	; (8012688 <tcp_receive+0xb10>)
 80124ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80124b0:	4b75      	ldr	r3, [pc, #468]	; (8012688 <tcp_receive+0xb10>)
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	4a74      	ldr	r2, [pc, #464]	; (8012688 <tcp_receive+0xb10>)
 80124b6:	8912      	ldrh	r2, [r2, #8]
 80124b8:	4611      	mov	r1, r2
 80124ba:	4618      	mov	r0, r3
 80124bc:	f7fc f854 	bl	800e568 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80124c0:	4b71      	ldr	r3, [pc, #452]	; (8012688 <tcp_receive+0xb10>)
 80124c2:	891c      	ldrh	r4, [r3, #8]
 80124c4:	4b70      	ldr	r3, [pc, #448]	; (8012688 <tcp_receive+0xb10>)
 80124c6:	68db      	ldr	r3, [r3, #12]
 80124c8:	899b      	ldrh	r3, [r3, #12]
 80124ca:	b29b      	uxth	r3, r3
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7fa fe73 	bl	800d1b8 <lwip_htons>
 80124d2:	4603      	mov	r3, r0
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	f003 0303 	and.w	r3, r3, #3
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d001      	beq.n	80124e2 <tcp_receive+0x96a>
 80124de:	2301      	movs	r3, #1
 80124e0:	e000      	b.n	80124e4 <tcp_receive+0x96c>
 80124e2:	2300      	movs	r3, #0
 80124e4:	4423      	add	r3, r4
 80124e6:	b29a      	uxth	r2, r3
 80124e8:	4b65      	ldr	r3, [pc, #404]	; (8012680 <tcp_receive+0xb08>)
 80124ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80124ec:	4b64      	ldr	r3, [pc, #400]	; (8012680 <tcp_receive+0xb08>)
 80124ee:	881b      	ldrh	r3, [r3, #0]
 80124f0:	461a      	mov	r2, r3
 80124f2:	4b64      	ldr	r3, [pc, #400]	; (8012684 <tcp_receive+0xb0c>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	441a      	add	r2, r3
 80124f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d006      	beq.n	8012510 <tcp_receive+0x998>
 8012502:	4b62      	ldr	r3, [pc, #392]	; (801268c <tcp_receive+0xb14>)
 8012504:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012508:	4961      	ldr	r1, [pc, #388]	; (8012690 <tcp_receive+0xb18>)
 801250a:	4862      	ldr	r0, [pc, #392]	; (8012694 <tcp_receive+0xb1c>)
 801250c:	f005 f80c 	bl	8017528 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012514:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012516:	4b5a      	ldr	r3, [pc, #360]	; (8012680 <tcp_receive+0xb08>)
 8012518:	881b      	ldrh	r3, [r3, #0]
 801251a:	461a      	mov	r2, r3
 801251c:	4b59      	ldr	r3, [pc, #356]	; (8012684 <tcp_receive+0xb0c>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	441a      	add	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801252a:	4b55      	ldr	r3, [pc, #340]	; (8012680 <tcp_receive+0xb08>)
 801252c:	881b      	ldrh	r3, [r3, #0]
 801252e:	429a      	cmp	r2, r3
 8012530:	d206      	bcs.n	8012540 <tcp_receive+0x9c8>
 8012532:	4b56      	ldr	r3, [pc, #344]	; (801268c <tcp_receive+0xb14>)
 8012534:	f240 6207 	movw	r2, #1543	; 0x607
 8012538:	4957      	ldr	r1, [pc, #348]	; (8012698 <tcp_receive+0xb20>)
 801253a:	4856      	ldr	r0, [pc, #344]	; (8012694 <tcp_receive+0xb1c>)
 801253c:	f004 fff4 	bl	8017528 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012544:	4b4e      	ldr	r3, [pc, #312]	; (8012680 <tcp_receive+0xb08>)
 8012546:	881b      	ldrh	r3, [r3, #0]
 8012548:	1ad3      	subs	r3, r2, r3
 801254a:	b29a      	uxth	r2, r3
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f7fc ffc5 	bl	800f4e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012556:	4b4c      	ldr	r3, [pc, #304]	; (8012688 <tcp_receive+0xb10>)
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	891b      	ldrh	r3, [r3, #8]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d006      	beq.n	801256e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8012560:	4b49      	ldr	r3, [pc, #292]	; (8012688 <tcp_receive+0xb10>)
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	4a4d      	ldr	r2, [pc, #308]	; (801269c <tcp_receive+0xb24>)
 8012566:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012568:	4b47      	ldr	r3, [pc, #284]	; (8012688 <tcp_receive+0xb10>)
 801256a:	2200      	movs	r2, #0
 801256c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801256e:	4b46      	ldr	r3, [pc, #280]	; (8012688 <tcp_receive+0xb10>)
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	899b      	ldrh	r3, [r3, #12]
 8012574:	b29b      	uxth	r3, r3
 8012576:	4618      	mov	r0, r3
 8012578:	f7fa fe1e 	bl	800d1b8 <lwip_htons>
 801257c:	4603      	mov	r3, r0
 801257e:	b2db      	uxtb	r3, r3
 8012580:	f003 0301 	and.w	r3, r3, #1
 8012584:	2b00      	cmp	r3, #0
 8012586:	f000 80b8 	beq.w	80126fa <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801258a:	4b45      	ldr	r3, [pc, #276]	; (80126a0 <tcp_receive+0xb28>)
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	f043 0320 	orr.w	r3, r3, #32
 8012592:	b2da      	uxtb	r2, r3
 8012594:	4b42      	ldr	r3, [pc, #264]	; (80126a0 <tcp_receive+0xb28>)
 8012596:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012598:	e0af      	b.n	80126fa <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801259e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125a4:	68db      	ldr	r3, [r3, #12]
 80125a6:	685b      	ldr	r3, [r3, #4]
 80125a8:	4a36      	ldr	r2, [pc, #216]	; (8012684 <tcp_receive+0xb0c>)
 80125aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	891b      	ldrh	r3, [r3, #8]
 80125b0:	461c      	mov	r4, r3
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	899b      	ldrh	r3, [r3, #12]
 80125b8:	b29b      	uxth	r3, r3
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7fa fdfc 	bl	800d1b8 <lwip_htons>
 80125c0:	4603      	mov	r3, r0
 80125c2:	b2db      	uxtb	r3, r3
 80125c4:	f003 0303 	and.w	r3, r3, #3
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d001      	beq.n	80125d0 <tcp_receive+0xa58>
 80125cc:	2301      	movs	r3, #1
 80125ce:	e000      	b.n	80125d2 <tcp_receive+0xa5a>
 80125d0:	2300      	movs	r3, #0
 80125d2:	191a      	adds	r2, r3, r4
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125d8:	441a      	add	r2, r3
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125e2:	461c      	mov	r4, r3
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	891b      	ldrh	r3, [r3, #8]
 80125e8:	461d      	mov	r5, r3
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	68db      	ldr	r3, [r3, #12]
 80125ee:	899b      	ldrh	r3, [r3, #12]
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7fa fde0 	bl	800d1b8 <lwip_htons>
 80125f8:	4603      	mov	r3, r0
 80125fa:	b2db      	uxtb	r3, r3
 80125fc:	f003 0303 	and.w	r3, r3, #3
 8012600:	2b00      	cmp	r3, #0
 8012602:	d001      	beq.n	8012608 <tcp_receive+0xa90>
 8012604:	2301      	movs	r3, #1
 8012606:	e000      	b.n	801260a <tcp_receive+0xa92>
 8012608:	2300      	movs	r3, #0
 801260a:	442b      	add	r3, r5
 801260c:	429c      	cmp	r4, r3
 801260e:	d206      	bcs.n	801261e <tcp_receive+0xaa6>
 8012610:	4b1e      	ldr	r3, [pc, #120]	; (801268c <tcp_receive+0xb14>)
 8012612:	f240 622b 	movw	r2, #1579	; 0x62b
 8012616:	4923      	ldr	r1, [pc, #140]	; (80126a4 <tcp_receive+0xb2c>)
 8012618:	481e      	ldr	r0, [pc, #120]	; (8012694 <tcp_receive+0xb1c>)
 801261a:	f004 ff85 	bl	8017528 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	891b      	ldrh	r3, [r3, #8]
 8012622:	461c      	mov	r4, r3
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	68db      	ldr	r3, [r3, #12]
 8012628:	899b      	ldrh	r3, [r3, #12]
 801262a:	b29b      	uxth	r3, r3
 801262c:	4618      	mov	r0, r3
 801262e:	f7fa fdc3 	bl	800d1b8 <lwip_htons>
 8012632:	4603      	mov	r3, r0
 8012634:	b2db      	uxtb	r3, r3
 8012636:	f003 0303 	and.w	r3, r3, #3
 801263a:	2b00      	cmp	r3, #0
 801263c:	d001      	beq.n	8012642 <tcp_receive+0xaca>
 801263e:	2301      	movs	r3, #1
 8012640:	e000      	b.n	8012644 <tcp_receive+0xacc>
 8012642:	2300      	movs	r3, #0
 8012644:	1919      	adds	r1, r3, r4
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801264a:	b28b      	uxth	r3, r1
 801264c:	1ad3      	subs	r3, r2, r3
 801264e:	b29a      	uxth	r2, r3
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012654:	6878      	ldr	r0, [r7, #4]
 8012656:	f7fc ff43 	bl	800f4e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	891b      	ldrh	r3, [r3, #8]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d028      	beq.n	80126b6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012664:	4b0d      	ldr	r3, [pc, #52]	; (801269c <tcp_receive+0xb24>)
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d01d      	beq.n	80126a8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801266c:	4b0b      	ldr	r3, [pc, #44]	; (801269c <tcp_receive+0xb24>)
 801266e:	681a      	ldr	r2, [r3, #0]
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	685b      	ldr	r3, [r3, #4]
 8012674:	4619      	mov	r1, r3
 8012676:	4610      	mov	r0, r2
 8012678:	f7fc f9be 	bl	800e9f8 <pbuf_cat>
 801267c:	e018      	b.n	80126b0 <tcp_receive+0xb38>
 801267e:	bf00      	nop
 8012680:	2000974e 	.word	0x2000974e
 8012684:	20009744 	.word	0x20009744
 8012688:	20009724 	.word	0x20009724
 801268c:	08019ae0 	.word	0x08019ae0
 8012690:	08019ec0 	.word	0x08019ec0
 8012694:	08019b2c 	.word	0x08019b2c
 8012698:	08019efc 	.word	0x08019efc
 801269c:	20009754 	.word	0x20009754
 80126a0:	20009751 	.word	0x20009751
 80126a4:	08019f1c 	.word	0x08019f1c
            } else {
              recv_data = cseg->p;
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	4a70      	ldr	r2, [pc, #448]	; (8012870 <tcp_receive+0xcf8>)
 80126ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	2200      	movs	r2, #0
 80126b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	68db      	ldr	r3, [r3, #12]
 80126ba:	899b      	ldrh	r3, [r3, #12]
 80126bc:	b29b      	uxth	r3, r3
 80126be:	4618      	mov	r0, r3
 80126c0:	f7fa fd7a 	bl	800d1b8 <lwip_htons>
 80126c4:	4603      	mov	r3, r0
 80126c6:	b2db      	uxtb	r3, r3
 80126c8:	f003 0301 	and.w	r3, r3, #1
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d00d      	beq.n	80126ec <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80126d0:	4b68      	ldr	r3, [pc, #416]	; (8012874 <tcp_receive+0xcfc>)
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	f043 0320 	orr.w	r3, r3, #32
 80126d8:	b2da      	uxtb	r2, r3
 80126da:	4b66      	ldr	r3, [pc, #408]	; (8012874 <tcp_receive+0xcfc>)
 80126dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	7d1b      	ldrb	r3, [r3, #20]
 80126e2:	2b04      	cmp	r3, #4
 80126e4:	d102      	bne.n	80126ec <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2207      	movs	r2, #7
 80126ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80126f4:	68b8      	ldr	r0, [r7, #8]
 80126f6:	f7fd fbd2 	bl	800fe9e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d008      	beq.n	8012714 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012706:	68db      	ldr	r3, [r3, #12]
 8012708:	685a      	ldr	r2, [r3, #4]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801270e:	429a      	cmp	r2, r3
 8012710:	f43f af43 	beq.w	801259a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	8b5b      	ldrh	r3, [r3, #26]
 8012718:	f003 0301 	and.w	r3, r3, #1
 801271c:	2b00      	cmp	r3, #0
 801271e:	d00e      	beq.n	801273e <tcp_receive+0xbc6>
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	8b5b      	ldrh	r3, [r3, #26]
 8012724:	f023 0301 	bic.w	r3, r3, #1
 8012728:	b29a      	uxth	r2, r3
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	835a      	strh	r2, [r3, #26]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	8b5b      	ldrh	r3, [r3, #26]
 8012732:	f043 0302 	orr.w	r3, r3, #2
 8012736:	b29a      	uxth	r2, r3
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801273c:	e188      	b.n	8012a50 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	8b5b      	ldrh	r3, [r3, #26]
 8012742:	f043 0301 	orr.w	r3, r3, #1
 8012746:	b29a      	uxth	r2, r3
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801274c:	e180      	b.n	8012a50 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012752:	2b00      	cmp	r3, #0
 8012754:	d106      	bne.n	8012764 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012756:	4848      	ldr	r0, [pc, #288]	; (8012878 <tcp_receive+0xd00>)
 8012758:	f7fd fbba 	bl	800fed0 <tcp_seg_copy>
 801275c:	4602      	mov	r2, r0
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	675a      	str	r2, [r3, #116]	; 0x74
 8012762:	e16d      	b.n	8012a40 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012764:	2300      	movs	r3, #0
 8012766:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801276c:	63bb      	str	r3, [r7, #56]	; 0x38
 801276e:	e157      	b.n	8012a20 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8012770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012772:	68db      	ldr	r3, [r3, #12]
 8012774:	685a      	ldr	r2, [r3, #4]
 8012776:	4b41      	ldr	r3, [pc, #260]	; (801287c <tcp_receive+0xd04>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	429a      	cmp	r2, r3
 801277c:	d11d      	bne.n	80127ba <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801277e:	4b3e      	ldr	r3, [pc, #248]	; (8012878 <tcp_receive+0xd00>)
 8012780:	891a      	ldrh	r2, [r3, #8]
 8012782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012784:	891b      	ldrh	r3, [r3, #8]
 8012786:	429a      	cmp	r2, r3
 8012788:	f240 814f 	bls.w	8012a2a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801278c:	483a      	ldr	r0, [pc, #232]	; (8012878 <tcp_receive+0xd00>)
 801278e:	f7fd fb9f 	bl	800fed0 <tcp_seg_copy>
 8012792:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	2b00      	cmp	r3, #0
 8012798:	f000 8149 	beq.w	8012a2e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d003      	beq.n	80127aa <tcp_receive+0xc32>
                    prev->next = cseg;
 80127a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127a4:	697a      	ldr	r2, [r7, #20]
 80127a6:	601a      	str	r2, [r3, #0]
 80127a8:	e002      	b.n	80127b0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	697a      	ldr	r2, [r7, #20]
 80127ae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80127b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80127b2:	6978      	ldr	r0, [r7, #20]
 80127b4:	f7ff f8dc 	bl	8011970 <tcp_oos_insert_segment>
                }
                break;
 80127b8:	e139      	b.n	8012a2e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80127ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d117      	bne.n	80127f0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80127c0:	4b2e      	ldr	r3, [pc, #184]	; (801287c <tcp_receive+0xd04>)
 80127c2:	681a      	ldr	r2, [r3, #0]
 80127c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c6:	68db      	ldr	r3, [r3, #12]
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	1ad3      	subs	r3, r2, r3
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	da57      	bge.n	8012880 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80127d0:	4829      	ldr	r0, [pc, #164]	; (8012878 <tcp_receive+0xd00>)
 80127d2:	f7fd fb7d 	bl	800fed0 <tcp_seg_copy>
 80127d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80127d8:	69bb      	ldr	r3, [r7, #24]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	f000 8129 	beq.w	8012a32 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	69ba      	ldr	r2, [r7, #24]
 80127e4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80127e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80127e8:	69b8      	ldr	r0, [r7, #24]
 80127ea:	f7ff f8c1 	bl	8011970 <tcp_oos_insert_segment>
                  }
                  break;
 80127ee:	e120      	b.n	8012a32 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80127f0:	4b22      	ldr	r3, [pc, #136]	; (801287c <tcp_receive+0xd04>)
 80127f2:	681a      	ldr	r2, [r3, #0]
 80127f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	685b      	ldr	r3, [r3, #4]
 80127fa:	1ad3      	subs	r3, r2, r3
 80127fc:	3b01      	subs	r3, #1
 80127fe:	2b00      	cmp	r3, #0
 8012800:	db3e      	blt.n	8012880 <tcp_receive+0xd08>
 8012802:	4b1e      	ldr	r3, [pc, #120]	; (801287c <tcp_receive+0xd04>)
 8012804:	681a      	ldr	r2, [r3, #0]
 8012806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	1ad3      	subs	r3, r2, r3
 801280e:	3301      	adds	r3, #1
 8012810:	2b00      	cmp	r3, #0
 8012812:	dc35      	bgt.n	8012880 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012814:	4818      	ldr	r0, [pc, #96]	; (8012878 <tcp_receive+0xd00>)
 8012816:	f7fd fb5b 	bl	800fed0 <tcp_seg_copy>
 801281a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801281c:	69fb      	ldr	r3, [r7, #28]
 801281e:	2b00      	cmp	r3, #0
 8012820:	f000 8109 	beq.w	8012a36 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012826:	68db      	ldr	r3, [r3, #12]
 8012828:	685b      	ldr	r3, [r3, #4]
 801282a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801282c:	8912      	ldrh	r2, [r2, #8]
 801282e:	441a      	add	r2, r3
 8012830:	4b12      	ldr	r3, [pc, #72]	; (801287c <tcp_receive+0xd04>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	1ad3      	subs	r3, r2, r3
 8012836:	2b00      	cmp	r3, #0
 8012838:	dd12      	ble.n	8012860 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801283a:	4b10      	ldr	r3, [pc, #64]	; (801287c <tcp_receive+0xd04>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	b29a      	uxth	r2, r3
 8012840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	685b      	ldr	r3, [r3, #4]
 8012846:	b29b      	uxth	r3, r3
 8012848:	1ad3      	subs	r3, r2, r3
 801284a:	b29a      	uxth	r2, r3
 801284c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801284e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012852:	685a      	ldr	r2, [r3, #4]
 8012854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012856:	891b      	ldrh	r3, [r3, #8]
 8012858:	4619      	mov	r1, r3
 801285a:	4610      	mov	r0, r2
 801285c:	f7fb fe84 	bl	800e568 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012862:	69fa      	ldr	r2, [r7, #28]
 8012864:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012866:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012868:	69f8      	ldr	r0, [r7, #28]
 801286a:	f7ff f881 	bl	8011970 <tcp_oos_insert_segment>
                  }
                  break;
 801286e:	e0e2      	b.n	8012a36 <tcp_receive+0xebe>
 8012870:	20009754 	.word	0x20009754
 8012874:	20009751 	.word	0x20009751
 8012878:	20009724 	.word	0x20009724
 801287c:	20009744 	.word	0x20009744
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012882:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	2b00      	cmp	r3, #0
 801288a:	f040 80c6 	bne.w	8012a1a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801288e:	4b80      	ldr	r3, [pc, #512]	; (8012a90 <tcp_receive+0xf18>)
 8012890:	681a      	ldr	r2, [r3, #0]
 8012892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012894:	68db      	ldr	r3, [r3, #12]
 8012896:	685b      	ldr	r3, [r3, #4]
 8012898:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801289a:	2b00      	cmp	r3, #0
 801289c:	f340 80bd 	ble.w	8012a1a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80128a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	899b      	ldrh	r3, [r3, #12]
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7fa fc85 	bl	800d1b8 <lwip_htons>
 80128ae:	4603      	mov	r3, r0
 80128b0:	b2db      	uxtb	r3, r3
 80128b2:	f003 0301 	and.w	r3, r3, #1
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	f040 80bf 	bne.w	8012a3a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80128bc:	4875      	ldr	r0, [pc, #468]	; (8012a94 <tcp_receive+0xf1c>)
 80128be:	f7fd fb07 	bl	800fed0 <tcp_seg_copy>
 80128c2:	4602      	mov	r2, r0
 80128c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80128c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	f000 80b6 	beq.w	8012a3e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80128d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d4:	68db      	ldr	r3, [r3, #12]
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80128da:	8912      	ldrh	r2, [r2, #8]
 80128dc:	441a      	add	r2, r3
 80128de:	4b6c      	ldr	r3, [pc, #432]	; (8012a90 <tcp_receive+0xf18>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	1ad3      	subs	r3, r2, r3
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	dd12      	ble.n	801290e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80128e8:	4b69      	ldr	r3, [pc, #420]	; (8012a90 <tcp_receive+0xf18>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	b29a      	uxth	r2, r3
 80128ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	1ad3      	subs	r3, r2, r3
 80128f8:	b29a      	uxth	r2, r3
 80128fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80128fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012900:	685a      	ldr	r2, [r3, #4]
 8012902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012904:	891b      	ldrh	r3, [r3, #8]
 8012906:	4619      	mov	r1, r3
 8012908:	4610      	mov	r0, r2
 801290a:	f7fb fe2d 	bl	800e568 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801290e:	4b62      	ldr	r3, [pc, #392]	; (8012a98 <tcp_receive+0xf20>)
 8012910:	881b      	ldrh	r3, [r3, #0]
 8012912:	461a      	mov	r2, r3
 8012914:	4b5e      	ldr	r3, [pc, #376]	; (8012a90 <tcp_receive+0xf18>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	441a      	add	r2, r3
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801291e:	6879      	ldr	r1, [r7, #4]
 8012920:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012922:	440b      	add	r3, r1
 8012924:	1ad3      	subs	r3, r2, r3
 8012926:	2b00      	cmp	r3, #0
 8012928:	f340 8089 	ble.w	8012a3e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	68db      	ldr	r3, [r3, #12]
 8012932:	899b      	ldrh	r3, [r3, #12]
 8012934:	b29b      	uxth	r3, r3
 8012936:	4618      	mov	r0, r3
 8012938:	f7fa fc3e 	bl	800d1b8 <lwip_htons>
 801293c:	4603      	mov	r3, r0
 801293e:	b2db      	uxtb	r3, r3
 8012940:	f003 0301 	and.w	r3, r3, #1
 8012944:	2b00      	cmp	r3, #0
 8012946:	d022      	beq.n	801298e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	68db      	ldr	r3, [r3, #12]
 801294e:	899b      	ldrh	r3, [r3, #12]
 8012950:	b29b      	uxth	r3, r3
 8012952:	b21b      	sxth	r3, r3
 8012954:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012958:	b21c      	sxth	r4, r3
 801295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	899b      	ldrh	r3, [r3, #12]
 8012962:	b29b      	uxth	r3, r3
 8012964:	4618      	mov	r0, r3
 8012966:	f7fa fc27 	bl	800d1b8 <lwip_htons>
 801296a:	4603      	mov	r3, r0
 801296c:	b2db      	uxtb	r3, r3
 801296e:	b29b      	uxth	r3, r3
 8012970:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012974:	b29b      	uxth	r3, r3
 8012976:	4618      	mov	r0, r3
 8012978:	f7fa fc1e 	bl	800d1b8 <lwip_htons>
 801297c:	4603      	mov	r3, r0
 801297e:	b21b      	sxth	r3, r3
 8012980:	4323      	orrs	r3, r4
 8012982:	b21a      	sxth	r2, r3
 8012984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	68db      	ldr	r3, [r3, #12]
 801298a:	b292      	uxth	r2, r2
 801298c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012992:	b29a      	uxth	r2, r3
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012998:	4413      	add	r3, r2
 801299a:	b299      	uxth	r1, r3
 801299c:	4b3c      	ldr	r3, [pc, #240]	; (8012a90 <tcp_receive+0xf18>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	b29a      	uxth	r2, r3
 80129a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	1a8a      	subs	r2, r1, r2
 80129a8:	b292      	uxth	r2, r2
 80129aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80129ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	685a      	ldr	r2, [r3, #4]
 80129b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	891b      	ldrh	r3, [r3, #8]
 80129b8:	4619      	mov	r1, r3
 80129ba:	4610      	mov	r0, r2
 80129bc:	f7fb fdd4 	bl	800e568 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80129c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	891c      	ldrh	r4, [r3, #8]
 80129c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	68db      	ldr	r3, [r3, #12]
 80129cc:	899b      	ldrh	r3, [r3, #12]
 80129ce:	b29b      	uxth	r3, r3
 80129d0:	4618      	mov	r0, r3
 80129d2:	f7fa fbf1 	bl	800d1b8 <lwip_htons>
 80129d6:	4603      	mov	r3, r0
 80129d8:	b2db      	uxtb	r3, r3
 80129da:	f003 0303 	and.w	r3, r3, #3
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d001      	beq.n	80129e6 <tcp_receive+0xe6e>
 80129e2:	2301      	movs	r3, #1
 80129e4:	e000      	b.n	80129e8 <tcp_receive+0xe70>
 80129e6:	2300      	movs	r3, #0
 80129e8:	4423      	add	r3, r4
 80129ea:	b29a      	uxth	r2, r3
 80129ec:	4b2a      	ldr	r3, [pc, #168]	; (8012a98 <tcp_receive+0xf20>)
 80129ee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80129f0:	4b29      	ldr	r3, [pc, #164]	; (8012a98 <tcp_receive+0xf20>)
 80129f2:	881b      	ldrh	r3, [r3, #0]
 80129f4:	461a      	mov	r2, r3
 80129f6:	4b26      	ldr	r3, [pc, #152]	; (8012a90 <tcp_receive+0xf18>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	441a      	add	r2, r3
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a00:	6879      	ldr	r1, [r7, #4]
 8012a02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012a04:	440b      	add	r3, r1
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d019      	beq.n	8012a3e <tcp_receive+0xec6>
 8012a0a:	4b24      	ldr	r3, [pc, #144]	; (8012a9c <tcp_receive+0xf24>)
 8012a0c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012a10:	4923      	ldr	r1, [pc, #140]	; (8012aa0 <tcp_receive+0xf28>)
 8012a12:	4824      	ldr	r0, [pc, #144]	; (8012aa4 <tcp_receive+0xf2c>)
 8012a14:	f004 fd88 	bl	8017528 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012a18:	e011      	b.n	8012a3e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	f47f aea4 	bne.w	8012770 <tcp_receive+0xbf8>
 8012a28:	e00a      	b.n	8012a40 <tcp_receive+0xec8>
                break;
 8012a2a:	bf00      	nop
 8012a2c:	e008      	b.n	8012a40 <tcp_receive+0xec8>
                break;
 8012a2e:	bf00      	nop
 8012a30:	e006      	b.n	8012a40 <tcp_receive+0xec8>
                  break;
 8012a32:	bf00      	nop
 8012a34:	e004      	b.n	8012a40 <tcp_receive+0xec8>
                  break;
 8012a36:	bf00      	nop
 8012a38:	e002      	b.n	8012a40 <tcp_receive+0xec8>
                  break;
 8012a3a:	bf00      	nop
 8012a3c:	e000      	b.n	8012a40 <tcp_receive+0xec8>
                break;
 8012a3e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f001 fa33 	bl	8013eac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012a46:	e003      	b.n	8012a50 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f001 fa2f 	bl	8013eac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012a4e:	e01a      	b.n	8012a86 <tcp_receive+0xf0e>
 8012a50:	e019      	b.n	8012a86 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012a52:	4b0f      	ldr	r3, [pc, #60]	; (8012a90 <tcp_receive+0xf18>)
 8012a54:	681a      	ldr	r2, [r3, #0]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a5a:	1ad3      	subs	r3, r2, r3
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	db0a      	blt.n	8012a76 <tcp_receive+0xefe>
 8012a60:	4b0b      	ldr	r3, [pc, #44]	; (8012a90 <tcp_receive+0xf18>)
 8012a62:	681a      	ldr	r2, [r3, #0]
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a68:	6879      	ldr	r1, [r7, #4]
 8012a6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012a6c:	440b      	add	r3, r1
 8012a6e:	1ad3      	subs	r3, r2, r3
 8012a70:	3301      	adds	r3, #1
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	dd07      	ble.n	8012a86 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	8b5b      	ldrh	r3, [r3, #26]
 8012a7a:	f043 0302 	orr.w	r3, r3, #2
 8012a7e:	b29a      	uxth	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012a84:	e7ff      	b.n	8012a86 <tcp_receive+0xf0e>
 8012a86:	bf00      	nop
 8012a88:	3750      	adds	r7, #80	; 0x50
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	20009744 	.word	0x20009744
 8012a94:	20009724 	.word	0x20009724
 8012a98:	2000974e 	.word	0x2000974e
 8012a9c:	08019ae0 	.word	0x08019ae0
 8012aa0:	08019e88 	.word	0x08019e88
 8012aa4:	08019b2c 	.word	0x08019b2c

08012aa8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b083      	sub	sp, #12
 8012aac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012aae:	4b15      	ldr	r3, [pc, #84]	; (8012b04 <tcp_get_next_optbyte+0x5c>)
 8012ab0:	881b      	ldrh	r3, [r3, #0]
 8012ab2:	1c5a      	adds	r2, r3, #1
 8012ab4:	b291      	uxth	r1, r2
 8012ab6:	4a13      	ldr	r2, [pc, #76]	; (8012b04 <tcp_get_next_optbyte+0x5c>)
 8012ab8:	8011      	strh	r1, [r2, #0]
 8012aba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012abc:	4b12      	ldr	r3, [pc, #72]	; (8012b08 <tcp_get_next_optbyte+0x60>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d004      	beq.n	8012ace <tcp_get_next_optbyte+0x26>
 8012ac4:	4b11      	ldr	r3, [pc, #68]	; (8012b0c <tcp_get_next_optbyte+0x64>)
 8012ac6:	881b      	ldrh	r3, [r3, #0]
 8012ac8:	88fa      	ldrh	r2, [r7, #6]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d208      	bcs.n	8012ae0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012ace:	4b10      	ldr	r3, [pc, #64]	; (8012b10 <tcp_get_next_optbyte+0x68>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	3314      	adds	r3, #20
 8012ad4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012ad6:	88fb      	ldrh	r3, [r7, #6]
 8012ad8:	683a      	ldr	r2, [r7, #0]
 8012ada:	4413      	add	r3, r2
 8012adc:	781b      	ldrb	r3, [r3, #0]
 8012ade:	e00b      	b.n	8012af8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012ae0:	88fb      	ldrh	r3, [r7, #6]
 8012ae2:	b2da      	uxtb	r2, r3
 8012ae4:	4b09      	ldr	r3, [pc, #36]	; (8012b0c <tcp_get_next_optbyte+0x64>)
 8012ae6:	881b      	ldrh	r3, [r3, #0]
 8012ae8:	b2db      	uxtb	r3, r3
 8012aea:	1ad3      	subs	r3, r2, r3
 8012aec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012aee:	4b06      	ldr	r3, [pc, #24]	; (8012b08 <tcp_get_next_optbyte+0x60>)
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	797b      	ldrb	r3, [r7, #5]
 8012af4:	4413      	add	r3, r2
 8012af6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	370c      	adds	r7, #12
 8012afc:	46bd      	mov	sp, r7
 8012afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b02:	4770      	bx	lr
 8012b04:	20009740 	.word	0x20009740
 8012b08:	2000973c 	.word	0x2000973c
 8012b0c:	2000973a 	.word	0x2000973a
 8012b10:	20009734 	.word	0x20009734

08012b14 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b084      	sub	sp, #16
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d106      	bne.n	8012b30 <tcp_parseopt+0x1c>
 8012b22:	4b32      	ldr	r3, [pc, #200]	; (8012bec <tcp_parseopt+0xd8>)
 8012b24:	f240 727d 	movw	r2, #1917	; 0x77d
 8012b28:	4931      	ldr	r1, [pc, #196]	; (8012bf0 <tcp_parseopt+0xdc>)
 8012b2a:	4832      	ldr	r0, [pc, #200]	; (8012bf4 <tcp_parseopt+0xe0>)
 8012b2c:	f004 fcfc 	bl	8017528 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012b30:	4b31      	ldr	r3, [pc, #196]	; (8012bf8 <tcp_parseopt+0xe4>)
 8012b32:	881b      	ldrh	r3, [r3, #0]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d055      	beq.n	8012be4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012b38:	4b30      	ldr	r3, [pc, #192]	; (8012bfc <tcp_parseopt+0xe8>)
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	801a      	strh	r2, [r3, #0]
 8012b3e:	e045      	b.n	8012bcc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012b40:	f7ff ffb2 	bl	8012aa8 <tcp_get_next_optbyte>
 8012b44:	4603      	mov	r3, r0
 8012b46:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012b48:	7bfb      	ldrb	r3, [r7, #15]
 8012b4a:	2b02      	cmp	r3, #2
 8012b4c:	d006      	beq.n	8012b5c <tcp_parseopt+0x48>
 8012b4e:	2b02      	cmp	r3, #2
 8012b50:	dc2b      	bgt.n	8012baa <tcp_parseopt+0x96>
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d041      	beq.n	8012bda <tcp_parseopt+0xc6>
 8012b56:	2b01      	cmp	r3, #1
 8012b58:	d127      	bne.n	8012baa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012b5a:	e037      	b.n	8012bcc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012b5c:	f7ff ffa4 	bl	8012aa8 <tcp_get_next_optbyte>
 8012b60:	4603      	mov	r3, r0
 8012b62:	2b04      	cmp	r3, #4
 8012b64:	d13b      	bne.n	8012bde <tcp_parseopt+0xca>
 8012b66:	4b25      	ldr	r3, [pc, #148]	; (8012bfc <tcp_parseopt+0xe8>)
 8012b68:	881b      	ldrh	r3, [r3, #0]
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	4a22      	ldr	r2, [pc, #136]	; (8012bf8 <tcp_parseopt+0xe4>)
 8012b6e:	8812      	ldrh	r2, [r2, #0]
 8012b70:	4293      	cmp	r3, r2
 8012b72:	da34      	bge.n	8012bde <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012b74:	f7ff ff98 	bl	8012aa8 <tcp_get_next_optbyte>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	b29b      	uxth	r3, r3
 8012b7c:	021b      	lsls	r3, r3, #8
 8012b7e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012b80:	f7ff ff92 	bl	8012aa8 <tcp_get_next_optbyte>
 8012b84:	4603      	mov	r3, r0
 8012b86:	b29a      	uxth	r2, r3
 8012b88:	89bb      	ldrh	r3, [r7, #12]
 8012b8a:	4313      	orrs	r3, r2
 8012b8c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012b8e:	89bb      	ldrh	r3, [r7, #12]
 8012b90:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012b94:	d804      	bhi.n	8012ba0 <tcp_parseopt+0x8c>
 8012b96:	89bb      	ldrh	r3, [r7, #12]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d001      	beq.n	8012ba0 <tcp_parseopt+0x8c>
 8012b9c:	89ba      	ldrh	r2, [r7, #12]
 8012b9e:	e001      	b.n	8012ba4 <tcp_parseopt+0x90>
 8012ba0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012ba8:	e010      	b.n	8012bcc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012baa:	f7ff ff7d 	bl	8012aa8 <tcp_get_next_optbyte>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012bb2:	7afb      	ldrb	r3, [r7, #11]
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	d914      	bls.n	8012be2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012bb8:	7afb      	ldrb	r3, [r7, #11]
 8012bba:	b29a      	uxth	r2, r3
 8012bbc:	4b0f      	ldr	r3, [pc, #60]	; (8012bfc <tcp_parseopt+0xe8>)
 8012bbe:	881b      	ldrh	r3, [r3, #0]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	3b02      	subs	r3, #2
 8012bc6:	b29a      	uxth	r2, r3
 8012bc8:	4b0c      	ldr	r3, [pc, #48]	; (8012bfc <tcp_parseopt+0xe8>)
 8012bca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012bcc:	4b0b      	ldr	r3, [pc, #44]	; (8012bfc <tcp_parseopt+0xe8>)
 8012bce:	881a      	ldrh	r2, [r3, #0]
 8012bd0:	4b09      	ldr	r3, [pc, #36]	; (8012bf8 <tcp_parseopt+0xe4>)
 8012bd2:	881b      	ldrh	r3, [r3, #0]
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d3b3      	bcc.n	8012b40 <tcp_parseopt+0x2c>
 8012bd8:	e004      	b.n	8012be4 <tcp_parseopt+0xd0>
          return;
 8012bda:	bf00      	nop
 8012bdc:	e002      	b.n	8012be4 <tcp_parseopt+0xd0>
            return;
 8012bde:	bf00      	nop
 8012be0:	e000      	b.n	8012be4 <tcp_parseopt+0xd0>
            return;
 8012be2:	bf00      	nop
      }
    }
  }
}
 8012be4:	3710      	adds	r7, #16
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	bf00      	nop
 8012bec:	08019ae0 	.word	0x08019ae0
 8012bf0:	08019f44 	.word	0x08019f44
 8012bf4:	08019b2c 	.word	0x08019b2c
 8012bf8:	20009738 	.word	0x20009738
 8012bfc:	20009740 	.word	0x20009740

08012c00 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012c00:	b480      	push	{r7}
 8012c02:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012c04:	4b05      	ldr	r3, [pc, #20]	; (8012c1c <tcp_trigger_input_pcb_close+0x1c>)
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	f043 0310 	orr.w	r3, r3, #16
 8012c0c:	b2da      	uxtb	r2, r3
 8012c0e:	4b03      	ldr	r3, [pc, #12]	; (8012c1c <tcp_trigger_input_pcb_close+0x1c>)
 8012c10:	701a      	strb	r2, [r3, #0]
}
 8012c12:	bf00      	nop
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr
 8012c1c:	20009751 	.word	0x20009751

08012c20 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b084      	sub	sp, #16
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	60f8      	str	r0, [r7, #12]
 8012c28:	60b9      	str	r1, [r7, #8]
 8012c2a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d00a      	beq.n	8012c48 <tcp_route+0x28>
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	7a1b      	ldrb	r3, [r3, #8]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d006      	beq.n	8012c48 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	7a1b      	ldrb	r3, [r3, #8]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7fb fab8 	bl	800e1b4 <netif_get_by_index>
 8012c44:	4603      	mov	r3, r0
 8012c46:	e003      	b.n	8012c50 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f003 fa37 	bl	80160bc <ip4_route>
 8012c4e:	4603      	mov	r3, r0
  }
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3710      	adds	r7, #16
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}

08012c58 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012c58:	b590      	push	{r4, r7, lr}
 8012c5a:	b087      	sub	sp, #28
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	603b      	str	r3, [r7, #0]
 8012c64:	4613      	mov	r3, r2
 8012c66:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d105      	bne.n	8012c7a <tcp_create_segment+0x22>
 8012c6e:	4b44      	ldr	r3, [pc, #272]	; (8012d80 <tcp_create_segment+0x128>)
 8012c70:	22a3      	movs	r2, #163	; 0xa3
 8012c72:	4944      	ldr	r1, [pc, #272]	; (8012d84 <tcp_create_segment+0x12c>)
 8012c74:	4844      	ldr	r0, [pc, #272]	; (8012d88 <tcp_create_segment+0x130>)
 8012c76:	f004 fc57 	bl	8017528 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d105      	bne.n	8012c8c <tcp_create_segment+0x34>
 8012c80:	4b3f      	ldr	r3, [pc, #252]	; (8012d80 <tcp_create_segment+0x128>)
 8012c82:	22a4      	movs	r2, #164	; 0xa4
 8012c84:	4941      	ldr	r1, [pc, #260]	; (8012d8c <tcp_create_segment+0x134>)
 8012c86:	4840      	ldr	r0, [pc, #256]	; (8012d88 <tcp_create_segment+0x130>)
 8012c88:	f004 fc4e 	bl	8017528 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012c8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012c90:	009b      	lsls	r3, r3, #2
 8012c92:	b2db      	uxtb	r3, r3
 8012c94:	f003 0304 	and.w	r3, r3, #4
 8012c98:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012c9a:	2003      	movs	r0, #3
 8012c9c:	f7fa ff04 	bl	800daa8 <memp_malloc>
 8012ca0:	6138      	str	r0, [r7, #16]
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d104      	bne.n	8012cb2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012ca8:	68b8      	ldr	r0, [r7, #8]
 8012caa:	f7fb fde3 	bl	800e874 <pbuf_free>
    return NULL;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	e061      	b.n	8012d76 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012cb8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012cba:	693b      	ldr	r3, [r7, #16]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	68ba      	ldr	r2, [r7, #8]
 8012cc4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	891a      	ldrh	r2, [r3, #8]
 8012cca:	7dfb      	ldrb	r3, [r7, #23]
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	d205      	bcs.n	8012cde <tcp_create_segment+0x86>
 8012cd2:	4b2b      	ldr	r3, [pc, #172]	; (8012d80 <tcp_create_segment+0x128>)
 8012cd4:	22b0      	movs	r2, #176	; 0xb0
 8012cd6:	492e      	ldr	r1, [pc, #184]	; (8012d90 <tcp_create_segment+0x138>)
 8012cd8:	482b      	ldr	r0, [pc, #172]	; (8012d88 <tcp_create_segment+0x130>)
 8012cda:	f004 fc25 	bl	8017528 <iprintf>
  seg->len = p->tot_len - optlen;
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	891a      	ldrh	r2, [r3, #8]
 8012ce2:	7dfb      	ldrb	r3, [r7, #23]
 8012ce4:	b29b      	uxth	r3, r3
 8012ce6:	1ad3      	subs	r3, r2, r3
 8012ce8:	b29a      	uxth	r2, r3
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012cee:	2114      	movs	r1, #20
 8012cf0:	68b8      	ldr	r0, [r7, #8]
 8012cf2:	f7fb fd29 	bl	800e748 <pbuf_add_header>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d004      	beq.n	8012d06 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012cfc:	6938      	ldr	r0, [r7, #16]
 8012cfe:	f7fd f8ce 	bl	800fe9e <tcp_seg_free>
    return NULL;
 8012d02:	2300      	movs	r3, #0
 8012d04:	e037      	b.n	8012d76 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012d06:	693b      	ldr	r3, [r7, #16]
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	685a      	ldr	r2, [r3, #4]
 8012d0c:	693b      	ldr	r3, [r7, #16]
 8012d0e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	8ada      	ldrh	r2, [r3, #22]
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	68dc      	ldr	r4, [r3, #12]
 8012d18:	4610      	mov	r0, r2
 8012d1a:	f7fa fa4d 	bl	800d1b8 <lwip_htons>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	8b1a      	ldrh	r2, [r3, #24]
 8012d26:	693b      	ldr	r3, [r7, #16]
 8012d28:	68dc      	ldr	r4, [r3, #12]
 8012d2a:	4610      	mov	r0, r2
 8012d2c:	f7fa fa44 	bl	800d1b8 <lwip_htons>
 8012d30:	4603      	mov	r3, r0
 8012d32:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	68dc      	ldr	r4, [r3, #12]
 8012d38:	6838      	ldr	r0, [r7, #0]
 8012d3a:	f7fa fa52 	bl	800d1e2 <lwip_htonl>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012d42:	7dfb      	ldrb	r3, [r7, #23]
 8012d44:	089b      	lsrs	r3, r3, #2
 8012d46:	b2db      	uxtb	r3, r3
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	3305      	adds	r3, #5
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	031b      	lsls	r3, r3, #12
 8012d50:	b29a      	uxth	r2, r3
 8012d52:	79fb      	ldrb	r3, [r7, #7]
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	4313      	orrs	r3, r2
 8012d58:	b29a      	uxth	r2, r3
 8012d5a:	693b      	ldr	r3, [r7, #16]
 8012d5c:	68dc      	ldr	r4, [r3, #12]
 8012d5e:	4610      	mov	r0, r2
 8012d60:	f7fa fa2a 	bl	800d1b8 <lwip_htons>
 8012d64:	4603      	mov	r3, r0
 8012d66:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	68db      	ldr	r3, [r3, #12]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	749a      	strb	r2, [r3, #18]
 8012d70:	2200      	movs	r2, #0
 8012d72:	74da      	strb	r2, [r3, #19]
  return seg;
 8012d74:	693b      	ldr	r3, [r7, #16]
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	371c      	adds	r7, #28
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd90      	pop	{r4, r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	08019f60 	.word	0x08019f60
 8012d84:	08019f94 	.word	0x08019f94
 8012d88:	08019fb4 	.word	0x08019fb4
 8012d8c:	08019fdc 	.word	0x08019fdc
 8012d90:	0801a000 	.word	0x0801a000

08012d94 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012d94:	b590      	push	{r4, r7, lr}
 8012d96:	b08b      	sub	sp, #44	; 0x2c
 8012d98:	af02      	add	r7, sp, #8
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	460b      	mov	r3, r1
 8012d9e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012da0:	2300      	movs	r3, #0
 8012da2:	61fb      	str	r3, [r7, #28]
 8012da4:	2300      	movs	r3, #0
 8012da6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012da8:	2300      	movs	r3, #0
 8012daa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d106      	bne.n	8012dc0 <tcp_split_unsent_seg+0x2c>
 8012db2:	4b95      	ldr	r3, [pc, #596]	; (8013008 <tcp_split_unsent_seg+0x274>)
 8012db4:	f240 324b 	movw	r2, #843	; 0x34b
 8012db8:	4994      	ldr	r1, [pc, #592]	; (801300c <tcp_split_unsent_seg+0x278>)
 8012dba:	4895      	ldr	r0, [pc, #596]	; (8013010 <tcp_split_unsent_seg+0x27c>)
 8012dbc:	f004 fbb4 	bl	8017528 <iprintf>

  useg = pcb->unsent;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dc4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d102      	bne.n	8012dd2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dd0:	e116      	b.n	8013000 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012dd2:	887b      	ldrh	r3, [r7, #2]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d109      	bne.n	8012dec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012dd8:	4b8b      	ldr	r3, [pc, #556]	; (8013008 <tcp_split_unsent_seg+0x274>)
 8012dda:	f240 3253 	movw	r2, #851	; 0x353
 8012dde:	498d      	ldr	r1, [pc, #564]	; (8013014 <tcp_split_unsent_seg+0x280>)
 8012de0:	488b      	ldr	r0, [pc, #556]	; (8013010 <tcp_split_unsent_seg+0x27c>)
 8012de2:	f004 fba1 	bl	8017528 <iprintf>
    return ERR_VAL;
 8012de6:	f06f 0305 	mvn.w	r3, #5
 8012dea:	e109      	b.n	8013000 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	891b      	ldrh	r3, [r3, #8]
 8012df0:	887a      	ldrh	r2, [r7, #2]
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d301      	bcc.n	8012dfa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012df6:	2300      	movs	r3, #0
 8012df8:	e102      	b.n	8013000 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012dfe:	887a      	ldrh	r2, [r7, #2]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d906      	bls.n	8012e12 <tcp_split_unsent_seg+0x7e>
 8012e04:	4b80      	ldr	r3, [pc, #512]	; (8013008 <tcp_split_unsent_seg+0x274>)
 8012e06:	f240 325b 	movw	r2, #859	; 0x35b
 8012e0a:	4983      	ldr	r1, [pc, #524]	; (8013018 <tcp_split_unsent_seg+0x284>)
 8012e0c:	4880      	ldr	r0, [pc, #512]	; (8013010 <tcp_split_unsent_seg+0x27c>)
 8012e0e:	f004 fb8b 	bl	8017528 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	891b      	ldrh	r3, [r3, #8]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d106      	bne.n	8012e28 <tcp_split_unsent_seg+0x94>
 8012e1a:	4b7b      	ldr	r3, [pc, #492]	; (8013008 <tcp_split_unsent_seg+0x274>)
 8012e1c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012e20:	497e      	ldr	r1, [pc, #504]	; (801301c <tcp_split_unsent_seg+0x288>)
 8012e22:	487b      	ldr	r0, [pc, #492]	; (8013010 <tcp_split_unsent_seg+0x27c>)
 8012e24:	f004 fb80 	bl	8017528 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	7a9b      	ldrb	r3, [r3, #10]
 8012e2c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012e2e:	7bfb      	ldrb	r3, [r7, #15]
 8012e30:	009b      	lsls	r3, r3, #2
 8012e32:	b2db      	uxtb	r3, r3
 8012e34:	f003 0304 	and.w	r3, r3, #4
 8012e38:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	891a      	ldrh	r2, [r3, #8]
 8012e3e:	887b      	ldrh	r3, [r7, #2]
 8012e40:	1ad3      	subs	r3, r2, r3
 8012e42:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012e44:	7bbb      	ldrb	r3, [r7, #14]
 8012e46:	b29a      	uxth	r2, r3
 8012e48:	89bb      	ldrh	r3, [r7, #12]
 8012e4a:	4413      	add	r3, r2
 8012e4c:	b29b      	uxth	r3, r3
 8012e4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e52:	4619      	mov	r1, r3
 8012e54:	2036      	movs	r0, #54	; 0x36
 8012e56:	f7fb fa29 	bl	800e2ac <pbuf_alloc>
 8012e5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	f000 80b7 	beq.w	8012fd2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	891a      	ldrh	r2, [r3, #8]
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	891b      	ldrh	r3, [r3, #8]
 8012e6e:	1ad3      	subs	r3, r2, r3
 8012e70:	b29a      	uxth	r2, r3
 8012e72:	887b      	ldrh	r3, [r7, #2]
 8012e74:	4413      	add	r3, r2
 8012e76:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012e78:	697b      	ldr	r3, [r7, #20]
 8012e7a:	6858      	ldr	r0, [r3, #4]
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	685a      	ldr	r2, [r3, #4]
 8012e80:	7bbb      	ldrb	r3, [r7, #14]
 8012e82:	18d1      	adds	r1, r2, r3
 8012e84:	897b      	ldrh	r3, [r7, #10]
 8012e86:	89ba      	ldrh	r2, [r7, #12]
 8012e88:	f7fb feee 	bl	800ec68 <pbuf_copy_partial>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	461a      	mov	r2, r3
 8012e90:	89bb      	ldrh	r3, [r7, #12]
 8012e92:	4293      	cmp	r3, r2
 8012e94:	f040 809f 	bne.w	8012fd6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012e98:	697b      	ldr	r3, [r7, #20]
 8012e9a:	68db      	ldr	r3, [r3, #12]
 8012e9c:	899b      	ldrh	r3, [r3, #12]
 8012e9e:	b29b      	uxth	r3, r3
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7fa f989 	bl	800d1b8 <lwip_htons>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012eae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012eb4:	7efb      	ldrb	r3, [r7, #27]
 8012eb6:	f003 0308 	and.w	r3, r3, #8
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d007      	beq.n	8012ece <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012ebe:	7efb      	ldrb	r3, [r7, #27]
 8012ec0:	f023 0308 	bic.w	r3, r3, #8
 8012ec4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012ec6:	7ebb      	ldrb	r3, [r7, #26]
 8012ec8:	f043 0308 	orr.w	r3, r3, #8
 8012ecc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012ece:	7efb      	ldrb	r3, [r7, #27]
 8012ed0:	f003 0301 	and.w	r3, r3, #1
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d007      	beq.n	8012ee8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012ed8:	7efb      	ldrb	r3, [r7, #27]
 8012eda:	f023 0301 	bic.w	r3, r3, #1
 8012ede:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012ee0:	7ebb      	ldrb	r3, [r7, #26]
 8012ee2:	f043 0301 	orr.w	r3, r3, #1
 8012ee6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	68db      	ldr	r3, [r3, #12]
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7fa f977 	bl	800d1e2 <lwip_htonl>
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	887b      	ldrh	r3, [r7, #2]
 8012ef8:	18d1      	adds	r1, r2, r3
 8012efa:	7eba      	ldrb	r2, [r7, #26]
 8012efc:	7bfb      	ldrb	r3, [r7, #15]
 8012efe:	9300      	str	r3, [sp, #0]
 8012f00:	460b      	mov	r3, r1
 8012f02:	6939      	ldr	r1, [r7, #16]
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f7ff fea7 	bl	8012c58 <tcp_create_segment>
 8012f0a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d063      	beq.n	8012fda <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	4618      	mov	r0, r3
 8012f18:	f7fb fd34 	bl	800e984 <pbuf_clen>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	461a      	mov	r2, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f26:	1a9b      	subs	r3, r3, r2
 8012f28:	b29a      	uxth	r2, r3
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012f30:	697b      	ldr	r3, [r7, #20]
 8012f32:	6858      	ldr	r0, [r3, #4]
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	891a      	ldrh	r2, [r3, #8]
 8012f3a:	89bb      	ldrh	r3, [r7, #12]
 8012f3c:	1ad3      	subs	r3, r2, r3
 8012f3e:	b29b      	uxth	r3, r3
 8012f40:	4619      	mov	r1, r3
 8012f42:	f7fb fb11 	bl	800e568 <pbuf_realloc>
  useg->len -= remainder;
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	891a      	ldrh	r2, [r3, #8]
 8012f4a:	89bb      	ldrh	r3, [r7, #12]
 8012f4c:	1ad3      	subs	r3, r2, r3
 8012f4e:	b29a      	uxth	r2, r3
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	68db      	ldr	r3, [r3, #12]
 8012f58:	899b      	ldrh	r3, [r3, #12]
 8012f5a:	b29c      	uxth	r4, r3
 8012f5c:	7efb      	ldrb	r3, [r7, #27]
 8012f5e:	b29b      	uxth	r3, r3
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7fa f929 	bl	800d1b8 <lwip_htons>
 8012f66:	4603      	mov	r3, r0
 8012f68:	461a      	mov	r2, r3
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	68db      	ldr	r3, [r3, #12]
 8012f6e:	4322      	orrs	r2, r4
 8012f70:	b292      	uxth	r2, r2
 8012f72:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fb fd03 	bl	800e984 <pbuf_clen>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	461a      	mov	r2, r3
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f88:	4413      	add	r3, r2
 8012f8a:	b29a      	uxth	r2, r3
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012f92:	69fb      	ldr	r3, [r7, #28]
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7fb fcf4 	bl	800e984 <pbuf_clen>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	461a      	mov	r2, r3
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012fa6:	4413      	add	r3, r2
 8012fa8:	b29a      	uxth	r2, r3
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	681a      	ldr	r2, [r3, #0]
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	69fa      	ldr	r2, [r7, #28]
 8012fbc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d103      	bne.n	8012fce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	e016      	b.n	8013000 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012fd2:	bf00      	nop
 8012fd4:	e002      	b.n	8012fdc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012fd6:	bf00      	nop
 8012fd8:	e000      	b.n	8012fdc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012fda:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012fdc:	69fb      	ldr	r3, [r7, #28]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d006      	beq.n	8012ff0 <tcp_split_unsent_seg+0x25c>
 8012fe2:	4b09      	ldr	r3, [pc, #36]	; (8013008 <tcp_split_unsent_seg+0x274>)
 8012fe4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012fe8:	490d      	ldr	r1, [pc, #52]	; (8013020 <tcp_split_unsent_seg+0x28c>)
 8012fea:	4809      	ldr	r0, [pc, #36]	; (8013010 <tcp_split_unsent_seg+0x27c>)
 8012fec:	f004 fa9c 	bl	8017528 <iprintf>
  if (p != NULL) {
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d002      	beq.n	8012ffc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012ff6:	6938      	ldr	r0, [r7, #16]
 8012ff8:	f7fb fc3c 	bl	800e874 <pbuf_free>
  }

  return ERR_MEM;
 8012ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013000:	4618      	mov	r0, r3
 8013002:	3724      	adds	r7, #36	; 0x24
 8013004:	46bd      	mov	sp, r7
 8013006:	bd90      	pop	{r4, r7, pc}
 8013008:	08019f60 	.word	0x08019f60
 801300c:	0801a2f4 	.word	0x0801a2f4
 8013010:	08019fb4 	.word	0x08019fb4
 8013014:	0801a318 	.word	0x0801a318
 8013018:	0801a33c 	.word	0x0801a33c
 801301c:	0801a34c 	.word	0x0801a34c
 8013020:	0801a35c 	.word	0x0801a35c

08013024 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013024:	b590      	push	{r4, r7, lr}
 8013026:	b085      	sub	sp, #20
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d106      	bne.n	8013040 <tcp_send_fin+0x1c>
 8013032:	4b21      	ldr	r3, [pc, #132]	; (80130b8 <tcp_send_fin+0x94>)
 8013034:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013038:	4920      	ldr	r1, [pc, #128]	; (80130bc <tcp_send_fin+0x98>)
 801303a:	4821      	ldr	r0, [pc, #132]	; (80130c0 <tcp_send_fin+0x9c>)
 801303c:	f004 fa74 	bl	8017528 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013044:	2b00      	cmp	r3, #0
 8013046:	d02e      	beq.n	80130a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801304c:	60fb      	str	r3, [r7, #12]
 801304e:	e002      	b.n	8013056 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d1f8      	bne.n	8013050 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	68db      	ldr	r3, [r3, #12]
 8013062:	899b      	ldrh	r3, [r3, #12]
 8013064:	b29b      	uxth	r3, r3
 8013066:	4618      	mov	r0, r3
 8013068:	f7fa f8a6 	bl	800d1b8 <lwip_htons>
 801306c:	4603      	mov	r3, r0
 801306e:	b2db      	uxtb	r3, r3
 8013070:	f003 0307 	and.w	r3, r3, #7
 8013074:	2b00      	cmp	r3, #0
 8013076:	d116      	bne.n	80130a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	68db      	ldr	r3, [r3, #12]
 801307c:	899b      	ldrh	r3, [r3, #12]
 801307e:	b29c      	uxth	r4, r3
 8013080:	2001      	movs	r0, #1
 8013082:	f7fa f899 	bl	800d1b8 <lwip_htons>
 8013086:	4603      	mov	r3, r0
 8013088:	461a      	mov	r2, r3
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	68db      	ldr	r3, [r3, #12]
 801308e:	4322      	orrs	r2, r4
 8013090:	b292      	uxth	r2, r2
 8013092:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	8b5b      	ldrh	r3, [r3, #26]
 8013098:	f043 0320 	orr.w	r3, r3, #32
 801309c:	b29a      	uxth	r2, r3
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80130a2:	2300      	movs	r3, #0
 80130a4:	e004      	b.n	80130b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80130a6:	2101      	movs	r1, #1
 80130a8:	6878      	ldr	r0, [r7, #4]
 80130aa:	f000 f80b 	bl	80130c4 <tcp_enqueue_flags>
 80130ae:	4603      	mov	r3, r0
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3714      	adds	r7, #20
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd90      	pop	{r4, r7, pc}
 80130b8:	08019f60 	.word	0x08019f60
 80130bc:	0801a368 	.word	0x0801a368
 80130c0:	08019fb4 	.word	0x08019fb4

080130c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b08a      	sub	sp, #40	; 0x28
 80130c8:	af02      	add	r7, sp, #8
 80130ca:	6078      	str	r0, [r7, #4]
 80130cc:	460b      	mov	r3, r1
 80130ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80130d0:	2300      	movs	r3, #0
 80130d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80130d4:	2300      	movs	r3, #0
 80130d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80130d8:	78fb      	ldrb	r3, [r7, #3]
 80130da:	f003 0303 	and.w	r3, r3, #3
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d106      	bne.n	80130f0 <tcp_enqueue_flags+0x2c>
 80130e2:	4b67      	ldr	r3, [pc, #412]	; (8013280 <tcp_enqueue_flags+0x1bc>)
 80130e4:	f240 4211 	movw	r2, #1041	; 0x411
 80130e8:	4966      	ldr	r1, [pc, #408]	; (8013284 <tcp_enqueue_flags+0x1c0>)
 80130ea:	4867      	ldr	r0, [pc, #412]	; (8013288 <tcp_enqueue_flags+0x1c4>)
 80130ec:	f004 fa1c 	bl	8017528 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d106      	bne.n	8013104 <tcp_enqueue_flags+0x40>
 80130f6:	4b62      	ldr	r3, [pc, #392]	; (8013280 <tcp_enqueue_flags+0x1bc>)
 80130f8:	f240 4213 	movw	r2, #1043	; 0x413
 80130fc:	4963      	ldr	r1, [pc, #396]	; (801328c <tcp_enqueue_flags+0x1c8>)
 80130fe:	4862      	ldr	r0, [pc, #392]	; (8013288 <tcp_enqueue_flags+0x1c4>)
 8013100:	f004 fa12 	bl	8017528 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013104:	78fb      	ldrb	r3, [r7, #3]
 8013106:	f003 0302 	and.w	r3, r3, #2
 801310a:	2b00      	cmp	r3, #0
 801310c:	d001      	beq.n	8013112 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801310e:	2301      	movs	r3, #1
 8013110:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013112:	7ffb      	ldrb	r3, [r7, #31]
 8013114:	009b      	lsls	r3, r3, #2
 8013116:	b2db      	uxtb	r3, r3
 8013118:	f003 0304 	and.w	r3, r3, #4
 801311c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801311e:	7dfb      	ldrb	r3, [r7, #23]
 8013120:	b29b      	uxth	r3, r3
 8013122:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013126:	4619      	mov	r1, r3
 8013128:	2036      	movs	r0, #54	; 0x36
 801312a:	f7fb f8bf 	bl	800e2ac <pbuf_alloc>
 801312e:	6138      	str	r0, [r7, #16]
 8013130:	693b      	ldr	r3, [r7, #16]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d109      	bne.n	801314a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	8b5b      	ldrh	r3, [r3, #26]
 801313a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801313e:	b29a      	uxth	r2, r3
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013148:	e095      	b.n	8013276 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	895a      	ldrh	r2, [r3, #10]
 801314e:	7dfb      	ldrb	r3, [r7, #23]
 8013150:	b29b      	uxth	r3, r3
 8013152:	429a      	cmp	r2, r3
 8013154:	d206      	bcs.n	8013164 <tcp_enqueue_flags+0xa0>
 8013156:	4b4a      	ldr	r3, [pc, #296]	; (8013280 <tcp_enqueue_flags+0x1bc>)
 8013158:	f240 4239 	movw	r2, #1081	; 0x439
 801315c:	494c      	ldr	r1, [pc, #304]	; (8013290 <tcp_enqueue_flags+0x1cc>)
 801315e:	484a      	ldr	r0, [pc, #296]	; (8013288 <tcp_enqueue_flags+0x1c4>)
 8013160:	f004 f9e2 	bl	8017528 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013168:	78fa      	ldrb	r2, [r7, #3]
 801316a:	7ffb      	ldrb	r3, [r7, #31]
 801316c:	9300      	str	r3, [sp, #0]
 801316e:	460b      	mov	r3, r1
 8013170:	6939      	ldr	r1, [r7, #16]
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	f7ff fd70 	bl	8012c58 <tcp_create_segment>
 8013178:	60f8      	str	r0, [r7, #12]
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d109      	bne.n	8013194 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	8b5b      	ldrh	r3, [r3, #26]
 8013184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013188:	b29a      	uxth	r2, r3
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801318e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013192:	e070      	b.n	8013276 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	f003 0303 	and.w	r3, r3, #3
 801319c:	2b00      	cmp	r3, #0
 801319e:	d006      	beq.n	80131ae <tcp_enqueue_flags+0xea>
 80131a0:	4b37      	ldr	r3, [pc, #220]	; (8013280 <tcp_enqueue_flags+0x1bc>)
 80131a2:	f240 4242 	movw	r2, #1090	; 0x442
 80131a6:	493b      	ldr	r1, [pc, #236]	; (8013294 <tcp_enqueue_flags+0x1d0>)
 80131a8:	4837      	ldr	r0, [pc, #220]	; (8013288 <tcp_enqueue_flags+0x1c4>)
 80131aa:	f004 f9bd 	bl	8017528 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	891b      	ldrh	r3, [r3, #8]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d006      	beq.n	80131c4 <tcp_enqueue_flags+0x100>
 80131b6:	4b32      	ldr	r3, [pc, #200]	; (8013280 <tcp_enqueue_flags+0x1bc>)
 80131b8:	f240 4243 	movw	r2, #1091	; 0x443
 80131bc:	4936      	ldr	r1, [pc, #216]	; (8013298 <tcp_enqueue_flags+0x1d4>)
 80131be:	4832      	ldr	r0, [pc, #200]	; (8013288 <tcp_enqueue_flags+0x1c4>)
 80131c0:	f004 f9b2 	bl	8017528 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d103      	bne.n	80131d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	68fa      	ldr	r2, [r7, #12]
 80131d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80131d2:	e00d      	b.n	80131f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131d8:	61bb      	str	r3, [r7, #24]
 80131da:	e002      	b.n	80131e2 <tcp_enqueue_flags+0x11e>
 80131dc:	69bb      	ldr	r3, [r7, #24]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	61bb      	str	r3, [r7, #24]
 80131e2:	69bb      	ldr	r3, [r7, #24]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d1f8      	bne.n	80131dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80131ea:	69bb      	ldr	r3, [r7, #24]
 80131ec:	68fa      	ldr	r2, [r7, #12]
 80131ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2200      	movs	r2, #0
 80131f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80131f8:	78fb      	ldrb	r3, [r7, #3]
 80131fa:	f003 0302 	and.w	r3, r3, #2
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d104      	bne.n	801320c <tcp_enqueue_flags+0x148>
 8013202:	78fb      	ldrb	r3, [r7, #3]
 8013204:	f003 0301 	and.w	r3, r3, #1
 8013208:	2b00      	cmp	r3, #0
 801320a:	d004      	beq.n	8013216 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013210:	1c5a      	adds	r2, r3, #1
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013216:	78fb      	ldrb	r3, [r7, #3]
 8013218:	f003 0301 	and.w	r3, r3, #1
 801321c:	2b00      	cmp	r3, #0
 801321e:	d006      	beq.n	801322e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	8b5b      	ldrh	r3, [r3, #26]
 8013224:	f043 0320 	orr.w	r3, r3, #32
 8013228:	b29a      	uxth	r2, r3
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	685b      	ldr	r3, [r3, #4]
 8013232:	4618      	mov	r0, r3
 8013234:	f7fb fba6 	bl	800e984 <pbuf_clen>
 8013238:	4603      	mov	r3, r0
 801323a:	461a      	mov	r2, r3
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013242:	4413      	add	r3, r2
 8013244:	b29a      	uxth	r2, r3
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013252:	2b00      	cmp	r3, #0
 8013254:	d00e      	beq.n	8013274 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801325a:	2b00      	cmp	r3, #0
 801325c:	d10a      	bne.n	8013274 <tcp_enqueue_flags+0x1b0>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013262:	2b00      	cmp	r3, #0
 8013264:	d106      	bne.n	8013274 <tcp_enqueue_flags+0x1b0>
 8013266:	4b06      	ldr	r3, [pc, #24]	; (8013280 <tcp_enqueue_flags+0x1bc>)
 8013268:	f240 4265 	movw	r2, #1125	; 0x465
 801326c:	490b      	ldr	r1, [pc, #44]	; (801329c <tcp_enqueue_flags+0x1d8>)
 801326e:	4806      	ldr	r0, [pc, #24]	; (8013288 <tcp_enqueue_flags+0x1c4>)
 8013270:	f004 f95a 	bl	8017528 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013274:	2300      	movs	r3, #0
}
 8013276:	4618      	mov	r0, r3
 8013278:	3720      	adds	r7, #32
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	08019f60 	.word	0x08019f60
 8013284:	0801a384 	.word	0x0801a384
 8013288:	08019fb4 	.word	0x08019fb4
 801328c:	0801a3dc 	.word	0x0801a3dc
 8013290:	0801a3fc 	.word	0x0801a3fc
 8013294:	0801a438 	.word	0x0801a438
 8013298:	0801a450 	.word	0x0801a450
 801329c:	0801a47c 	.word	0x0801a47c

080132a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80132a0:	b5b0      	push	{r4, r5, r7, lr}
 80132a2:	b08a      	sub	sp, #40	; 0x28
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d106      	bne.n	80132bc <tcp_output+0x1c>
 80132ae:	4b8a      	ldr	r3, [pc, #552]	; (80134d8 <tcp_output+0x238>)
 80132b0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80132b4:	4989      	ldr	r1, [pc, #548]	; (80134dc <tcp_output+0x23c>)
 80132b6:	488a      	ldr	r0, [pc, #552]	; (80134e0 <tcp_output+0x240>)
 80132b8:	f004 f936 	bl	8017528 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	7d1b      	ldrb	r3, [r3, #20]
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d106      	bne.n	80132d2 <tcp_output+0x32>
 80132c4:	4b84      	ldr	r3, [pc, #528]	; (80134d8 <tcp_output+0x238>)
 80132c6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80132ca:	4986      	ldr	r1, [pc, #536]	; (80134e4 <tcp_output+0x244>)
 80132cc:	4884      	ldr	r0, [pc, #528]	; (80134e0 <tcp_output+0x240>)
 80132ce:	f004 f92b 	bl	8017528 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80132d2:	4b85      	ldr	r3, [pc, #532]	; (80134e8 <tcp_output+0x248>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	687a      	ldr	r2, [r7, #4]
 80132d8:	429a      	cmp	r2, r3
 80132da:	d101      	bne.n	80132e0 <tcp_output+0x40>
    return ERR_OK;
 80132dc:	2300      	movs	r3, #0
 80132de:	e1ce      	b.n	801367e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80132ec:	4293      	cmp	r3, r2
 80132ee:	bf28      	it	cs
 80132f0:	4613      	movcs	r3, r2
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80132fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d10b      	bne.n	801331a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	8b5b      	ldrh	r3, [r3, #26]
 8013306:	f003 0302 	and.w	r3, r3, #2
 801330a:	2b00      	cmp	r3, #0
 801330c:	f000 81aa 	beq.w	8013664 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f000 fdcb 	bl	8013eac <tcp_send_empty_ack>
 8013316:	4603      	mov	r3, r0
 8013318:	e1b1      	b.n	801367e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801331a:	6879      	ldr	r1, [r7, #4]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	3304      	adds	r3, #4
 8013320:	461a      	mov	r2, r3
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f7ff fc7c 	bl	8012c20 <tcp_route>
 8013328:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d102      	bne.n	8013336 <tcp_output+0x96>
    return ERR_RTE;
 8013330:	f06f 0303 	mvn.w	r3, #3
 8013334:	e1a3      	b.n	801367e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d003      	beq.n	8013344 <tcp_output+0xa4>
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d111      	bne.n	8013368 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d002      	beq.n	8013350 <tcp_output+0xb0>
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	3304      	adds	r3, #4
 801334e:	e000      	b.n	8013352 <tcp_output+0xb2>
 8013350:	2300      	movs	r3, #0
 8013352:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013354:	693b      	ldr	r3, [r7, #16]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d102      	bne.n	8013360 <tcp_output+0xc0>
      return ERR_RTE;
 801335a:	f06f 0303 	mvn.w	r3, #3
 801335e:	e18e      	b.n	801367e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	681a      	ldr	r2, [r3, #0]
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	685b      	ldr	r3, [r3, #4]
 801336e:	4618      	mov	r0, r3
 8013370:	f7f9 ff37 	bl	800d1e2 <lwip_htonl>
 8013374:	4602      	mov	r2, r0
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801337a:	1ad3      	subs	r3, r2, r3
 801337c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801337e:	8912      	ldrh	r2, [r2, #8]
 8013380:	4413      	add	r3, r2
 8013382:	69ba      	ldr	r2, [r7, #24]
 8013384:	429a      	cmp	r2, r3
 8013386:	d227      	bcs.n	80133d8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801338e:	461a      	mov	r2, r3
 8013390:	69bb      	ldr	r3, [r7, #24]
 8013392:	4293      	cmp	r3, r2
 8013394:	d114      	bne.n	80133c0 <tcp_output+0x120>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801339a:	2b00      	cmp	r3, #0
 801339c:	d110      	bne.n	80133c0 <tcp_output+0x120>
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d10b      	bne.n	80133c0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2200      	movs	r2, #0
 80133ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2201      	movs	r2, #1
 80133b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2200      	movs	r2, #0
 80133bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	8b5b      	ldrh	r3, [r3, #26]
 80133c4:	f003 0302 	and.w	r3, r3, #2
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	f000 814d 	beq.w	8013668 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80133ce:	6878      	ldr	r0, [r7, #4]
 80133d0:	f000 fd6c 	bl	8013eac <tcp_send_empty_ack>
 80133d4:	4603      	mov	r3, r0
 80133d6:	e152      	b.n	801367e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2200      	movs	r2, #0
 80133dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133e4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80133e6:	6a3b      	ldr	r3, [r7, #32]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	f000 811c 	beq.w	8013626 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80133ee:	e002      	b.n	80133f6 <tcp_output+0x156>
 80133f0:	6a3b      	ldr	r3, [r7, #32]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	623b      	str	r3, [r7, #32]
 80133f6:	6a3b      	ldr	r3, [r7, #32]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d1f8      	bne.n	80133f0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80133fe:	e112      	b.n	8013626 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	899b      	ldrh	r3, [r3, #12]
 8013406:	b29b      	uxth	r3, r3
 8013408:	4618      	mov	r0, r3
 801340a:	f7f9 fed5 	bl	800d1b8 <lwip_htons>
 801340e:	4603      	mov	r3, r0
 8013410:	b2db      	uxtb	r3, r3
 8013412:	f003 0304 	and.w	r3, r3, #4
 8013416:	2b00      	cmp	r3, #0
 8013418:	d006      	beq.n	8013428 <tcp_output+0x188>
 801341a:	4b2f      	ldr	r3, [pc, #188]	; (80134d8 <tcp_output+0x238>)
 801341c:	f240 5236 	movw	r2, #1334	; 0x536
 8013420:	4932      	ldr	r1, [pc, #200]	; (80134ec <tcp_output+0x24c>)
 8013422:	482f      	ldr	r0, [pc, #188]	; (80134e0 <tcp_output+0x240>)
 8013424:	f004 f880 	bl	8017528 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801342c:	2b00      	cmp	r3, #0
 801342e:	d01f      	beq.n	8013470 <tcp_output+0x1d0>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	8b5b      	ldrh	r3, [r3, #26]
 8013434:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013438:	2b00      	cmp	r3, #0
 801343a:	d119      	bne.n	8013470 <tcp_output+0x1d0>
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013440:	2b00      	cmp	r3, #0
 8013442:	d00b      	beq.n	801345c <tcp_output+0x1bc>
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d110      	bne.n	8013470 <tcp_output+0x1d0>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013452:	891a      	ldrh	r2, [r3, #8]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013458:	429a      	cmp	r2, r3
 801345a:	d209      	bcs.n	8013470 <tcp_output+0x1d0>
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013462:	2b00      	cmp	r3, #0
 8013464:	d004      	beq.n	8013470 <tcp_output+0x1d0>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801346c:	2b08      	cmp	r3, #8
 801346e:	d901      	bls.n	8013474 <tcp_output+0x1d4>
 8013470:	2301      	movs	r3, #1
 8013472:	e000      	b.n	8013476 <tcp_output+0x1d6>
 8013474:	2300      	movs	r3, #0
 8013476:	2b00      	cmp	r3, #0
 8013478:	d106      	bne.n	8013488 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	8b5b      	ldrh	r3, [r3, #26]
 801347e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013482:	2b00      	cmp	r3, #0
 8013484:	f000 80e4 	beq.w	8013650 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	7d1b      	ldrb	r3, [r3, #20]
 801348c:	2b02      	cmp	r3, #2
 801348e:	d00d      	beq.n	80134ac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013492:	68db      	ldr	r3, [r3, #12]
 8013494:	899b      	ldrh	r3, [r3, #12]
 8013496:	b29c      	uxth	r4, r3
 8013498:	2010      	movs	r0, #16
 801349a:	f7f9 fe8d 	bl	800d1b8 <lwip_htons>
 801349e:	4603      	mov	r3, r0
 80134a0:	461a      	mov	r2, r3
 80134a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a4:	68db      	ldr	r3, [r3, #12]
 80134a6:	4322      	orrs	r2, r4
 80134a8:	b292      	uxth	r2, r2
 80134aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80134ac:	697a      	ldr	r2, [r7, #20]
 80134ae:	6879      	ldr	r1, [r7, #4]
 80134b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134b2:	f000 f909 	bl	80136c8 <tcp_output_segment>
 80134b6:	4603      	mov	r3, r0
 80134b8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80134ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d016      	beq.n	80134f0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	8b5b      	ldrh	r3, [r3, #26]
 80134c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134ca:	b29a      	uxth	r2, r3
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	835a      	strh	r2, [r3, #26]
      return err;
 80134d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134d4:	e0d3      	b.n	801367e <tcp_output+0x3de>
 80134d6:	bf00      	nop
 80134d8:	08019f60 	.word	0x08019f60
 80134dc:	0801a4a4 	.word	0x0801a4a4
 80134e0:	08019fb4 	.word	0x08019fb4
 80134e4:	0801a4bc 	.word	0x0801a4bc
 80134e8:	20009758 	.word	0x20009758
 80134ec:	0801a4e4 	.word	0x0801a4e4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80134f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f2:	681a      	ldr	r2, [r3, #0]
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	7d1b      	ldrb	r3, [r3, #20]
 80134fc:	2b02      	cmp	r3, #2
 80134fe:	d006      	beq.n	801350e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	8b5b      	ldrh	r3, [r3, #26]
 8013504:	f023 0303 	bic.w	r3, r3, #3
 8013508:	b29a      	uxth	r2, r3
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013510:	68db      	ldr	r3, [r3, #12]
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	4618      	mov	r0, r3
 8013516:	f7f9 fe64 	bl	800d1e2 <lwip_htonl>
 801351a:	4604      	mov	r4, r0
 801351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801351e:	891b      	ldrh	r3, [r3, #8]
 8013520:	461d      	mov	r5, r3
 8013522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013524:	68db      	ldr	r3, [r3, #12]
 8013526:	899b      	ldrh	r3, [r3, #12]
 8013528:	b29b      	uxth	r3, r3
 801352a:	4618      	mov	r0, r3
 801352c:	f7f9 fe44 	bl	800d1b8 <lwip_htons>
 8013530:	4603      	mov	r3, r0
 8013532:	b2db      	uxtb	r3, r3
 8013534:	f003 0303 	and.w	r3, r3, #3
 8013538:	2b00      	cmp	r3, #0
 801353a:	d001      	beq.n	8013540 <tcp_output+0x2a0>
 801353c:	2301      	movs	r3, #1
 801353e:	e000      	b.n	8013542 <tcp_output+0x2a2>
 8013540:	2300      	movs	r3, #0
 8013542:	442b      	add	r3, r5
 8013544:	4423      	add	r3, r4
 8013546:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	1ad3      	subs	r3, r2, r3
 8013550:	2b00      	cmp	r3, #0
 8013552:	da02      	bge.n	801355a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	68ba      	ldr	r2, [r7, #8]
 8013558:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801355c:	891b      	ldrh	r3, [r3, #8]
 801355e:	461c      	mov	r4, r3
 8013560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013562:	68db      	ldr	r3, [r3, #12]
 8013564:	899b      	ldrh	r3, [r3, #12]
 8013566:	b29b      	uxth	r3, r3
 8013568:	4618      	mov	r0, r3
 801356a:	f7f9 fe25 	bl	800d1b8 <lwip_htons>
 801356e:	4603      	mov	r3, r0
 8013570:	b2db      	uxtb	r3, r3
 8013572:	f003 0303 	and.w	r3, r3, #3
 8013576:	2b00      	cmp	r3, #0
 8013578:	d001      	beq.n	801357e <tcp_output+0x2de>
 801357a:	2301      	movs	r3, #1
 801357c:	e000      	b.n	8013580 <tcp_output+0x2e0>
 801357e:	2300      	movs	r3, #0
 8013580:	4423      	add	r3, r4
 8013582:	2b00      	cmp	r3, #0
 8013584:	d049      	beq.n	801361a <tcp_output+0x37a>
      seg->next = NULL;
 8013586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013588:	2200      	movs	r2, #0
 801358a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013590:	2b00      	cmp	r3, #0
 8013592:	d105      	bne.n	80135a0 <tcp_output+0x300>
        pcb->unacked = seg;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013598:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801359c:	623b      	str	r3, [r7, #32]
 801359e:	e03f      	b.n	8013620 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80135a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7f9 fe1b 	bl	800d1e2 <lwip_htonl>
 80135ac:	4604      	mov	r4, r0
 80135ae:	6a3b      	ldr	r3, [r7, #32]
 80135b0:	68db      	ldr	r3, [r3, #12]
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7f9 fe14 	bl	800d1e2 <lwip_htonl>
 80135ba:	4603      	mov	r3, r0
 80135bc:	1ae3      	subs	r3, r4, r3
 80135be:	2b00      	cmp	r3, #0
 80135c0:	da24      	bge.n	801360c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	3370      	adds	r3, #112	; 0x70
 80135c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80135c8:	e002      	b.n	80135d0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80135ca:	69fb      	ldr	r3, [r7, #28]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80135d0:	69fb      	ldr	r3, [r7, #28]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d011      	beq.n	80135fc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80135d8:	69fb      	ldr	r3, [r7, #28]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	68db      	ldr	r3, [r3, #12]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7f9 fdfe 	bl	800d1e2 <lwip_htonl>
 80135e6:	4604      	mov	r4, r0
 80135e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ea:	68db      	ldr	r3, [r3, #12]
 80135ec:	685b      	ldr	r3, [r3, #4]
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7f9 fdf7 	bl	800d1e2 <lwip_htonl>
 80135f4:	4603      	mov	r3, r0
 80135f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	dbe6      	blt.n	80135ca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80135fc:	69fb      	ldr	r3, [r7, #28]
 80135fe:	681a      	ldr	r2, [r3, #0]
 8013600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013602:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013604:	69fb      	ldr	r3, [r7, #28]
 8013606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013608:	601a      	str	r2, [r3, #0]
 801360a:	e009      	b.n	8013620 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801360c:	6a3b      	ldr	r3, [r7, #32]
 801360e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013610:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013612:	6a3b      	ldr	r3, [r7, #32]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	623b      	str	r3, [r7, #32]
 8013618:	e002      	b.n	8013620 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801361a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801361c:	f7fc fc3f 	bl	800fe9e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013624:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013628:	2b00      	cmp	r3, #0
 801362a:	d012      	beq.n	8013652 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801362e:	68db      	ldr	r3, [r3, #12]
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	4618      	mov	r0, r3
 8013634:	f7f9 fdd5 	bl	800d1e2 <lwip_htonl>
 8013638:	4602      	mov	r2, r0
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801363e:	1ad3      	subs	r3, r2, r3
 8013640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013642:	8912      	ldrh	r2, [r2, #8]
 8013644:	4413      	add	r3, r2
  while (seg != NULL &&
 8013646:	69ba      	ldr	r2, [r7, #24]
 8013648:	429a      	cmp	r2, r3
 801364a:	f4bf aed9 	bcs.w	8013400 <tcp_output+0x160>
 801364e:	e000      	b.n	8013652 <tcp_output+0x3b2>
      break;
 8013650:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013656:	2b00      	cmp	r3, #0
 8013658:	d108      	bne.n	801366c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	2200      	movs	r2, #0
 801365e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013662:	e004      	b.n	801366e <tcp_output+0x3ce>
    goto output_done;
 8013664:	bf00      	nop
 8013666:	e002      	b.n	801366e <tcp_output+0x3ce>
    goto output_done;
 8013668:	bf00      	nop
 801366a:	e000      	b.n	801366e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801366c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	8b5b      	ldrh	r3, [r3, #26]
 8013672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013676:	b29a      	uxth	r2, r3
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801367c:	2300      	movs	r3, #0
}
 801367e:	4618      	mov	r0, r3
 8013680:	3728      	adds	r7, #40	; 0x28
 8013682:	46bd      	mov	sp, r7
 8013684:	bdb0      	pop	{r4, r5, r7, pc}
 8013686:	bf00      	nop

08013688 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b082      	sub	sp, #8
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d106      	bne.n	80136a4 <tcp_output_segment_busy+0x1c>
 8013696:	4b09      	ldr	r3, [pc, #36]	; (80136bc <tcp_output_segment_busy+0x34>)
 8013698:	f240 529a 	movw	r2, #1434	; 0x59a
 801369c:	4908      	ldr	r1, [pc, #32]	; (80136c0 <tcp_output_segment_busy+0x38>)
 801369e:	4809      	ldr	r0, [pc, #36]	; (80136c4 <tcp_output_segment_busy+0x3c>)
 80136a0:	f003 ff42 	bl	8017528 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	685b      	ldr	r3, [r3, #4]
 80136a8:	7b9b      	ldrb	r3, [r3, #14]
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d001      	beq.n	80136b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80136ae:	2301      	movs	r3, #1
 80136b0:	e000      	b.n	80136b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80136b2:	2300      	movs	r3, #0
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3708      	adds	r7, #8
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	08019f60 	.word	0x08019f60
 80136c0:	0801a4fc 	.word	0x0801a4fc
 80136c4:	08019fb4 	.word	0x08019fb4

080136c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80136c8:	b5b0      	push	{r4, r5, r7, lr}
 80136ca:	b08c      	sub	sp, #48	; 0x30
 80136cc:	af04      	add	r7, sp, #16
 80136ce:	60f8      	str	r0, [r7, #12]
 80136d0:	60b9      	str	r1, [r7, #8]
 80136d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d106      	bne.n	80136e8 <tcp_output_segment+0x20>
 80136da:	4b63      	ldr	r3, [pc, #396]	; (8013868 <tcp_output_segment+0x1a0>)
 80136dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80136e0:	4962      	ldr	r1, [pc, #392]	; (801386c <tcp_output_segment+0x1a4>)
 80136e2:	4863      	ldr	r0, [pc, #396]	; (8013870 <tcp_output_segment+0x1a8>)
 80136e4:	f003 ff20 	bl	8017528 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d106      	bne.n	80136fc <tcp_output_segment+0x34>
 80136ee:	4b5e      	ldr	r3, [pc, #376]	; (8013868 <tcp_output_segment+0x1a0>)
 80136f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80136f4:	495f      	ldr	r1, [pc, #380]	; (8013874 <tcp_output_segment+0x1ac>)
 80136f6:	485e      	ldr	r0, [pc, #376]	; (8013870 <tcp_output_segment+0x1a8>)
 80136f8:	f003 ff16 	bl	8017528 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d106      	bne.n	8013710 <tcp_output_segment+0x48>
 8013702:	4b59      	ldr	r3, [pc, #356]	; (8013868 <tcp_output_segment+0x1a0>)
 8013704:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013708:	495b      	ldr	r1, [pc, #364]	; (8013878 <tcp_output_segment+0x1b0>)
 801370a:	4859      	ldr	r0, [pc, #356]	; (8013870 <tcp_output_segment+0x1a8>)
 801370c:	f003 ff0c 	bl	8017528 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013710:	68f8      	ldr	r0, [r7, #12]
 8013712:	f7ff ffb9 	bl	8013688 <tcp_output_segment_busy>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d001      	beq.n	8013720 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801371c:	2300      	movs	r3, #0
 801371e:	e09f      	b.n	8013860 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	68dc      	ldr	r4, [r3, #12]
 8013728:	4610      	mov	r0, r2
 801372a:	f7f9 fd5a 	bl	800d1e2 <lwip_htonl>
 801372e:	4603      	mov	r3, r0
 8013730:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	68dc      	ldr	r4, [r3, #12]
 801373a:	4610      	mov	r0, r2
 801373c:	f7f9 fd3c 	bl	800d1b8 <lwip_htons>
 8013740:	4603      	mov	r3, r0
 8013742:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013748:	68ba      	ldr	r2, [r7, #8]
 801374a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801374c:	441a      	add	r2, r3
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	68db      	ldr	r3, [r3, #12]
 8013756:	3314      	adds	r3, #20
 8013758:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	7a9b      	ldrb	r3, [r3, #10]
 801375e:	f003 0301 	and.w	r3, r3, #1
 8013762:	2b00      	cmp	r3, #0
 8013764:	d015      	beq.n	8013792 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	3304      	adds	r3, #4
 801376a:	461a      	mov	r2, r3
 801376c:	6879      	ldr	r1, [r7, #4]
 801376e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013772:	f7fc fe8b 	bl	801048c <tcp_eff_send_mss_netif>
 8013776:	4603      	mov	r3, r0
 8013778:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801377a:	8b7b      	ldrh	r3, [r7, #26]
 801377c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013780:	4618      	mov	r0, r3
 8013782:	f7f9 fd2e 	bl	800d1e2 <lwip_htonl>
 8013786:	4602      	mov	r2, r0
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801378c:	69fb      	ldr	r3, [r7, #28]
 801378e:	3304      	adds	r3, #4
 8013790:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013792:	68bb      	ldr	r3, [r7, #8]
 8013794:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013798:	2b00      	cmp	r3, #0
 801379a:	da02      	bge.n	80137a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	2200      	movs	r2, #0
 80137a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d10c      	bne.n	80137c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80137aa:	4b34      	ldr	r3, [pc, #208]	; (801387c <tcp_output_segment+0x1b4>)
 80137ac:	681a      	ldr	r2, [r3, #0]
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	68db      	ldr	r3, [r3, #12]
 80137b6:	685b      	ldr	r3, [r3, #4]
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7f9 fd12 	bl	800d1e2 <lwip_htonl>
 80137be:	4602      	mov	r2, r0
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	68da      	ldr	r2, [r3, #12]
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	685b      	ldr	r3, [r3, #4]
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	685b      	ldr	r3, [r3, #4]
 80137d6:	8959      	ldrh	r1, [r3, #10]
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	685b      	ldr	r3, [r3, #4]
 80137dc:	8b3a      	ldrh	r2, [r7, #24]
 80137de:	1a8a      	subs	r2, r1, r2
 80137e0:	b292      	uxth	r2, r2
 80137e2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	8919      	ldrh	r1, [r3, #8]
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	8b3a      	ldrh	r2, [r7, #24]
 80137f0:	1a8a      	subs	r2, r1, r2
 80137f2:	b292      	uxth	r2, r2
 80137f4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	685b      	ldr	r3, [r3, #4]
 80137fa:	68fa      	ldr	r2, [r7, #12]
 80137fc:	68d2      	ldr	r2, [r2, #12]
 80137fe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	2200      	movs	r2, #0
 8013806:	741a      	strb	r2, [r3, #16]
 8013808:	2200      	movs	r2, #0
 801380a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	68db      	ldr	r3, [r3, #12]
 8013810:	f103 0214 	add.w	r2, r3, #20
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	7a9b      	ldrb	r3, [r3, #10]
 8013818:	009b      	lsls	r3, r3, #2
 801381a:	f003 0304 	and.w	r3, r3, #4
 801381e:	4413      	add	r3, r2
 8013820:	69fa      	ldr	r2, [r7, #28]
 8013822:	429a      	cmp	r2, r3
 8013824:	d006      	beq.n	8013834 <tcp_output_segment+0x16c>
 8013826:	4b10      	ldr	r3, [pc, #64]	; (8013868 <tcp_output_segment+0x1a0>)
 8013828:	f240 621c 	movw	r2, #1564	; 0x61c
 801382c:	4914      	ldr	r1, [pc, #80]	; (8013880 <tcp_output_segment+0x1b8>)
 801382e:	4810      	ldr	r0, [pc, #64]	; (8013870 <tcp_output_segment+0x1a8>)
 8013830:	f003 fe7a 	bl	8017528 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	6858      	ldr	r0, [r3, #4]
 8013838:	68b9      	ldr	r1, [r7, #8]
 801383a:	68bb      	ldr	r3, [r7, #8]
 801383c:	1d1c      	adds	r4, r3, #4
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	7add      	ldrb	r5, [r3, #11]
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	7a9b      	ldrb	r3, [r3, #10]
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	9202      	str	r2, [sp, #8]
 801384a:	2206      	movs	r2, #6
 801384c:	9201      	str	r2, [sp, #4]
 801384e:	9300      	str	r3, [sp, #0]
 8013850:	462b      	mov	r3, r5
 8013852:	4622      	mov	r2, r4
 8013854:	f002 fdf0 	bl	8016438 <ip4_output_if>
 8013858:	4603      	mov	r3, r0
 801385a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801385c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013860:	4618      	mov	r0, r3
 8013862:	3720      	adds	r7, #32
 8013864:	46bd      	mov	sp, r7
 8013866:	bdb0      	pop	{r4, r5, r7, pc}
 8013868:	08019f60 	.word	0x08019f60
 801386c:	0801a524 	.word	0x0801a524
 8013870:	08019fb4 	.word	0x08019fb4
 8013874:	0801a544 	.word	0x0801a544
 8013878:	0801a564 	.word	0x0801a564
 801387c:	2000970c 	.word	0x2000970c
 8013880:	0801a588 	.word	0x0801a588

08013884 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013884:	b5b0      	push	{r4, r5, r7, lr}
 8013886:	b084      	sub	sp, #16
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d106      	bne.n	80138a0 <tcp_rexmit_rto_prepare+0x1c>
 8013892:	4b31      	ldr	r3, [pc, #196]	; (8013958 <tcp_rexmit_rto_prepare+0xd4>)
 8013894:	f240 6263 	movw	r2, #1635	; 0x663
 8013898:	4930      	ldr	r1, [pc, #192]	; (801395c <tcp_rexmit_rto_prepare+0xd8>)
 801389a:	4831      	ldr	r0, [pc, #196]	; (8013960 <tcp_rexmit_rto_prepare+0xdc>)
 801389c:	f003 fe44 	bl	8017528 <iprintf>

  if (pcb->unacked == NULL) {
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d102      	bne.n	80138ae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80138a8:	f06f 0305 	mvn.w	r3, #5
 80138ac:	e050      	b.n	8013950 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138b2:	60fb      	str	r3, [r7, #12]
 80138b4:	e00b      	b.n	80138ce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80138b6:	68f8      	ldr	r0, [r7, #12]
 80138b8:	f7ff fee6 	bl	8013688 <tcp_output_segment_busy>
 80138bc:	4603      	mov	r3, r0
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d002      	beq.n	80138c8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80138c2:	f06f 0305 	mvn.w	r3, #5
 80138c6:	e043      	b.n	8013950 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	60fb      	str	r3, [r7, #12]
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d1ef      	bne.n	80138b6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80138d6:	68f8      	ldr	r0, [r7, #12]
 80138d8:	f7ff fed6 	bl	8013688 <tcp_output_segment_busy>
 80138dc:	4603      	mov	r3, r0
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d002      	beq.n	80138e8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80138e2:	f06f 0305 	mvn.w	r3, #5
 80138e6:	e033      	b.n	8013950 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2200      	movs	r2, #0
 80138fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	8b5b      	ldrh	r3, [r3, #26]
 8013902:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013906:	b29a      	uxth	r2, r3
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	68db      	ldr	r3, [r3, #12]
 8013910:	685b      	ldr	r3, [r3, #4]
 8013912:	4618      	mov	r0, r3
 8013914:	f7f9 fc65 	bl	800d1e2 <lwip_htonl>
 8013918:	4604      	mov	r4, r0
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	891b      	ldrh	r3, [r3, #8]
 801391e:	461d      	mov	r5, r3
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	68db      	ldr	r3, [r3, #12]
 8013924:	899b      	ldrh	r3, [r3, #12]
 8013926:	b29b      	uxth	r3, r3
 8013928:	4618      	mov	r0, r3
 801392a:	f7f9 fc45 	bl	800d1b8 <lwip_htons>
 801392e:	4603      	mov	r3, r0
 8013930:	b2db      	uxtb	r3, r3
 8013932:	f003 0303 	and.w	r3, r3, #3
 8013936:	2b00      	cmp	r3, #0
 8013938:	d001      	beq.n	801393e <tcp_rexmit_rto_prepare+0xba>
 801393a:	2301      	movs	r3, #1
 801393c:	e000      	b.n	8013940 <tcp_rexmit_rto_prepare+0xbc>
 801393e:	2300      	movs	r3, #0
 8013940:	442b      	add	r3, r5
 8013942:	18e2      	adds	r2, r4, r3
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2200      	movs	r2, #0
 801394c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801394e:	2300      	movs	r3, #0
}
 8013950:	4618      	mov	r0, r3
 8013952:	3710      	adds	r7, #16
 8013954:	46bd      	mov	sp, r7
 8013956:	bdb0      	pop	{r4, r5, r7, pc}
 8013958:	08019f60 	.word	0x08019f60
 801395c:	0801a59c 	.word	0x0801a59c
 8013960:	08019fb4 	.word	0x08019fb4

08013964 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b082      	sub	sp, #8
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d106      	bne.n	8013980 <tcp_rexmit_rto_commit+0x1c>
 8013972:	4b0d      	ldr	r3, [pc, #52]	; (80139a8 <tcp_rexmit_rto_commit+0x44>)
 8013974:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013978:	490c      	ldr	r1, [pc, #48]	; (80139ac <tcp_rexmit_rto_commit+0x48>)
 801397a:	480d      	ldr	r0, [pc, #52]	; (80139b0 <tcp_rexmit_rto_commit+0x4c>)
 801397c:	f003 fdd4 	bl	8017528 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013986:	2bff      	cmp	r3, #255	; 0xff
 8013988:	d007      	beq.n	801399a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013990:	3301      	adds	r3, #1
 8013992:	b2da      	uxtb	r2, r3
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801399a:	6878      	ldr	r0, [r7, #4]
 801399c:	f7ff fc80 	bl	80132a0 <tcp_output>
}
 80139a0:	bf00      	nop
 80139a2:	3708      	adds	r7, #8
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}
 80139a8:	08019f60 	.word	0x08019f60
 80139ac:	0801a5c0 	.word	0x0801a5c0
 80139b0:	08019fb4 	.word	0x08019fb4

080139b4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b082      	sub	sp, #8
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d106      	bne.n	80139d0 <tcp_rexmit_rto+0x1c>
 80139c2:	4b0a      	ldr	r3, [pc, #40]	; (80139ec <tcp_rexmit_rto+0x38>)
 80139c4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80139c8:	4909      	ldr	r1, [pc, #36]	; (80139f0 <tcp_rexmit_rto+0x3c>)
 80139ca:	480a      	ldr	r0, [pc, #40]	; (80139f4 <tcp_rexmit_rto+0x40>)
 80139cc:	f003 fdac 	bl	8017528 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80139d0:	6878      	ldr	r0, [r7, #4]
 80139d2:	f7ff ff57 	bl	8013884 <tcp_rexmit_rto_prepare>
 80139d6:	4603      	mov	r3, r0
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d102      	bne.n	80139e2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f7ff ffc1 	bl	8013964 <tcp_rexmit_rto_commit>
  }
}
 80139e2:	bf00      	nop
 80139e4:	3708      	adds	r7, #8
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
 80139ea:	bf00      	nop
 80139ec:	08019f60 	.word	0x08019f60
 80139f0:	0801a5e4 	.word	0x0801a5e4
 80139f4:	08019fb4 	.word	0x08019fb4

080139f8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80139f8:	b590      	push	{r4, r7, lr}
 80139fa:	b085      	sub	sp, #20
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d106      	bne.n	8013a14 <tcp_rexmit+0x1c>
 8013a06:	4b2f      	ldr	r3, [pc, #188]	; (8013ac4 <tcp_rexmit+0xcc>)
 8013a08:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013a0c:	492e      	ldr	r1, [pc, #184]	; (8013ac8 <tcp_rexmit+0xd0>)
 8013a0e:	482f      	ldr	r0, [pc, #188]	; (8013acc <tcp_rexmit+0xd4>)
 8013a10:	f003 fd8a 	bl	8017528 <iprintf>

  if (pcb->unacked == NULL) {
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d102      	bne.n	8013a22 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013a1c:	f06f 0305 	mvn.w	r3, #5
 8013a20:	e04c      	b.n	8013abc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a26:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013a28:	68b8      	ldr	r0, [r7, #8]
 8013a2a:	f7ff fe2d 	bl	8013688 <tcp_output_segment_busy>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d002      	beq.n	8013a3a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013a34:	f06f 0305 	mvn.w	r3, #5
 8013a38:	e040      	b.n	8013abc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	681a      	ldr	r2, [r3, #0]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	336c      	adds	r3, #108	; 0x6c
 8013a46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013a48:	e002      	b.n	8013a50 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d011      	beq.n	8013a7c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	68db      	ldr	r3, [r3, #12]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7f9 fbbe 	bl	800d1e2 <lwip_htonl>
 8013a66:	4604      	mov	r4, r0
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	68db      	ldr	r3, [r3, #12]
 8013a6c:	685b      	ldr	r3, [r3, #4]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7f9 fbb7 	bl	800d1e2 <lwip_htonl>
 8013a74:	4603      	mov	r3, r0
 8013a76:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	dbe6      	blt.n	8013a4a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	68ba      	ldr	r2, [r7, #8]
 8013a88:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d103      	bne.n	8013a9a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2200      	movs	r2, #0
 8013a96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013aa0:	2bff      	cmp	r3, #255	; 0xff
 8013aa2:	d007      	beq.n	8013ab4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013aaa:	3301      	adds	r3, #1
 8013aac:	b2da      	uxtb	r2, r3
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013aba:	2300      	movs	r3, #0
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3714      	adds	r7, #20
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd90      	pop	{r4, r7, pc}
 8013ac4:	08019f60 	.word	0x08019f60
 8013ac8:	0801a600 	.word	0x0801a600
 8013acc:	08019fb4 	.word	0x08019fb4

08013ad0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b082      	sub	sp, #8
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d106      	bne.n	8013aec <tcp_rexmit_fast+0x1c>
 8013ade:	4b2a      	ldr	r3, [pc, #168]	; (8013b88 <tcp_rexmit_fast+0xb8>)
 8013ae0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013ae4:	4929      	ldr	r1, [pc, #164]	; (8013b8c <tcp_rexmit_fast+0xbc>)
 8013ae6:	482a      	ldr	r0, [pc, #168]	; (8013b90 <tcp_rexmit_fast+0xc0>)
 8013ae8:	f003 fd1e 	bl	8017528 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d045      	beq.n	8013b80 <tcp_rexmit_fast+0xb0>
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	8b5b      	ldrh	r3, [r3, #26]
 8013af8:	f003 0304 	and.w	r3, r3, #4
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d13f      	bne.n	8013b80 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f7ff ff79 	bl	80139f8 <tcp_rexmit>
 8013b06:	4603      	mov	r3, r0
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d139      	bne.n	8013b80 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013b18:	4293      	cmp	r3, r2
 8013b1a:	bf28      	it	cs
 8013b1c:	4613      	movcs	r3, r2
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	da00      	bge.n	8013b26 <tcp_rexmit_fast+0x56>
 8013b24:	3301      	adds	r3, #1
 8013b26:	105b      	asrs	r3, r3, #1
 8013b28:	b29a      	uxth	r2, r3
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013b36:	461a      	mov	r2, r3
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b3c:	005b      	lsls	r3, r3, #1
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d206      	bcs.n	8013b50 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b46:	005b      	lsls	r3, r3, #1
 8013b48:	b29a      	uxth	r2, r3
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	0049      	lsls	r1, r1, #1
 8013b5e:	440b      	add	r3, r1
 8013b60:	b29b      	uxth	r3, r3
 8013b62:	4413      	add	r3, r2
 8013b64:	b29a      	uxth	r2, r3
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	8b5b      	ldrh	r3, [r3, #26]
 8013b70:	f043 0304 	orr.w	r3, r3, #4
 8013b74:	b29a      	uxth	r2, r3
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013b80:	bf00      	nop
 8013b82:	3708      	adds	r7, #8
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}
 8013b88:	08019f60 	.word	0x08019f60
 8013b8c:	0801a618 	.word	0x0801a618
 8013b90:	08019fb4 	.word	0x08019fb4

08013b94 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b086      	sub	sp, #24
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	607b      	str	r3, [r7, #4]
 8013b9e:	460b      	mov	r3, r1
 8013ba0:	817b      	strh	r3, [r7, #10]
 8013ba2:	4613      	mov	r3, r2
 8013ba4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013ba6:	897a      	ldrh	r2, [r7, #10]
 8013ba8:	893b      	ldrh	r3, [r7, #8]
 8013baa:	4413      	add	r3, r2
 8013bac:	b29b      	uxth	r3, r3
 8013bae:	3314      	adds	r3, #20
 8013bb0:	b29b      	uxth	r3, r3
 8013bb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	2022      	movs	r0, #34	; 0x22
 8013bba:	f7fa fb77 	bl	800e2ac <pbuf_alloc>
 8013bbe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d04d      	beq.n	8013c62 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013bc6:	897b      	ldrh	r3, [r7, #10]
 8013bc8:	3313      	adds	r3, #19
 8013bca:	697a      	ldr	r2, [r7, #20]
 8013bcc:	8952      	ldrh	r2, [r2, #10]
 8013bce:	4293      	cmp	r3, r2
 8013bd0:	db06      	blt.n	8013be0 <tcp_output_alloc_header_common+0x4c>
 8013bd2:	4b26      	ldr	r3, [pc, #152]	; (8013c6c <tcp_output_alloc_header_common+0xd8>)
 8013bd4:	f240 7223 	movw	r2, #1827	; 0x723
 8013bd8:	4925      	ldr	r1, [pc, #148]	; (8013c70 <tcp_output_alloc_header_common+0xdc>)
 8013bda:	4826      	ldr	r0, [pc, #152]	; (8013c74 <tcp_output_alloc_header_common+0xe0>)
 8013bdc:	f003 fca4 	bl	8017528 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	685b      	ldr	r3, [r3, #4]
 8013be4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013be6:	8c3b      	ldrh	r3, [r7, #32]
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7f9 fae5 	bl	800d1b8 <lwip_htons>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	461a      	mov	r2, r3
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7f9 fadd 	bl	800d1b8 <lwip_htons>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	461a      	mov	r2, r3
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	687a      	ldr	r2, [r7, #4]
 8013c0a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013c0c:	68f8      	ldr	r0, [r7, #12]
 8013c0e:	f7f9 fae8 	bl	800d1e2 <lwip_htonl>
 8013c12:	4602      	mov	r2, r0
 8013c14:	693b      	ldr	r3, [r7, #16]
 8013c16:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013c18:	897b      	ldrh	r3, [r7, #10]
 8013c1a:	089b      	lsrs	r3, r3, #2
 8013c1c:	b29b      	uxth	r3, r3
 8013c1e:	3305      	adds	r3, #5
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	031b      	lsls	r3, r3, #12
 8013c24:	b29a      	uxth	r2, r3
 8013c26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	4313      	orrs	r3, r2
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7f9 fac1 	bl	800d1b8 <lwip_htons>
 8013c36:	4603      	mov	r3, r0
 8013c38:	461a      	mov	r2, r3
 8013c3a:	693b      	ldr	r3, [r7, #16]
 8013c3c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013c3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7f9 fab9 	bl	800d1b8 <lwip_htons>
 8013c46:	4603      	mov	r3, r0
 8013c48:	461a      	mov	r2, r3
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	2200      	movs	r2, #0
 8013c52:	741a      	strb	r2, [r3, #16]
 8013c54:	2200      	movs	r2, #0
 8013c56:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	749a      	strb	r2, [r3, #18]
 8013c5e:	2200      	movs	r2, #0
 8013c60:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013c62:	697b      	ldr	r3, [r7, #20]
}
 8013c64:	4618      	mov	r0, r3
 8013c66:	3718      	adds	r7, #24
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bd80      	pop	{r7, pc}
 8013c6c:	08019f60 	.word	0x08019f60
 8013c70:	0801a638 	.word	0x0801a638
 8013c74:	08019fb4 	.word	0x08019fb4

08013c78 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013c78:	b5b0      	push	{r4, r5, r7, lr}
 8013c7a:	b08a      	sub	sp, #40	; 0x28
 8013c7c:	af04      	add	r7, sp, #16
 8013c7e:	60f8      	str	r0, [r7, #12]
 8013c80:	607b      	str	r3, [r7, #4]
 8013c82:	460b      	mov	r3, r1
 8013c84:	817b      	strh	r3, [r7, #10]
 8013c86:	4613      	mov	r3, r2
 8013c88:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d106      	bne.n	8013c9e <tcp_output_alloc_header+0x26>
 8013c90:	4b15      	ldr	r3, [pc, #84]	; (8013ce8 <tcp_output_alloc_header+0x70>)
 8013c92:	f240 7242 	movw	r2, #1858	; 0x742
 8013c96:	4915      	ldr	r1, [pc, #84]	; (8013cec <tcp_output_alloc_header+0x74>)
 8013c98:	4815      	ldr	r0, [pc, #84]	; (8013cf0 <tcp_output_alloc_header+0x78>)
 8013c9a:	f003 fc45 	bl	8017528 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	8adb      	ldrh	r3, [r3, #22]
 8013ca6:	68fa      	ldr	r2, [r7, #12]
 8013ca8:	8b12      	ldrh	r2, [r2, #24]
 8013caa:	68f9      	ldr	r1, [r7, #12]
 8013cac:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013cae:	893d      	ldrh	r5, [r7, #8]
 8013cb0:	897c      	ldrh	r4, [r7, #10]
 8013cb2:	9103      	str	r1, [sp, #12]
 8013cb4:	2110      	movs	r1, #16
 8013cb6:	9102      	str	r1, [sp, #8]
 8013cb8:	9201      	str	r2, [sp, #4]
 8013cba:	9300      	str	r3, [sp, #0]
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	462a      	mov	r2, r5
 8013cc0:	4621      	mov	r1, r4
 8013cc2:	f7ff ff67 	bl	8013b94 <tcp_output_alloc_header_common>
 8013cc6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d006      	beq.n	8013cdc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd2:	68fa      	ldr	r2, [r7, #12]
 8013cd4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013cd6:	441a      	add	r2, r3
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013cdc:	697b      	ldr	r3, [r7, #20]
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	3718      	adds	r7, #24
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8013ce6:	bf00      	nop
 8013ce8:	08019f60 	.word	0x08019f60
 8013cec:	0801a668 	.word	0x0801a668
 8013cf0:	08019fb4 	.word	0x08019fb4

08013cf4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b088      	sub	sp, #32
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	60f8      	str	r0, [r7, #12]
 8013cfc:	60b9      	str	r1, [r7, #8]
 8013cfe:	4611      	mov	r1, r2
 8013d00:	461a      	mov	r2, r3
 8013d02:	460b      	mov	r3, r1
 8013d04:	71fb      	strb	r3, [r7, #7]
 8013d06:	4613      	mov	r3, r2
 8013d08:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013d0e:	68bb      	ldr	r3, [r7, #8]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d106      	bne.n	8013d22 <tcp_output_fill_options+0x2e>
 8013d14:	4b13      	ldr	r3, [pc, #76]	; (8013d64 <tcp_output_fill_options+0x70>)
 8013d16:	f240 7256 	movw	r2, #1878	; 0x756
 8013d1a:	4913      	ldr	r1, [pc, #76]	; (8013d68 <tcp_output_fill_options+0x74>)
 8013d1c:	4813      	ldr	r0, [pc, #76]	; (8013d6c <tcp_output_fill_options+0x78>)
 8013d1e:	f003 fc03 	bl	8017528 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	685b      	ldr	r3, [r3, #4]
 8013d26:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013d28:	69bb      	ldr	r3, [r7, #24]
 8013d2a:	3314      	adds	r3, #20
 8013d2c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013d2e:	69bb      	ldr	r3, [r7, #24]
 8013d30:	f103 0214 	add.w	r2, r3, #20
 8013d34:	8bfb      	ldrh	r3, [r7, #30]
 8013d36:	009b      	lsls	r3, r3, #2
 8013d38:	4619      	mov	r1, r3
 8013d3a:	79fb      	ldrb	r3, [r7, #7]
 8013d3c:	009b      	lsls	r3, r3, #2
 8013d3e:	f003 0304 	and.w	r3, r3, #4
 8013d42:	440b      	add	r3, r1
 8013d44:	4413      	add	r3, r2
 8013d46:	697a      	ldr	r2, [r7, #20]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d006      	beq.n	8013d5a <tcp_output_fill_options+0x66>
 8013d4c:	4b05      	ldr	r3, [pc, #20]	; (8013d64 <tcp_output_fill_options+0x70>)
 8013d4e:	f240 7275 	movw	r2, #1909	; 0x775
 8013d52:	4907      	ldr	r1, [pc, #28]	; (8013d70 <tcp_output_fill_options+0x7c>)
 8013d54:	4805      	ldr	r0, [pc, #20]	; (8013d6c <tcp_output_fill_options+0x78>)
 8013d56:	f003 fbe7 	bl	8017528 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013d5a:	bf00      	nop
 8013d5c:	3720      	adds	r7, #32
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}
 8013d62:	bf00      	nop
 8013d64:	08019f60 	.word	0x08019f60
 8013d68:	0801a690 	.word	0x0801a690
 8013d6c:	08019fb4 	.word	0x08019fb4
 8013d70:	0801a588 	.word	0x0801a588

08013d74 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b08a      	sub	sp, #40	; 0x28
 8013d78:	af04      	add	r7, sp, #16
 8013d7a:	60f8      	str	r0, [r7, #12]
 8013d7c:	60b9      	str	r1, [r7, #8]
 8013d7e:	607a      	str	r2, [r7, #4]
 8013d80:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d106      	bne.n	8013d96 <tcp_output_control_segment+0x22>
 8013d88:	4b1c      	ldr	r3, [pc, #112]	; (8013dfc <tcp_output_control_segment+0x88>)
 8013d8a:	f240 7287 	movw	r2, #1927	; 0x787
 8013d8e:	491c      	ldr	r1, [pc, #112]	; (8013e00 <tcp_output_control_segment+0x8c>)
 8013d90:	481c      	ldr	r0, [pc, #112]	; (8013e04 <tcp_output_control_segment+0x90>)
 8013d92:	f003 fbc9 	bl	8017528 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013d96:	683a      	ldr	r2, [r7, #0]
 8013d98:	6879      	ldr	r1, [r7, #4]
 8013d9a:	68f8      	ldr	r0, [r7, #12]
 8013d9c:	f7fe ff40 	bl	8012c20 <tcp_route>
 8013da0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013da2:	693b      	ldr	r3, [r7, #16]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d102      	bne.n	8013dae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013da8:	23fc      	movs	r3, #252	; 0xfc
 8013daa:	75fb      	strb	r3, [r7, #23]
 8013dac:	e01c      	b.n	8013de8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d006      	beq.n	8013dc2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	7adb      	ldrb	r3, [r3, #11]
 8013db8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	7a9b      	ldrb	r3, [r3, #10]
 8013dbe:	757b      	strb	r3, [r7, #21]
 8013dc0:	e003      	b.n	8013dca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013dc2:	23ff      	movs	r3, #255	; 0xff
 8013dc4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013dca:	7dba      	ldrb	r2, [r7, #22]
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	9302      	str	r3, [sp, #8]
 8013dd0:	2306      	movs	r3, #6
 8013dd2:	9301      	str	r3, [sp, #4]
 8013dd4:	7d7b      	ldrb	r3, [r7, #21]
 8013dd6:	9300      	str	r3, [sp, #0]
 8013dd8:	4613      	mov	r3, r2
 8013dda:	683a      	ldr	r2, [r7, #0]
 8013ddc:	6879      	ldr	r1, [r7, #4]
 8013dde:	68b8      	ldr	r0, [r7, #8]
 8013de0:	f002 fb2a 	bl	8016438 <ip4_output_if>
 8013de4:	4603      	mov	r3, r0
 8013de6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013de8:	68b8      	ldr	r0, [r7, #8]
 8013dea:	f7fa fd43 	bl	800e874 <pbuf_free>
  return err;
 8013dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3718      	adds	r7, #24
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}
 8013dfa:	bf00      	nop
 8013dfc:	08019f60 	.word	0x08019f60
 8013e00:	0801a6b8 	.word	0x0801a6b8
 8013e04:	08019fb4 	.word	0x08019fb4

08013e08 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013e08:	b590      	push	{r4, r7, lr}
 8013e0a:	b08b      	sub	sp, #44	; 0x2c
 8013e0c:	af04      	add	r7, sp, #16
 8013e0e:	60f8      	str	r0, [r7, #12]
 8013e10:	60b9      	str	r1, [r7, #8]
 8013e12:	607a      	str	r2, [r7, #4]
 8013e14:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d106      	bne.n	8013e2a <tcp_rst+0x22>
 8013e1c:	4b1f      	ldr	r3, [pc, #124]	; (8013e9c <tcp_rst+0x94>)
 8013e1e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013e22:	491f      	ldr	r1, [pc, #124]	; (8013ea0 <tcp_rst+0x98>)
 8013e24:	481f      	ldr	r0, [pc, #124]	; (8013ea4 <tcp_rst+0x9c>)
 8013e26:	f003 fb7f 	bl	8017528 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d106      	bne.n	8013e3e <tcp_rst+0x36>
 8013e30:	4b1a      	ldr	r3, [pc, #104]	; (8013e9c <tcp_rst+0x94>)
 8013e32:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013e36:	491c      	ldr	r1, [pc, #112]	; (8013ea8 <tcp_rst+0xa0>)
 8013e38:	481a      	ldr	r0, [pc, #104]	; (8013ea4 <tcp_rst+0x9c>)
 8013e3a:	f003 fb75 	bl	8017528 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013e3e:	2300      	movs	r3, #0
 8013e40:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013e42:	f246 0308 	movw	r3, #24584	; 0x6008
 8013e46:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013e48:	7dfb      	ldrb	r3, [r7, #23]
 8013e4a:	b29c      	uxth	r4, r3
 8013e4c:	68b8      	ldr	r0, [r7, #8]
 8013e4e:	f7f9 f9c8 	bl	800d1e2 <lwip_htonl>
 8013e52:	4602      	mov	r2, r0
 8013e54:	8abb      	ldrh	r3, [r7, #20]
 8013e56:	9303      	str	r3, [sp, #12]
 8013e58:	2314      	movs	r3, #20
 8013e5a:	9302      	str	r3, [sp, #8]
 8013e5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013e5e:	9301      	str	r3, [sp, #4]
 8013e60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013e62:	9300      	str	r3, [sp, #0]
 8013e64:	4613      	mov	r3, r2
 8013e66:	2200      	movs	r2, #0
 8013e68:	4621      	mov	r1, r4
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f7ff fe92 	bl	8013b94 <tcp_output_alloc_header_common>
 8013e70:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d00c      	beq.n	8013e92 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013e78:	7dfb      	ldrb	r3, [r7, #23]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	6939      	ldr	r1, [r7, #16]
 8013e7e:	68f8      	ldr	r0, [r7, #12]
 8013e80:	f7ff ff38 	bl	8013cf4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e86:	683a      	ldr	r2, [r7, #0]
 8013e88:	6939      	ldr	r1, [r7, #16]
 8013e8a:	68f8      	ldr	r0, [r7, #12]
 8013e8c:	f7ff ff72 	bl	8013d74 <tcp_output_control_segment>
 8013e90:	e000      	b.n	8013e94 <tcp_rst+0x8c>
    return;
 8013e92:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013e94:	371c      	adds	r7, #28
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd90      	pop	{r4, r7, pc}
 8013e9a:	bf00      	nop
 8013e9c:	08019f60 	.word	0x08019f60
 8013ea0:	0801a6e4 	.word	0x0801a6e4
 8013ea4:	08019fb4 	.word	0x08019fb4
 8013ea8:	0801a700 	.word	0x0801a700

08013eac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013eac:	b590      	push	{r4, r7, lr}
 8013eae:	b087      	sub	sp, #28
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d106      	bne.n	8013ed0 <tcp_send_empty_ack+0x24>
 8013ec2:	4b28      	ldr	r3, [pc, #160]	; (8013f64 <tcp_send_empty_ack+0xb8>)
 8013ec4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013ec8:	4927      	ldr	r1, [pc, #156]	; (8013f68 <tcp_send_empty_ack+0xbc>)
 8013eca:	4828      	ldr	r0, [pc, #160]	; (8013f6c <tcp_send_empty_ack+0xc0>)
 8013ecc:	f003 fb2c 	bl	8017528 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013ed0:	7dfb      	ldrb	r3, [r7, #23]
 8013ed2:	009b      	lsls	r3, r3, #2
 8013ed4:	b2db      	uxtb	r3, r3
 8013ed6:	f003 0304 	and.w	r3, r3, #4
 8013eda:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013edc:	7d7b      	ldrb	r3, [r7, #21]
 8013ede:	b29c      	uxth	r4, r3
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7f9 f97c 	bl	800d1e2 <lwip_htonl>
 8013eea:	4603      	mov	r3, r0
 8013eec:	2200      	movs	r2, #0
 8013eee:	4621      	mov	r1, r4
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f7ff fec1 	bl	8013c78 <tcp_output_alloc_header>
 8013ef6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013ef8:	693b      	ldr	r3, [r7, #16]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d109      	bne.n	8013f12 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	8b5b      	ldrh	r3, [r3, #26]
 8013f02:	f043 0303 	orr.w	r3, r3, #3
 8013f06:	b29a      	uxth	r2, r3
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013f0c:	f06f 0301 	mvn.w	r3, #1
 8013f10:	e023      	b.n	8013f5a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013f12:	7dbb      	ldrb	r3, [r7, #22]
 8013f14:	7dfa      	ldrb	r2, [r7, #23]
 8013f16:	6939      	ldr	r1, [r7, #16]
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f7ff feeb 	bl	8013cf4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	3304      	adds	r3, #4
 8013f24:	6939      	ldr	r1, [r7, #16]
 8013f26:	6878      	ldr	r0, [r7, #4]
 8013f28:	f7ff ff24 	bl	8013d74 <tcp_output_control_segment>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d007      	beq.n	8013f48 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	8b5b      	ldrh	r3, [r3, #26]
 8013f3c:	f043 0303 	orr.w	r3, r3, #3
 8013f40:	b29a      	uxth	r2, r3
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	835a      	strh	r2, [r3, #26]
 8013f46:	e006      	b.n	8013f56 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	8b5b      	ldrh	r3, [r3, #26]
 8013f4c:	f023 0303 	bic.w	r3, r3, #3
 8013f50:	b29a      	uxth	r2, r3
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	371c      	adds	r7, #28
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd90      	pop	{r4, r7, pc}
 8013f62:	bf00      	nop
 8013f64:	08019f60 	.word	0x08019f60
 8013f68:	0801a71c 	.word	0x0801a71c
 8013f6c:	08019fb4 	.word	0x08019fb4

08013f70 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013f70:	b590      	push	{r4, r7, lr}
 8013f72:	b087      	sub	sp, #28
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013f78:	2300      	movs	r3, #0
 8013f7a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d106      	bne.n	8013f90 <tcp_keepalive+0x20>
 8013f82:	4b18      	ldr	r3, [pc, #96]	; (8013fe4 <tcp_keepalive+0x74>)
 8013f84:	f640 0224 	movw	r2, #2084	; 0x824
 8013f88:	4917      	ldr	r1, [pc, #92]	; (8013fe8 <tcp_keepalive+0x78>)
 8013f8a:	4818      	ldr	r0, [pc, #96]	; (8013fec <tcp_keepalive+0x7c>)
 8013f8c:	f003 facc 	bl	8017528 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013f90:	7dfb      	ldrb	r3, [r7, #23]
 8013f92:	b29c      	uxth	r4, r3
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f98:	3b01      	subs	r3, #1
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7f9 f921 	bl	800d1e2 <lwip_htonl>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	4621      	mov	r1, r4
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f7ff fe66 	bl	8013c78 <tcp_output_alloc_header>
 8013fac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013fae:	693b      	ldr	r3, [r7, #16]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d102      	bne.n	8013fba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013fb8:	e010      	b.n	8013fdc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013fba:	7dfb      	ldrb	r3, [r7, #23]
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	6939      	ldr	r1, [r7, #16]
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f7ff fe97 	bl	8013cf4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	3304      	adds	r3, #4
 8013fcc:	6939      	ldr	r1, [r7, #16]
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f7ff fed0 	bl	8013d74 <tcp_output_control_segment>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	371c      	adds	r7, #28
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd90      	pop	{r4, r7, pc}
 8013fe4:	08019f60 	.word	0x08019f60
 8013fe8:	0801a73c 	.word	0x0801a73c
 8013fec:	08019fb4 	.word	0x08019fb4

08013ff0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013ff0:	b590      	push	{r4, r7, lr}
 8013ff2:	b08b      	sub	sp, #44	; 0x2c
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d106      	bne.n	8014012 <tcp_zero_window_probe+0x22>
 8014004:	4b4c      	ldr	r3, [pc, #304]	; (8014138 <tcp_zero_window_probe+0x148>)
 8014006:	f640 024f 	movw	r2, #2127	; 0x84f
 801400a:	494c      	ldr	r1, [pc, #304]	; (801413c <tcp_zero_window_probe+0x14c>)
 801400c:	484c      	ldr	r0, [pc, #304]	; (8014140 <tcp_zero_window_probe+0x150>)
 801400e:	f003 fa8b 	bl	8017528 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014016:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014018:	6a3b      	ldr	r3, [r7, #32]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d101      	bne.n	8014022 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801401e:	2300      	movs	r3, #0
 8014020:	e086      	b.n	8014130 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014028:	2bff      	cmp	r3, #255	; 0xff
 801402a:	d007      	beq.n	801403c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014032:	3301      	adds	r3, #1
 8014034:	b2da      	uxtb	r2, r3
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801403c:	6a3b      	ldr	r3, [r7, #32]
 801403e:	68db      	ldr	r3, [r3, #12]
 8014040:	899b      	ldrh	r3, [r3, #12]
 8014042:	b29b      	uxth	r3, r3
 8014044:	4618      	mov	r0, r3
 8014046:	f7f9 f8b7 	bl	800d1b8 <lwip_htons>
 801404a:	4603      	mov	r3, r0
 801404c:	b2db      	uxtb	r3, r3
 801404e:	f003 0301 	and.w	r3, r3, #1
 8014052:	2b00      	cmp	r3, #0
 8014054:	d005      	beq.n	8014062 <tcp_zero_window_probe+0x72>
 8014056:	6a3b      	ldr	r3, [r7, #32]
 8014058:	891b      	ldrh	r3, [r3, #8]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d101      	bne.n	8014062 <tcp_zero_window_probe+0x72>
 801405e:	2301      	movs	r3, #1
 8014060:	e000      	b.n	8014064 <tcp_zero_window_probe+0x74>
 8014062:	2300      	movs	r3, #0
 8014064:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014066:	7ffb      	ldrb	r3, [r7, #31]
 8014068:	2b00      	cmp	r3, #0
 801406a:	bf0c      	ite	eq
 801406c:	2301      	moveq	r3, #1
 801406e:	2300      	movne	r3, #0
 8014070:	b2db      	uxtb	r3, r3
 8014072:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014078:	b299      	uxth	r1, r3
 801407a:	6a3b      	ldr	r3, [r7, #32]
 801407c:	68db      	ldr	r3, [r3, #12]
 801407e:	685b      	ldr	r3, [r3, #4]
 8014080:	8bba      	ldrh	r2, [r7, #28]
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f7ff fdf8 	bl	8013c78 <tcp_output_alloc_header>
 8014088:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801408a:	69bb      	ldr	r3, [r7, #24]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d102      	bne.n	8014096 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014094:	e04c      	b.n	8014130 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014096:	69bb      	ldr	r3, [r7, #24]
 8014098:	685b      	ldr	r3, [r3, #4]
 801409a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801409c:	7ffb      	ldrb	r3, [r7, #31]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d011      	beq.n	80140c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	899b      	ldrh	r3, [r3, #12]
 80140a6:	b29b      	uxth	r3, r3
 80140a8:	b21b      	sxth	r3, r3
 80140aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80140ae:	b21c      	sxth	r4, r3
 80140b0:	2011      	movs	r0, #17
 80140b2:	f7f9 f881 	bl	800d1b8 <lwip_htons>
 80140b6:	4603      	mov	r3, r0
 80140b8:	b21b      	sxth	r3, r3
 80140ba:	4323      	orrs	r3, r4
 80140bc:	b21b      	sxth	r3, r3
 80140be:	b29a      	uxth	r2, r3
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	819a      	strh	r2, [r3, #12]
 80140c4:	e010      	b.n	80140e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80140c6:	69bb      	ldr	r3, [r7, #24]
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	3314      	adds	r3, #20
 80140cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80140ce:	6a3b      	ldr	r3, [r7, #32]
 80140d0:	6858      	ldr	r0, [r3, #4]
 80140d2:	6a3b      	ldr	r3, [r7, #32]
 80140d4:	685b      	ldr	r3, [r3, #4]
 80140d6:	891a      	ldrh	r2, [r3, #8]
 80140d8:	6a3b      	ldr	r3, [r7, #32]
 80140da:	891b      	ldrh	r3, [r3, #8]
 80140dc:	1ad3      	subs	r3, r2, r3
 80140de:	b29b      	uxth	r3, r3
 80140e0:	2201      	movs	r2, #1
 80140e2:	6939      	ldr	r1, [r7, #16]
 80140e4:	f7fa fdc0 	bl	800ec68 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80140e8:	6a3b      	ldr	r3, [r7, #32]
 80140ea:	68db      	ldr	r3, [r3, #12]
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7f9 f877 	bl	800d1e2 <lwip_htonl>
 80140f4:	4603      	mov	r3, r0
 80140f6:	3301      	adds	r3, #1
 80140f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	1ad3      	subs	r3, r2, r3
 8014102:	2b00      	cmp	r3, #0
 8014104:	da02      	bge.n	801410c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	68fa      	ldr	r2, [r7, #12]
 801410a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801410c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014110:	2200      	movs	r2, #0
 8014112:	69b9      	ldr	r1, [r7, #24]
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f7ff fded 	bl	8013cf4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801411a:	687a      	ldr	r2, [r7, #4]
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	3304      	adds	r3, #4
 8014120:	69b9      	ldr	r1, [r7, #24]
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f7ff fe26 	bl	8013d74 <tcp_output_control_segment>
 8014128:	4603      	mov	r3, r0
 801412a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801412c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014130:	4618      	mov	r0, r3
 8014132:	372c      	adds	r7, #44	; 0x2c
 8014134:	46bd      	mov	sp, r7
 8014136:	bd90      	pop	{r4, r7, pc}
 8014138:	08019f60 	.word	0x08019f60
 801413c:	0801a758 	.word	0x0801a758
 8014140:	08019fb4 	.word	0x08019fb4

08014144 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b082      	sub	sp, #8
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801414c:	f7fa ff0c 	bl	800ef68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014150:	4b0a      	ldr	r3, [pc, #40]	; (801417c <tcpip_tcp_timer+0x38>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d103      	bne.n	8014160 <tcpip_tcp_timer+0x1c>
 8014158:	4b09      	ldr	r3, [pc, #36]	; (8014180 <tcpip_tcp_timer+0x3c>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d005      	beq.n	801416c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014160:	2200      	movs	r2, #0
 8014162:	4908      	ldr	r1, [pc, #32]	; (8014184 <tcpip_tcp_timer+0x40>)
 8014164:	20fa      	movs	r0, #250	; 0xfa
 8014166:	f000 f8f3 	bl	8014350 <sys_timeout>
 801416a:	e003      	b.n	8014174 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801416c:	4b06      	ldr	r3, [pc, #24]	; (8014188 <tcpip_tcp_timer+0x44>)
 801416e:	2200      	movs	r2, #0
 8014170:	601a      	str	r2, [r3, #0]
  }
}
 8014172:	bf00      	nop
 8014174:	bf00      	nop
 8014176:	3708      	adds	r7, #8
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	20009718 	.word	0x20009718
 8014180:	2000971c 	.word	0x2000971c
 8014184:	08014145 	.word	0x08014145
 8014188:	20009764 	.word	0x20009764

0801418c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014190:	4b0a      	ldr	r3, [pc, #40]	; (80141bc <tcp_timer_needed+0x30>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d10f      	bne.n	80141b8 <tcp_timer_needed+0x2c>
 8014198:	4b09      	ldr	r3, [pc, #36]	; (80141c0 <tcp_timer_needed+0x34>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d103      	bne.n	80141a8 <tcp_timer_needed+0x1c>
 80141a0:	4b08      	ldr	r3, [pc, #32]	; (80141c4 <tcp_timer_needed+0x38>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d007      	beq.n	80141b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80141a8:	4b04      	ldr	r3, [pc, #16]	; (80141bc <tcp_timer_needed+0x30>)
 80141aa:	2201      	movs	r2, #1
 80141ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80141ae:	2200      	movs	r2, #0
 80141b0:	4905      	ldr	r1, [pc, #20]	; (80141c8 <tcp_timer_needed+0x3c>)
 80141b2:	20fa      	movs	r0, #250	; 0xfa
 80141b4:	f000 f8cc 	bl	8014350 <sys_timeout>
  }
}
 80141b8:	bf00      	nop
 80141ba:	bd80      	pop	{r7, pc}
 80141bc:	20009764 	.word	0x20009764
 80141c0:	20009718 	.word	0x20009718
 80141c4:	2000971c 	.word	0x2000971c
 80141c8:	08014145 	.word	0x08014145

080141cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b086      	sub	sp, #24
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	60f8      	str	r0, [r7, #12]
 80141d4:	60b9      	str	r1, [r7, #8]
 80141d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80141d8:	2006      	movs	r0, #6
 80141da:	f7f9 fc65 	bl	800daa8 <memp_malloc>
 80141de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d109      	bne.n	80141fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80141e6:	693b      	ldr	r3, [r7, #16]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d151      	bne.n	8014290 <sys_timeout_abs+0xc4>
 80141ec:	4b2a      	ldr	r3, [pc, #168]	; (8014298 <sys_timeout_abs+0xcc>)
 80141ee:	22be      	movs	r2, #190	; 0xbe
 80141f0:	492a      	ldr	r1, [pc, #168]	; (801429c <sys_timeout_abs+0xd0>)
 80141f2:	482b      	ldr	r0, [pc, #172]	; (80142a0 <sys_timeout_abs+0xd4>)
 80141f4:	f003 f998 	bl	8017528 <iprintf>
    return;
 80141f8:	e04a      	b.n	8014290 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	2200      	movs	r2, #0
 80141fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	68ba      	ldr	r2, [r7, #8]
 8014204:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	687a      	ldr	r2, [r7, #4]
 801420a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801420c:	693b      	ldr	r3, [r7, #16]
 801420e:	68fa      	ldr	r2, [r7, #12]
 8014210:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014212:	4b24      	ldr	r3, [pc, #144]	; (80142a4 <sys_timeout_abs+0xd8>)
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d103      	bne.n	8014222 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801421a:	4a22      	ldr	r2, [pc, #136]	; (80142a4 <sys_timeout_abs+0xd8>)
 801421c:	693b      	ldr	r3, [r7, #16]
 801421e:	6013      	str	r3, [r2, #0]
    return;
 8014220:	e037      	b.n	8014292 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014222:	693b      	ldr	r3, [r7, #16]
 8014224:	685a      	ldr	r2, [r3, #4]
 8014226:	4b1f      	ldr	r3, [pc, #124]	; (80142a4 <sys_timeout_abs+0xd8>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	1ad3      	subs	r3, r2, r3
 801422e:	0fdb      	lsrs	r3, r3, #31
 8014230:	f003 0301 	and.w	r3, r3, #1
 8014234:	b2db      	uxtb	r3, r3
 8014236:	2b00      	cmp	r3, #0
 8014238:	d007      	beq.n	801424a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801423a:	4b1a      	ldr	r3, [pc, #104]	; (80142a4 <sys_timeout_abs+0xd8>)
 801423c:	681a      	ldr	r2, [r3, #0]
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014242:	4a18      	ldr	r2, [pc, #96]	; (80142a4 <sys_timeout_abs+0xd8>)
 8014244:	693b      	ldr	r3, [r7, #16]
 8014246:	6013      	str	r3, [r2, #0]
 8014248:	e023      	b.n	8014292 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801424a:	4b16      	ldr	r3, [pc, #88]	; (80142a4 <sys_timeout_abs+0xd8>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	617b      	str	r3, [r7, #20]
 8014250:	e01a      	b.n	8014288 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d00b      	beq.n	8014272 <sys_timeout_abs+0xa6>
 801425a:	693b      	ldr	r3, [r7, #16]
 801425c:	685a      	ldr	r2, [r3, #4]
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	1ad3      	subs	r3, r2, r3
 8014266:	0fdb      	lsrs	r3, r3, #31
 8014268:	f003 0301 	and.w	r3, r3, #1
 801426c:	b2db      	uxtb	r3, r3
 801426e:	2b00      	cmp	r3, #0
 8014270:	d007      	beq.n	8014282 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	681a      	ldr	r2, [r3, #0]
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	693a      	ldr	r2, [r7, #16]
 801427e:	601a      	str	r2, [r3, #0]
        break;
 8014280:	e007      	b.n	8014292 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	617b      	str	r3, [r7, #20]
 8014288:	697b      	ldr	r3, [r7, #20]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d1e1      	bne.n	8014252 <sys_timeout_abs+0x86>
 801428e:	e000      	b.n	8014292 <sys_timeout_abs+0xc6>
    return;
 8014290:	bf00      	nop
      }
    }
  }
}
 8014292:	3718      	adds	r7, #24
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}
 8014298:	0801a77c 	.word	0x0801a77c
 801429c:	0801a7b0 	.word	0x0801a7b0
 80142a0:	0801a7f0 	.word	0x0801a7f0
 80142a4:	2000975c 	.word	0x2000975c

080142a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b086      	sub	sp, #24
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	685b      	ldr	r3, [r3, #4]
 80142b8:	4798      	blx	r3

  now = sys_now();
 80142ba:	f7f8 fd69 	bl	800cd90 <sys_now>
 80142be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80142c0:	697b      	ldr	r3, [r7, #20]
 80142c2:	681a      	ldr	r2, [r3, #0]
 80142c4:	4b0f      	ldr	r3, [pc, #60]	; (8014304 <lwip_cyclic_timer+0x5c>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	4413      	add	r3, r2
 80142ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80142cc:	68fa      	ldr	r2, [r7, #12]
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	1ad3      	subs	r3, r2, r3
 80142d2:	0fdb      	lsrs	r3, r3, #31
 80142d4:	f003 0301 	and.w	r3, r3, #1
 80142d8:	b2db      	uxtb	r3, r3
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d009      	beq.n	80142f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	681a      	ldr	r2, [r3, #0]
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	4413      	add	r3, r2
 80142e6:	687a      	ldr	r2, [r7, #4]
 80142e8:	4907      	ldr	r1, [pc, #28]	; (8014308 <lwip_cyclic_timer+0x60>)
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7ff ff6e 	bl	80141cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80142f0:	e004      	b.n	80142fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80142f2:	687a      	ldr	r2, [r7, #4]
 80142f4:	4904      	ldr	r1, [pc, #16]	; (8014308 <lwip_cyclic_timer+0x60>)
 80142f6:	68f8      	ldr	r0, [r7, #12]
 80142f8:	f7ff ff68 	bl	80141cc <sys_timeout_abs>
}
 80142fc:	bf00      	nop
 80142fe:	3718      	adds	r7, #24
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}
 8014304:	20009760 	.word	0x20009760
 8014308:	080142a9 	.word	0x080142a9

0801430c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014312:	2301      	movs	r3, #1
 8014314:	607b      	str	r3, [r7, #4]
 8014316:	e00e      	b.n	8014336 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014318:	4a0b      	ldr	r2, [pc, #44]	; (8014348 <sys_timeouts_init+0x3c>)
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	00db      	lsls	r3, r3, #3
 8014324:	4a08      	ldr	r2, [pc, #32]	; (8014348 <sys_timeouts_init+0x3c>)
 8014326:	4413      	add	r3, r2
 8014328:	461a      	mov	r2, r3
 801432a:	4908      	ldr	r1, [pc, #32]	; (801434c <sys_timeouts_init+0x40>)
 801432c:	f000 f810 	bl	8014350 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	3301      	adds	r3, #1
 8014334:	607b      	str	r3, [r7, #4]
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2b02      	cmp	r3, #2
 801433a:	d9ed      	bls.n	8014318 <sys_timeouts_init+0xc>
  }
}
 801433c:	bf00      	nop
 801433e:	bf00      	nop
 8014340:	3708      	adds	r7, #8
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}
 8014346:	bf00      	nop
 8014348:	0801b370 	.word	0x0801b370
 801434c:	080142a9 	.word	0x080142a9

08014350 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b086      	sub	sp, #24
 8014354:	af00      	add	r7, sp, #0
 8014356:	60f8      	str	r0, [r7, #12]
 8014358:	60b9      	str	r1, [r7, #8]
 801435a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014362:	d306      	bcc.n	8014372 <sys_timeout+0x22>
 8014364:	4b0a      	ldr	r3, [pc, #40]	; (8014390 <sys_timeout+0x40>)
 8014366:	f240 1229 	movw	r2, #297	; 0x129
 801436a:	490a      	ldr	r1, [pc, #40]	; (8014394 <sys_timeout+0x44>)
 801436c:	480a      	ldr	r0, [pc, #40]	; (8014398 <sys_timeout+0x48>)
 801436e:	f003 f8db 	bl	8017528 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014372:	f7f8 fd0d 	bl	800cd90 <sys_now>
 8014376:	4602      	mov	r2, r0
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	4413      	add	r3, r2
 801437c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801437e:	687a      	ldr	r2, [r7, #4]
 8014380:	68b9      	ldr	r1, [r7, #8]
 8014382:	6978      	ldr	r0, [r7, #20]
 8014384:	f7ff ff22 	bl	80141cc <sys_timeout_abs>
#endif
}
 8014388:	bf00      	nop
 801438a:	3718      	adds	r7, #24
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}
 8014390:	0801a77c 	.word	0x0801a77c
 8014394:	0801a818 	.word	0x0801a818
 8014398:	0801a7f0 	.word	0x0801a7f0

0801439c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b084      	sub	sp, #16
 80143a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80143a2:	f7f8 fcf5 	bl	800cd90 <sys_now>
 80143a6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80143a8:	4b1a      	ldr	r3, [pc, #104]	; (8014414 <sys_check_timeouts+0x78>)
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	b2db      	uxtb	r3, r3
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d001      	beq.n	80143b6 <sys_check_timeouts+0x1a>
 80143b2:	f7f9 ff25 	bl	800e200 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80143b6:	4b18      	ldr	r3, [pc, #96]	; (8014418 <sys_check_timeouts+0x7c>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d022      	beq.n	8014408 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80143c2:	68bb      	ldr	r3, [r7, #8]
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	68fa      	ldr	r2, [r7, #12]
 80143c8:	1ad3      	subs	r3, r2, r3
 80143ca:	0fdb      	lsrs	r3, r3, #31
 80143cc:	f003 0301 	and.w	r3, r3, #1
 80143d0:	b2db      	uxtb	r3, r3
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d11a      	bne.n	801440c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	4a0f      	ldr	r2, [pc, #60]	; (8014418 <sys_check_timeouts+0x7c>)
 80143dc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	689b      	ldr	r3, [r3, #8]
 80143e2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	68db      	ldr	r3, [r3, #12]
 80143e8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	685b      	ldr	r3, [r3, #4]
 80143ee:	4a0b      	ldr	r2, [pc, #44]	; (801441c <sys_check_timeouts+0x80>)
 80143f0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80143f2:	68b9      	ldr	r1, [r7, #8]
 80143f4:	2006      	movs	r0, #6
 80143f6:	f7f9 fbc7 	bl	800db88 <memp_free>
    if (handler != NULL) {
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d0d3      	beq.n	80143a8 <sys_check_timeouts+0xc>
      handler(arg);
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	6838      	ldr	r0, [r7, #0]
 8014404:	4798      	blx	r3
  do {
 8014406:	e7cf      	b.n	80143a8 <sys_check_timeouts+0xc>
      return;
 8014408:	bf00      	nop
 801440a:	e000      	b.n	801440e <sys_check_timeouts+0x72>
      return;
 801440c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801440e:	3710      	adds	r7, #16
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}
 8014414:	20009709 	.word	0x20009709
 8014418:	2000975c 	.word	0x2000975c
 801441c:	20009760 	.word	0x20009760

08014420 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014424:	f003 f90e 	bl	8017644 <rand>
 8014428:	4603      	mov	r3, r0
 801442a:	b29b      	uxth	r3, r3
 801442c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014430:	b29b      	uxth	r3, r3
 8014432:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014436:	b29a      	uxth	r2, r3
 8014438:	4b01      	ldr	r3, [pc, #4]	; (8014440 <udp_init+0x20>)
 801443a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801443c:	bf00      	nop
 801443e:	bd80      	pop	{r7, pc}
 8014440:	20000028 	.word	0x20000028

08014444 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014444:	b480      	push	{r7}
 8014446:	b083      	sub	sp, #12
 8014448:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801444a:	2300      	movs	r3, #0
 801444c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801444e:	4b17      	ldr	r3, [pc, #92]	; (80144ac <udp_new_port+0x68>)
 8014450:	881b      	ldrh	r3, [r3, #0]
 8014452:	1c5a      	adds	r2, r3, #1
 8014454:	b291      	uxth	r1, r2
 8014456:	4a15      	ldr	r2, [pc, #84]	; (80144ac <udp_new_port+0x68>)
 8014458:	8011      	strh	r1, [r2, #0]
 801445a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801445e:	4293      	cmp	r3, r2
 8014460:	d103      	bne.n	801446a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014462:	4b12      	ldr	r3, [pc, #72]	; (80144ac <udp_new_port+0x68>)
 8014464:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014468:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801446a:	4b11      	ldr	r3, [pc, #68]	; (80144b0 <udp_new_port+0x6c>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	603b      	str	r3, [r7, #0]
 8014470:	e011      	b.n	8014496 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014472:	683b      	ldr	r3, [r7, #0]
 8014474:	8a5a      	ldrh	r2, [r3, #18]
 8014476:	4b0d      	ldr	r3, [pc, #52]	; (80144ac <udp_new_port+0x68>)
 8014478:	881b      	ldrh	r3, [r3, #0]
 801447a:	429a      	cmp	r2, r3
 801447c:	d108      	bne.n	8014490 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801447e:	88fb      	ldrh	r3, [r7, #6]
 8014480:	3301      	adds	r3, #1
 8014482:	80fb      	strh	r3, [r7, #6]
 8014484:	88fb      	ldrh	r3, [r7, #6]
 8014486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801448a:	d3e0      	bcc.n	801444e <udp_new_port+0xa>
        return 0;
 801448c:	2300      	movs	r3, #0
 801448e:	e007      	b.n	80144a0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	68db      	ldr	r3, [r3, #12]
 8014494:	603b      	str	r3, [r7, #0]
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d1ea      	bne.n	8014472 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801449c:	4b03      	ldr	r3, [pc, #12]	; (80144ac <udp_new_port+0x68>)
 801449e:	881b      	ldrh	r3, [r3, #0]
}
 80144a0:	4618      	mov	r0, r3
 80144a2:	370c      	adds	r7, #12
 80144a4:	46bd      	mov	sp, r7
 80144a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144aa:	4770      	bx	lr
 80144ac:	20000028 	.word	0x20000028
 80144b0:	20009768 	.word	0x20009768

080144b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b084      	sub	sp, #16
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	60f8      	str	r0, [r7, #12]
 80144bc:	60b9      	str	r1, [r7, #8]
 80144be:	4613      	mov	r3, r2
 80144c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d105      	bne.n	80144d4 <udp_input_local_match+0x20>
 80144c8:	4b27      	ldr	r3, [pc, #156]	; (8014568 <udp_input_local_match+0xb4>)
 80144ca:	2287      	movs	r2, #135	; 0x87
 80144cc:	4927      	ldr	r1, [pc, #156]	; (801456c <udp_input_local_match+0xb8>)
 80144ce:	4828      	ldr	r0, [pc, #160]	; (8014570 <udp_input_local_match+0xbc>)
 80144d0:	f003 f82a 	bl	8017528 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d105      	bne.n	80144e6 <udp_input_local_match+0x32>
 80144da:	4b23      	ldr	r3, [pc, #140]	; (8014568 <udp_input_local_match+0xb4>)
 80144dc:	2288      	movs	r2, #136	; 0x88
 80144de:	4925      	ldr	r1, [pc, #148]	; (8014574 <udp_input_local_match+0xc0>)
 80144e0:	4823      	ldr	r0, [pc, #140]	; (8014570 <udp_input_local_match+0xbc>)
 80144e2:	f003 f821 	bl	8017528 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	7a1b      	ldrb	r3, [r3, #8]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d00b      	beq.n	8014506 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	7a1a      	ldrb	r2, [r3, #8]
 80144f2:	4b21      	ldr	r3, [pc, #132]	; (8014578 <udp_input_local_match+0xc4>)
 80144f4:	685b      	ldr	r3, [r3, #4]
 80144f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80144fa:	3301      	adds	r3, #1
 80144fc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80144fe:	429a      	cmp	r2, r3
 8014500:	d001      	beq.n	8014506 <udp_input_local_match+0x52>
    return 0;
 8014502:	2300      	movs	r3, #0
 8014504:	e02b      	b.n	801455e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014506:	79fb      	ldrb	r3, [r7, #7]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d018      	beq.n	801453e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d013      	beq.n	801453a <udp_input_local_match+0x86>
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d00f      	beq.n	801453a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801451a:	4b17      	ldr	r3, [pc, #92]	; (8014578 <udp_input_local_match+0xc4>)
 801451c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801451e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014522:	d00a      	beq.n	801453a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	681a      	ldr	r2, [r3, #0]
 8014528:	4b13      	ldr	r3, [pc, #76]	; (8014578 <udp_input_local_match+0xc4>)
 801452a:	695b      	ldr	r3, [r3, #20]
 801452c:	405a      	eors	r2, r3
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	3308      	adds	r3, #8
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014536:	2b00      	cmp	r3, #0
 8014538:	d110      	bne.n	801455c <udp_input_local_match+0xa8>
          return 1;
 801453a:	2301      	movs	r3, #1
 801453c:	e00f      	b.n	801455e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d009      	beq.n	8014558 <udp_input_local_match+0xa4>
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d005      	beq.n	8014558 <udp_input_local_match+0xa4>
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	681a      	ldr	r2, [r3, #0]
 8014550:	4b09      	ldr	r3, [pc, #36]	; (8014578 <udp_input_local_match+0xc4>)
 8014552:	695b      	ldr	r3, [r3, #20]
 8014554:	429a      	cmp	r2, r3
 8014556:	d101      	bne.n	801455c <udp_input_local_match+0xa8>
        return 1;
 8014558:	2301      	movs	r3, #1
 801455a:	e000      	b.n	801455e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801455c:	2300      	movs	r3, #0
}
 801455e:	4618      	mov	r0, r3
 8014560:	3710      	adds	r7, #16
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}
 8014566:	bf00      	nop
 8014568:	0801a864 	.word	0x0801a864
 801456c:	0801a894 	.word	0x0801a894
 8014570:	0801a8b8 	.word	0x0801a8b8
 8014574:	0801a8e0 	.word	0x0801a8e0
 8014578:	2000619c 	.word	0x2000619c

0801457c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801457c:	b590      	push	{r4, r7, lr}
 801457e:	b08d      	sub	sp, #52	; 0x34
 8014580:	af02      	add	r7, sp, #8
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014586:	2300      	movs	r3, #0
 8014588:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d105      	bne.n	801459c <udp_input+0x20>
 8014590:	4b7c      	ldr	r3, [pc, #496]	; (8014784 <udp_input+0x208>)
 8014592:	22cf      	movs	r2, #207	; 0xcf
 8014594:	497c      	ldr	r1, [pc, #496]	; (8014788 <udp_input+0x20c>)
 8014596:	487d      	ldr	r0, [pc, #500]	; (801478c <udp_input+0x210>)
 8014598:	f002 ffc6 	bl	8017528 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d105      	bne.n	80145ae <udp_input+0x32>
 80145a2:	4b78      	ldr	r3, [pc, #480]	; (8014784 <udp_input+0x208>)
 80145a4:	22d0      	movs	r2, #208	; 0xd0
 80145a6:	497a      	ldr	r1, [pc, #488]	; (8014790 <udp_input+0x214>)
 80145a8:	4878      	ldr	r0, [pc, #480]	; (801478c <udp_input+0x210>)
 80145aa:	f002 ffbd 	bl	8017528 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	895b      	ldrh	r3, [r3, #10]
 80145b2:	2b07      	cmp	r3, #7
 80145b4:	d803      	bhi.n	80145be <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f7fa f95c 	bl	800e874 <pbuf_free>
    goto end;
 80145bc:	e0de      	b.n	801477c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	685b      	ldr	r3, [r3, #4]
 80145c2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80145c4:	4b73      	ldr	r3, [pc, #460]	; (8014794 <udp_input+0x218>)
 80145c6:	695b      	ldr	r3, [r3, #20]
 80145c8:	4a72      	ldr	r2, [pc, #456]	; (8014794 <udp_input+0x218>)
 80145ca:	6812      	ldr	r2, [r2, #0]
 80145cc:	4611      	mov	r1, r2
 80145ce:	4618      	mov	r0, r3
 80145d0:	f002 f80a 	bl	80165e8 <ip4_addr_isbroadcast_u32>
 80145d4:	4603      	mov	r3, r0
 80145d6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	881b      	ldrh	r3, [r3, #0]
 80145dc:	b29b      	uxth	r3, r3
 80145de:	4618      	mov	r0, r3
 80145e0:	f7f8 fdea 	bl	800d1b8 <lwip_htons>
 80145e4:	4603      	mov	r3, r0
 80145e6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	885b      	ldrh	r3, [r3, #2]
 80145ec:	b29b      	uxth	r3, r3
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7f8 fde2 	bl	800d1b8 <lwip_htons>
 80145f4:	4603      	mov	r3, r0
 80145f6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80145f8:	2300      	movs	r3, #0
 80145fa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80145fc:	2300      	movs	r3, #0
 80145fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014600:	2300      	movs	r3, #0
 8014602:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014604:	4b64      	ldr	r3, [pc, #400]	; (8014798 <udp_input+0x21c>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	627b      	str	r3, [r7, #36]	; 0x24
 801460a:	e054      	b.n	80146b6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460e:	8a5b      	ldrh	r3, [r3, #18]
 8014610:	89fa      	ldrh	r2, [r7, #14]
 8014612:	429a      	cmp	r2, r3
 8014614:	d14a      	bne.n	80146ac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014616:	7cfb      	ldrb	r3, [r7, #19]
 8014618:	461a      	mov	r2, r3
 801461a:	6839      	ldr	r1, [r7, #0]
 801461c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801461e:	f7ff ff49 	bl	80144b4 <udp_input_local_match>
 8014622:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014624:	2b00      	cmp	r3, #0
 8014626:	d041      	beq.n	80146ac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801462a:	7c1b      	ldrb	r3, [r3, #16]
 801462c:	f003 0304 	and.w	r3, r3, #4
 8014630:	2b00      	cmp	r3, #0
 8014632:	d11d      	bne.n	8014670 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014634:	69fb      	ldr	r3, [r7, #28]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d102      	bne.n	8014640 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801463c:	61fb      	str	r3, [r7, #28]
 801463e:	e017      	b.n	8014670 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014640:	7cfb      	ldrb	r3, [r7, #19]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d014      	beq.n	8014670 <udp_input+0xf4>
 8014646:	4b53      	ldr	r3, [pc, #332]	; (8014794 <udp_input+0x218>)
 8014648:	695b      	ldr	r3, [r3, #20]
 801464a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801464e:	d10f      	bne.n	8014670 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014650:	69fb      	ldr	r3, [r7, #28]
 8014652:	681a      	ldr	r2, [r3, #0]
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	3304      	adds	r3, #4
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	429a      	cmp	r2, r3
 801465c:	d008      	beq.n	8014670 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014660:	681a      	ldr	r2, [r3, #0]
 8014662:	683b      	ldr	r3, [r7, #0]
 8014664:	3304      	adds	r3, #4
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	429a      	cmp	r2, r3
 801466a:	d101      	bne.n	8014670 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801466e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014672:	8a9b      	ldrh	r3, [r3, #20]
 8014674:	8a3a      	ldrh	r2, [r7, #16]
 8014676:	429a      	cmp	r2, r3
 8014678:	d118      	bne.n	80146ac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801467e:	2b00      	cmp	r3, #0
 8014680:	d005      	beq.n	801468e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014684:	685a      	ldr	r2, [r3, #4]
 8014686:	4b43      	ldr	r3, [pc, #268]	; (8014794 <udp_input+0x218>)
 8014688:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801468a:	429a      	cmp	r2, r3
 801468c:	d10e      	bne.n	80146ac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801468e:	6a3b      	ldr	r3, [r7, #32]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d014      	beq.n	80146be <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014696:	68da      	ldr	r2, [r3, #12]
 8014698:	6a3b      	ldr	r3, [r7, #32]
 801469a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801469c:	4b3e      	ldr	r3, [pc, #248]	; (8014798 <udp_input+0x21c>)
 801469e:	681a      	ldr	r2, [r3, #0]
 80146a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80146a4:	4a3c      	ldr	r2, [pc, #240]	; (8014798 <udp_input+0x21c>)
 80146a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80146aa:	e008      	b.n	80146be <udp_input+0x142>
      }
    }

    prev = pcb;
 80146ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80146b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b2:	68db      	ldr	r3, [r3, #12]
 80146b4:	627b      	str	r3, [r7, #36]	; 0x24
 80146b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d1a7      	bne.n	801460c <udp_input+0x90>
 80146bc:	e000      	b.n	80146c0 <udp_input+0x144>
        break;
 80146be:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80146c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d101      	bne.n	80146ca <udp_input+0x14e>
    pcb = uncon_pcb;
 80146c6:	69fb      	ldr	r3, [r7, #28]
 80146c8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80146ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d002      	beq.n	80146d6 <udp_input+0x15a>
    for_us = 1;
 80146d0:	2301      	movs	r3, #1
 80146d2:	76fb      	strb	r3, [r7, #27]
 80146d4:	e00a      	b.n	80146ec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	3304      	adds	r3, #4
 80146da:	681a      	ldr	r2, [r3, #0]
 80146dc:	4b2d      	ldr	r3, [pc, #180]	; (8014794 <udp_input+0x218>)
 80146de:	695b      	ldr	r3, [r3, #20]
 80146e0:	429a      	cmp	r2, r3
 80146e2:	bf0c      	ite	eq
 80146e4:	2301      	moveq	r3, #1
 80146e6:	2300      	movne	r3, #0
 80146e8:	b2db      	uxtb	r3, r3
 80146ea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80146ec:	7efb      	ldrb	r3, [r7, #27]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d041      	beq.n	8014776 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80146f2:	2108      	movs	r1, #8
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f7fa f837 	bl	800e768 <pbuf_remove_header>
 80146fa:	4603      	mov	r3, r0
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d00a      	beq.n	8014716 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014700:	4b20      	ldr	r3, [pc, #128]	; (8014784 <udp_input+0x208>)
 8014702:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014706:	4925      	ldr	r1, [pc, #148]	; (801479c <udp_input+0x220>)
 8014708:	4820      	ldr	r0, [pc, #128]	; (801478c <udp_input+0x210>)
 801470a:	f002 ff0d 	bl	8017528 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801470e:	6878      	ldr	r0, [r7, #4]
 8014710:	f7fa f8b0 	bl	800e874 <pbuf_free>
      goto end;
 8014714:	e032      	b.n	801477c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014718:	2b00      	cmp	r3, #0
 801471a:	d012      	beq.n	8014742 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471e:	699b      	ldr	r3, [r3, #24]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d00a      	beq.n	801473a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014726:	699c      	ldr	r4, [r3, #24]
 8014728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801472a:	69d8      	ldr	r0, [r3, #28]
 801472c:	8a3b      	ldrh	r3, [r7, #16]
 801472e:	9300      	str	r3, [sp, #0]
 8014730:	4b1b      	ldr	r3, [pc, #108]	; (80147a0 <udp_input+0x224>)
 8014732:	687a      	ldr	r2, [r7, #4]
 8014734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014736:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014738:	e021      	b.n	801477e <udp_input+0x202>
        pbuf_free(p);
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f7fa f89a 	bl	800e874 <pbuf_free>
        goto end;
 8014740:	e01c      	b.n	801477c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014742:	7cfb      	ldrb	r3, [r7, #19]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d112      	bne.n	801476e <udp_input+0x1f2>
 8014748:	4b12      	ldr	r3, [pc, #72]	; (8014794 <udp_input+0x218>)
 801474a:	695b      	ldr	r3, [r3, #20]
 801474c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014750:	2be0      	cmp	r3, #224	; 0xe0
 8014752:	d00c      	beq.n	801476e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014754:	4b0f      	ldr	r3, [pc, #60]	; (8014794 <udp_input+0x218>)
 8014756:	899b      	ldrh	r3, [r3, #12]
 8014758:	3308      	adds	r3, #8
 801475a:	b29b      	uxth	r3, r3
 801475c:	b21b      	sxth	r3, r3
 801475e:	4619      	mov	r1, r3
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f7fa f874 	bl	800e84e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014766:	2103      	movs	r1, #3
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f001 fc1d 	bl	8015fa8 <icmp_dest_unreach>
      pbuf_free(p);
 801476e:	6878      	ldr	r0, [r7, #4]
 8014770:	f7fa f880 	bl	800e874 <pbuf_free>
  return;
 8014774:	e003      	b.n	801477e <udp_input+0x202>
    pbuf_free(p);
 8014776:	6878      	ldr	r0, [r7, #4]
 8014778:	f7fa f87c 	bl	800e874 <pbuf_free>
  return;
 801477c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801477e:	372c      	adds	r7, #44	; 0x2c
 8014780:	46bd      	mov	sp, r7
 8014782:	bd90      	pop	{r4, r7, pc}
 8014784:	0801a864 	.word	0x0801a864
 8014788:	0801a908 	.word	0x0801a908
 801478c:	0801a8b8 	.word	0x0801a8b8
 8014790:	0801a920 	.word	0x0801a920
 8014794:	2000619c 	.word	0x2000619c
 8014798:	20009768 	.word	0x20009768
 801479c:	0801a93c 	.word	0x0801a93c
 80147a0:	200061ac 	.word	0x200061ac

080147a4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b082      	sub	sp, #8
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d109      	bne.n	80147c8 <udp_send+0x24>
 80147b4:	4b11      	ldr	r3, [pc, #68]	; (80147fc <udp_send+0x58>)
 80147b6:	f240 12d5 	movw	r2, #469	; 0x1d5
 80147ba:	4911      	ldr	r1, [pc, #68]	; (8014800 <udp_send+0x5c>)
 80147bc:	4811      	ldr	r0, [pc, #68]	; (8014804 <udp_send+0x60>)
 80147be:	f002 feb3 	bl	8017528 <iprintf>
 80147c2:	f06f 030f 	mvn.w	r3, #15
 80147c6:	e015      	b.n	80147f4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d109      	bne.n	80147e2 <udp_send+0x3e>
 80147ce:	4b0b      	ldr	r3, [pc, #44]	; (80147fc <udp_send+0x58>)
 80147d0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80147d4:	490c      	ldr	r1, [pc, #48]	; (8014808 <udp_send+0x64>)
 80147d6:	480b      	ldr	r0, [pc, #44]	; (8014804 <udp_send+0x60>)
 80147d8:	f002 fea6 	bl	8017528 <iprintf>
 80147dc:	f06f 030f 	mvn.w	r3, #15
 80147e0:	e008      	b.n	80147f4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	1d1a      	adds	r2, r3, #4
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	8a9b      	ldrh	r3, [r3, #20]
 80147ea:	6839      	ldr	r1, [r7, #0]
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f000 f80d 	bl	801480c <udp_sendto>
 80147f2:	4603      	mov	r3, r0
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	3708      	adds	r7, #8
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}
 80147fc:	0801a864 	.word	0x0801a864
 8014800:	0801a958 	.word	0x0801a958
 8014804:	0801a8b8 	.word	0x0801a8b8
 8014808:	0801a970 	.word	0x0801a970

0801480c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b088      	sub	sp, #32
 8014810:	af02      	add	r7, sp, #8
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	607a      	str	r2, [r7, #4]
 8014818:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d109      	bne.n	8014834 <udp_sendto+0x28>
 8014820:	4b23      	ldr	r3, [pc, #140]	; (80148b0 <udp_sendto+0xa4>)
 8014822:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014826:	4923      	ldr	r1, [pc, #140]	; (80148b4 <udp_sendto+0xa8>)
 8014828:	4823      	ldr	r0, [pc, #140]	; (80148b8 <udp_sendto+0xac>)
 801482a:	f002 fe7d 	bl	8017528 <iprintf>
 801482e:	f06f 030f 	mvn.w	r3, #15
 8014832:	e038      	b.n	80148a6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d109      	bne.n	801484e <udp_sendto+0x42>
 801483a:	4b1d      	ldr	r3, [pc, #116]	; (80148b0 <udp_sendto+0xa4>)
 801483c:	f240 2219 	movw	r2, #537	; 0x219
 8014840:	491e      	ldr	r1, [pc, #120]	; (80148bc <udp_sendto+0xb0>)
 8014842:	481d      	ldr	r0, [pc, #116]	; (80148b8 <udp_sendto+0xac>)
 8014844:	f002 fe70 	bl	8017528 <iprintf>
 8014848:	f06f 030f 	mvn.w	r3, #15
 801484c:	e02b      	b.n	80148a6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d109      	bne.n	8014868 <udp_sendto+0x5c>
 8014854:	4b16      	ldr	r3, [pc, #88]	; (80148b0 <udp_sendto+0xa4>)
 8014856:	f240 221a 	movw	r2, #538	; 0x21a
 801485a:	4919      	ldr	r1, [pc, #100]	; (80148c0 <udp_sendto+0xb4>)
 801485c:	4816      	ldr	r0, [pc, #88]	; (80148b8 <udp_sendto+0xac>)
 801485e:	f002 fe63 	bl	8017528 <iprintf>
 8014862:	f06f 030f 	mvn.w	r3, #15
 8014866:	e01e      	b.n	80148a6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	7a1b      	ldrb	r3, [r3, #8]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d006      	beq.n	801487e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	7a1b      	ldrb	r3, [r3, #8]
 8014874:	4618      	mov	r0, r3
 8014876:	f7f9 fc9d 	bl	800e1b4 <netif_get_by_index>
 801487a:	6178      	str	r0, [r7, #20]
 801487c:	e003      	b.n	8014886 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f001 fc1c 	bl	80160bc <ip4_route>
 8014884:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d102      	bne.n	8014892 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801488c:	f06f 0303 	mvn.w	r3, #3
 8014890:	e009      	b.n	80148a6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8014892:	887a      	ldrh	r2, [r7, #2]
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	9300      	str	r3, [sp, #0]
 8014898:	4613      	mov	r3, r2
 801489a:	687a      	ldr	r2, [r7, #4]
 801489c:	68b9      	ldr	r1, [r7, #8]
 801489e:	68f8      	ldr	r0, [r7, #12]
 80148a0:	f000 f810 	bl	80148c4 <udp_sendto_if>
 80148a4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80148a6:	4618      	mov	r0, r3
 80148a8:	3718      	adds	r7, #24
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bd80      	pop	{r7, pc}
 80148ae:	bf00      	nop
 80148b0:	0801a864 	.word	0x0801a864
 80148b4:	0801a988 	.word	0x0801a988
 80148b8:	0801a8b8 	.word	0x0801a8b8
 80148bc:	0801a9a0 	.word	0x0801a9a0
 80148c0:	0801a9bc 	.word	0x0801a9bc

080148c4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b088      	sub	sp, #32
 80148c8:	af02      	add	r7, sp, #8
 80148ca:	60f8      	str	r0, [r7, #12]
 80148cc:	60b9      	str	r1, [r7, #8]
 80148ce:	607a      	str	r2, [r7, #4]
 80148d0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d109      	bne.n	80148ec <udp_sendto_if+0x28>
 80148d8:	4b2e      	ldr	r3, [pc, #184]	; (8014994 <udp_sendto_if+0xd0>)
 80148da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80148de:	492e      	ldr	r1, [pc, #184]	; (8014998 <udp_sendto_if+0xd4>)
 80148e0:	482e      	ldr	r0, [pc, #184]	; (801499c <udp_sendto_if+0xd8>)
 80148e2:	f002 fe21 	bl	8017528 <iprintf>
 80148e6:	f06f 030f 	mvn.w	r3, #15
 80148ea:	e04f      	b.n	801498c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d109      	bne.n	8014906 <udp_sendto_if+0x42>
 80148f2:	4b28      	ldr	r3, [pc, #160]	; (8014994 <udp_sendto_if+0xd0>)
 80148f4:	f240 2281 	movw	r2, #641	; 0x281
 80148f8:	4929      	ldr	r1, [pc, #164]	; (80149a0 <udp_sendto_if+0xdc>)
 80148fa:	4828      	ldr	r0, [pc, #160]	; (801499c <udp_sendto_if+0xd8>)
 80148fc:	f002 fe14 	bl	8017528 <iprintf>
 8014900:	f06f 030f 	mvn.w	r3, #15
 8014904:	e042      	b.n	801498c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d109      	bne.n	8014920 <udp_sendto_if+0x5c>
 801490c:	4b21      	ldr	r3, [pc, #132]	; (8014994 <udp_sendto_if+0xd0>)
 801490e:	f240 2282 	movw	r2, #642	; 0x282
 8014912:	4924      	ldr	r1, [pc, #144]	; (80149a4 <udp_sendto_if+0xe0>)
 8014914:	4821      	ldr	r0, [pc, #132]	; (801499c <udp_sendto_if+0xd8>)
 8014916:	f002 fe07 	bl	8017528 <iprintf>
 801491a:	f06f 030f 	mvn.w	r3, #15
 801491e:	e035      	b.n	801498c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014920:	6a3b      	ldr	r3, [r7, #32]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d109      	bne.n	801493a <udp_sendto_if+0x76>
 8014926:	4b1b      	ldr	r3, [pc, #108]	; (8014994 <udp_sendto_if+0xd0>)
 8014928:	f240 2283 	movw	r2, #643	; 0x283
 801492c:	491e      	ldr	r1, [pc, #120]	; (80149a8 <udp_sendto_if+0xe4>)
 801492e:	481b      	ldr	r0, [pc, #108]	; (801499c <udp_sendto_if+0xd8>)
 8014930:	f002 fdfa 	bl	8017528 <iprintf>
 8014934:	f06f 030f 	mvn.w	r3, #15
 8014938:	e028      	b.n	801498c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d009      	beq.n	8014954 <udp_sendto_if+0x90>
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d005      	beq.n	8014954 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014950:	2be0      	cmp	r3, #224	; 0xe0
 8014952:	d103      	bne.n	801495c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014954:	6a3b      	ldr	r3, [r7, #32]
 8014956:	3304      	adds	r3, #4
 8014958:	617b      	str	r3, [r7, #20]
 801495a:	e00b      	b.n	8014974 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	681a      	ldr	r2, [r3, #0]
 8014960:	6a3b      	ldr	r3, [r7, #32]
 8014962:	3304      	adds	r3, #4
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	429a      	cmp	r2, r3
 8014968:	d002      	beq.n	8014970 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801496a:	f06f 0303 	mvn.w	r3, #3
 801496e:	e00d      	b.n	801498c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014974:	887a      	ldrh	r2, [r7, #2]
 8014976:	697b      	ldr	r3, [r7, #20]
 8014978:	9301      	str	r3, [sp, #4]
 801497a:	6a3b      	ldr	r3, [r7, #32]
 801497c:	9300      	str	r3, [sp, #0]
 801497e:	4613      	mov	r3, r2
 8014980:	687a      	ldr	r2, [r7, #4]
 8014982:	68b9      	ldr	r1, [r7, #8]
 8014984:	68f8      	ldr	r0, [r7, #12]
 8014986:	f000 f811 	bl	80149ac <udp_sendto_if_src>
 801498a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801498c:	4618      	mov	r0, r3
 801498e:	3718      	adds	r7, #24
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}
 8014994:	0801a864 	.word	0x0801a864
 8014998:	0801a9d8 	.word	0x0801a9d8
 801499c:	0801a8b8 	.word	0x0801a8b8
 80149a0:	0801a9f4 	.word	0x0801a9f4
 80149a4:	0801aa10 	.word	0x0801aa10
 80149a8:	0801aa30 	.word	0x0801aa30

080149ac <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b08c      	sub	sp, #48	; 0x30
 80149b0:	af04      	add	r7, sp, #16
 80149b2:	60f8      	str	r0, [r7, #12]
 80149b4:	60b9      	str	r1, [r7, #8]
 80149b6:	607a      	str	r2, [r7, #4]
 80149b8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d109      	bne.n	80149d4 <udp_sendto_if_src+0x28>
 80149c0:	4b65      	ldr	r3, [pc, #404]	; (8014b58 <udp_sendto_if_src+0x1ac>)
 80149c2:	f240 22d1 	movw	r2, #721	; 0x2d1
 80149c6:	4965      	ldr	r1, [pc, #404]	; (8014b5c <udp_sendto_if_src+0x1b0>)
 80149c8:	4865      	ldr	r0, [pc, #404]	; (8014b60 <udp_sendto_if_src+0x1b4>)
 80149ca:	f002 fdad 	bl	8017528 <iprintf>
 80149ce:	f06f 030f 	mvn.w	r3, #15
 80149d2:	e0bc      	b.n	8014b4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d109      	bne.n	80149ee <udp_sendto_if_src+0x42>
 80149da:	4b5f      	ldr	r3, [pc, #380]	; (8014b58 <udp_sendto_if_src+0x1ac>)
 80149dc:	f240 22d2 	movw	r2, #722	; 0x2d2
 80149e0:	4960      	ldr	r1, [pc, #384]	; (8014b64 <udp_sendto_if_src+0x1b8>)
 80149e2:	485f      	ldr	r0, [pc, #380]	; (8014b60 <udp_sendto_if_src+0x1b4>)
 80149e4:	f002 fda0 	bl	8017528 <iprintf>
 80149e8:	f06f 030f 	mvn.w	r3, #15
 80149ec:	e0af      	b.n	8014b4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d109      	bne.n	8014a08 <udp_sendto_if_src+0x5c>
 80149f4:	4b58      	ldr	r3, [pc, #352]	; (8014b58 <udp_sendto_if_src+0x1ac>)
 80149f6:	f240 22d3 	movw	r2, #723	; 0x2d3
 80149fa:	495b      	ldr	r1, [pc, #364]	; (8014b68 <udp_sendto_if_src+0x1bc>)
 80149fc:	4858      	ldr	r0, [pc, #352]	; (8014b60 <udp_sendto_if_src+0x1b4>)
 80149fe:	f002 fd93 	bl	8017528 <iprintf>
 8014a02:	f06f 030f 	mvn.w	r3, #15
 8014a06:	e0a2      	b.n	8014b4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d109      	bne.n	8014a22 <udp_sendto_if_src+0x76>
 8014a0e:	4b52      	ldr	r3, [pc, #328]	; (8014b58 <udp_sendto_if_src+0x1ac>)
 8014a10:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014a14:	4955      	ldr	r1, [pc, #340]	; (8014b6c <udp_sendto_if_src+0x1c0>)
 8014a16:	4852      	ldr	r0, [pc, #328]	; (8014b60 <udp_sendto_if_src+0x1b4>)
 8014a18:	f002 fd86 	bl	8017528 <iprintf>
 8014a1c:	f06f 030f 	mvn.w	r3, #15
 8014a20:	e095      	b.n	8014b4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d109      	bne.n	8014a3c <udp_sendto_if_src+0x90>
 8014a28:	4b4b      	ldr	r3, [pc, #300]	; (8014b58 <udp_sendto_if_src+0x1ac>)
 8014a2a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014a2e:	4950      	ldr	r1, [pc, #320]	; (8014b70 <udp_sendto_if_src+0x1c4>)
 8014a30:	484b      	ldr	r0, [pc, #300]	; (8014b60 <udp_sendto_if_src+0x1b4>)
 8014a32:	f002 fd79 	bl	8017528 <iprintf>
 8014a36:	f06f 030f 	mvn.w	r3, #15
 8014a3a:	e088      	b.n	8014b4e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	8a5b      	ldrh	r3, [r3, #18]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d10f      	bne.n	8014a64 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014a44:	68f9      	ldr	r1, [r7, #12]
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	8a5b      	ldrh	r3, [r3, #18]
 8014a4a:	461a      	mov	r2, r3
 8014a4c:	68f8      	ldr	r0, [r7, #12]
 8014a4e:	f000 f893 	bl	8014b78 <udp_bind>
 8014a52:	4603      	mov	r3, r0
 8014a54:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014a56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d002      	beq.n	8014a64 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014a5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014a62:	e074      	b.n	8014b4e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	891b      	ldrh	r3, [r3, #8]
 8014a68:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014a6c:	4293      	cmp	r3, r2
 8014a6e:	d902      	bls.n	8014a76 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a74:	e06b      	b.n	8014b4e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014a76:	2108      	movs	r1, #8
 8014a78:	68b8      	ldr	r0, [r7, #8]
 8014a7a:	f7f9 fe65 	bl	800e748 <pbuf_add_header>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d015      	beq.n	8014ab0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014a84:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a88:	2108      	movs	r1, #8
 8014a8a:	2022      	movs	r0, #34	; 0x22
 8014a8c:	f7f9 fc0e 	bl	800e2ac <pbuf_alloc>
 8014a90:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014a92:	69fb      	ldr	r3, [r7, #28]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d102      	bne.n	8014a9e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a9c:	e057      	b.n	8014b4e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014a9e:	68bb      	ldr	r3, [r7, #8]
 8014aa0:	891b      	ldrh	r3, [r3, #8]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d006      	beq.n	8014ab4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014aa6:	68b9      	ldr	r1, [r7, #8]
 8014aa8:	69f8      	ldr	r0, [r7, #28]
 8014aaa:	f7f9 fffb 	bl	800eaa4 <pbuf_chain>
 8014aae:	e001      	b.n	8014ab4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014ab0:	68bb      	ldr	r3, [r7, #8]
 8014ab2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014ab4:	69fb      	ldr	r3, [r7, #28]
 8014ab6:	895b      	ldrh	r3, [r3, #10]
 8014ab8:	2b07      	cmp	r3, #7
 8014aba:	d806      	bhi.n	8014aca <udp_sendto_if_src+0x11e>
 8014abc:	4b26      	ldr	r3, [pc, #152]	; (8014b58 <udp_sendto_if_src+0x1ac>)
 8014abe:	f240 320d 	movw	r2, #781	; 0x30d
 8014ac2:	492c      	ldr	r1, [pc, #176]	; (8014b74 <udp_sendto_if_src+0x1c8>)
 8014ac4:	4826      	ldr	r0, [pc, #152]	; (8014b60 <udp_sendto_if_src+0x1b4>)
 8014ac6:	f002 fd2f 	bl	8017528 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014aca:	69fb      	ldr	r3, [r7, #28]
 8014acc:	685b      	ldr	r3, [r3, #4]
 8014ace:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	8a5b      	ldrh	r3, [r3, #18]
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7f8 fb6f 	bl	800d1b8 <lwip_htons>
 8014ada:	4603      	mov	r3, r0
 8014adc:	461a      	mov	r2, r3
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014ae2:	887b      	ldrh	r3, [r7, #2]
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f7f8 fb67 	bl	800d1b8 <lwip_htons>
 8014aea:	4603      	mov	r3, r0
 8014aec:	461a      	mov	r2, r3
 8014aee:	697b      	ldr	r3, [r7, #20]
 8014af0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	2200      	movs	r2, #0
 8014af6:	719a      	strb	r2, [r3, #6]
 8014af8:	2200      	movs	r2, #0
 8014afa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014afc:	69fb      	ldr	r3, [r7, #28]
 8014afe:	891b      	ldrh	r3, [r3, #8]
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7f8 fb59 	bl	800d1b8 <lwip_htons>
 8014b06:	4603      	mov	r3, r0
 8014b08:	461a      	mov	r2, r3
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014b0e:	2311      	movs	r3, #17
 8014b10:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	7adb      	ldrb	r3, [r3, #11]
 8014b16:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	7a9b      	ldrb	r3, [r3, #10]
 8014b1c:	7cb9      	ldrb	r1, [r7, #18]
 8014b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b20:	9202      	str	r2, [sp, #8]
 8014b22:	7cfa      	ldrb	r2, [r7, #19]
 8014b24:	9201      	str	r2, [sp, #4]
 8014b26:	9300      	str	r3, [sp, #0]
 8014b28:	460b      	mov	r3, r1
 8014b2a:	687a      	ldr	r2, [r7, #4]
 8014b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014b2e:	69f8      	ldr	r0, [r7, #28]
 8014b30:	f001 fcac 	bl	801648c <ip4_output_if_src>
 8014b34:	4603      	mov	r3, r0
 8014b36:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014b38:	69fa      	ldr	r2, [r7, #28]
 8014b3a:	68bb      	ldr	r3, [r7, #8]
 8014b3c:	429a      	cmp	r2, r3
 8014b3e:	d004      	beq.n	8014b4a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014b40:	69f8      	ldr	r0, [r7, #28]
 8014b42:	f7f9 fe97 	bl	800e874 <pbuf_free>
    q = NULL;
 8014b46:	2300      	movs	r3, #0
 8014b48:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014b4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	3720      	adds	r7, #32
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}
 8014b56:	bf00      	nop
 8014b58:	0801a864 	.word	0x0801a864
 8014b5c:	0801aa50 	.word	0x0801aa50
 8014b60:	0801a8b8 	.word	0x0801a8b8
 8014b64:	0801aa70 	.word	0x0801aa70
 8014b68:	0801aa90 	.word	0x0801aa90
 8014b6c:	0801aab4 	.word	0x0801aab4
 8014b70:	0801aad8 	.word	0x0801aad8
 8014b74:	0801aafc 	.word	0x0801aafc

08014b78 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b086      	sub	sp, #24
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	60f8      	str	r0, [r7, #12]
 8014b80:	60b9      	str	r1, [r7, #8]
 8014b82:	4613      	mov	r3, r2
 8014b84:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d101      	bne.n	8014b90 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014b8c:	4b39      	ldr	r3, [pc, #228]	; (8014c74 <udp_bind+0xfc>)
 8014b8e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d109      	bne.n	8014baa <udp_bind+0x32>
 8014b96:	4b38      	ldr	r3, [pc, #224]	; (8014c78 <udp_bind+0x100>)
 8014b98:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014b9c:	4937      	ldr	r1, [pc, #220]	; (8014c7c <udp_bind+0x104>)
 8014b9e:	4838      	ldr	r0, [pc, #224]	; (8014c80 <udp_bind+0x108>)
 8014ba0:	f002 fcc2 	bl	8017528 <iprintf>
 8014ba4:	f06f 030f 	mvn.w	r3, #15
 8014ba8:	e060      	b.n	8014c6c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014baa:	2300      	movs	r3, #0
 8014bac:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014bae:	4b35      	ldr	r3, [pc, #212]	; (8014c84 <udp_bind+0x10c>)
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	617b      	str	r3, [r7, #20]
 8014bb4:	e009      	b.n	8014bca <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014bb6:	68fa      	ldr	r2, [r7, #12]
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	429a      	cmp	r2, r3
 8014bbc:	d102      	bne.n	8014bc4 <udp_bind+0x4c>
      rebind = 1;
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	74fb      	strb	r3, [r7, #19]
      break;
 8014bc2:	e005      	b.n	8014bd0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	617b      	str	r3, [r7, #20]
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d1f2      	bne.n	8014bb6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014bd0:	88fb      	ldrh	r3, [r7, #6]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d109      	bne.n	8014bea <udp_bind+0x72>
    port = udp_new_port();
 8014bd6:	f7ff fc35 	bl	8014444 <udp_new_port>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014bde:	88fb      	ldrh	r3, [r7, #6]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d12c      	bne.n	8014c3e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014be4:	f06f 0307 	mvn.w	r3, #7
 8014be8:	e040      	b.n	8014c6c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014bea:	4b26      	ldr	r3, [pc, #152]	; (8014c84 <udp_bind+0x10c>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	617b      	str	r3, [r7, #20]
 8014bf0:	e022      	b.n	8014c38 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014bf2:	68fa      	ldr	r2, [r7, #12]
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d01b      	beq.n	8014c32 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	8a5b      	ldrh	r3, [r3, #18]
 8014bfe:	88fa      	ldrh	r2, [r7, #6]
 8014c00:	429a      	cmp	r2, r3
 8014c02:	d116      	bne.n	8014c32 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	681a      	ldr	r2, [r3, #0]
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014c0c:	429a      	cmp	r2, r3
 8014c0e:	d00d      	beq.n	8014c2c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d00a      	beq.n	8014c2c <udp_bind+0xb4>
 8014c16:	68bb      	ldr	r3, [r7, #8]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d006      	beq.n	8014c2c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014c1e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d003      	beq.n	8014c2c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d102      	bne.n	8014c32 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014c2c:	f06f 0307 	mvn.w	r3, #7
 8014c30:	e01c      	b.n	8014c6c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014c32:	697b      	ldr	r3, [r7, #20]
 8014c34:	68db      	ldr	r3, [r3, #12]
 8014c36:	617b      	str	r3, [r7, #20]
 8014c38:	697b      	ldr	r3, [r7, #20]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d1d9      	bne.n	8014bf2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014c3e:	68bb      	ldr	r3, [r7, #8]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d002      	beq.n	8014c4a <udp_bind+0xd2>
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	e000      	b.n	8014c4c <udp_bind+0xd4>
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	68fa      	ldr	r2, [r7, #12]
 8014c4e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	88fa      	ldrh	r2, [r7, #6]
 8014c54:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014c56:	7cfb      	ldrb	r3, [r7, #19]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d106      	bne.n	8014c6a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014c5c:	4b09      	ldr	r3, [pc, #36]	; (8014c84 <udp_bind+0x10c>)
 8014c5e:	681a      	ldr	r2, [r3, #0]
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014c64:	4a07      	ldr	r2, [pc, #28]	; (8014c84 <udp_bind+0x10c>)
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014c6a:	2300      	movs	r3, #0
}
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	3718      	adds	r7, #24
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}
 8014c74:	0801b388 	.word	0x0801b388
 8014c78:	0801a864 	.word	0x0801a864
 8014c7c:	0801ab2c 	.word	0x0801ab2c
 8014c80:	0801a8b8 	.word	0x0801a8b8
 8014c84:	20009768 	.word	0x20009768

08014c88 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b086      	sub	sp, #24
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	60f8      	str	r0, [r7, #12]
 8014c90:	60b9      	str	r1, [r7, #8]
 8014c92:	4613      	mov	r3, r2
 8014c94:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d109      	bne.n	8014cb0 <udp_connect+0x28>
 8014c9c:	4b2c      	ldr	r3, [pc, #176]	; (8014d50 <udp_connect+0xc8>)
 8014c9e:	f240 4235 	movw	r2, #1077	; 0x435
 8014ca2:	492c      	ldr	r1, [pc, #176]	; (8014d54 <udp_connect+0xcc>)
 8014ca4:	482c      	ldr	r0, [pc, #176]	; (8014d58 <udp_connect+0xd0>)
 8014ca6:	f002 fc3f 	bl	8017528 <iprintf>
 8014caa:	f06f 030f 	mvn.w	r3, #15
 8014cae:	e04b      	b.n	8014d48 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d109      	bne.n	8014cca <udp_connect+0x42>
 8014cb6:	4b26      	ldr	r3, [pc, #152]	; (8014d50 <udp_connect+0xc8>)
 8014cb8:	f240 4236 	movw	r2, #1078	; 0x436
 8014cbc:	4927      	ldr	r1, [pc, #156]	; (8014d5c <udp_connect+0xd4>)
 8014cbe:	4826      	ldr	r0, [pc, #152]	; (8014d58 <udp_connect+0xd0>)
 8014cc0:	f002 fc32 	bl	8017528 <iprintf>
 8014cc4:	f06f 030f 	mvn.w	r3, #15
 8014cc8:	e03e      	b.n	8014d48 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	8a5b      	ldrh	r3, [r3, #18]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d10f      	bne.n	8014cf2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014cd2:	68f9      	ldr	r1, [r7, #12]
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	8a5b      	ldrh	r3, [r3, #18]
 8014cd8:	461a      	mov	r2, r3
 8014cda:	68f8      	ldr	r0, [r7, #12]
 8014cdc:	f7ff ff4c 	bl	8014b78 <udp_bind>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014ce4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d002      	beq.n	8014cf2 <udp_connect+0x6a>
      return err;
 8014cec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014cf0:	e02a      	b.n	8014d48 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d002      	beq.n	8014cfe <udp_connect+0x76>
 8014cf8:	68bb      	ldr	r3, [r7, #8]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	e000      	b.n	8014d00 <udp_connect+0x78>
 8014cfe:	2300      	movs	r3, #0
 8014d00:	68fa      	ldr	r2, [r7, #12]
 8014d02:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	88fa      	ldrh	r2, [r7, #6]
 8014d08:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	7c1b      	ldrb	r3, [r3, #16]
 8014d0e:	f043 0304 	orr.w	r3, r3, #4
 8014d12:	b2da      	uxtb	r2, r3
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014d18:	4b11      	ldr	r3, [pc, #68]	; (8014d60 <udp_connect+0xd8>)
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	617b      	str	r3, [r7, #20]
 8014d1e:	e008      	b.n	8014d32 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014d20:	68fa      	ldr	r2, [r7, #12]
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d101      	bne.n	8014d2c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	e00d      	b.n	8014d48 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	68db      	ldr	r3, [r3, #12]
 8014d30:	617b      	str	r3, [r7, #20]
 8014d32:	697b      	ldr	r3, [r7, #20]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d1f3      	bne.n	8014d20 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014d38:	4b09      	ldr	r3, [pc, #36]	; (8014d60 <udp_connect+0xd8>)
 8014d3a:	681a      	ldr	r2, [r3, #0]
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014d40:	4a07      	ldr	r2, [pc, #28]	; (8014d60 <udp_connect+0xd8>)
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014d46:	2300      	movs	r3, #0
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3718      	adds	r7, #24
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}
 8014d50:	0801a864 	.word	0x0801a864
 8014d54:	0801ab44 	.word	0x0801ab44
 8014d58:	0801a8b8 	.word	0x0801a8b8
 8014d5c:	0801ab60 	.word	0x0801ab60
 8014d60:	20009768 	.word	0x20009768

08014d64 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b082      	sub	sp, #8
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d107      	bne.n	8014d82 <udp_disconnect+0x1e>
 8014d72:	4b0d      	ldr	r3, [pc, #52]	; (8014da8 <udp_disconnect+0x44>)
 8014d74:	f240 426a 	movw	r2, #1130	; 0x46a
 8014d78:	490c      	ldr	r1, [pc, #48]	; (8014dac <udp_disconnect+0x48>)
 8014d7a:	480d      	ldr	r0, [pc, #52]	; (8014db0 <udp_disconnect+0x4c>)
 8014d7c:	f002 fbd4 	bl	8017528 <iprintf>
 8014d80:	e00f      	b.n	8014da2 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2200      	movs	r2, #0
 8014d86:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	2200      	movs	r2, #0
 8014d92:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	7c1b      	ldrb	r3, [r3, #16]
 8014d98:	f023 0304 	bic.w	r3, r3, #4
 8014d9c:	b2da      	uxtb	r2, r3
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	741a      	strb	r2, [r3, #16]
}
 8014da2:	3708      	adds	r7, #8
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}
 8014da8:	0801a864 	.word	0x0801a864
 8014dac:	0801ab7c 	.word	0x0801ab7c
 8014db0:	0801a8b8 	.word	0x0801a8b8

08014db4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b084      	sub	sp, #16
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	60f8      	str	r0, [r7, #12]
 8014dbc:	60b9      	str	r1, [r7, #8]
 8014dbe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d107      	bne.n	8014dd6 <udp_recv+0x22>
 8014dc6:	4b08      	ldr	r3, [pc, #32]	; (8014de8 <udp_recv+0x34>)
 8014dc8:	f240 428a 	movw	r2, #1162	; 0x48a
 8014dcc:	4907      	ldr	r1, [pc, #28]	; (8014dec <udp_recv+0x38>)
 8014dce:	4808      	ldr	r0, [pc, #32]	; (8014df0 <udp_recv+0x3c>)
 8014dd0:	f002 fbaa 	bl	8017528 <iprintf>
 8014dd4:	e005      	b.n	8014de2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	68ba      	ldr	r2, [r7, #8]
 8014dda:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	687a      	ldr	r2, [r7, #4]
 8014de0:	61da      	str	r2, [r3, #28]
}
 8014de2:	3710      	adds	r7, #16
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}
 8014de8:	0801a864 	.word	0x0801a864
 8014dec:	0801ab98 	.word	0x0801ab98
 8014df0:	0801a8b8 	.word	0x0801a8b8

08014df4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d107      	bne.n	8014e12 <udp_remove+0x1e>
 8014e02:	4b19      	ldr	r3, [pc, #100]	; (8014e68 <udp_remove+0x74>)
 8014e04:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014e08:	4918      	ldr	r1, [pc, #96]	; (8014e6c <udp_remove+0x78>)
 8014e0a:	4819      	ldr	r0, [pc, #100]	; (8014e70 <udp_remove+0x7c>)
 8014e0c:	f002 fb8c 	bl	8017528 <iprintf>
 8014e10:	e026      	b.n	8014e60 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014e12:	4b18      	ldr	r3, [pc, #96]	; (8014e74 <udp_remove+0x80>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	687a      	ldr	r2, [r7, #4]
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d105      	bne.n	8014e28 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014e1c:	4b15      	ldr	r3, [pc, #84]	; (8014e74 <udp_remove+0x80>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	68db      	ldr	r3, [r3, #12]
 8014e22:	4a14      	ldr	r2, [pc, #80]	; (8014e74 <udp_remove+0x80>)
 8014e24:	6013      	str	r3, [r2, #0]
 8014e26:	e017      	b.n	8014e58 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014e28:	4b12      	ldr	r3, [pc, #72]	; (8014e74 <udp_remove+0x80>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	60fb      	str	r3, [r7, #12]
 8014e2e:	e010      	b.n	8014e52 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	68db      	ldr	r3, [r3, #12]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d009      	beq.n	8014e4c <udp_remove+0x58>
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	68db      	ldr	r3, [r3, #12]
 8014e3c:	687a      	ldr	r2, [r7, #4]
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d104      	bne.n	8014e4c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	68da      	ldr	r2, [r3, #12]
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	60da      	str	r2, [r3, #12]
        break;
 8014e4a:	e005      	b.n	8014e58 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	68db      	ldr	r3, [r3, #12]
 8014e50:	60fb      	str	r3, [r7, #12]
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d1eb      	bne.n	8014e30 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014e58:	6879      	ldr	r1, [r7, #4]
 8014e5a:	2000      	movs	r0, #0
 8014e5c:	f7f8 fe94 	bl	800db88 <memp_free>
}
 8014e60:	3710      	adds	r7, #16
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}
 8014e66:	bf00      	nop
 8014e68:	0801a864 	.word	0x0801a864
 8014e6c:	0801abb0 	.word	0x0801abb0
 8014e70:	0801a8b8 	.word	0x0801a8b8
 8014e74:	20009768 	.word	0x20009768

08014e78 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014e7e:	2000      	movs	r0, #0
 8014e80:	f7f8 fe12 	bl	800daa8 <memp_malloc>
 8014e84:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d007      	beq.n	8014e9c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014e8c:	2220      	movs	r2, #32
 8014e8e:	2100      	movs	r1, #0
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f002 fb41 	bl	8017518 <memset>
    pcb->ttl = UDP_TTL;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	22ff      	movs	r2, #255	; 0xff
 8014e9a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014e9c:	687b      	ldr	r3, [r7, #4]
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3708      	adds	r7, #8
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}
	...

08014ea8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014ea8:	b480      	push	{r7}
 8014eaa:	b085      	sub	sp, #20
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d01e      	beq.n	8014ef6 <udp_netif_ip_addr_changed+0x4e>
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d01a      	beq.n	8014ef6 <udp_netif_ip_addr_changed+0x4e>
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d017      	beq.n	8014ef6 <udp_netif_ip_addr_changed+0x4e>
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d013      	beq.n	8014ef6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014ece:	4b0d      	ldr	r3, [pc, #52]	; (8014f04 <udp_netif_ip_addr_changed+0x5c>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	60fb      	str	r3, [r7, #12]
 8014ed4:	e00c      	b.n	8014ef0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	681a      	ldr	r2, [r3, #0]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d103      	bne.n	8014eea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	681a      	ldr	r2, [r3, #0]
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	68db      	ldr	r3, [r3, #12]
 8014eee:	60fb      	str	r3, [r7, #12]
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d1ef      	bne.n	8014ed6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014ef6:	bf00      	nop
 8014ef8:	3714      	adds	r7, #20
 8014efa:	46bd      	mov	sp, r7
 8014efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f00:	4770      	bx	lr
 8014f02:	bf00      	nop
 8014f04:	20009768 	.word	0x20009768

08014f08 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014f10:	4915      	ldr	r1, [pc, #84]	; (8014f68 <etharp_free_entry+0x60>)
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	4613      	mov	r3, r2
 8014f16:	005b      	lsls	r3, r3, #1
 8014f18:	4413      	add	r3, r2
 8014f1a:	00db      	lsls	r3, r3, #3
 8014f1c:	440b      	add	r3, r1
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d013      	beq.n	8014f4c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014f24:	4910      	ldr	r1, [pc, #64]	; (8014f68 <etharp_free_entry+0x60>)
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	4613      	mov	r3, r2
 8014f2a:	005b      	lsls	r3, r3, #1
 8014f2c:	4413      	add	r3, r2
 8014f2e:	00db      	lsls	r3, r3, #3
 8014f30:	440b      	add	r3, r1
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	4618      	mov	r0, r3
 8014f36:	f7f9 fc9d 	bl	800e874 <pbuf_free>
    arp_table[i].q = NULL;
 8014f3a:	490b      	ldr	r1, [pc, #44]	; (8014f68 <etharp_free_entry+0x60>)
 8014f3c:	687a      	ldr	r2, [r7, #4]
 8014f3e:	4613      	mov	r3, r2
 8014f40:	005b      	lsls	r3, r3, #1
 8014f42:	4413      	add	r3, r2
 8014f44:	00db      	lsls	r3, r3, #3
 8014f46:	440b      	add	r3, r1
 8014f48:	2200      	movs	r2, #0
 8014f4a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014f4c:	4906      	ldr	r1, [pc, #24]	; (8014f68 <etharp_free_entry+0x60>)
 8014f4e:	687a      	ldr	r2, [r7, #4]
 8014f50:	4613      	mov	r3, r2
 8014f52:	005b      	lsls	r3, r3, #1
 8014f54:	4413      	add	r3, r2
 8014f56:	00db      	lsls	r3, r3, #3
 8014f58:	440b      	add	r3, r1
 8014f5a:	3314      	adds	r3, #20
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014f60:	bf00      	nop
 8014f62:	3708      	adds	r7, #8
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}
 8014f68:	2000976c 	.word	0x2000976c

08014f6c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b082      	sub	sp, #8
 8014f70:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f72:	2300      	movs	r3, #0
 8014f74:	607b      	str	r3, [r7, #4]
 8014f76:	e096      	b.n	80150a6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014f78:	494f      	ldr	r1, [pc, #316]	; (80150b8 <etharp_tmr+0x14c>)
 8014f7a:	687a      	ldr	r2, [r7, #4]
 8014f7c:	4613      	mov	r3, r2
 8014f7e:	005b      	lsls	r3, r3, #1
 8014f80:	4413      	add	r3, r2
 8014f82:	00db      	lsls	r3, r3, #3
 8014f84:	440b      	add	r3, r1
 8014f86:	3314      	adds	r3, #20
 8014f88:	781b      	ldrb	r3, [r3, #0]
 8014f8a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014f8c:	78fb      	ldrb	r3, [r7, #3]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	f000 8086 	beq.w	80150a0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014f94:	4948      	ldr	r1, [pc, #288]	; (80150b8 <etharp_tmr+0x14c>)
 8014f96:	687a      	ldr	r2, [r7, #4]
 8014f98:	4613      	mov	r3, r2
 8014f9a:	005b      	lsls	r3, r3, #1
 8014f9c:	4413      	add	r3, r2
 8014f9e:	00db      	lsls	r3, r3, #3
 8014fa0:	440b      	add	r3, r1
 8014fa2:	3312      	adds	r3, #18
 8014fa4:	881b      	ldrh	r3, [r3, #0]
 8014fa6:	3301      	adds	r3, #1
 8014fa8:	b298      	uxth	r0, r3
 8014faa:	4943      	ldr	r1, [pc, #268]	; (80150b8 <etharp_tmr+0x14c>)
 8014fac:	687a      	ldr	r2, [r7, #4]
 8014fae:	4613      	mov	r3, r2
 8014fb0:	005b      	lsls	r3, r3, #1
 8014fb2:	4413      	add	r3, r2
 8014fb4:	00db      	lsls	r3, r3, #3
 8014fb6:	440b      	add	r3, r1
 8014fb8:	3312      	adds	r3, #18
 8014fba:	4602      	mov	r2, r0
 8014fbc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014fbe:	493e      	ldr	r1, [pc, #248]	; (80150b8 <etharp_tmr+0x14c>)
 8014fc0:	687a      	ldr	r2, [r7, #4]
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	005b      	lsls	r3, r3, #1
 8014fc6:	4413      	add	r3, r2
 8014fc8:	00db      	lsls	r3, r3, #3
 8014fca:	440b      	add	r3, r1
 8014fcc:	3312      	adds	r3, #18
 8014fce:	881b      	ldrh	r3, [r3, #0]
 8014fd0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014fd4:	d215      	bcs.n	8015002 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014fd6:	4938      	ldr	r1, [pc, #224]	; (80150b8 <etharp_tmr+0x14c>)
 8014fd8:	687a      	ldr	r2, [r7, #4]
 8014fda:	4613      	mov	r3, r2
 8014fdc:	005b      	lsls	r3, r3, #1
 8014fde:	4413      	add	r3, r2
 8014fe0:	00db      	lsls	r3, r3, #3
 8014fe2:	440b      	add	r3, r1
 8014fe4:	3314      	adds	r3, #20
 8014fe6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014fe8:	2b01      	cmp	r3, #1
 8014fea:	d10e      	bne.n	801500a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014fec:	4932      	ldr	r1, [pc, #200]	; (80150b8 <etharp_tmr+0x14c>)
 8014fee:	687a      	ldr	r2, [r7, #4]
 8014ff0:	4613      	mov	r3, r2
 8014ff2:	005b      	lsls	r3, r3, #1
 8014ff4:	4413      	add	r3, r2
 8014ff6:	00db      	lsls	r3, r3, #3
 8014ff8:	440b      	add	r3, r1
 8014ffa:	3312      	adds	r3, #18
 8014ffc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014ffe:	2b04      	cmp	r3, #4
 8015000:	d903      	bls.n	801500a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015002:	6878      	ldr	r0, [r7, #4]
 8015004:	f7ff ff80 	bl	8014f08 <etharp_free_entry>
 8015008:	e04a      	b.n	80150a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801500a:	492b      	ldr	r1, [pc, #172]	; (80150b8 <etharp_tmr+0x14c>)
 801500c:	687a      	ldr	r2, [r7, #4]
 801500e:	4613      	mov	r3, r2
 8015010:	005b      	lsls	r3, r3, #1
 8015012:	4413      	add	r3, r2
 8015014:	00db      	lsls	r3, r3, #3
 8015016:	440b      	add	r3, r1
 8015018:	3314      	adds	r3, #20
 801501a:	781b      	ldrb	r3, [r3, #0]
 801501c:	2b03      	cmp	r3, #3
 801501e:	d10a      	bne.n	8015036 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015020:	4925      	ldr	r1, [pc, #148]	; (80150b8 <etharp_tmr+0x14c>)
 8015022:	687a      	ldr	r2, [r7, #4]
 8015024:	4613      	mov	r3, r2
 8015026:	005b      	lsls	r3, r3, #1
 8015028:	4413      	add	r3, r2
 801502a:	00db      	lsls	r3, r3, #3
 801502c:	440b      	add	r3, r1
 801502e:	3314      	adds	r3, #20
 8015030:	2204      	movs	r2, #4
 8015032:	701a      	strb	r2, [r3, #0]
 8015034:	e034      	b.n	80150a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015036:	4920      	ldr	r1, [pc, #128]	; (80150b8 <etharp_tmr+0x14c>)
 8015038:	687a      	ldr	r2, [r7, #4]
 801503a:	4613      	mov	r3, r2
 801503c:	005b      	lsls	r3, r3, #1
 801503e:	4413      	add	r3, r2
 8015040:	00db      	lsls	r3, r3, #3
 8015042:	440b      	add	r3, r1
 8015044:	3314      	adds	r3, #20
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	2b04      	cmp	r3, #4
 801504a:	d10a      	bne.n	8015062 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801504c:	491a      	ldr	r1, [pc, #104]	; (80150b8 <etharp_tmr+0x14c>)
 801504e:	687a      	ldr	r2, [r7, #4]
 8015050:	4613      	mov	r3, r2
 8015052:	005b      	lsls	r3, r3, #1
 8015054:	4413      	add	r3, r2
 8015056:	00db      	lsls	r3, r3, #3
 8015058:	440b      	add	r3, r1
 801505a:	3314      	adds	r3, #20
 801505c:	2202      	movs	r2, #2
 801505e:	701a      	strb	r2, [r3, #0]
 8015060:	e01e      	b.n	80150a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015062:	4915      	ldr	r1, [pc, #84]	; (80150b8 <etharp_tmr+0x14c>)
 8015064:	687a      	ldr	r2, [r7, #4]
 8015066:	4613      	mov	r3, r2
 8015068:	005b      	lsls	r3, r3, #1
 801506a:	4413      	add	r3, r2
 801506c:	00db      	lsls	r3, r3, #3
 801506e:	440b      	add	r3, r1
 8015070:	3314      	adds	r3, #20
 8015072:	781b      	ldrb	r3, [r3, #0]
 8015074:	2b01      	cmp	r3, #1
 8015076:	d113      	bne.n	80150a0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015078:	490f      	ldr	r1, [pc, #60]	; (80150b8 <etharp_tmr+0x14c>)
 801507a:	687a      	ldr	r2, [r7, #4]
 801507c:	4613      	mov	r3, r2
 801507e:	005b      	lsls	r3, r3, #1
 8015080:	4413      	add	r3, r2
 8015082:	00db      	lsls	r3, r3, #3
 8015084:	440b      	add	r3, r1
 8015086:	3308      	adds	r3, #8
 8015088:	6818      	ldr	r0, [r3, #0]
 801508a:	687a      	ldr	r2, [r7, #4]
 801508c:	4613      	mov	r3, r2
 801508e:	005b      	lsls	r3, r3, #1
 8015090:	4413      	add	r3, r2
 8015092:	00db      	lsls	r3, r3, #3
 8015094:	4a08      	ldr	r2, [pc, #32]	; (80150b8 <etharp_tmr+0x14c>)
 8015096:	4413      	add	r3, r2
 8015098:	3304      	adds	r3, #4
 801509a:	4619      	mov	r1, r3
 801509c:	f000 fe6e 	bl	8015d7c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	3301      	adds	r3, #1
 80150a4:	607b      	str	r3, [r7, #4]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2b09      	cmp	r3, #9
 80150aa:	f77f af65 	ble.w	8014f78 <etharp_tmr+0xc>
      }
    }
  }
}
 80150ae:	bf00      	nop
 80150b0:	bf00      	nop
 80150b2:	3708      	adds	r7, #8
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	2000976c 	.word	0x2000976c

080150bc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b08a      	sub	sp, #40	; 0x28
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	60f8      	str	r0, [r7, #12]
 80150c4:	460b      	mov	r3, r1
 80150c6:	607a      	str	r2, [r7, #4]
 80150c8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80150ca:	230a      	movs	r3, #10
 80150cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80150ce:	230a      	movs	r3, #10
 80150d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80150d2:	230a      	movs	r3, #10
 80150d4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80150d6:	2300      	movs	r3, #0
 80150d8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80150da:	230a      	movs	r3, #10
 80150dc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80150de:	2300      	movs	r3, #0
 80150e0:	83bb      	strh	r3, [r7, #28]
 80150e2:	2300      	movs	r3, #0
 80150e4:	837b      	strh	r3, [r7, #26]
 80150e6:	2300      	movs	r3, #0
 80150e8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80150ea:	2300      	movs	r3, #0
 80150ec:	843b      	strh	r3, [r7, #32]
 80150ee:	e0ae      	b.n	801524e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80150f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150f4:	49a6      	ldr	r1, [pc, #664]	; (8015390 <etharp_find_entry+0x2d4>)
 80150f6:	4613      	mov	r3, r2
 80150f8:	005b      	lsls	r3, r3, #1
 80150fa:	4413      	add	r3, r2
 80150fc:	00db      	lsls	r3, r3, #3
 80150fe:	440b      	add	r3, r1
 8015100:	3314      	adds	r3, #20
 8015102:	781b      	ldrb	r3, [r3, #0]
 8015104:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015106:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801510a:	2b0a      	cmp	r3, #10
 801510c:	d105      	bne.n	801511a <etharp_find_entry+0x5e>
 801510e:	7dfb      	ldrb	r3, [r7, #23]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d102      	bne.n	801511a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015114:	8c3b      	ldrh	r3, [r7, #32]
 8015116:	847b      	strh	r3, [r7, #34]	; 0x22
 8015118:	e095      	b.n	8015246 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801511a:	7dfb      	ldrb	r3, [r7, #23]
 801511c:	2b00      	cmp	r3, #0
 801511e:	f000 8092 	beq.w	8015246 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015122:	7dfb      	ldrb	r3, [r7, #23]
 8015124:	2b01      	cmp	r3, #1
 8015126:	d009      	beq.n	801513c <etharp_find_entry+0x80>
 8015128:	7dfb      	ldrb	r3, [r7, #23]
 801512a:	2b01      	cmp	r3, #1
 801512c:	d806      	bhi.n	801513c <etharp_find_entry+0x80>
 801512e:	4b99      	ldr	r3, [pc, #612]	; (8015394 <etharp_find_entry+0x2d8>)
 8015130:	f240 1223 	movw	r2, #291	; 0x123
 8015134:	4998      	ldr	r1, [pc, #608]	; (8015398 <etharp_find_entry+0x2dc>)
 8015136:	4899      	ldr	r0, [pc, #612]	; (801539c <etharp_find_entry+0x2e0>)
 8015138:	f002 f9f6 	bl	8017528 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d020      	beq.n	8015184 <etharp_find_entry+0xc8>
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	6819      	ldr	r1, [r3, #0]
 8015146:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801514a:	4891      	ldr	r0, [pc, #580]	; (8015390 <etharp_find_entry+0x2d4>)
 801514c:	4613      	mov	r3, r2
 801514e:	005b      	lsls	r3, r3, #1
 8015150:	4413      	add	r3, r2
 8015152:	00db      	lsls	r3, r3, #3
 8015154:	4403      	add	r3, r0
 8015156:	3304      	adds	r3, #4
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	4299      	cmp	r1, r3
 801515c:	d112      	bne.n	8015184 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d00c      	beq.n	801517e <etharp_find_entry+0xc2>
 8015164:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015168:	4989      	ldr	r1, [pc, #548]	; (8015390 <etharp_find_entry+0x2d4>)
 801516a:	4613      	mov	r3, r2
 801516c:	005b      	lsls	r3, r3, #1
 801516e:	4413      	add	r3, r2
 8015170:	00db      	lsls	r3, r3, #3
 8015172:	440b      	add	r3, r1
 8015174:	3308      	adds	r3, #8
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	687a      	ldr	r2, [r7, #4]
 801517a:	429a      	cmp	r2, r3
 801517c:	d102      	bne.n	8015184 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801517e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015182:	e100      	b.n	8015386 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015184:	7dfb      	ldrb	r3, [r7, #23]
 8015186:	2b01      	cmp	r3, #1
 8015188:	d140      	bne.n	801520c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801518a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801518e:	4980      	ldr	r1, [pc, #512]	; (8015390 <etharp_find_entry+0x2d4>)
 8015190:	4613      	mov	r3, r2
 8015192:	005b      	lsls	r3, r3, #1
 8015194:	4413      	add	r3, r2
 8015196:	00db      	lsls	r3, r3, #3
 8015198:	440b      	add	r3, r1
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d01a      	beq.n	80151d6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80151a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151a4:	497a      	ldr	r1, [pc, #488]	; (8015390 <etharp_find_entry+0x2d4>)
 80151a6:	4613      	mov	r3, r2
 80151a8:	005b      	lsls	r3, r3, #1
 80151aa:	4413      	add	r3, r2
 80151ac:	00db      	lsls	r3, r3, #3
 80151ae:	440b      	add	r3, r1
 80151b0:	3312      	adds	r3, #18
 80151b2:	881b      	ldrh	r3, [r3, #0]
 80151b4:	8bba      	ldrh	r2, [r7, #28]
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d845      	bhi.n	8015246 <etharp_find_entry+0x18a>
            old_queue = i;
 80151ba:	8c3b      	ldrh	r3, [r7, #32]
 80151bc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80151be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151c2:	4973      	ldr	r1, [pc, #460]	; (8015390 <etharp_find_entry+0x2d4>)
 80151c4:	4613      	mov	r3, r2
 80151c6:	005b      	lsls	r3, r3, #1
 80151c8:	4413      	add	r3, r2
 80151ca:	00db      	lsls	r3, r3, #3
 80151cc:	440b      	add	r3, r1
 80151ce:	3312      	adds	r3, #18
 80151d0:	881b      	ldrh	r3, [r3, #0]
 80151d2:	83bb      	strh	r3, [r7, #28]
 80151d4:	e037      	b.n	8015246 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80151d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151da:	496d      	ldr	r1, [pc, #436]	; (8015390 <etharp_find_entry+0x2d4>)
 80151dc:	4613      	mov	r3, r2
 80151de:	005b      	lsls	r3, r3, #1
 80151e0:	4413      	add	r3, r2
 80151e2:	00db      	lsls	r3, r3, #3
 80151e4:	440b      	add	r3, r1
 80151e6:	3312      	adds	r3, #18
 80151e8:	881b      	ldrh	r3, [r3, #0]
 80151ea:	8b7a      	ldrh	r2, [r7, #26]
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d82a      	bhi.n	8015246 <etharp_find_entry+0x18a>
            old_pending = i;
 80151f0:	8c3b      	ldrh	r3, [r7, #32]
 80151f2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80151f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151f8:	4965      	ldr	r1, [pc, #404]	; (8015390 <etharp_find_entry+0x2d4>)
 80151fa:	4613      	mov	r3, r2
 80151fc:	005b      	lsls	r3, r3, #1
 80151fe:	4413      	add	r3, r2
 8015200:	00db      	lsls	r3, r3, #3
 8015202:	440b      	add	r3, r1
 8015204:	3312      	adds	r3, #18
 8015206:	881b      	ldrh	r3, [r3, #0]
 8015208:	837b      	strh	r3, [r7, #26]
 801520a:	e01c      	b.n	8015246 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801520c:	7dfb      	ldrb	r3, [r7, #23]
 801520e:	2b01      	cmp	r3, #1
 8015210:	d919      	bls.n	8015246 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015212:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015216:	495e      	ldr	r1, [pc, #376]	; (8015390 <etharp_find_entry+0x2d4>)
 8015218:	4613      	mov	r3, r2
 801521a:	005b      	lsls	r3, r3, #1
 801521c:	4413      	add	r3, r2
 801521e:	00db      	lsls	r3, r3, #3
 8015220:	440b      	add	r3, r1
 8015222:	3312      	adds	r3, #18
 8015224:	881b      	ldrh	r3, [r3, #0]
 8015226:	8b3a      	ldrh	r2, [r7, #24]
 8015228:	429a      	cmp	r2, r3
 801522a:	d80c      	bhi.n	8015246 <etharp_find_entry+0x18a>
            old_stable = i;
 801522c:	8c3b      	ldrh	r3, [r7, #32]
 801522e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015230:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015234:	4956      	ldr	r1, [pc, #344]	; (8015390 <etharp_find_entry+0x2d4>)
 8015236:	4613      	mov	r3, r2
 8015238:	005b      	lsls	r3, r3, #1
 801523a:	4413      	add	r3, r2
 801523c:	00db      	lsls	r3, r3, #3
 801523e:	440b      	add	r3, r1
 8015240:	3312      	adds	r3, #18
 8015242:	881b      	ldrh	r3, [r3, #0]
 8015244:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015246:	8c3b      	ldrh	r3, [r7, #32]
 8015248:	3301      	adds	r3, #1
 801524a:	b29b      	uxth	r3, r3
 801524c:	843b      	strh	r3, [r7, #32]
 801524e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015252:	2b09      	cmp	r3, #9
 8015254:	f77f af4c 	ble.w	80150f0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015258:	7afb      	ldrb	r3, [r7, #11]
 801525a:	f003 0302 	and.w	r3, r3, #2
 801525e:	2b00      	cmp	r3, #0
 8015260:	d108      	bne.n	8015274 <etharp_find_entry+0x1b8>
 8015262:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015266:	2b0a      	cmp	r3, #10
 8015268:	d107      	bne.n	801527a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801526a:	7afb      	ldrb	r3, [r7, #11]
 801526c:	f003 0301 	and.w	r3, r3, #1
 8015270:	2b00      	cmp	r3, #0
 8015272:	d102      	bne.n	801527a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015278:	e085      	b.n	8015386 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801527a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801527e:	2b09      	cmp	r3, #9
 8015280:	dc02      	bgt.n	8015288 <etharp_find_entry+0x1cc>
    i = empty;
 8015282:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015284:	843b      	strh	r3, [r7, #32]
 8015286:	e039      	b.n	80152fc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015288:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801528c:	2b09      	cmp	r3, #9
 801528e:	dc14      	bgt.n	80152ba <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015292:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015294:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015298:	493d      	ldr	r1, [pc, #244]	; (8015390 <etharp_find_entry+0x2d4>)
 801529a:	4613      	mov	r3, r2
 801529c:	005b      	lsls	r3, r3, #1
 801529e:	4413      	add	r3, r2
 80152a0:	00db      	lsls	r3, r3, #3
 80152a2:	440b      	add	r3, r1
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d018      	beq.n	80152dc <etharp_find_entry+0x220>
 80152aa:	4b3a      	ldr	r3, [pc, #232]	; (8015394 <etharp_find_entry+0x2d8>)
 80152ac:	f240 126d 	movw	r2, #365	; 0x16d
 80152b0:	493b      	ldr	r1, [pc, #236]	; (80153a0 <etharp_find_entry+0x2e4>)
 80152b2:	483a      	ldr	r0, [pc, #232]	; (801539c <etharp_find_entry+0x2e0>)
 80152b4:	f002 f938 	bl	8017528 <iprintf>
 80152b8:	e010      	b.n	80152dc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80152ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80152be:	2b09      	cmp	r3, #9
 80152c0:	dc02      	bgt.n	80152c8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80152c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80152c4:	843b      	strh	r3, [r7, #32]
 80152c6:	e009      	b.n	80152dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80152c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80152cc:	2b09      	cmp	r3, #9
 80152ce:	dc02      	bgt.n	80152d6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80152d0:	8bfb      	ldrh	r3, [r7, #30]
 80152d2:	843b      	strh	r3, [r7, #32]
 80152d4:	e002      	b.n	80152dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80152d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152da:	e054      	b.n	8015386 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80152dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80152e0:	2b09      	cmp	r3, #9
 80152e2:	dd06      	ble.n	80152f2 <etharp_find_entry+0x236>
 80152e4:	4b2b      	ldr	r3, [pc, #172]	; (8015394 <etharp_find_entry+0x2d8>)
 80152e6:	f240 127f 	movw	r2, #383	; 0x17f
 80152ea:	492e      	ldr	r1, [pc, #184]	; (80153a4 <etharp_find_entry+0x2e8>)
 80152ec:	482b      	ldr	r0, [pc, #172]	; (801539c <etharp_find_entry+0x2e0>)
 80152ee:	f002 f91b 	bl	8017528 <iprintf>
    etharp_free_entry(i);
 80152f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7ff fe06 	bl	8014f08 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80152fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015300:	2b09      	cmp	r3, #9
 8015302:	dd06      	ble.n	8015312 <etharp_find_entry+0x256>
 8015304:	4b23      	ldr	r3, [pc, #140]	; (8015394 <etharp_find_entry+0x2d8>)
 8015306:	f240 1283 	movw	r2, #387	; 0x183
 801530a:	4926      	ldr	r1, [pc, #152]	; (80153a4 <etharp_find_entry+0x2e8>)
 801530c:	4823      	ldr	r0, [pc, #140]	; (801539c <etharp_find_entry+0x2e0>)
 801530e:	f002 f90b 	bl	8017528 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015312:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015316:	491e      	ldr	r1, [pc, #120]	; (8015390 <etharp_find_entry+0x2d4>)
 8015318:	4613      	mov	r3, r2
 801531a:	005b      	lsls	r3, r3, #1
 801531c:	4413      	add	r3, r2
 801531e:	00db      	lsls	r3, r3, #3
 8015320:	440b      	add	r3, r1
 8015322:	3314      	adds	r3, #20
 8015324:	781b      	ldrb	r3, [r3, #0]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d006      	beq.n	8015338 <etharp_find_entry+0x27c>
 801532a:	4b1a      	ldr	r3, [pc, #104]	; (8015394 <etharp_find_entry+0x2d8>)
 801532c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015330:	491d      	ldr	r1, [pc, #116]	; (80153a8 <etharp_find_entry+0x2ec>)
 8015332:	481a      	ldr	r0, [pc, #104]	; (801539c <etharp_find_entry+0x2e0>)
 8015334:	f002 f8f8 	bl	8017528 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d00b      	beq.n	8015356 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801533e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	6819      	ldr	r1, [r3, #0]
 8015346:	4812      	ldr	r0, [pc, #72]	; (8015390 <etharp_find_entry+0x2d4>)
 8015348:	4613      	mov	r3, r2
 801534a:	005b      	lsls	r3, r3, #1
 801534c:	4413      	add	r3, r2
 801534e:	00db      	lsls	r3, r3, #3
 8015350:	4403      	add	r3, r0
 8015352:	3304      	adds	r3, #4
 8015354:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015356:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801535a:	490d      	ldr	r1, [pc, #52]	; (8015390 <etharp_find_entry+0x2d4>)
 801535c:	4613      	mov	r3, r2
 801535e:	005b      	lsls	r3, r3, #1
 8015360:	4413      	add	r3, r2
 8015362:	00db      	lsls	r3, r3, #3
 8015364:	440b      	add	r3, r1
 8015366:	3312      	adds	r3, #18
 8015368:	2200      	movs	r2, #0
 801536a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801536c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015370:	4907      	ldr	r1, [pc, #28]	; (8015390 <etharp_find_entry+0x2d4>)
 8015372:	4613      	mov	r3, r2
 8015374:	005b      	lsls	r3, r3, #1
 8015376:	4413      	add	r3, r2
 8015378:	00db      	lsls	r3, r3, #3
 801537a:	440b      	add	r3, r1
 801537c:	3308      	adds	r3, #8
 801537e:	687a      	ldr	r2, [r7, #4]
 8015380:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015382:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015386:	4618      	mov	r0, r3
 8015388:	3728      	adds	r7, #40	; 0x28
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}
 801538e:	bf00      	nop
 8015390:	2000976c 	.word	0x2000976c
 8015394:	0801abc8 	.word	0x0801abc8
 8015398:	0801ac00 	.word	0x0801ac00
 801539c:	0801ac40 	.word	0x0801ac40
 80153a0:	0801ac68 	.word	0x0801ac68
 80153a4:	0801ac80 	.word	0x0801ac80
 80153a8:	0801ac94 	.word	0x0801ac94

080153ac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b088      	sub	sp, #32
 80153b0:	af02      	add	r7, sp, #8
 80153b2:	60f8      	str	r0, [r7, #12]
 80153b4:	60b9      	str	r1, [r7, #8]
 80153b6:	607a      	str	r2, [r7, #4]
 80153b8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80153c0:	2b06      	cmp	r3, #6
 80153c2:	d006      	beq.n	80153d2 <etharp_update_arp_entry+0x26>
 80153c4:	4b48      	ldr	r3, [pc, #288]	; (80154e8 <etharp_update_arp_entry+0x13c>)
 80153c6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80153ca:	4948      	ldr	r1, [pc, #288]	; (80154ec <etharp_update_arp_entry+0x140>)
 80153cc:	4848      	ldr	r0, [pc, #288]	; (80154f0 <etharp_update_arp_entry+0x144>)
 80153ce:	f002 f8ab 	bl	8017528 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80153d2:	68bb      	ldr	r3, [r7, #8]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d012      	beq.n	80153fe <etharp_update_arp_entry+0x52>
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d00e      	beq.n	80153fe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	68f9      	ldr	r1, [r7, #12]
 80153e6:	4618      	mov	r0, r3
 80153e8:	f001 f8fe 	bl	80165e8 <ip4_addr_isbroadcast_u32>
 80153ec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d105      	bne.n	80153fe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80153f2:	68bb      	ldr	r3, [r7, #8]
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80153fa:	2be0      	cmp	r3, #224	; 0xe0
 80153fc:	d102      	bne.n	8015404 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80153fe:	f06f 030f 	mvn.w	r3, #15
 8015402:	e06c      	b.n	80154de <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015404:	78fb      	ldrb	r3, [r7, #3]
 8015406:	68fa      	ldr	r2, [r7, #12]
 8015408:	4619      	mov	r1, r3
 801540a:	68b8      	ldr	r0, [r7, #8]
 801540c:	f7ff fe56 	bl	80150bc <etharp_find_entry>
 8015410:	4603      	mov	r3, r0
 8015412:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015414:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015418:	2b00      	cmp	r3, #0
 801541a:	da02      	bge.n	8015422 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801541c:	8afb      	ldrh	r3, [r7, #22]
 801541e:	b25b      	sxtb	r3, r3
 8015420:	e05d      	b.n	80154de <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015422:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015426:	4933      	ldr	r1, [pc, #204]	; (80154f4 <etharp_update_arp_entry+0x148>)
 8015428:	4613      	mov	r3, r2
 801542a:	005b      	lsls	r3, r3, #1
 801542c:	4413      	add	r3, r2
 801542e:	00db      	lsls	r3, r3, #3
 8015430:	440b      	add	r3, r1
 8015432:	3314      	adds	r3, #20
 8015434:	2202      	movs	r2, #2
 8015436:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015438:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801543c:	492d      	ldr	r1, [pc, #180]	; (80154f4 <etharp_update_arp_entry+0x148>)
 801543e:	4613      	mov	r3, r2
 8015440:	005b      	lsls	r3, r3, #1
 8015442:	4413      	add	r3, r2
 8015444:	00db      	lsls	r3, r3, #3
 8015446:	440b      	add	r3, r1
 8015448:	3308      	adds	r3, #8
 801544a:	68fa      	ldr	r2, [r7, #12]
 801544c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801544e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015452:	4613      	mov	r3, r2
 8015454:	005b      	lsls	r3, r3, #1
 8015456:	4413      	add	r3, r2
 8015458:	00db      	lsls	r3, r3, #3
 801545a:	3308      	adds	r3, #8
 801545c:	4a25      	ldr	r2, [pc, #148]	; (80154f4 <etharp_update_arp_entry+0x148>)
 801545e:	4413      	add	r3, r2
 8015460:	3304      	adds	r3, #4
 8015462:	2206      	movs	r2, #6
 8015464:	6879      	ldr	r1, [r7, #4]
 8015466:	4618      	mov	r0, r3
 8015468:	f002 f848 	bl	80174fc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801546c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015470:	4920      	ldr	r1, [pc, #128]	; (80154f4 <etharp_update_arp_entry+0x148>)
 8015472:	4613      	mov	r3, r2
 8015474:	005b      	lsls	r3, r3, #1
 8015476:	4413      	add	r3, r2
 8015478:	00db      	lsls	r3, r3, #3
 801547a:	440b      	add	r3, r1
 801547c:	3312      	adds	r3, #18
 801547e:	2200      	movs	r2, #0
 8015480:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015482:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015486:	491b      	ldr	r1, [pc, #108]	; (80154f4 <etharp_update_arp_entry+0x148>)
 8015488:	4613      	mov	r3, r2
 801548a:	005b      	lsls	r3, r3, #1
 801548c:	4413      	add	r3, r2
 801548e:	00db      	lsls	r3, r3, #3
 8015490:	440b      	add	r3, r1
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d021      	beq.n	80154dc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015498:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801549c:	4915      	ldr	r1, [pc, #84]	; (80154f4 <etharp_update_arp_entry+0x148>)
 801549e:	4613      	mov	r3, r2
 80154a0:	005b      	lsls	r3, r3, #1
 80154a2:	4413      	add	r3, r2
 80154a4:	00db      	lsls	r3, r3, #3
 80154a6:	440b      	add	r3, r1
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80154ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80154b0:	4910      	ldr	r1, [pc, #64]	; (80154f4 <etharp_update_arp_entry+0x148>)
 80154b2:	4613      	mov	r3, r2
 80154b4:	005b      	lsls	r3, r3, #1
 80154b6:	4413      	add	r3, r2
 80154b8:	00db      	lsls	r3, r3, #3
 80154ba:	440b      	add	r3, r1
 80154bc:	2200      	movs	r2, #0
 80154be:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80154c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80154ca:	9300      	str	r3, [sp, #0]
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	6939      	ldr	r1, [r7, #16]
 80154d0:	68f8      	ldr	r0, [r7, #12]
 80154d2:	f001 ff97 	bl	8017404 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80154d6:	6938      	ldr	r0, [r7, #16]
 80154d8:	f7f9 f9cc 	bl	800e874 <pbuf_free>
  }
  return ERR_OK;
 80154dc:	2300      	movs	r3, #0
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3718      	adds	r7, #24
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}
 80154e6:	bf00      	nop
 80154e8:	0801abc8 	.word	0x0801abc8
 80154ec:	0801acc0 	.word	0x0801acc0
 80154f0:	0801ac40 	.word	0x0801ac40
 80154f4:	2000976c 	.word	0x2000976c

080154f8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b084      	sub	sp, #16
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015500:	2300      	movs	r3, #0
 8015502:	60fb      	str	r3, [r7, #12]
 8015504:	e01e      	b.n	8015544 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015506:	4913      	ldr	r1, [pc, #76]	; (8015554 <etharp_cleanup_netif+0x5c>)
 8015508:	68fa      	ldr	r2, [r7, #12]
 801550a:	4613      	mov	r3, r2
 801550c:	005b      	lsls	r3, r3, #1
 801550e:	4413      	add	r3, r2
 8015510:	00db      	lsls	r3, r3, #3
 8015512:	440b      	add	r3, r1
 8015514:	3314      	adds	r3, #20
 8015516:	781b      	ldrb	r3, [r3, #0]
 8015518:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801551a:	7afb      	ldrb	r3, [r7, #11]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d00e      	beq.n	801553e <etharp_cleanup_netif+0x46>
 8015520:	490c      	ldr	r1, [pc, #48]	; (8015554 <etharp_cleanup_netif+0x5c>)
 8015522:	68fa      	ldr	r2, [r7, #12]
 8015524:	4613      	mov	r3, r2
 8015526:	005b      	lsls	r3, r3, #1
 8015528:	4413      	add	r3, r2
 801552a:	00db      	lsls	r3, r3, #3
 801552c:	440b      	add	r3, r1
 801552e:	3308      	adds	r3, #8
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	687a      	ldr	r2, [r7, #4]
 8015534:	429a      	cmp	r2, r3
 8015536:	d102      	bne.n	801553e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015538:	68f8      	ldr	r0, [r7, #12]
 801553a:	f7ff fce5 	bl	8014f08 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	3301      	adds	r3, #1
 8015542:	60fb      	str	r3, [r7, #12]
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	2b09      	cmp	r3, #9
 8015548:	dddd      	ble.n	8015506 <etharp_cleanup_netif+0xe>
    }
  }
}
 801554a:	bf00      	nop
 801554c:	bf00      	nop
 801554e:	3710      	adds	r7, #16
 8015550:	46bd      	mov	sp, r7
 8015552:	bd80      	pop	{r7, pc}
 8015554:	2000976c 	.word	0x2000976c

08015558 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015558:	b5b0      	push	{r4, r5, r7, lr}
 801555a:	b08a      	sub	sp, #40	; 0x28
 801555c:	af04      	add	r7, sp, #16
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015562:	683b      	ldr	r3, [r7, #0]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d107      	bne.n	8015578 <etharp_input+0x20>
 8015568:	4b3d      	ldr	r3, [pc, #244]	; (8015660 <etharp_input+0x108>)
 801556a:	f240 228a 	movw	r2, #650	; 0x28a
 801556e:	493d      	ldr	r1, [pc, #244]	; (8015664 <etharp_input+0x10c>)
 8015570:	483d      	ldr	r0, [pc, #244]	; (8015668 <etharp_input+0x110>)
 8015572:	f001 ffd9 	bl	8017528 <iprintf>
 8015576:	e06f      	b.n	8015658 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	685b      	ldr	r3, [r3, #4]
 801557c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801557e:	693b      	ldr	r3, [r7, #16]
 8015580:	881b      	ldrh	r3, [r3, #0]
 8015582:	b29b      	uxth	r3, r3
 8015584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015588:	d10c      	bne.n	80155a4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801558e:	2b06      	cmp	r3, #6
 8015590:	d108      	bne.n	80155a4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015592:	693b      	ldr	r3, [r7, #16]
 8015594:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015596:	2b04      	cmp	r3, #4
 8015598:	d104      	bne.n	80155a4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	885b      	ldrh	r3, [r3, #2]
 801559e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80155a0:	2b08      	cmp	r3, #8
 80155a2:	d003      	beq.n	80155ac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80155a4:	6878      	ldr	r0, [r7, #4]
 80155a6:	f7f9 f965 	bl	800e874 <pbuf_free>
    return;
 80155aa:	e055      	b.n	8015658 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80155ac:	693b      	ldr	r3, [r7, #16]
 80155ae:	330e      	adds	r3, #14
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80155b4:	693b      	ldr	r3, [r7, #16]
 80155b6:	3318      	adds	r3, #24
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	3304      	adds	r3, #4
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d102      	bne.n	80155cc <etharp_input+0x74>
    for_us = 0;
 80155c6:	2300      	movs	r3, #0
 80155c8:	75fb      	strb	r3, [r7, #23]
 80155ca:	e009      	b.n	80155e0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80155cc:	68ba      	ldr	r2, [r7, #8]
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	3304      	adds	r3, #4
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	429a      	cmp	r2, r3
 80155d6:	bf0c      	ite	eq
 80155d8:	2301      	moveq	r3, #1
 80155da:	2300      	movne	r3, #0
 80155dc:	b2db      	uxtb	r3, r3
 80155de:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80155e0:	693b      	ldr	r3, [r7, #16]
 80155e2:	f103 0208 	add.w	r2, r3, #8
 80155e6:	7dfb      	ldrb	r3, [r7, #23]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d001      	beq.n	80155f0 <etharp_input+0x98>
 80155ec:	2301      	movs	r3, #1
 80155ee:	e000      	b.n	80155f2 <etharp_input+0x9a>
 80155f0:	2302      	movs	r3, #2
 80155f2:	f107 010c 	add.w	r1, r7, #12
 80155f6:	6838      	ldr	r0, [r7, #0]
 80155f8:	f7ff fed8 	bl	80153ac <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80155fc:	693b      	ldr	r3, [r7, #16]
 80155fe:	88db      	ldrh	r3, [r3, #6]
 8015600:	b29b      	uxth	r3, r3
 8015602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015606:	d003      	beq.n	8015610 <etharp_input+0xb8>
 8015608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801560c:	d01e      	beq.n	801564c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801560e:	e020      	b.n	8015652 <etharp_input+0xfa>
      if (for_us) {
 8015610:	7dfb      	ldrb	r3, [r7, #23]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d01c      	beq.n	8015650 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801561c:	693b      	ldr	r3, [r7, #16]
 801561e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801562c:	693a      	ldr	r2, [r7, #16]
 801562e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015630:	2102      	movs	r1, #2
 8015632:	9103      	str	r1, [sp, #12]
 8015634:	f107 010c 	add.w	r1, r7, #12
 8015638:	9102      	str	r1, [sp, #8]
 801563a:	9201      	str	r2, [sp, #4]
 801563c:	9300      	str	r3, [sp, #0]
 801563e:	462b      	mov	r3, r5
 8015640:	4622      	mov	r2, r4
 8015642:	4601      	mov	r1, r0
 8015644:	6838      	ldr	r0, [r7, #0]
 8015646:	f000 faeb 	bl	8015c20 <etharp_raw>
      break;
 801564a:	e001      	b.n	8015650 <etharp_input+0xf8>
      break;
 801564c:	bf00      	nop
 801564e:	e000      	b.n	8015652 <etharp_input+0xfa>
      break;
 8015650:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015652:	6878      	ldr	r0, [r7, #4]
 8015654:	f7f9 f90e 	bl	800e874 <pbuf_free>
}
 8015658:	3718      	adds	r7, #24
 801565a:	46bd      	mov	sp, r7
 801565c:	bdb0      	pop	{r4, r5, r7, pc}
 801565e:	bf00      	nop
 8015660:	0801abc8 	.word	0x0801abc8
 8015664:	0801ad18 	.word	0x0801ad18
 8015668:	0801ac40 	.word	0x0801ac40

0801566c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b086      	sub	sp, #24
 8015670:	af02      	add	r7, sp, #8
 8015672:	60f8      	str	r0, [r7, #12]
 8015674:	60b9      	str	r1, [r7, #8]
 8015676:	4613      	mov	r3, r2
 8015678:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801567a:	79fa      	ldrb	r2, [r7, #7]
 801567c:	4944      	ldr	r1, [pc, #272]	; (8015790 <etharp_output_to_arp_index+0x124>)
 801567e:	4613      	mov	r3, r2
 8015680:	005b      	lsls	r3, r3, #1
 8015682:	4413      	add	r3, r2
 8015684:	00db      	lsls	r3, r3, #3
 8015686:	440b      	add	r3, r1
 8015688:	3314      	adds	r3, #20
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	2b01      	cmp	r3, #1
 801568e:	d806      	bhi.n	801569e <etharp_output_to_arp_index+0x32>
 8015690:	4b40      	ldr	r3, [pc, #256]	; (8015794 <etharp_output_to_arp_index+0x128>)
 8015692:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015696:	4940      	ldr	r1, [pc, #256]	; (8015798 <etharp_output_to_arp_index+0x12c>)
 8015698:	4840      	ldr	r0, [pc, #256]	; (801579c <etharp_output_to_arp_index+0x130>)
 801569a:	f001 ff45 	bl	8017528 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801569e:	79fa      	ldrb	r2, [r7, #7]
 80156a0:	493b      	ldr	r1, [pc, #236]	; (8015790 <etharp_output_to_arp_index+0x124>)
 80156a2:	4613      	mov	r3, r2
 80156a4:	005b      	lsls	r3, r3, #1
 80156a6:	4413      	add	r3, r2
 80156a8:	00db      	lsls	r3, r3, #3
 80156aa:	440b      	add	r3, r1
 80156ac:	3314      	adds	r3, #20
 80156ae:	781b      	ldrb	r3, [r3, #0]
 80156b0:	2b02      	cmp	r3, #2
 80156b2:	d153      	bne.n	801575c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80156b4:	79fa      	ldrb	r2, [r7, #7]
 80156b6:	4936      	ldr	r1, [pc, #216]	; (8015790 <etharp_output_to_arp_index+0x124>)
 80156b8:	4613      	mov	r3, r2
 80156ba:	005b      	lsls	r3, r3, #1
 80156bc:	4413      	add	r3, r2
 80156be:	00db      	lsls	r3, r3, #3
 80156c0:	440b      	add	r3, r1
 80156c2:	3312      	adds	r3, #18
 80156c4:	881b      	ldrh	r3, [r3, #0]
 80156c6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80156ca:	d919      	bls.n	8015700 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80156cc:	79fa      	ldrb	r2, [r7, #7]
 80156ce:	4613      	mov	r3, r2
 80156d0:	005b      	lsls	r3, r3, #1
 80156d2:	4413      	add	r3, r2
 80156d4:	00db      	lsls	r3, r3, #3
 80156d6:	4a2e      	ldr	r2, [pc, #184]	; (8015790 <etharp_output_to_arp_index+0x124>)
 80156d8:	4413      	add	r3, r2
 80156da:	3304      	adds	r3, #4
 80156dc:	4619      	mov	r1, r3
 80156de:	68f8      	ldr	r0, [r7, #12]
 80156e0:	f000 fb4c 	bl	8015d7c <etharp_request>
 80156e4:	4603      	mov	r3, r0
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d138      	bne.n	801575c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80156ea:	79fa      	ldrb	r2, [r7, #7]
 80156ec:	4928      	ldr	r1, [pc, #160]	; (8015790 <etharp_output_to_arp_index+0x124>)
 80156ee:	4613      	mov	r3, r2
 80156f0:	005b      	lsls	r3, r3, #1
 80156f2:	4413      	add	r3, r2
 80156f4:	00db      	lsls	r3, r3, #3
 80156f6:	440b      	add	r3, r1
 80156f8:	3314      	adds	r3, #20
 80156fa:	2203      	movs	r2, #3
 80156fc:	701a      	strb	r2, [r3, #0]
 80156fe:	e02d      	b.n	801575c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015700:	79fa      	ldrb	r2, [r7, #7]
 8015702:	4923      	ldr	r1, [pc, #140]	; (8015790 <etharp_output_to_arp_index+0x124>)
 8015704:	4613      	mov	r3, r2
 8015706:	005b      	lsls	r3, r3, #1
 8015708:	4413      	add	r3, r2
 801570a:	00db      	lsls	r3, r3, #3
 801570c:	440b      	add	r3, r1
 801570e:	3312      	adds	r3, #18
 8015710:	881b      	ldrh	r3, [r3, #0]
 8015712:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015716:	d321      	bcc.n	801575c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015718:	79fa      	ldrb	r2, [r7, #7]
 801571a:	4613      	mov	r3, r2
 801571c:	005b      	lsls	r3, r3, #1
 801571e:	4413      	add	r3, r2
 8015720:	00db      	lsls	r3, r3, #3
 8015722:	4a1b      	ldr	r2, [pc, #108]	; (8015790 <etharp_output_to_arp_index+0x124>)
 8015724:	4413      	add	r3, r2
 8015726:	1d19      	adds	r1, r3, #4
 8015728:	79fa      	ldrb	r2, [r7, #7]
 801572a:	4613      	mov	r3, r2
 801572c:	005b      	lsls	r3, r3, #1
 801572e:	4413      	add	r3, r2
 8015730:	00db      	lsls	r3, r3, #3
 8015732:	3308      	adds	r3, #8
 8015734:	4a16      	ldr	r2, [pc, #88]	; (8015790 <etharp_output_to_arp_index+0x124>)
 8015736:	4413      	add	r3, r2
 8015738:	3304      	adds	r3, #4
 801573a:	461a      	mov	r2, r3
 801573c:	68f8      	ldr	r0, [r7, #12]
 801573e:	f000 fafb 	bl	8015d38 <etharp_request_dst>
 8015742:	4603      	mov	r3, r0
 8015744:	2b00      	cmp	r3, #0
 8015746:	d109      	bne.n	801575c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015748:	79fa      	ldrb	r2, [r7, #7]
 801574a:	4911      	ldr	r1, [pc, #68]	; (8015790 <etharp_output_to_arp_index+0x124>)
 801574c:	4613      	mov	r3, r2
 801574e:	005b      	lsls	r3, r3, #1
 8015750:	4413      	add	r3, r2
 8015752:	00db      	lsls	r3, r3, #3
 8015754:	440b      	add	r3, r1
 8015756:	3314      	adds	r3, #20
 8015758:	2203      	movs	r2, #3
 801575a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015762:	79fa      	ldrb	r2, [r7, #7]
 8015764:	4613      	mov	r3, r2
 8015766:	005b      	lsls	r3, r3, #1
 8015768:	4413      	add	r3, r2
 801576a:	00db      	lsls	r3, r3, #3
 801576c:	3308      	adds	r3, #8
 801576e:	4a08      	ldr	r2, [pc, #32]	; (8015790 <etharp_output_to_arp_index+0x124>)
 8015770:	4413      	add	r3, r2
 8015772:	3304      	adds	r3, #4
 8015774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015778:	9200      	str	r2, [sp, #0]
 801577a:	460a      	mov	r2, r1
 801577c:	68b9      	ldr	r1, [r7, #8]
 801577e:	68f8      	ldr	r0, [r7, #12]
 8015780:	f001 fe40 	bl	8017404 <ethernet_output>
 8015784:	4603      	mov	r3, r0
}
 8015786:	4618      	mov	r0, r3
 8015788:	3710      	adds	r7, #16
 801578a:	46bd      	mov	sp, r7
 801578c:	bd80      	pop	{r7, pc}
 801578e:	bf00      	nop
 8015790:	2000976c 	.word	0x2000976c
 8015794:	0801abc8 	.word	0x0801abc8
 8015798:	0801ad38 	.word	0x0801ad38
 801579c:	0801ac40 	.word	0x0801ac40

080157a0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b08a      	sub	sp, #40	; 0x28
 80157a4:	af02      	add	r7, sp, #8
 80157a6:	60f8      	str	r0, [r7, #12]
 80157a8:	60b9      	str	r1, [r7, #8]
 80157aa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d106      	bne.n	80157c4 <etharp_output+0x24>
 80157b6:	4b73      	ldr	r3, [pc, #460]	; (8015984 <etharp_output+0x1e4>)
 80157b8:	f240 321e 	movw	r2, #798	; 0x31e
 80157bc:	4972      	ldr	r1, [pc, #456]	; (8015988 <etharp_output+0x1e8>)
 80157be:	4873      	ldr	r0, [pc, #460]	; (801598c <etharp_output+0x1ec>)
 80157c0:	f001 feb2 	bl	8017528 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d106      	bne.n	80157d8 <etharp_output+0x38>
 80157ca:	4b6e      	ldr	r3, [pc, #440]	; (8015984 <etharp_output+0x1e4>)
 80157cc:	f240 321f 	movw	r2, #799	; 0x31f
 80157d0:	496f      	ldr	r1, [pc, #444]	; (8015990 <etharp_output+0x1f0>)
 80157d2:	486e      	ldr	r0, [pc, #440]	; (801598c <etharp_output+0x1ec>)
 80157d4:	f001 fea8 	bl	8017528 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d106      	bne.n	80157ec <etharp_output+0x4c>
 80157de:	4b69      	ldr	r3, [pc, #420]	; (8015984 <etharp_output+0x1e4>)
 80157e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80157e4:	496b      	ldr	r1, [pc, #428]	; (8015994 <etharp_output+0x1f4>)
 80157e6:	4869      	ldr	r0, [pc, #420]	; (801598c <etharp_output+0x1ec>)
 80157e8:	f001 fe9e 	bl	8017528 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	68f9      	ldr	r1, [r7, #12]
 80157f2:	4618      	mov	r0, r3
 80157f4:	f000 fef8 	bl	80165e8 <ip4_addr_isbroadcast_u32>
 80157f8:	4603      	mov	r3, r0
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d002      	beq.n	8015804 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80157fe:	4b66      	ldr	r3, [pc, #408]	; (8015998 <etharp_output+0x1f8>)
 8015800:	61fb      	str	r3, [r7, #28]
 8015802:	e0af      	b.n	8015964 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801580c:	2be0      	cmp	r3, #224	; 0xe0
 801580e:	d118      	bne.n	8015842 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015810:	2301      	movs	r3, #1
 8015812:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015814:	2300      	movs	r3, #0
 8015816:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015818:	235e      	movs	r3, #94	; 0x5e
 801581a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	3301      	adds	r3, #1
 8015820:	781b      	ldrb	r3, [r3, #0]
 8015822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015826:	b2db      	uxtb	r3, r3
 8015828:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	3302      	adds	r3, #2
 801582e:	781b      	ldrb	r3, [r3, #0]
 8015830:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	3303      	adds	r3, #3
 8015836:	781b      	ldrb	r3, [r3, #0]
 8015838:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801583a:	f107 0310 	add.w	r3, r7, #16
 801583e:	61fb      	str	r3, [r7, #28]
 8015840:	e090      	b.n	8015964 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	681a      	ldr	r2, [r3, #0]
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	3304      	adds	r3, #4
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	405a      	eors	r2, r3
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	3308      	adds	r3, #8
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	4013      	ands	r3, r2
 8015856:	2b00      	cmp	r3, #0
 8015858:	d012      	beq.n	8015880 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015860:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015864:	4293      	cmp	r3, r2
 8015866:	d00b      	beq.n	8015880 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	330c      	adds	r3, #12
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d003      	beq.n	801587a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	330c      	adds	r3, #12
 8015876:	61bb      	str	r3, [r7, #24]
 8015878:	e002      	b.n	8015880 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801587a:	f06f 0303 	mvn.w	r3, #3
 801587e:	e07d      	b.n	801597c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015880:	4b46      	ldr	r3, [pc, #280]	; (801599c <etharp_output+0x1fc>)
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	4619      	mov	r1, r3
 8015886:	4a46      	ldr	r2, [pc, #280]	; (80159a0 <etharp_output+0x200>)
 8015888:	460b      	mov	r3, r1
 801588a:	005b      	lsls	r3, r3, #1
 801588c:	440b      	add	r3, r1
 801588e:	00db      	lsls	r3, r3, #3
 8015890:	4413      	add	r3, r2
 8015892:	3314      	adds	r3, #20
 8015894:	781b      	ldrb	r3, [r3, #0]
 8015896:	2b01      	cmp	r3, #1
 8015898:	d925      	bls.n	80158e6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801589a:	4b40      	ldr	r3, [pc, #256]	; (801599c <etharp_output+0x1fc>)
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	4619      	mov	r1, r3
 80158a0:	4a3f      	ldr	r2, [pc, #252]	; (80159a0 <etharp_output+0x200>)
 80158a2:	460b      	mov	r3, r1
 80158a4:	005b      	lsls	r3, r3, #1
 80158a6:	440b      	add	r3, r1
 80158a8:	00db      	lsls	r3, r3, #3
 80158aa:	4413      	add	r3, r2
 80158ac:	3308      	adds	r3, #8
 80158ae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80158b0:	68fa      	ldr	r2, [r7, #12]
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d117      	bne.n	80158e6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80158b6:	69bb      	ldr	r3, [r7, #24]
 80158b8:	681a      	ldr	r2, [r3, #0]
 80158ba:	4b38      	ldr	r3, [pc, #224]	; (801599c <etharp_output+0x1fc>)
 80158bc:	781b      	ldrb	r3, [r3, #0]
 80158be:	4618      	mov	r0, r3
 80158c0:	4937      	ldr	r1, [pc, #220]	; (80159a0 <etharp_output+0x200>)
 80158c2:	4603      	mov	r3, r0
 80158c4:	005b      	lsls	r3, r3, #1
 80158c6:	4403      	add	r3, r0
 80158c8:	00db      	lsls	r3, r3, #3
 80158ca:	440b      	add	r3, r1
 80158cc:	3304      	adds	r3, #4
 80158ce:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80158d0:	429a      	cmp	r2, r3
 80158d2:	d108      	bne.n	80158e6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80158d4:	4b31      	ldr	r3, [pc, #196]	; (801599c <etharp_output+0x1fc>)
 80158d6:	781b      	ldrb	r3, [r3, #0]
 80158d8:	461a      	mov	r2, r3
 80158da:	68b9      	ldr	r1, [r7, #8]
 80158dc:	68f8      	ldr	r0, [r7, #12]
 80158de:	f7ff fec5 	bl	801566c <etharp_output_to_arp_index>
 80158e2:	4603      	mov	r3, r0
 80158e4:	e04a      	b.n	801597c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80158e6:	2300      	movs	r3, #0
 80158e8:	75fb      	strb	r3, [r7, #23]
 80158ea:	e031      	b.n	8015950 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80158ec:	7dfa      	ldrb	r2, [r7, #23]
 80158ee:	492c      	ldr	r1, [pc, #176]	; (80159a0 <etharp_output+0x200>)
 80158f0:	4613      	mov	r3, r2
 80158f2:	005b      	lsls	r3, r3, #1
 80158f4:	4413      	add	r3, r2
 80158f6:	00db      	lsls	r3, r3, #3
 80158f8:	440b      	add	r3, r1
 80158fa:	3314      	adds	r3, #20
 80158fc:	781b      	ldrb	r3, [r3, #0]
 80158fe:	2b01      	cmp	r3, #1
 8015900:	d923      	bls.n	801594a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015902:	7dfa      	ldrb	r2, [r7, #23]
 8015904:	4926      	ldr	r1, [pc, #152]	; (80159a0 <etharp_output+0x200>)
 8015906:	4613      	mov	r3, r2
 8015908:	005b      	lsls	r3, r3, #1
 801590a:	4413      	add	r3, r2
 801590c:	00db      	lsls	r3, r3, #3
 801590e:	440b      	add	r3, r1
 8015910:	3308      	adds	r3, #8
 8015912:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015914:	68fa      	ldr	r2, [r7, #12]
 8015916:	429a      	cmp	r2, r3
 8015918:	d117      	bne.n	801594a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801591a:	69bb      	ldr	r3, [r7, #24]
 801591c:	6819      	ldr	r1, [r3, #0]
 801591e:	7dfa      	ldrb	r2, [r7, #23]
 8015920:	481f      	ldr	r0, [pc, #124]	; (80159a0 <etharp_output+0x200>)
 8015922:	4613      	mov	r3, r2
 8015924:	005b      	lsls	r3, r3, #1
 8015926:	4413      	add	r3, r2
 8015928:	00db      	lsls	r3, r3, #3
 801592a:	4403      	add	r3, r0
 801592c:	3304      	adds	r3, #4
 801592e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015930:	4299      	cmp	r1, r3
 8015932:	d10a      	bne.n	801594a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015934:	4a19      	ldr	r2, [pc, #100]	; (801599c <etharp_output+0x1fc>)
 8015936:	7dfb      	ldrb	r3, [r7, #23]
 8015938:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801593a:	7dfb      	ldrb	r3, [r7, #23]
 801593c:	461a      	mov	r2, r3
 801593e:	68b9      	ldr	r1, [r7, #8]
 8015940:	68f8      	ldr	r0, [r7, #12]
 8015942:	f7ff fe93 	bl	801566c <etharp_output_to_arp_index>
 8015946:	4603      	mov	r3, r0
 8015948:	e018      	b.n	801597c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801594a:	7dfb      	ldrb	r3, [r7, #23]
 801594c:	3301      	adds	r3, #1
 801594e:	75fb      	strb	r3, [r7, #23]
 8015950:	7dfb      	ldrb	r3, [r7, #23]
 8015952:	2b09      	cmp	r3, #9
 8015954:	d9ca      	bls.n	80158ec <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015956:	68ba      	ldr	r2, [r7, #8]
 8015958:	69b9      	ldr	r1, [r7, #24]
 801595a:	68f8      	ldr	r0, [r7, #12]
 801595c:	f000 f822 	bl	80159a4 <etharp_query>
 8015960:	4603      	mov	r3, r0
 8015962:	e00b      	b.n	801597c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801596a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801596e:	9300      	str	r3, [sp, #0]
 8015970:	69fb      	ldr	r3, [r7, #28]
 8015972:	68b9      	ldr	r1, [r7, #8]
 8015974:	68f8      	ldr	r0, [r7, #12]
 8015976:	f001 fd45 	bl	8017404 <ethernet_output>
 801597a:	4603      	mov	r3, r0
}
 801597c:	4618      	mov	r0, r3
 801597e:	3720      	adds	r7, #32
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}
 8015984:	0801abc8 	.word	0x0801abc8
 8015988:	0801ad18 	.word	0x0801ad18
 801598c:	0801ac40 	.word	0x0801ac40
 8015990:	0801ad68 	.word	0x0801ad68
 8015994:	0801ad08 	.word	0x0801ad08
 8015998:	0801b38c 	.word	0x0801b38c
 801599c:	2000985c 	.word	0x2000985c
 80159a0:	2000976c 	.word	0x2000976c

080159a4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b08c      	sub	sp, #48	; 0x30
 80159a8:	af02      	add	r7, sp, #8
 80159aa:	60f8      	str	r0, [r7, #12]
 80159ac:	60b9      	str	r1, [r7, #8]
 80159ae:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	3326      	adds	r3, #38	; 0x26
 80159b4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80159b6:	23ff      	movs	r3, #255	; 0xff
 80159b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80159bc:	2300      	movs	r3, #0
 80159be:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80159c0:	68bb      	ldr	r3, [r7, #8]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	68f9      	ldr	r1, [r7, #12]
 80159c6:	4618      	mov	r0, r3
 80159c8:	f000 fe0e 	bl	80165e8 <ip4_addr_isbroadcast_u32>
 80159cc:	4603      	mov	r3, r0
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d10c      	bne.n	80159ec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80159d2:	68bb      	ldr	r3, [r7, #8]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80159da:	2be0      	cmp	r3, #224	; 0xe0
 80159dc:	d006      	beq.n	80159ec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d003      	beq.n	80159ec <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80159e4:	68bb      	ldr	r3, [r7, #8]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d102      	bne.n	80159f2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80159ec:	f06f 030f 	mvn.w	r3, #15
 80159f0:	e101      	b.n	8015bf6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80159f2:	68fa      	ldr	r2, [r7, #12]
 80159f4:	2101      	movs	r1, #1
 80159f6:	68b8      	ldr	r0, [r7, #8]
 80159f8:	f7ff fb60 	bl	80150bc <etharp_find_entry>
 80159fc:	4603      	mov	r3, r0
 80159fe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015a00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	da02      	bge.n	8015a0e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015a08:	8a7b      	ldrh	r3, [r7, #18]
 8015a0a:	b25b      	sxtb	r3, r3
 8015a0c:	e0f3      	b.n	8015bf6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015a0e:	8a7b      	ldrh	r3, [r7, #18]
 8015a10:	2b7e      	cmp	r3, #126	; 0x7e
 8015a12:	d906      	bls.n	8015a22 <etharp_query+0x7e>
 8015a14:	4b7a      	ldr	r3, [pc, #488]	; (8015c00 <etharp_query+0x25c>)
 8015a16:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015a1a:	497a      	ldr	r1, [pc, #488]	; (8015c04 <etharp_query+0x260>)
 8015a1c:	487a      	ldr	r0, [pc, #488]	; (8015c08 <etharp_query+0x264>)
 8015a1e:	f001 fd83 	bl	8017528 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015a22:	8a7b      	ldrh	r3, [r7, #18]
 8015a24:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015a26:	7c7a      	ldrb	r2, [r7, #17]
 8015a28:	4978      	ldr	r1, [pc, #480]	; (8015c0c <etharp_query+0x268>)
 8015a2a:	4613      	mov	r3, r2
 8015a2c:	005b      	lsls	r3, r3, #1
 8015a2e:	4413      	add	r3, r2
 8015a30:	00db      	lsls	r3, r3, #3
 8015a32:	440b      	add	r3, r1
 8015a34:	3314      	adds	r3, #20
 8015a36:	781b      	ldrb	r3, [r3, #0]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d115      	bne.n	8015a68 <etharp_query+0xc4>
    is_new_entry = 1;
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015a40:	7c7a      	ldrb	r2, [r7, #17]
 8015a42:	4972      	ldr	r1, [pc, #456]	; (8015c0c <etharp_query+0x268>)
 8015a44:	4613      	mov	r3, r2
 8015a46:	005b      	lsls	r3, r3, #1
 8015a48:	4413      	add	r3, r2
 8015a4a:	00db      	lsls	r3, r3, #3
 8015a4c:	440b      	add	r3, r1
 8015a4e:	3314      	adds	r3, #20
 8015a50:	2201      	movs	r2, #1
 8015a52:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015a54:	7c7a      	ldrb	r2, [r7, #17]
 8015a56:	496d      	ldr	r1, [pc, #436]	; (8015c0c <etharp_query+0x268>)
 8015a58:	4613      	mov	r3, r2
 8015a5a:	005b      	lsls	r3, r3, #1
 8015a5c:	4413      	add	r3, r2
 8015a5e:	00db      	lsls	r3, r3, #3
 8015a60:	440b      	add	r3, r1
 8015a62:	3308      	adds	r3, #8
 8015a64:	68fa      	ldr	r2, [r7, #12]
 8015a66:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015a68:	7c7a      	ldrb	r2, [r7, #17]
 8015a6a:	4968      	ldr	r1, [pc, #416]	; (8015c0c <etharp_query+0x268>)
 8015a6c:	4613      	mov	r3, r2
 8015a6e:	005b      	lsls	r3, r3, #1
 8015a70:	4413      	add	r3, r2
 8015a72:	00db      	lsls	r3, r3, #3
 8015a74:	440b      	add	r3, r1
 8015a76:	3314      	adds	r3, #20
 8015a78:	781b      	ldrb	r3, [r3, #0]
 8015a7a:	2b01      	cmp	r3, #1
 8015a7c:	d011      	beq.n	8015aa2 <etharp_query+0xfe>
 8015a7e:	7c7a      	ldrb	r2, [r7, #17]
 8015a80:	4962      	ldr	r1, [pc, #392]	; (8015c0c <etharp_query+0x268>)
 8015a82:	4613      	mov	r3, r2
 8015a84:	005b      	lsls	r3, r3, #1
 8015a86:	4413      	add	r3, r2
 8015a88:	00db      	lsls	r3, r3, #3
 8015a8a:	440b      	add	r3, r1
 8015a8c:	3314      	adds	r3, #20
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	2b01      	cmp	r3, #1
 8015a92:	d806      	bhi.n	8015aa2 <etharp_query+0xfe>
 8015a94:	4b5a      	ldr	r3, [pc, #360]	; (8015c00 <etharp_query+0x25c>)
 8015a96:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015a9a:	495d      	ldr	r1, [pc, #372]	; (8015c10 <etharp_query+0x26c>)
 8015a9c:	485a      	ldr	r0, [pc, #360]	; (8015c08 <etharp_query+0x264>)
 8015a9e:	f001 fd43 	bl	8017528 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015aa2:	6a3b      	ldr	r3, [r7, #32]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d102      	bne.n	8015aae <etharp_query+0x10a>
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d10c      	bne.n	8015ac8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015aae:	68b9      	ldr	r1, [r7, #8]
 8015ab0:	68f8      	ldr	r0, [r7, #12]
 8015ab2:	f000 f963 	bl	8015d7c <etharp_request>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d102      	bne.n	8015ac8 <etharp_query+0x124>
      return result;
 8015ac2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015ac6:	e096      	b.n	8015bf6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d106      	bne.n	8015adc <etharp_query+0x138>
 8015ace:	4b4c      	ldr	r3, [pc, #304]	; (8015c00 <etharp_query+0x25c>)
 8015ad0:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015ad4:	494f      	ldr	r1, [pc, #316]	; (8015c14 <etharp_query+0x270>)
 8015ad6:	484c      	ldr	r0, [pc, #304]	; (8015c08 <etharp_query+0x264>)
 8015ad8:	f001 fd26 	bl	8017528 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015adc:	7c7a      	ldrb	r2, [r7, #17]
 8015ade:	494b      	ldr	r1, [pc, #300]	; (8015c0c <etharp_query+0x268>)
 8015ae0:	4613      	mov	r3, r2
 8015ae2:	005b      	lsls	r3, r3, #1
 8015ae4:	4413      	add	r3, r2
 8015ae6:	00db      	lsls	r3, r3, #3
 8015ae8:	440b      	add	r3, r1
 8015aea:	3314      	adds	r3, #20
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	2b01      	cmp	r3, #1
 8015af0:	d917      	bls.n	8015b22 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015af2:	4a49      	ldr	r2, [pc, #292]	; (8015c18 <etharp_query+0x274>)
 8015af4:	7c7b      	ldrb	r3, [r7, #17]
 8015af6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015af8:	7c7a      	ldrb	r2, [r7, #17]
 8015afa:	4613      	mov	r3, r2
 8015afc:	005b      	lsls	r3, r3, #1
 8015afe:	4413      	add	r3, r2
 8015b00:	00db      	lsls	r3, r3, #3
 8015b02:	3308      	adds	r3, #8
 8015b04:	4a41      	ldr	r2, [pc, #260]	; (8015c0c <etharp_query+0x268>)
 8015b06:	4413      	add	r3, r2
 8015b08:	3304      	adds	r3, #4
 8015b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015b0e:	9200      	str	r2, [sp, #0]
 8015b10:	697a      	ldr	r2, [r7, #20]
 8015b12:	6879      	ldr	r1, [r7, #4]
 8015b14:	68f8      	ldr	r0, [r7, #12]
 8015b16:	f001 fc75 	bl	8017404 <ethernet_output>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015b20:	e067      	b.n	8015bf2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015b22:	7c7a      	ldrb	r2, [r7, #17]
 8015b24:	4939      	ldr	r1, [pc, #228]	; (8015c0c <etharp_query+0x268>)
 8015b26:	4613      	mov	r3, r2
 8015b28:	005b      	lsls	r3, r3, #1
 8015b2a:	4413      	add	r3, r2
 8015b2c:	00db      	lsls	r3, r3, #3
 8015b2e:	440b      	add	r3, r1
 8015b30:	3314      	adds	r3, #20
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	2b01      	cmp	r3, #1
 8015b36:	d15c      	bne.n	8015bf2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015b40:	e01c      	b.n	8015b7c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015b42:	69fb      	ldr	r3, [r7, #28]
 8015b44:	895a      	ldrh	r2, [r3, #10]
 8015b46:	69fb      	ldr	r3, [r7, #28]
 8015b48:	891b      	ldrh	r3, [r3, #8]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d10a      	bne.n	8015b64 <etharp_query+0x1c0>
 8015b4e:	69fb      	ldr	r3, [r7, #28]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d006      	beq.n	8015b64 <etharp_query+0x1c0>
 8015b56:	4b2a      	ldr	r3, [pc, #168]	; (8015c00 <etharp_query+0x25c>)
 8015b58:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015b5c:	492f      	ldr	r1, [pc, #188]	; (8015c1c <etharp_query+0x278>)
 8015b5e:	482a      	ldr	r0, [pc, #168]	; (8015c08 <etharp_query+0x264>)
 8015b60:	f001 fce2 	bl	8017528 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015b64:	69fb      	ldr	r3, [r7, #28]
 8015b66:	7b1b      	ldrb	r3, [r3, #12]
 8015b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d002      	beq.n	8015b76 <etharp_query+0x1d2>
        copy_needed = 1;
 8015b70:	2301      	movs	r3, #1
 8015b72:	61bb      	str	r3, [r7, #24]
        break;
 8015b74:	e005      	b.n	8015b82 <etharp_query+0x1de>
      }
      p = p->next;
 8015b76:	69fb      	ldr	r3, [r7, #28]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015b7c:	69fb      	ldr	r3, [r7, #28]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d1df      	bne.n	8015b42 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015b82:	69bb      	ldr	r3, [r7, #24]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d007      	beq.n	8015b98 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015b88:	687a      	ldr	r2, [r7, #4]
 8015b8a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015b8e:	200e      	movs	r0, #14
 8015b90:	f7f9 f96e 	bl	800ee70 <pbuf_clone>
 8015b94:	61f8      	str	r0, [r7, #28]
 8015b96:	e004      	b.n	8015ba2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015b9c:	69f8      	ldr	r0, [r7, #28]
 8015b9e:	f7f8 ff09 	bl	800e9b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015ba2:	69fb      	ldr	r3, [r7, #28]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d021      	beq.n	8015bec <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015ba8:	7c7a      	ldrb	r2, [r7, #17]
 8015baa:	4918      	ldr	r1, [pc, #96]	; (8015c0c <etharp_query+0x268>)
 8015bac:	4613      	mov	r3, r2
 8015bae:	005b      	lsls	r3, r3, #1
 8015bb0:	4413      	add	r3, r2
 8015bb2:	00db      	lsls	r3, r3, #3
 8015bb4:	440b      	add	r3, r1
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d00a      	beq.n	8015bd2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015bbc:	7c7a      	ldrb	r2, [r7, #17]
 8015bbe:	4913      	ldr	r1, [pc, #76]	; (8015c0c <etharp_query+0x268>)
 8015bc0:	4613      	mov	r3, r2
 8015bc2:	005b      	lsls	r3, r3, #1
 8015bc4:	4413      	add	r3, r2
 8015bc6:	00db      	lsls	r3, r3, #3
 8015bc8:	440b      	add	r3, r1
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7f8 fe51 	bl	800e874 <pbuf_free>
      }
      arp_table[i].q = p;
 8015bd2:	7c7a      	ldrb	r2, [r7, #17]
 8015bd4:	490d      	ldr	r1, [pc, #52]	; (8015c0c <etharp_query+0x268>)
 8015bd6:	4613      	mov	r3, r2
 8015bd8:	005b      	lsls	r3, r3, #1
 8015bda:	4413      	add	r3, r2
 8015bdc:	00db      	lsls	r3, r3, #3
 8015bde:	440b      	add	r3, r1
 8015be0:	69fa      	ldr	r2, [r7, #28]
 8015be2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015be4:	2300      	movs	r3, #0
 8015be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015bea:	e002      	b.n	8015bf2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015bec:	23ff      	movs	r3, #255	; 0xff
 8015bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015bf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	3728      	adds	r7, #40	; 0x28
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}
 8015bfe:	bf00      	nop
 8015c00:	0801abc8 	.word	0x0801abc8
 8015c04:	0801ad74 	.word	0x0801ad74
 8015c08:	0801ac40 	.word	0x0801ac40
 8015c0c:	2000976c 	.word	0x2000976c
 8015c10:	0801ad84 	.word	0x0801ad84
 8015c14:	0801ad68 	.word	0x0801ad68
 8015c18:	2000985c 	.word	0x2000985c
 8015c1c:	0801adac 	.word	0x0801adac

08015c20 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b08a      	sub	sp, #40	; 0x28
 8015c24:	af02      	add	r7, sp, #8
 8015c26:	60f8      	str	r0, [r7, #12]
 8015c28:	60b9      	str	r1, [r7, #8]
 8015c2a:	607a      	str	r2, [r7, #4]
 8015c2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d106      	bne.n	8015c46 <etharp_raw+0x26>
 8015c38:	4b3a      	ldr	r3, [pc, #232]	; (8015d24 <etharp_raw+0x104>)
 8015c3a:	f240 4257 	movw	r2, #1111	; 0x457
 8015c3e:	493a      	ldr	r1, [pc, #232]	; (8015d28 <etharp_raw+0x108>)
 8015c40:	483a      	ldr	r0, [pc, #232]	; (8015d2c <etharp_raw+0x10c>)
 8015c42:	f001 fc71 	bl	8017528 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015c46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c4a:	211c      	movs	r1, #28
 8015c4c:	200e      	movs	r0, #14
 8015c4e:	f7f8 fb2d 	bl	800e2ac <pbuf_alloc>
 8015c52:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015c54:	69bb      	ldr	r3, [r7, #24]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d102      	bne.n	8015c60 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c5e:	e05d      	b.n	8015d1c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015c60:	69bb      	ldr	r3, [r7, #24]
 8015c62:	895b      	ldrh	r3, [r3, #10]
 8015c64:	2b1b      	cmp	r3, #27
 8015c66:	d806      	bhi.n	8015c76 <etharp_raw+0x56>
 8015c68:	4b2e      	ldr	r3, [pc, #184]	; (8015d24 <etharp_raw+0x104>)
 8015c6a:	f240 4262 	movw	r2, #1122	; 0x462
 8015c6e:	4930      	ldr	r1, [pc, #192]	; (8015d30 <etharp_raw+0x110>)
 8015c70:	482e      	ldr	r0, [pc, #184]	; (8015d2c <etharp_raw+0x10c>)
 8015c72:	f001 fc59 	bl	8017528 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015c76:	69bb      	ldr	r3, [r7, #24]
 8015c78:	685b      	ldr	r3, [r3, #4]
 8015c7a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015c7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7f7 fa9a 	bl	800d1b8 <lwip_htons>
 8015c84:	4603      	mov	r3, r0
 8015c86:	461a      	mov	r2, r3
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015c92:	2b06      	cmp	r3, #6
 8015c94:	d006      	beq.n	8015ca4 <etharp_raw+0x84>
 8015c96:	4b23      	ldr	r3, [pc, #140]	; (8015d24 <etharp_raw+0x104>)
 8015c98:	f240 4269 	movw	r2, #1129	; 0x469
 8015c9c:	4925      	ldr	r1, [pc, #148]	; (8015d34 <etharp_raw+0x114>)
 8015c9e:	4823      	ldr	r0, [pc, #140]	; (8015d2c <etharp_raw+0x10c>)
 8015ca0:	f001 fc42 	bl	8017528 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015ca4:	697b      	ldr	r3, [r7, #20]
 8015ca6:	3308      	adds	r3, #8
 8015ca8:	2206      	movs	r2, #6
 8015caa:	6839      	ldr	r1, [r7, #0]
 8015cac:	4618      	mov	r0, r3
 8015cae:	f001 fc25 	bl	80174fc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015cb2:	697b      	ldr	r3, [r7, #20]
 8015cb4:	3312      	adds	r3, #18
 8015cb6:	2206      	movs	r2, #6
 8015cb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015cba:	4618      	mov	r0, r3
 8015cbc:	f001 fc1e 	bl	80174fc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015cc0:	697b      	ldr	r3, [r7, #20]
 8015cc2:	330e      	adds	r3, #14
 8015cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cc6:	6812      	ldr	r2, [r2, #0]
 8015cc8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015cca:	697b      	ldr	r3, [r7, #20]
 8015ccc:	3318      	adds	r3, #24
 8015cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cd0:	6812      	ldr	r2, [r2, #0]
 8015cd2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015cd4:	697b      	ldr	r3, [r7, #20]
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	701a      	strb	r2, [r3, #0]
 8015cda:	2200      	movs	r2, #0
 8015cdc:	f042 0201 	orr.w	r2, r2, #1
 8015ce0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	f042 0208 	orr.w	r2, r2, #8
 8015cea:	709a      	strb	r2, [r3, #2]
 8015cec:	2200      	movs	r2, #0
 8015cee:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015cf0:	697b      	ldr	r3, [r7, #20]
 8015cf2:	2206      	movs	r2, #6
 8015cf4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015cf6:	697b      	ldr	r3, [r7, #20]
 8015cf8:	2204      	movs	r2, #4
 8015cfa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015cfc:	f640 0306 	movw	r3, #2054	; 0x806
 8015d00:	9300      	str	r3, [sp, #0]
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	68ba      	ldr	r2, [r7, #8]
 8015d06:	69b9      	ldr	r1, [r7, #24]
 8015d08:	68f8      	ldr	r0, [r7, #12]
 8015d0a:	f001 fb7b 	bl	8017404 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015d0e:	69b8      	ldr	r0, [r7, #24]
 8015d10:	f7f8 fdb0 	bl	800e874 <pbuf_free>
  p = NULL;
 8015d14:	2300      	movs	r3, #0
 8015d16:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015d18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	3720      	adds	r7, #32
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}
 8015d24:	0801abc8 	.word	0x0801abc8
 8015d28:	0801ad18 	.word	0x0801ad18
 8015d2c:	0801ac40 	.word	0x0801ac40
 8015d30:	0801adc8 	.word	0x0801adc8
 8015d34:	0801adfc 	.word	0x0801adfc

08015d38 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b088      	sub	sp, #32
 8015d3c:	af04      	add	r7, sp, #16
 8015d3e:	60f8      	str	r0, [r7, #12]
 8015d40:	60b9      	str	r1, [r7, #8]
 8015d42:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015d54:	2201      	movs	r2, #1
 8015d56:	9203      	str	r2, [sp, #12]
 8015d58:	68ba      	ldr	r2, [r7, #8]
 8015d5a:	9202      	str	r2, [sp, #8]
 8015d5c:	4a06      	ldr	r2, [pc, #24]	; (8015d78 <etharp_request_dst+0x40>)
 8015d5e:	9201      	str	r2, [sp, #4]
 8015d60:	9300      	str	r3, [sp, #0]
 8015d62:	4603      	mov	r3, r0
 8015d64:	687a      	ldr	r2, [r7, #4]
 8015d66:	68f8      	ldr	r0, [r7, #12]
 8015d68:	f7ff ff5a 	bl	8015c20 <etharp_raw>
 8015d6c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015d6e:	4618      	mov	r0, r3
 8015d70:	3710      	adds	r7, #16
 8015d72:	46bd      	mov	sp, r7
 8015d74:	bd80      	pop	{r7, pc}
 8015d76:	bf00      	nop
 8015d78:	0801b394 	.word	0x0801b394

08015d7c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b082      	sub	sp, #8
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
 8015d84:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015d86:	4a05      	ldr	r2, [pc, #20]	; (8015d9c <etharp_request+0x20>)
 8015d88:	6839      	ldr	r1, [r7, #0]
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f7ff ffd4 	bl	8015d38 <etharp_request_dst>
 8015d90:	4603      	mov	r3, r0
}
 8015d92:	4618      	mov	r0, r3
 8015d94:	3708      	adds	r7, #8
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}
 8015d9a:	bf00      	nop
 8015d9c:	0801b38c 	.word	0x0801b38c

08015da0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b08e      	sub	sp, #56	; 0x38
 8015da4:	af04      	add	r7, sp, #16
 8015da6:	6078      	str	r0, [r7, #4]
 8015da8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015daa:	4b79      	ldr	r3, [pc, #484]	; (8015f90 <icmp_input+0x1f0>)
 8015dac:	689b      	ldr	r3, [r3, #8]
 8015dae:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015db2:	781b      	ldrb	r3, [r3, #0]
 8015db4:	f003 030f 	and.w	r3, r3, #15
 8015db8:	b2db      	uxtb	r3, r3
 8015dba:	009b      	lsls	r3, r3, #2
 8015dbc:	b2db      	uxtb	r3, r3
 8015dbe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015dc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015dc2:	2b13      	cmp	r3, #19
 8015dc4:	f240 80cd 	bls.w	8015f62 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	895b      	ldrh	r3, [r3, #10]
 8015dcc:	2b03      	cmp	r3, #3
 8015dce:	f240 80ca 	bls.w	8015f66 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	781b      	ldrb	r3, [r3, #0]
 8015dd8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015ddc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	f000 80b7 	beq.w	8015f54 <icmp_input+0x1b4>
 8015de6:	2b08      	cmp	r3, #8
 8015de8:	f040 80b7 	bne.w	8015f5a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015dec:	4b69      	ldr	r3, [pc, #420]	; (8015f94 <icmp_input+0x1f4>)
 8015dee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015df0:	4b67      	ldr	r3, [pc, #412]	; (8015f90 <icmp_input+0x1f0>)
 8015df2:	695b      	ldr	r3, [r3, #20]
 8015df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015df8:	2be0      	cmp	r3, #224	; 0xe0
 8015dfa:	f000 80bb 	beq.w	8015f74 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015dfe:	4b64      	ldr	r3, [pc, #400]	; (8015f90 <icmp_input+0x1f0>)
 8015e00:	695b      	ldr	r3, [r3, #20]
 8015e02:	4a63      	ldr	r2, [pc, #396]	; (8015f90 <icmp_input+0x1f0>)
 8015e04:	6812      	ldr	r2, [r2, #0]
 8015e06:	4611      	mov	r1, r2
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f000 fbed 	bl	80165e8 <ip4_addr_isbroadcast_u32>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	f040 80b1 	bne.w	8015f78 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	891b      	ldrh	r3, [r3, #8]
 8015e1a:	2b07      	cmp	r3, #7
 8015e1c:	f240 80a5 	bls.w	8015f6a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015e20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e22:	330e      	adds	r3, #14
 8015e24:	4619      	mov	r1, r3
 8015e26:	6878      	ldr	r0, [r7, #4]
 8015e28:	f7f8 fc8e 	bl	800e748 <pbuf_add_header>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d04b      	beq.n	8015eca <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	891a      	ldrh	r2, [r3, #8]
 8015e36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e38:	4413      	add	r3, r2
 8015e3a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	891b      	ldrh	r3, [r3, #8]
 8015e40:	8b7a      	ldrh	r2, [r7, #26]
 8015e42:	429a      	cmp	r2, r3
 8015e44:	f0c0 809a 	bcc.w	8015f7c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015e48:	8b7b      	ldrh	r3, [r7, #26]
 8015e4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e4e:	4619      	mov	r1, r3
 8015e50:	200e      	movs	r0, #14
 8015e52:	f7f8 fa2b 	bl	800e2ac <pbuf_alloc>
 8015e56:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015e58:	697b      	ldr	r3, [r7, #20]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	f000 8090 	beq.w	8015f80 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015e60:	697b      	ldr	r3, [r7, #20]
 8015e62:	895b      	ldrh	r3, [r3, #10]
 8015e64:	461a      	mov	r2, r3
 8015e66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e68:	3308      	adds	r3, #8
 8015e6a:	429a      	cmp	r2, r3
 8015e6c:	d203      	bcs.n	8015e76 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015e6e:	6978      	ldr	r0, [r7, #20]
 8015e70:	f7f8 fd00 	bl	800e874 <pbuf_free>
          goto icmperr;
 8015e74:	e085      	b.n	8015f82 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015e76:	697b      	ldr	r3, [r7, #20]
 8015e78:	685b      	ldr	r3, [r3, #4]
 8015e7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f001 fb3c 	bl	80174fc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015e84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e86:	4619      	mov	r1, r3
 8015e88:	6978      	ldr	r0, [r7, #20]
 8015e8a:	f7f8 fc6d 	bl	800e768 <pbuf_remove_header>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d009      	beq.n	8015ea8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015e94:	4b40      	ldr	r3, [pc, #256]	; (8015f98 <icmp_input+0x1f8>)
 8015e96:	22b6      	movs	r2, #182	; 0xb6
 8015e98:	4940      	ldr	r1, [pc, #256]	; (8015f9c <icmp_input+0x1fc>)
 8015e9a:	4841      	ldr	r0, [pc, #260]	; (8015fa0 <icmp_input+0x200>)
 8015e9c:	f001 fb44 	bl	8017528 <iprintf>
          pbuf_free(r);
 8015ea0:	6978      	ldr	r0, [r7, #20]
 8015ea2:	f7f8 fce7 	bl	800e874 <pbuf_free>
          goto icmperr;
 8015ea6:	e06c      	b.n	8015f82 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015ea8:	6879      	ldr	r1, [r7, #4]
 8015eaa:	6978      	ldr	r0, [r7, #20]
 8015eac:	f7f8 fe0a 	bl	800eac4 <pbuf_copy>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d003      	beq.n	8015ebe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015eb6:	6978      	ldr	r0, [r7, #20]
 8015eb8:	f7f8 fcdc 	bl	800e874 <pbuf_free>
          goto icmperr;
 8015ebc:	e061      	b.n	8015f82 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015ebe:	6878      	ldr	r0, [r7, #4]
 8015ec0:	f7f8 fcd8 	bl	800e874 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015ec4:	697b      	ldr	r3, [r7, #20]
 8015ec6:	607b      	str	r3, [r7, #4]
 8015ec8:	e00f      	b.n	8015eea <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015eca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ecc:	330e      	adds	r3, #14
 8015ece:	4619      	mov	r1, r3
 8015ed0:	6878      	ldr	r0, [r7, #4]
 8015ed2:	f7f8 fc49 	bl	800e768 <pbuf_remove_header>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d006      	beq.n	8015eea <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015edc:	4b2e      	ldr	r3, [pc, #184]	; (8015f98 <icmp_input+0x1f8>)
 8015ede:	22c7      	movs	r2, #199	; 0xc7
 8015ee0:	4930      	ldr	r1, [pc, #192]	; (8015fa4 <icmp_input+0x204>)
 8015ee2:	482f      	ldr	r0, [pc, #188]	; (8015fa0 <icmp_input+0x200>)
 8015ee4:	f001 fb20 	bl	8017528 <iprintf>
          goto icmperr;
 8015ee8:	e04b      	b.n	8015f82 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	685b      	ldr	r3, [r3, #4]
 8015eee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015ef0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f7f8 fc27 	bl	800e748 <pbuf_add_header>
 8015efa:	4603      	mov	r3, r0
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d12b      	bne.n	8015f58 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	685b      	ldr	r3, [r3, #4]
 8015f04:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015f06:	69fb      	ldr	r3, [r7, #28]
 8015f08:	681a      	ldr	r2, [r3, #0]
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015f0e:	4b20      	ldr	r3, [pc, #128]	; (8015f90 <icmp_input+0x1f0>)
 8015f10:	691a      	ldr	r2, [r3, #16]
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015f16:	693b      	ldr	r3, [r7, #16]
 8015f18:	2200      	movs	r2, #0
 8015f1a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015f1c:	693b      	ldr	r3, [r7, #16]
 8015f1e:	2200      	movs	r2, #0
 8015f20:	709a      	strb	r2, [r3, #2]
 8015f22:	2200      	movs	r2, #0
 8015f24:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	22ff      	movs	r2, #255	; 0xff
 8015f2a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	729a      	strb	r2, [r3, #10]
 8015f32:	2200      	movs	r2, #0
 8015f34:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	9302      	str	r3, [sp, #8]
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	9301      	str	r3, [sp, #4]
 8015f3e:	2300      	movs	r3, #0
 8015f40:	9300      	str	r3, [sp, #0]
 8015f42:	23ff      	movs	r3, #255	; 0xff
 8015f44:	2200      	movs	r2, #0
 8015f46:	69f9      	ldr	r1, [r7, #28]
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f000 fa75 	bl	8016438 <ip4_output_if>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015f52:	e001      	b.n	8015f58 <icmp_input+0x1b8>
      break;
 8015f54:	bf00      	nop
 8015f56:	e000      	b.n	8015f5a <icmp_input+0x1ba>
      break;
 8015f58:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f7f8 fc8a 	bl	800e874 <pbuf_free>
  return;
 8015f60:	e013      	b.n	8015f8a <icmp_input+0x1ea>
    goto lenerr;
 8015f62:	bf00      	nop
 8015f64:	e002      	b.n	8015f6c <icmp_input+0x1cc>
    goto lenerr;
 8015f66:	bf00      	nop
 8015f68:	e000      	b.n	8015f6c <icmp_input+0x1cc>
        goto lenerr;
 8015f6a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015f6c:	6878      	ldr	r0, [r7, #4]
 8015f6e:	f7f8 fc81 	bl	800e874 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015f72:	e00a      	b.n	8015f8a <icmp_input+0x1ea>
        goto icmperr;
 8015f74:	bf00      	nop
 8015f76:	e004      	b.n	8015f82 <icmp_input+0x1e2>
        goto icmperr;
 8015f78:	bf00      	nop
 8015f7a:	e002      	b.n	8015f82 <icmp_input+0x1e2>
          goto icmperr;
 8015f7c:	bf00      	nop
 8015f7e:	e000      	b.n	8015f82 <icmp_input+0x1e2>
          goto icmperr;
 8015f80:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015f82:	6878      	ldr	r0, [r7, #4]
 8015f84:	f7f8 fc76 	bl	800e874 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015f88:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015f8a:	3728      	adds	r7, #40	; 0x28
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}
 8015f90:	2000619c 	.word	0x2000619c
 8015f94:	200061b0 	.word	0x200061b0
 8015f98:	0801ae40 	.word	0x0801ae40
 8015f9c:	0801ae78 	.word	0x0801ae78
 8015fa0:	0801aeb0 	.word	0x0801aeb0
 8015fa4:	0801aed8 	.word	0x0801aed8

08015fa8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b082      	sub	sp, #8
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	460b      	mov	r3, r1
 8015fb2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015fb4:	78fb      	ldrb	r3, [r7, #3]
 8015fb6:	461a      	mov	r2, r3
 8015fb8:	2103      	movs	r1, #3
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	f000 f814 	bl	8015fe8 <icmp_send_response>
}
 8015fc0:	bf00      	nop
 8015fc2:	3708      	adds	r7, #8
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd80      	pop	{r7, pc}

08015fc8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b082      	sub	sp, #8
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
 8015fd0:	460b      	mov	r3, r1
 8015fd2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015fd4:	78fb      	ldrb	r3, [r7, #3]
 8015fd6:	461a      	mov	r2, r3
 8015fd8:	210b      	movs	r1, #11
 8015fda:	6878      	ldr	r0, [r7, #4]
 8015fdc:	f000 f804 	bl	8015fe8 <icmp_send_response>
}
 8015fe0:	bf00      	nop
 8015fe2:	3708      	adds	r7, #8
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bd80      	pop	{r7, pc}

08015fe8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b08c      	sub	sp, #48	; 0x30
 8015fec:	af04      	add	r7, sp, #16
 8015fee:	6078      	str	r0, [r7, #4]
 8015ff0:	460b      	mov	r3, r1
 8015ff2:	70fb      	strb	r3, [r7, #3]
 8015ff4:	4613      	mov	r3, r2
 8015ff6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015ff8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ffc:	2124      	movs	r1, #36	; 0x24
 8015ffe:	2022      	movs	r0, #34	; 0x22
 8016000:	f7f8 f954 	bl	800e2ac <pbuf_alloc>
 8016004:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016006:	69fb      	ldr	r3, [r7, #28]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d04c      	beq.n	80160a6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801600c:	69fb      	ldr	r3, [r7, #28]
 801600e:	895b      	ldrh	r3, [r3, #10]
 8016010:	2b23      	cmp	r3, #35	; 0x23
 8016012:	d806      	bhi.n	8016022 <icmp_send_response+0x3a>
 8016014:	4b26      	ldr	r3, [pc, #152]	; (80160b0 <icmp_send_response+0xc8>)
 8016016:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801601a:	4926      	ldr	r1, [pc, #152]	; (80160b4 <icmp_send_response+0xcc>)
 801601c:	4826      	ldr	r0, [pc, #152]	; (80160b8 <icmp_send_response+0xd0>)
 801601e:	f001 fa83 	bl	8017528 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	685b      	ldr	r3, [r3, #4]
 8016026:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016028:	69fb      	ldr	r3, [r7, #28]
 801602a:	685b      	ldr	r3, [r3, #4]
 801602c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801602e:	697b      	ldr	r3, [r7, #20]
 8016030:	78fa      	ldrb	r2, [r7, #3]
 8016032:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016034:	697b      	ldr	r3, [r7, #20]
 8016036:	78ba      	ldrb	r2, [r7, #2]
 8016038:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801603a:	697b      	ldr	r3, [r7, #20]
 801603c:	2200      	movs	r2, #0
 801603e:	711a      	strb	r2, [r3, #4]
 8016040:	2200      	movs	r2, #0
 8016042:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016044:	697b      	ldr	r3, [r7, #20]
 8016046:	2200      	movs	r2, #0
 8016048:	719a      	strb	r2, [r3, #6]
 801604a:	2200      	movs	r2, #0
 801604c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801604e:	69fb      	ldr	r3, [r7, #28]
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	f103 0008 	add.w	r0, r3, #8
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	221c      	movs	r2, #28
 801605c:	4619      	mov	r1, r3
 801605e:	f001 fa4d 	bl	80174fc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016062:	69bb      	ldr	r3, [r7, #24]
 8016064:	68db      	ldr	r3, [r3, #12]
 8016066:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016068:	f107 030c 	add.w	r3, r7, #12
 801606c:	4618      	mov	r0, r3
 801606e:	f000 f825 	bl	80160bc <ip4_route>
 8016072:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016074:	693b      	ldr	r3, [r7, #16]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d011      	beq.n	801609e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801607a:	697b      	ldr	r3, [r7, #20]
 801607c:	2200      	movs	r2, #0
 801607e:	709a      	strb	r2, [r3, #2]
 8016080:	2200      	movs	r2, #0
 8016082:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016084:	f107 020c 	add.w	r2, r7, #12
 8016088:	693b      	ldr	r3, [r7, #16]
 801608a:	9302      	str	r3, [sp, #8]
 801608c:	2301      	movs	r3, #1
 801608e:	9301      	str	r3, [sp, #4]
 8016090:	2300      	movs	r3, #0
 8016092:	9300      	str	r3, [sp, #0]
 8016094:	23ff      	movs	r3, #255	; 0xff
 8016096:	2100      	movs	r1, #0
 8016098:	69f8      	ldr	r0, [r7, #28]
 801609a:	f000 f9cd 	bl	8016438 <ip4_output_if>
  }
  pbuf_free(q);
 801609e:	69f8      	ldr	r0, [r7, #28]
 80160a0:	f7f8 fbe8 	bl	800e874 <pbuf_free>
 80160a4:	e000      	b.n	80160a8 <icmp_send_response+0xc0>
    return;
 80160a6:	bf00      	nop
}
 80160a8:	3720      	adds	r7, #32
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd80      	pop	{r7, pc}
 80160ae:	bf00      	nop
 80160b0:	0801ae40 	.word	0x0801ae40
 80160b4:	0801af0c 	.word	0x0801af0c
 80160b8:	0801aeb0 	.word	0x0801aeb0

080160bc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80160bc:	b480      	push	{r7}
 80160be:	b085      	sub	sp, #20
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80160c4:	4b33      	ldr	r3, [pc, #204]	; (8016194 <ip4_route+0xd8>)
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	60fb      	str	r3, [r7, #12]
 80160ca:	e036      	b.n	801613a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80160d2:	f003 0301 	and.w	r3, r3, #1
 80160d6:	b2db      	uxtb	r3, r3
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d02b      	beq.n	8016134 <ip4_route+0x78>
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80160e2:	089b      	lsrs	r3, r3, #2
 80160e4:	f003 0301 	and.w	r3, r3, #1
 80160e8:	b2db      	uxtb	r3, r3
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d022      	beq.n	8016134 <ip4_route+0x78>
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	3304      	adds	r3, #4
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d01d      	beq.n	8016134 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	681a      	ldr	r2, [r3, #0]
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	3304      	adds	r3, #4
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	405a      	eors	r2, r3
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	3308      	adds	r3, #8
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	4013      	ands	r3, r2
 801610c:	2b00      	cmp	r3, #0
 801610e:	d101      	bne.n	8016114 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	e038      	b.n	8016186 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801611a:	f003 0302 	and.w	r3, r3, #2
 801611e:	2b00      	cmp	r3, #0
 8016120:	d108      	bne.n	8016134 <ip4_route+0x78>
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681a      	ldr	r2, [r3, #0]
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	330c      	adds	r3, #12
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	429a      	cmp	r2, r3
 801612e:	d101      	bne.n	8016134 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	e028      	b.n	8016186 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	60fb      	str	r3, [r7, #12]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d1c5      	bne.n	80160cc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016140:	4b15      	ldr	r3, [pc, #84]	; (8016198 <ip4_route+0xdc>)
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d01a      	beq.n	801617e <ip4_route+0xc2>
 8016148:	4b13      	ldr	r3, [pc, #76]	; (8016198 <ip4_route+0xdc>)
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016150:	f003 0301 	and.w	r3, r3, #1
 8016154:	2b00      	cmp	r3, #0
 8016156:	d012      	beq.n	801617e <ip4_route+0xc2>
 8016158:	4b0f      	ldr	r3, [pc, #60]	; (8016198 <ip4_route+0xdc>)
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016160:	f003 0304 	and.w	r3, r3, #4
 8016164:	2b00      	cmp	r3, #0
 8016166:	d00a      	beq.n	801617e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016168:	4b0b      	ldr	r3, [pc, #44]	; (8016198 <ip4_route+0xdc>)
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	3304      	adds	r3, #4
 801616e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016170:	2b00      	cmp	r3, #0
 8016172:	d004      	beq.n	801617e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	b2db      	uxtb	r3, r3
 801617a:	2b7f      	cmp	r3, #127	; 0x7f
 801617c:	d101      	bne.n	8016182 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801617e:	2300      	movs	r3, #0
 8016180:	e001      	b.n	8016186 <ip4_route+0xca>
  }

  return netif_default;
 8016182:	4b05      	ldr	r3, [pc, #20]	; (8016198 <ip4_route+0xdc>)
 8016184:	681b      	ldr	r3, [r3, #0]
}
 8016186:	4618      	mov	r0, r3
 8016188:	3714      	adds	r7, #20
 801618a:	46bd      	mov	sp, r7
 801618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016190:	4770      	bx	lr
 8016192:	bf00      	nop
 8016194:	20009700 	.word	0x20009700
 8016198:	20009704 	.word	0x20009704

0801619c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b082      	sub	sp, #8
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161aa:	f003 0301 	and.w	r3, r3, #1
 80161ae:	b2db      	uxtb	r3, r3
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d016      	beq.n	80161e2 <ip4_input_accept+0x46>
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	3304      	adds	r3, #4
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d011      	beq.n	80161e2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80161be:	4b0b      	ldr	r3, [pc, #44]	; (80161ec <ip4_input_accept+0x50>)
 80161c0:	695a      	ldr	r2, [r3, #20]
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	3304      	adds	r3, #4
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	429a      	cmp	r2, r3
 80161ca:	d008      	beq.n	80161de <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80161cc:	4b07      	ldr	r3, [pc, #28]	; (80161ec <ip4_input_accept+0x50>)
 80161ce:	695b      	ldr	r3, [r3, #20]
 80161d0:	6879      	ldr	r1, [r7, #4]
 80161d2:	4618      	mov	r0, r3
 80161d4:	f000 fa08 	bl	80165e8 <ip4_addr_isbroadcast_u32>
 80161d8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d001      	beq.n	80161e2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80161de:	2301      	movs	r3, #1
 80161e0:	e000      	b.n	80161e4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80161e2:	2300      	movs	r3, #0
}
 80161e4:	4618      	mov	r0, r3
 80161e6:	3708      	adds	r7, #8
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd80      	pop	{r7, pc}
 80161ec:	2000619c 	.word	0x2000619c

080161f0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b086      	sub	sp, #24
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	685b      	ldr	r3, [r3, #4]
 80161fe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	781b      	ldrb	r3, [r3, #0]
 8016204:	091b      	lsrs	r3, r3, #4
 8016206:	b2db      	uxtb	r3, r3
 8016208:	2b04      	cmp	r3, #4
 801620a:	d004      	beq.n	8016216 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801620c:	6878      	ldr	r0, [r7, #4]
 801620e:	f7f8 fb31 	bl	800e874 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016212:	2300      	movs	r3, #0
 8016214:	e107      	b.n	8016426 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016216:	697b      	ldr	r3, [r7, #20]
 8016218:	781b      	ldrb	r3, [r3, #0]
 801621a:	f003 030f 	and.w	r3, r3, #15
 801621e:	b2db      	uxtb	r3, r3
 8016220:	009b      	lsls	r3, r3, #2
 8016222:	b2db      	uxtb	r3, r3
 8016224:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016226:	697b      	ldr	r3, [r7, #20]
 8016228:	885b      	ldrh	r3, [r3, #2]
 801622a:	b29b      	uxth	r3, r3
 801622c:	4618      	mov	r0, r3
 801622e:	f7f6 ffc3 	bl	800d1b8 <lwip_htons>
 8016232:	4603      	mov	r3, r0
 8016234:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	891b      	ldrh	r3, [r3, #8]
 801623a:	89ba      	ldrh	r2, [r7, #12]
 801623c:	429a      	cmp	r2, r3
 801623e:	d204      	bcs.n	801624a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016240:	89bb      	ldrh	r3, [r7, #12]
 8016242:	4619      	mov	r1, r3
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	f7f8 f98f 	bl	800e568 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	895b      	ldrh	r3, [r3, #10]
 801624e:	89fa      	ldrh	r2, [r7, #14]
 8016250:	429a      	cmp	r2, r3
 8016252:	d807      	bhi.n	8016264 <ip4_input+0x74>
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	891b      	ldrh	r3, [r3, #8]
 8016258:	89ba      	ldrh	r2, [r7, #12]
 801625a:	429a      	cmp	r2, r3
 801625c:	d802      	bhi.n	8016264 <ip4_input+0x74>
 801625e:	89fb      	ldrh	r3, [r7, #14]
 8016260:	2b13      	cmp	r3, #19
 8016262:	d804      	bhi.n	801626e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f7f8 fb05 	bl	800e874 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801626a:	2300      	movs	r3, #0
 801626c:	e0db      	b.n	8016426 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801626e:	697b      	ldr	r3, [r7, #20]
 8016270:	691b      	ldr	r3, [r3, #16]
 8016272:	4a6f      	ldr	r2, [pc, #444]	; (8016430 <ip4_input+0x240>)
 8016274:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016276:	697b      	ldr	r3, [r7, #20]
 8016278:	68db      	ldr	r3, [r3, #12]
 801627a:	4a6d      	ldr	r2, [pc, #436]	; (8016430 <ip4_input+0x240>)
 801627c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801627e:	4b6c      	ldr	r3, [pc, #432]	; (8016430 <ip4_input+0x240>)
 8016280:	695b      	ldr	r3, [r3, #20]
 8016282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016286:	2be0      	cmp	r3, #224	; 0xe0
 8016288:	d112      	bne.n	80162b0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016290:	f003 0301 	and.w	r3, r3, #1
 8016294:	b2db      	uxtb	r3, r3
 8016296:	2b00      	cmp	r3, #0
 8016298:	d007      	beq.n	80162aa <ip4_input+0xba>
 801629a:	683b      	ldr	r3, [r7, #0]
 801629c:	3304      	adds	r3, #4
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d002      	beq.n	80162aa <ip4_input+0xba>
      netif = inp;
 80162a4:	683b      	ldr	r3, [r7, #0]
 80162a6:	613b      	str	r3, [r7, #16]
 80162a8:	e02a      	b.n	8016300 <ip4_input+0x110>
    } else {
      netif = NULL;
 80162aa:	2300      	movs	r3, #0
 80162ac:	613b      	str	r3, [r7, #16]
 80162ae:	e027      	b.n	8016300 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80162b0:	6838      	ldr	r0, [r7, #0]
 80162b2:	f7ff ff73 	bl	801619c <ip4_input_accept>
 80162b6:	4603      	mov	r3, r0
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d002      	beq.n	80162c2 <ip4_input+0xd2>
      netif = inp;
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	613b      	str	r3, [r7, #16]
 80162c0:	e01e      	b.n	8016300 <ip4_input+0x110>
    } else {
      netif = NULL;
 80162c2:	2300      	movs	r3, #0
 80162c4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80162c6:	4b5a      	ldr	r3, [pc, #360]	; (8016430 <ip4_input+0x240>)
 80162c8:	695b      	ldr	r3, [r3, #20]
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	2b7f      	cmp	r3, #127	; 0x7f
 80162ce:	d017      	beq.n	8016300 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80162d0:	4b58      	ldr	r3, [pc, #352]	; (8016434 <ip4_input+0x244>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	613b      	str	r3, [r7, #16]
 80162d6:	e00e      	b.n	80162f6 <ip4_input+0x106>
          if (netif == inp) {
 80162d8:	693a      	ldr	r2, [r7, #16]
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	429a      	cmp	r2, r3
 80162de:	d006      	beq.n	80162ee <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80162e0:	6938      	ldr	r0, [r7, #16]
 80162e2:	f7ff ff5b 	bl	801619c <ip4_input_accept>
 80162e6:	4603      	mov	r3, r0
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d108      	bne.n	80162fe <ip4_input+0x10e>
 80162ec:	e000      	b.n	80162f0 <ip4_input+0x100>
            continue;
 80162ee:	bf00      	nop
        NETIF_FOREACH(netif) {
 80162f0:	693b      	ldr	r3, [r7, #16]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	613b      	str	r3, [r7, #16]
 80162f6:	693b      	ldr	r3, [r7, #16]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d1ed      	bne.n	80162d8 <ip4_input+0xe8>
 80162fc:	e000      	b.n	8016300 <ip4_input+0x110>
            break;
 80162fe:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016300:	4b4b      	ldr	r3, [pc, #300]	; (8016430 <ip4_input+0x240>)
 8016302:	691b      	ldr	r3, [r3, #16]
 8016304:	6839      	ldr	r1, [r7, #0]
 8016306:	4618      	mov	r0, r3
 8016308:	f000 f96e 	bl	80165e8 <ip4_addr_isbroadcast_u32>
 801630c:	4603      	mov	r3, r0
 801630e:	2b00      	cmp	r3, #0
 8016310:	d105      	bne.n	801631e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016312:	4b47      	ldr	r3, [pc, #284]	; (8016430 <ip4_input+0x240>)
 8016314:	691b      	ldr	r3, [r3, #16]
 8016316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801631a:	2be0      	cmp	r3, #224	; 0xe0
 801631c:	d104      	bne.n	8016328 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f7f8 faa8 	bl	800e874 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016324:	2300      	movs	r3, #0
 8016326:	e07e      	b.n	8016426 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016328:	693b      	ldr	r3, [r7, #16]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d104      	bne.n	8016338 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f7f8 faa0 	bl	800e874 <pbuf_free>
    return ERR_OK;
 8016334:	2300      	movs	r3, #0
 8016336:	e076      	b.n	8016426 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016338:	697b      	ldr	r3, [r7, #20]
 801633a:	88db      	ldrh	r3, [r3, #6]
 801633c:	b29b      	uxth	r3, r3
 801633e:	461a      	mov	r2, r3
 8016340:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016344:	4013      	ands	r3, r2
 8016346:	2b00      	cmp	r3, #0
 8016348:	d00b      	beq.n	8016362 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801634a:	6878      	ldr	r0, [r7, #4]
 801634c:	f000 fc92 	bl	8016c74 <ip4_reass>
 8016350:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d101      	bne.n	801635c <ip4_input+0x16c>
      return ERR_OK;
 8016358:	2300      	movs	r3, #0
 801635a:	e064      	b.n	8016426 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	685b      	ldr	r3, [r3, #4]
 8016360:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016362:	4a33      	ldr	r2, [pc, #204]	; (8016430 <ip4_input+0x240>)
 8016364:	693b      	ldr	r3, [r7, #16]
 8016366:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016368:	4a31      	ldr	r2, [pc, #196]	; (8016430 <ip4_input+0x240>)
 801636a:	683b      	ldr	r3, [r7, #0]
 801636c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801636e:	4a30      	ldr	r2, [pc, #192]	; (8016430 <ip4_input+0x240>)
 8016370:	697b      	ldr	r3, [r7, #20]
 8016372:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016374:	697b      	ldr	r3, [r7, #20]
 8016376:	781b      	ldrb	r3, [r3, #0]
 8016378:	f003 030f 	and.w	r3, r3, #15
 801637c:	b2db      	uxtb	r3, r3
 801637e:	009b      	lsls	r3, r3, #2
 8016380:	b2db      	uxtb	r3, r3
 8016382:	b29a      	uxth	r2, r3
 8016384:	4b2a      	ldr	r3, [pc, #168]	; (8016430 <ip4_input+0x240>)
 8016386:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016388:	89fb      	ldrh	r3, [r7, #14]
 801638a:	4619      	mov	r1, r3
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	f7f8 f9eb 	bl	800e768 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016392:	697b      	ldr	r3, [r7, #20]
 8016394:	7a5b      	ldrb	r3, [r3, #9]
 8016396:	2b11      	cmp	r3, #17
 8016398:	d006      	beq.n	80163a8 <ip4_input+0x1b8>
 801639a:	2b11      	cmp	r3, #17
 801639c:	dc13      	bgt.n	80163c6 <ip4_input+0x1d6>
 801639e:	2b01      	cmp	r3, #1
 80163a0:	d00c      	beq.n	80163bc <ip4_input+0x1cc>
 80163a2:	2b06      	cmp	r3, #6
 80163a4:	d005      	beq.n	80163b2 <ip4_input+0x1c2>
 80163a6:	e00e      	b.n	80163c6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80163a8:	6839      	ldr	r1, [r7, #0]
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	f7fe f8e6 	bl	801457c <udp_input>
        break;
 80163b0:	e026      	b.n	8016400 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80163b2:	6839      	ldr	r1, [r7, #0]
 80163b4:	6878      	ldr	r0, [r7, #4]
 80163b6:	f7fa f927 	bl	8010608 <tcp_input>
        break;
 80163ba:	e021      	b.n	8016400 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80163bc:	6839      	ldr	r1, [r7, #0]
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f7ff fcee 	bl	8015da0 <icmp_input>
        break;
 80163c4:	e01c      	b.n	8016400 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80163c6:	4b1a      	ldr	r3, [pc, #104]	; (8016430 <ip4_input+0x240>)
 80163c8:	695b      	ldr	r3, [r3, #20]
 80163ca:	6939      	ldr	r1, [r7, #16]
 80163cc:	4618      	mov	r0, r3
 80163ce:	f000 f90b 	bl	80165e8 <ip4_addr_isbroadcast_u32>
 80163d2:	4603      	mov	r3, r0
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d10f      	bne.n	80163f8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80163d8:	4b15      	ldr	r3, [pc, #84]	; (8016430 <ip4_input+0x240>)
 80163da:	695b      	ldr	r3, [r3, #20]
 80163dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80163e0:	2be0      	cmp	r3, #224	; 0xe0
 80163e2:	d009      	beq.n	80163f8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80163e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80163e8:	4619      	mov	r1, r3
 80163ea:	6878      	ldr	r0, [r7, #4]
 80163ec:	f7f8 fa2f 	bl	800e84e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80163f0:	2102      	movs	r1, #2
 80163f2:	6878      	ldr	r0, [r7, #4]
 80163f4:	f7ff fdd8 	bl	8015fa8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	f7f8 fa3b 	bl	800e874 <pbuf_free>
        break;
 80163fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016400:	4b0b      	ldr	r3, [pc, #44]	; (8016430 <ip4_input+0x240>)
 8016402:	2200      	movs	r2, #0
 8016404:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016406:	4b0a      	ldr	r3, [pc, #40]	; (8016430 <ip4_input+0x240>)
 8016408:	2200      	movs	r2, #0
 801640a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801640c:	4b08      	ldr	r3, [pc, #32]	; (8016430 <ip4_input+0x240>)
 801640e:	2200      	movs	r2, #0
 8016410:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016412:	4b07      	ldr	r3, [pc, #28]	; (8016430 <ip4_input+0x240>)
 8016414:	2200      	movs	r2, #0
 8016416:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016418:	4b05      	ldr	r3, [pc, #20]	; (8016430 <ip4_input+0x240>)
 801641a:	2200      	movs	r2, #0
 801641c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801641e:	4b04      	ldr	r3, [pc, #16]	; (8016430 <ip4_input+0x240>)
 8016420:	2200      	movs	r2, #0
 8016422:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016424:	2300      	movs	r3, #0
}
 8016426:	4618      	mov	r0, r3
 8016428:	3718      	adds	r7, #24
 801642a:	46bd      	mov	sp, r7
 801642c:	bd80      	pop	{r7, pc}
 801642e:	bf00      	nop
 8016430:	2000619c 	.word	0x2000619c
 8016434:	20009700 	.word	0x20009700

08016438 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b08a      	sub	sp, #40	; 0x28
 801643c:	af04      	add	r7, sp, #16
 801643e:	60f8      	str	r0, [r7, #12]
 8016440:	60b9      	str	r1, [r7, #8]
 8016442:	607a      	str	r2, [r7, #4]
 8016444:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016446:	68bb      	ldr	r3, [r7, #8]
 8016448:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d009      	beq.n	8016464 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016450:	68bb      	ldr	r3, [r7, #8]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d003      	beq.n	801645e <ip4_output_if+0x26>
 8016456:	68bb      	ldr	r3, [r7, #8]
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d102      	bne.n	8016464 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016460:	3304      	adds	r3, #4
 8016462:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016464:	78fa      	ldrb	r2, [r7, #3]
 8016466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016468:	9302      	str	r3, [sp, #8]
 801646a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801646e:	9301      	str	r3, [sp, #4]
 8016470:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016474:	9300      	str	r3, [sp, #0]
 8016476:	4613      	mov	r3, r2
 8016478:	687a      	ldr	r2, [r7, #4]
 801647a:	6979      	ldr	r1, [r7, #20]
 801647c:	68f8      	ldr	r0, [r7, #12]
 801647e:	f000 f805 	bl	801648c <ip4_output_if_src>
 8016482:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016484:	4618      	mov	r0, r3
 8016486:	3718      	adds	r7, #24
 8016488:	46bd      	mov	sp, r7
 801648a:	bd80      	pop	{r7, pc}

0801648c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b088      	sub	sp, #32
 8016490:	af00      	add	r7, sp, #0
 8016492:	60f8      	str	r0, [r7, #12]
 8016494:	60b9      	str	r1, [r7, #8]
 8016496:	607a      	str	r2, [r7, #4]
 8016498:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	7b9b      	ldrb	r3, [r3, #14]
 801649e:	2b01      	cmp	r3, #1
 80164a0:	d006      	beq.n	80164b0 <ip4_output_if_src+0x24>
 80164a2:	4b4b      	ldr	r3, [pc, #300]	; (80165d0 <ip4_output_if_src+0x144>)
 80164a4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80164a8:	494a      	ldr	r1, [pc, #296]	; (80165d4 <ip4_output_if_src+0x148>)
 80164aa:	484b      	ldr	r0, [pc, #300]	; (80165d8 <ip4_output_if_src+0x14c>)
 80164ac:	f001 f83c 	bl	8017528 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d060      	beq.n	8016578 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80164b6:	2314      	movs	r3, #20
 80164b8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80164ba:	2114      	movs	r1, #20
 80164bc:	68f8      	ldr	r0, [r7, #12]
 80164be:	f7f8 f943 	bl	800e748 <pbuf_add_header>
 80164c2:	4603      	mov	r3, r0
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d002      	beq.n	80164ce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80164c8:	f06f 0301 	mvn.w	r3, #1
 80164cc:	e07c      	b.n	80165c8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	895b      	ldrh	r3, [r3, #10]
 80164d8:	2b13      	cmp	r3, #19
 80164da:	d806      	bhi.n	80164ea <ip4_output_if_src+0x5e>
 80164dc:	4b3c      	ldr	r3, [pc, #240]	; (80165d0 <ip4_output_if_src+0x144>)
 80164de:	f44f 7262 	mov.w	r2, #904	; 0x388
 80164e2:	493e      	ldr	r1, [pc, #248]	; (80165dc <ip4_output_if_src+0x150>)
 80164e4:	483c      	ldr	r0, [pc, #240]	; (80165d8 <ip4_output_if_src+0x14c>)
 80164e6:	f001 f81f 	bl	8017528 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80164ea:	69fb      	ldr	r3, [r7, #28]
 80164ec:	78fa      	ldrb	r2, [r7, #3]
 80164ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80164f0:	69fb      	ldr	r3, [r7, #28]
 80164f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80164f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	681a      	ldr	r2, [r3, #0]
 80164fc:	69fb      	ldr	r3, [r7, #28]
 80164fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016500:	8b7b      	ldrh	r3, [r7, #26]
 8016502:	089b      	lsrs	r3, r3, #2
 8016504:	b29b      	uxth	r3, r3
 8016506:	b2db      	uxtb	r3, r3
 8016508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801650c:	b2da      	uxtb	r2, r3
 801650e:	69fb      	ldr	r3, [r7, #28]
 8016510:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016512:	69fb      	ldr	r3, [r7, #28]
 8016514:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016518:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	891b      	ldrh	r3, [r3, #8]
 801651e:	4618      	mov	r0, r3
 8016520:	f7f6 fe4a 	bl	800d1b8 <lwip_htons>
 8016524:	4603      	mov	r3, r0
 8016526:	461a      	mov	r2, r3
 8016528:	69fb      	ldr	r3, [r7, #28]
 801652a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801652c:	69fb      	ldr	r3, [r7, #28]
 801652e:	2200      	movs	r2, #0
 8016530:	719a      	strb	r2, [r3, #6]
 8016532:	2200      	movs	r2, #0
 8016534:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016536:	4b2a      	ldr	r3, [pc, #168]	; (80165e0 <ip4_output_if_src+0x154>)
 8016538:	881b      	ldrh	r3, [r3, #0]
 801653a:	4618      	mov	r0, r3
 801653c:	f7f6 fe3c 	bl	800d1b8 <lwip_htons>
 8016540:	4603      	mov	r3, r0
 8016542:	461a      	mov	r2, r3
 8016544:	69fb      	ldr	r3, [r7, #28]
 8016546:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016548:	4b25      	ldr	r3, [pc, #148]	; (80165e0 <ip4_output_if_src+0x154>)
 801654a:	881b      	ldrh	r3, [r3, #0]
 801654c:	3301      	adds	r3, #1
 801654e:	b29a      	uxth	r2, r3
 8016550:	4b23      	ldr	r3, [pc, #140]	; (80165e0 <ip4_output_if_src+0x154>)
 8016552:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d104      	bne.n	8016564 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801655a:	4b22      	ldr	r3, [pc, #136]	; (80165e4 <ip4_output_if_src+0x158>)
 801655c:	681a      	ldr	r2, [r3, #0]
 801655e:	69fb      	ldr	r3, [r7, #28]
 8016560:	60da      	str	r2, [r3, #12]
 8016562:	e003      	b.n	801656c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016564:	68bb      	ldr	r3, [r7, #8]
 8016566:	681a      	ldr	r2, [r3, #0]
 8016568:	69fb      	ldr	r3, [r7, #28]
 801656a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801656c:	69fb      	ldr	r3, [r7, #28]
 801656e:	2200      	movs	r2, #0
 8016570:	729a      	strb	r2, [r3, #10]
 8016572:	2200      	movs	r2, #0
 8016574:	72da      	strb	r2, [r3, #11]
 8016576:	e00f      	b.n	8016598 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	895b      	ldrh	r3, [r3, #10]
 801657c:	2b13      	cmp	r3, #19
 801657e:	d802      	bhi.n	8016586 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016580:	f06f 0301 	mvn.w	r3, #1
 8016584:	e020      	b.n	80165c8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801658c:	69fb      	ldr	r3, [r7, #28]
 801658e:	691b      	ldr	r3, [r3, #16]
 8016590:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016592:	f107 0314 	add.w	r3, r7, #20
 8016596:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801659a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801659c:	2b00      	cmp	r3, #0
 801659e:	d00c      	beq.n	80165ba <ip4_output_if_src+0x12e>
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	891a      	ldrh	r2, [r3, #8]
 80165a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80165a8:	429a      	cmp	r2, r3
 80165aa:	d906      	bls.n	80165ba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80165ac:	687a      	ldr	r2, [r7, #4]
 80165ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80165b0:	68f8      	ldr	r0, [r7, #12]
 80165b2:	f000 fd53 	bl	801705c <ip4_frag>
 80165b6:	4603      	mov	r3, r0
 80165b8:	e006      	b.n	80165c8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80165ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165bc:	695b      	ldr	r3, [r3, #20]
 80165be:	687a      	ldr	r2, [r7, #4]
 80165c0:	68f9      	ldr	r1, [r7, #12]
 80165c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80165c4:	4798      	blx	r3
 80165c6:	4603      	mov	r3, r0
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	3720      	adds	r7, #32
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}
 80165d0:	0801af38 	.word	0x0801af38
 80165d4:	0801af6c 	.word	0x0801af6c
 80165d8:	0801af78 	.word	0x0801af78
 80165dc:	0801afa0 	.word	0x0801afa0
 80165e0:	2000985e 	.word	0x2000985e
 80165e4:	0801b388 	.word	0x0801b388

080165e8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80165e8:	b480      	push	{r7}
 80165ea:	b085      	sub	sp, #20
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
 80165f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80165fc:	d002      	beq.n	8016604 <ip4_addr_isbroadcast_u32+0x1c>
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d101      	bne.n	8016608 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016604:	2301      	movs	r3, #1
 8016606:	e02a      	b.n	801665e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801660e:	f003 0302 	and.w	r3, r3, #2
 8016612:	2b00      	cmp	r3, #0
 8016614:	d101      	bne.n	801661a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016616:	2300      	movs	r3, #0
 8016618:	e021      	b.n	801665e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	3304      	adds	r3, #4
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	687a      	ldr	r2, [r7, #4]
 8016622:	429a      	cmp	r2, r3
 8016624:	d101      	bne.n	801662a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016626:	2300      	movs	r3, #0
 8016628:	e019      	b.n	801665e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801662a:	68fa      	ldr	r2, [r7, #12]
 801662c:	683b      	ldr	r3, [r7, #0]
 801662e:	3304      	adds	r3, #4
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	405a      	eors	r2, r3
 8016634:	683b      	ldr	r3, [r7, #0]
 8016636:	3308      	adds	r3, #8
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	4013      	ands	r3, r2
 801663c:	2b00      	cmp	r3, #0
 801663e:	d10d      	bne.n	801665c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016640:	683b      	ldr	r3, [r7, #0]
 8016642:	3308      	adds	r3, #8
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	43da      	mvns	r2, r3
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801664c:	683b      	ldr	r3, [r7, #0]
 801664e:	3308      	adds	r3, #8
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016654:	429a      	cmp	r2, r3
 8016656:	d101      	bne.n	801665c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016658:	2301      	movs	r3, #1
 801665a:	e000      	b.n	801665e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801665c:	2300      	movs	r3, #0
  }
}
 801665e:	4618      	mov	r0, r3
 8016660:	3714      	adds	r7, #20
 8016662:	46bd      	mov	sp, r7
 8016664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016668:	4770      	bx	lr
	...

0801666c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b084      	sub	sp, #16
 8016670:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016672:	2300      	movs	r3, #0
 8016674:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016676:	4b12      	ldr	r3, [pc, #72]	; (80166c0 <ip_reass_tmr+0x54>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801667c:	e018      	b.n	80166b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	7fdb      	ldrb	r3, [r3, #31]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d00b      	beq.n	801669e <ip_reass_tmr+0x32>
      r->timer--;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	7fdb      	ldrb	r3, [r3, #31]
 801668a:	3b01      	subs	r3, #1
 801668c:	b2da      	uxtb	r2, r3
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	60fb      	str	r3, [r7, #12]
 801669c:	e008      	b.n	80166b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80166a8:	68b9      	ldr	r1, [r7, #8]
 80166aa:	6878      	ldr	r0, [r7, #4]
 80166ac:	f000 f80a 	bl	80166c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d1e3      	bne.n	801667e <ip_reass_tmr+0x12>
    }
  }
}
 80166b6:	bf00      	nop
 80166b8:	bf00      	nop
 80166ba:	3710      	adds	r7, #16
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}
 80166c0:	20009860 	.word	0x20009860

080166c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b088      	sub	sp, #32
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
 80166cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80166ce:	2300      	movs	r3, #0
 80166d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80166d2:	683a      	ldr	r2, [r7, #0]
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d105      	bne.n	80166e6 <ip_reass_free_complete_datagram+0x22>
 80166da:	4b45      	ldr	r3, [pc, #276]	; (80167f0 <ip_reass_free_complete_datagram+0x12c>)
 80166dc:	22ab      	movs	r2, #171	; 0xab
 80166de:	4945      	ldr	r1, [pc, #276]	; (80167f4 <ip_reass_free_complete_datagram+0x130>)
 80166e0:	4845      	ldr	r0, [pc, #276]	; (80167f8 <ip_reass_free_complete_datagram+0x134>)
 80166e2:	f000 ff21 	bl	8017528 <iprintf>
  if (prev != NULL) {
 80166e6:	683b      	ldr	r3, [r7, #0]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d00a      	beq.n	8016702 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80166ec:	683b      	ldr	r3, [r7, #0]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	687a      	ldr	r2, [r7, #4]
 80166f2:	429a      	cmp	r2, r3
 80166f4:	d005      	beq.n	8016702 <ip_reass_free_complete_datagram+0x3e>
 80166f6:	4b3e      	ldr	r3, [pc, #248]	; (80167f0 <ip_reass_free_complete_datagram+0x12c>)
 80166f8:	22ad      	movs	r2, #173	; 0xad
 80166fa:	4940      	ldr	r1, [pc, #256]	; (80167fc <ip_reass_free_complete_datagram+0x138>)
 80166fc:	483e      	ldr	r0, [pc, #248]	; (80167f8 <ip_reass_free_complete_datagram+0x134>)
 80166fe:	f000 ff13 	bl	8017528 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	685b      	ldr	r3, [r3, #4]
 8016706:	685b      	ldr	r3, [r3, #4]
 8016708:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801670a:	697b      	ldr	r3, [r7, #20]
 801670c:	889b      	ldrh	r3, [r3, #4]
 801670e:	b29b      	uxth	r3, r3
 8016710:	2b00      	cmp	r3, #0
 8016712:	d12a      	bne.n	801676a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	685b      	ldr	r3, [r3, #4]
 8016718:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801671a:	697b      	ldr	r3, [r7, #20]
 801671c:	681a      	ldr	r2, [r3, #0]
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016722:	69bb      	ldr	r3, [r7, #24]
 8016724:	6858      	ldr	r0, [r3, #4]
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	3308      	adds	r3, #8
 801672a:	2214      	movs	r2, #20
 801672c:	4619      	mov	r1, r3
 801672e:	f000 fee5 	bl	80174fc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016732:	2101      	movs	r1, #1
 8016734:	69b8      	ldr	r0, [r7, #24]
 8016736:	f7ff fc47 	bl	8015fc8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801673a:	69b8      	ldr	r0, [r7, #24]
 801673c:	f7f8 f922 	bl	800e984 <pbuf_clen>
 8016740:	4603      	mov	r3, r0
 8016742:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016744:	8bfa      	ldrh	r2, [r7, #30]
 8016746:	8a7b      	ldrh	r3, [r7, #18]
 8016748:	4413      	add	r3, r2
 801674a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801674e:	db05      	blt.n	801675c <ip_reass_free_complete_datagram+0x98>
 8016750:	4b27      	ldr	r3, [pc, #156]	; (80167f0 <ip_reass_free_complete_datagram+0x12c>)
 8016752:	22bc      	movs	r2, #188	; 0xbc
 8016754:	492a      	ldr	r1, [pc, #168]	; (8016800 <ip_reass_free_complete_datagram+0x13c>)
 8016756:	4828      	ldr	r0, [pc, #160]	; (80167f8 <ip_reass_free_complete_datagram+0x134>)
 8016758:	f000 fee6 	bl	8017528 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801675c:	8bfa      	ldrh	r2, [r7, #30]
 801675e:	8a7b      	ldrh	r3, [r7, #18]
 8016760:	4413      	add	r3, r2
 8016762:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016764:	69b8      	ldr	r0, [r7, #24]
 8016766:	f7f8 f885 	bl	800e874 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	685b      	ldr	r3, [r3, #4]
 801676e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016770:	e01f      	b.n	80167b2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016772:	69bb      	ldr	r3, [r7, #24]
 8016774:	685b      	ldr	r3, [r3, #4]
 8016776:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016778:	69bb      	ldr	r3, [r7, #24]
 801677a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801677c:	697b      	ldr	r3, [r7, #20]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016782:	68f8      	ldr	r0, [r7, #12]
 8016784:	f7f8 f8fe 	bl	800e984 <pbuf_clen>
 8016788:	4603      	mov	r3, r0
 801678a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801678c:	8bfa      	ldrh	r2, [r7, #30]
 801678e:	8a7b      	ldrh	r3, [r7, #18]
 8016790:	4413      	add	r3, r2
 8016792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016796:	db05      	blt.n	80167a4 <ip_reass_free_complete_datagram+0xe0>
 8016798:	4b15      	ldr	r3, [pc, #84]	; (80167f0 <ip_reass_free_complete_datagram+0x12c>)
 801679a:	22cc      	movs	r2, #204	; 0xcc
 801679c:	4918      	ldr	r1, [pc, #96]	; (8016800 <ip_reass_free_complete_datagram+0x13c>)
 801679e:	4816      	ldr	r0, [pc, #88]	; (80167f8 <ip_reass_free_complete_datagram+0x134>)
 80167a0:	f000 fec2 	bl	8017528 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80167a4:	8bfa      	ldrh	r2, [r7, #30]
 80167a6:	8a7b      	ldrh	r3, [r7, #18]
 80167a8:	4413      	add	r3, r2
 80167aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80167ac:	68f8      	ldr	r0, [r7, #12]
 80167ae:	f7f8 f861 	bl	800e874 <pbuf_free>
  while (p != NULL) {
 80167b2:	69bb      	ldr	r3, [r7, #24]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d1dc      	bne.n	8016772 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80167b8:	6839      	ldr	r1, [r7, #0]
 80167ba:	6878      	ldr	r0, [r7, #4]
 80167bc:	f000 f8c2 	bl	8016944 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80167c0:	4b10      	ldr	r3, [pc, #64]	; (8016804 <ip_reass_free_complete_datagram+0x140>)
 80167c2:	881b      	ldrh	r3, [r3, #0]
 80167c4:	8bfa      	ldrh	r2, [r7, #30]
 80167c6:	429a      	cmp	r2, r3
 80167c8:	d905      	bls.n	80167d6 <ip_reass_free_complete_datagram+0x112>
 80167ca:	4b09      	ldr	r3, [pc, #36]	; (80167f0 <ip_reass_free_complete_datagram+0x12c>)
 80167cc:	22d2      	movs	r2, #210	; 0xd2
 80167ce:	490e      	ldr	r1, [pc, #56]	; (8016808 <ip_reass_free_complete_datagram+0x144>)
 80167d0:	4809      	ldr	r0, [pc, #36]	; (80167f8 <ip_reass_free_complete_datagram+0x134>)
 80167d2:	f000 fea9 	bl	8017528 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80167d6:	4b0b      	ldr	r3, [pc, #44]	; (8016804 <ip_reass_free_complete_datagram+0x140>)
 80167d8:	881a      	ldrh	r2, [r3, #0]
 80167da:	8bfb      	ldrh	r3, [r7, #30]
 80167dc:	1ad3      	subs	r3, r2, r3
 80167de:	b29a      	uxth	r2, r3
 80167e0:	4b08      	ldr	r3, [pc, #32]	; (8016804 <ip_reass_free_complete_datagram+0x140>)
 80167e2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80167e4:	8bfb      	ldrh	r3, [r7, #30]
}
 80167e6:	4618      	mov	r0, r3
 80167e8:	3720      	adds	r7, #32
 80167ea:	46bd      	mov	sp, r7
 80167ec:	bd80      	pop	{r7, pc}
 80167ee:	bf00      	nop
 80167f0:	0801afd0 	.word	0x0801afd0
 80167f4:	0801b00c 	.word	0x0801b00c
 80167f8:	0801b018 	.word	0x0801b018
 80167fc:	0801b040 	.word	0x0801b040
 8016800:	0801b054 	.word	0x0801b054
 8016804:	20009864 	.word	0x20009864
 8016808:	0801b074 	.word	0x0801b074

0801680c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b08a      	sub	sp, #40	; 0x28
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]
 8016814:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016816:	2300      	movs	r3, #0
 8016818:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801681a:	2300      	movs	r3, #0
 801681c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801681e:	2300      	movs	r3, #0
 8016820:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016822:	2300      	movs	r3, #0
 8016824:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016826:	2300      	movs	r3, #0
 8016828:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801682a:	4b28      	ldr	r3, [pc, #160]	; (80168cc <ip_reass_remove_oldest_datagram+0xc0>)
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016830:	e030      	b.n	8016894 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016834:	695a      	ldr	r2, [r3, #20]
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	68db      	ldr	r3, [r3, #12]
 801683a:	429a      	cmp	r2, r3
 801683c:	d10c      	bne.n	8016858 <ip_reass_remove_oldest_datagram+0x4c>
 801683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016840:	699a      	ldr	r2, [r3, #24]
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	691b      	ldr	r3, [r3, #16]
 8016846:	429a      	cmp	r2, r3
 8016848:	d106      	bne.n	8016858 <ip_reass_remove_oldest_datagram+0x4c>
 801684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801684c:	899a      	ldrh	r2, [r3, #12]
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	889b      	ldrh	r3, [r3, #4]
 8016852:	b29b      	uxth	r3, r3
 8016854:	429a      	cmp	r2, r3
 8016856:	d014      	beq.n	8016882 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	3301      	adds	r3, #1
 801685c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801685e:	6a3b      	ldr	r3, [r7, #32]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d104      	bne.n	801686e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016866:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016868:	69fb      	ldr	r3, [r7, #28]
 801686a:	61bb      	str	r3, [r7, #24]
 801686c:	e009      	b.n	8016882 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016870:	7fda      	ldrb	r2, [r3, #31]
 8016872:	6a3b      	ldr	r3, [r7, #32]
 8016874:	7fdb      	ldrb	r3, [r3, #31]
 8016876:	429a      	cmp	r2, r3
 8016878:	d803      	bhi.n	8016882 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801687c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801687e:	69fb      	ldr	r3, [r7, #28]
 8016880:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d001      	beq.n	801688e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801688c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016896:	2b00      	cmp	r3, #0
 8016898:	d1cb      	bne.n	8016832 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801689a:	6a3b      	ldr	r3, [r7, #32]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d008      	beq.n	80168b2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80168a0:	69b9      	ldr	r1, [r7, #24]
 80168a2:	6a38      	ldr	r0, [r7, #32]
 80168a4:	f7ff ff0e 	bl	80166c4 <ip_reass_free_complete_datagram>
 80168a8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80168aa:	697a      	ldr	r2, [r7, #20]
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	4413      	add	r3, r2
 80168b0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80168b2:	697a      	ldr	r2, [r7, #20]
 80168b4:	683b      	ldr	r3, [r7, #0]
 80168b6:	429a      	cmp	r2, r3
 80168b8:	da02      	bge.n	80168c0 <ip_reass_remove_oldest_datagram+0xb4>
 80168ba:	693b      	ldr	r3, [r7, #16]
 80168bc:	2b01      	cmp	r3, #1
 80168be:	dcac      	bgt.n	801681a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80168c0:	697b      	ldr	r3, [r7, #20]
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3728      	adds	r7, #40	; 0x28
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop
 80168cc:	20009860 	.word	0x20009860

080168d0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b084      	sub	sp, #16
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
 80168d8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80168da:	2004      	movs	r0, #4
 80168dc:	f7f7 f8e4 	bl	800daa8 <memp_malloc>
 80168e0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d110      	bne.n	801690a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80168e8:	6839      	ldr	r1, [r7, #0]
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	f7ff ff8e 	bl	801680c <ip_reass_remove_oldest_datagram>
 80168f0:	4602      	mov	r2, r0
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	4293      	cmp	r3, r2
 80168f6:	dc03      	bgt.n	8016900 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80168f8:	2004      	movs	r0, #4
 80168fa:	f7f7 f8d5 	bl	800daa8 <memp_malloc>
 80168fe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d101      	bne.n	801690a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016906:	2300      	movs	r3, #0
 8016908:	e016      	b.n	8016938 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801690a:	2220      	movs	r2, #32
 801690c:	2100      	movs	r1, #0
 801690e:	68f8      	ldr	r0, [r7, #12]
 8016910:	f000 fe02 	bl	8017518 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	220f      	movs	r2, #15
 8016918:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801691a:	4b09      	ldr	r3, [pc, #36]	; (8016940 <ip_reass_enqueue_new_datagram+0x70>)
 801691c:	681a      	ldr	r2, [r3, #0]
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016922:	4a07      	ldr	r2, [pc, #28]	; (8016940 <ip_reass_enqueue_new_datagram+0x70>)
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	3308      	adds	r3, #8
 801692c:	2214      	movs	r2, #20
 801692e:	6879      	ldr	r1, [r7, #4]
 8016930:	4618      	mov	r0, r3
 8016932:	f000 fde3 	bl	80174fc <memcpy>
  return ipr;
 8016936:	68fb      	ldr	r3, [r7, #12]
}
 8016938:	4618      	mov	r0, r3
 801693a:	3710      	adds	r7, #16
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}
 8016940:	20009860 	.word	0x20009860

08016944 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b082      	sub	sp, #8
 8016948:	af00      	add	r7, sp, #0
 801694a:	6078      	str	r0, [r7, #4]
 801694c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801694e:	4b10      	ldr	r3, [pc, #64]	; (8016990 <ip_reass_dequeue_datagram+0x4c>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	687a      	ldr	r2, [r7, #4]
 8016954:	429a      	cmp	r2, r3
 8016956:	d104      	bne.n	8016962 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	4a0c      	ldr	r2, [pc, #48]	; (8016990 <ip_reass_dequeue_datagram+0x4c>)
 801695e:	6013      	str	r3, [r2, #0]
 8016960:	e00d      	b.n	801697e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016962:	683b      	ldr	r3, [r7, #0]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d106      	bne.n	8016976 <ip_reass_dequeue_datagram+0x32>
 8016968:	4b0a      	ldr	r3, [pc, #40]	; (8016994 <ip_reass_dequeue_datagram+0x50>)
 801696a:	f240 1245 	movw	r2, #325	; 0x145
 801696e:	490a      	ldr	r1, [pc, #40]	; (8016998 <ip_reass_dequeue_datagram+0x54>)
 8016970:	480a      	ldr	r0, [pc, #40]	; (801699c <ip_reass_dequeue_datagram+0x58>)
 8016972:	f000 fdd9 	bl	8017528 <iprintf>
    prev->next = ipr->next;
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	681a      	ldr	r2, [r3, #0]
 801697a:	683b      	ldr	r3, [r7, #0]
 801697c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801697e:	6879      	ldr	r1, [r7, #4]
 8016980:	2004      	movs	r0, #4
 8016982:	f7f7 f901 	bl	800db88 <memp_free>
}
 8016986:	bf00      	nop
 8016988:	3708      	adds	r7, #8
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}
 801698e:	bf00      	nop
 8016990:	20009860 	.word	0x20009860
 8016994:	0801afd0 	.word	0x0801afd0
 8016998:	0801b098 	.word	0x0801b098
 801699c:	0801b018 	.word	0x0801b018

080169a0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b08c      	sub	sp, #48	; 0x30
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	60f8      	str	r0, [r7, #12]
 80169a8:	60b9      	str	r1, [r7, #8]
 80169aa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80169ac:	2300      	movs	r3, #0
 80169ae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80169b0:	2301      	movs	r3, #1
 80169b2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80169b4:	68bb      	ldr	r3, [r7, #8]
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80169ba:	69fb      	ldr	r3, [r7, #28]
 80169bc:	885b      	ldrh	r3, [r3, #2]
 80169be:	b29b      	uxth	r3, r3
 80169c0:	4618      	mov	r0, r3
 80169c2:	f7f6 fbf9 	bl	800d1b8 <lwip_htons>
 80169c6:	4603      	mov	r3, r0
 80169c8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80169ca:	69fb      	ldr	r3, [r7, #28]
 80169cc:	781b      	ldrb	r3, [r3, #0]
 80169ce:	f003 030f 	and.w	r3, r3, #15
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	009b      	lsls	r3, r3, #2
 80169d6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80169d8:	7e7b      	ldrb	r3, [r7, #25]
 80169da:	b29b      	uxth	r3, r3
 80169dc:	8b7a      	ldrh	r2, [r7, #26]
 80169de:	429a      	cmp	r2, r3
 80169e0:	d202      	bcs.n	80169e8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80169e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169e6:	e135      	b.n	8016c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80169e8:	7e7b      	ldrb	r3, [r7, #25]
 80169ea:	b29b      	uxth	r3, r3
 80169ec:	8b7a      	ldrh	r2, [r7, #26]
 80169ee:	1ad3      	subs	r3, r2, r3
 80169f0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80169f2:	69fb      	ldr	r3, [r7, #28]
 80169f4:	88db      	ldrh	r3, [r3, #6]
 80169f6:	b29b      	uxth	r3, r3
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7f6 fbdd 	bl	800d1b8 <lwip_htons>
 80169fe:	4603      	mov	r3, r0
 8016a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a04:	b29b      	uxth	r3, r3
 8016a06:	00db      	lsls	r3, r3, #3
 8016a08:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016a0a:	68bb      	ldr	r3, [r7, #8]
 8016a0c:	685b      	ldr	r3, [r3, #4]
 8016a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a12:	2200      	movs	r2, #0
 8016a14:	701a      	strb	r2, [r3, #0]
 8016a16:	2200      	movs	r2, #0
 8016a18:	705a      	strb	r2, [r3, #1]
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	709a      	strb	r2, [r3, #2]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a24:	8afa      	ldrh	r2, [r7, #22]
 8016a26:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016a28:	8afa      	ldrh	r2, [r7, #22]
 8016a2a:	8b7b      	ldrh	r3, [r7, #26]
 8016a2c:	4413      	add	r3, r2
 8016a2e:	b29a      	uxth	r2, r3
 8016a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a32:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a36:	88db      	ldrh	r3, [r3, #6]
 8016a38:	b29b      	uxth	r3, r3
 8016a3a:	8afa      	ldrh	r2, [r7, #22]
 8016a3c:	429a      	cmp	r2, r3
 8016a3e:	d902      	bls.n	8016a46 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a44:	e106      	b.n	8016c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	685b      	ldr	r3, [r3, #4]
 8016a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8016a4c:	e068      	b.n	8016b20 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a50:	685b      	ldr	r3, [r3, #4]
 8016a52:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a56:	889b      	ldrh	r3, [r3, #4]
 8016a58:	b29a      	uxth	r2, r3
 8016a5a:	693b      	ldr	r3, [r7, #16]
 8016a5c:	889b      	ldrh	r3, [r3, #4]
 8016a5e:	b29b      	uxth	r3, r3
 8016a60:	429a      	cmp	r2, r3
 8016a62:	d235      	bcs.n	8016ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a68:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d020      	beq.n	8016ab2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a72:	889b      	ldrh	r3, [r3, #4]
 8016a74:	b29a      	uxth	r2, r3
 8016a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a78:	88db      	ldrh	r3, [r3, #6]
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	429a      	cmp	r2, r3
 8016a7e:	d307      	bcc.n	8016a90 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a82:	88db      	ldrh	r3, [r3, #6]
 8016a84:	b29a      	uxth	r2, r3
 8016a86:	693b      	ldr	r3, [r7, #16]
 8016a88:	889b      	ldrh	r3, [r3, #4]
 8016a8a:	b29b      	uxth	r3, r3
 8016a8c:	429a      	cmp	r2, r3
 8016a8e:	d902      	bls.n	8016a96 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a94:	e0de      	b.n	8016c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a98:	68ba      	ldr	r2, [r7, #8]
 8016a9a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a9e:	88db      	ldrh	r3, [r3, #6]
 8016aa0:	b29a      	uxth	r2, r3
 8016aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aa4:	889b      	ldrh	r3, [r3, #4]
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d03d      	beq.n	8016b28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016aac:	2300      	movs	r3, #0
 8016aae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016ab0:	e03a      	b.n	8016b28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ab4:	88db      	ldrh	r3, [r3, #6]
 8016ab6:	b29a      	uxth	r2, r3
 8016ab8:	693b      	ldr	r3, [r7, #16]
 8016aba:	889b      	ldrh	r3, [r3, #4]
 8016abc:	b29b      	uxth	r3, r3
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	d902      	bls.n	8016ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ac6:	e0c5      	b.n	8016c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	68ba      	ldr	r2, [r7, #8]
 8016acc:	605a      	str	r2, [r3, #4]
      break;
 8016ace:	e02b      	b.n	8016b28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ad2:	889b      	ldrh	r3, [r3, #4]
 8016ad4:	b29a      	uxth	r2, r3
 8016ad6:	693b      	ldr	r3, [r7, #16]
 8016ad8:	889b      	ldrh	r3, [r3, #4]
 8016ada:	b29b      	uxth	r3, r3
 8016adc:	429a      	cmp	r2, r3
 8016ade:	d102      	bne.n	8016ae6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ae4:	e0b6      	b.n	8016c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ae8:	889b      	ldrh	r3, [r3, #4]
 8016aea:	b29a      	uxth	r2, r3
 8016aec:	693b      	ldr	r3, [r7, #16]
 8016aee:	88db      	ldrh	r3, [r3, #6]
 8016af0:	b29b      	uxth	r3, r3
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d202      	bcs.n	8016afc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016afa:	e0ab      	b.n	8016c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d009      	beq.n	8016b16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b04:	88db      	ldrh	r3, [r3, #6]
 8016b06:	b29a      	uxth	r2, r3
 8016b08:	693b      	ldr	r3, [r7, #16]
 8016b0a:	889b      	ldrh	r3, [r3, #4]
 8016b0c:	b29b      	uxth	r3, r3
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d001      	beq.n	8016b16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016b12:	2300      	movs	r3, #0
 8016b14:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016b16:	693b      	ldr	r3, [r7, #16]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016b1c:	693b      	ldr	r3, [r7, #16]
 8016b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d193      	bne.n	8016a4e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016b26:	e000      	b.n	8016b2a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016b28:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d12d      	bne.n	8016b8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d01c      	beq.n	8016b70 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b38:	88db      	ldrh	r3, [r3, #6]
 8016b3a:	b29a      	uxth	r2, r3
 8016b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b3e:	889b      	ldrh	r3, [r3, #4]
 8016b40:	b29b      	uxth	r3, r3
 8016b42:	429a      	cmp	r2, r3
 8016b44:	d906      	bls.n	8016b54 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016b46:	4b45      	ldr	r3, [pc, #276]	; (8016c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016b48:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016b4c:	4944      	ldr	r1, [pc, #272]	; (8016c60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016b4e:	4845      	ldr	r0, [pc, #276]	; (8016c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016b50:	f000 fcea 	bl	8017528 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b56:	68ba      	ldr	r2, [r7, #8]
 8016b58:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b5c:	88db      	ldrh	r3, [r3, #6]
 8016b5e:	b29a      	uxth	r2, r3
 8016b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b62:	889b      	ldrh	r3, [r3, #4]
 8016b64:	b29b      	uxth	r3, r3
 8016b66:	429a      	cmp	r2, r3
 8016b68:	d010      	beq.n	8016b8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	623b      	str	r3, [r7, #32]
 8016b6e:	e00d      	b.n	8016b8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	685b      	ldr	r3, [r3, #4]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d006      	beq.n	8016b86 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016b78:	4b38      	ldr	r3, [pc, #224]	; (8016c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016b7a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016b7e:	493a      	ldr	r1, [pc, #232]	; (8016c68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016b80:	4838      	ldr	r0, [pc, #224]	; (8016c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016b82:	f000 fcd1 	bl	8017528 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	68ba      	ldr	r2, [r7, #8]
 8016b8a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d105      	bne.n	8016b9e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	7f9b      	ldrb	r3, [r3, #30]
 8016b96:	f003 0301 	and.w	r3, r3, #1
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d059      	beq.n	8016c52 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016b9e:	6a3b      	ldr	r3, [r7, #32]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d04f      	beq.n	8016c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	685b      	ldr	r3, [r3, #4]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d006      	beq.n	8016bba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	685b      	ldr	r3, [r3, #4]
 8016bb0:	685b      	ldr	r3, [r3, #4]
 8016bb2:	889b      	ldrh	r3, [r3, #4]
 8016bb4:	b29b      	uxth	r3, r3
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d002      	beq.n	8016bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	623b      	str	r3, [r7, #32]
 8016bbe:	e041      	b.n	8016c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bc2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016bca:	e012      	b.n	8016bf2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bce:	685b      	ldr	r3, [r3, #4]
 8016bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd4:	88db      	ldrh	r3, [r3, #6]
 8016bd6:	b29a      	uxth	r2, r3
 8016bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bda:	889b      	ldrh	r3, [r3, #4]
 8016bdc:	b29b      	uxth	r3, r3
 8016bde:	429a      	cmp	r2, r3
 8016be0:	d002      	beq.n	8016be8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016be2:	2300      	movs	r3, #0
 8016be4:	623b      	str	r3, [r7, #32]
            break;
 8016be6:	e007      	b.n	8016bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d1e9      	bne.n	8016bcc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016bf8:	6a3b      	ldr	r3, [r7, #32]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d022      	beq.n	8016c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d106      	bne.n	8016c14 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016c06:	4b15      	ldr	r3, [pc, #84]	; (8016c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016c08:	f240 12df 	movw	r2, #479	; 0x1df
 8016c0c:	4917      	ldr	r1, [pc, #92]	; (8016c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016c0e:	4815      	ldr	r0, [pc, #84]	; (8016c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016c10:	f000 fc8a 	bl	8017528 <iprintf>
          LWIP_ASSERT("sanity check",
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	685b      	ldr	r3, [r3, #4]
 8016c18:	685b      	ldr	r3, [r3, #4]
 8016c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c1c:	429a      	cmp	r2, r3
 8016c1e:	d106      	bne.n	8016c2e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016c20:	4b0e      	ldr	r3, [pc, #56]	; (8016c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016c22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016c26:	4911      	ldr	r1, [pc, #68]	; (8016c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016c28:	480e      	ldr	r0, [pc, #56]	; (8016c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016c2a:	f000 fc7d 	bl	8017528 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d006      	beq.n	8016c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016c36:	4b09      	ldr	r3, [pc, #36]	; (8016c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016c38:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016c3c:	490c      	ldr	r1, [pc, #48]	; (8016c70 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016c3e:	4809      	ldr	r0, [pc, #36]	; (8016c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016c40:	f000 fc72 	bl	8017528 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016c44:	6a3b      	ldr	r3, [r7, #32]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	bf14      	ite	ne
 8016c4a:	2301      	movne	r3, #1
 8016c4c:	2300      	moveq	r3, #0
 8016c4e:	b2db      	uxtb	r3, r3
 8016c50:	e000      	b.n	8016c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016c52:	2300      	movs	r3, #0
}
 8016c54:	4618      	mov	r0, r3
 8016c56:	3730      	adds	r7, #48	; 0x30
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	bd80      	pop	{r7, pc}
 8016c5c:	0801afd0 	.word	0x0801afd0
 8016c60:	0801b0b4 	.word	0x0801b0b4
 8016c64:	0801b018 	.word	0x0801b018
 8016c68:	0801b0d4 	.word	0x0801b0d4
 8016c6c:	0801b10c 	.word	0x0801b10c
 8016c70:	0801b11c 	.word	0x0801b11c

08016c74 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b08e      	sub	sp, #56	; 0x38
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	685b      	ldr	r3, [r3, #4]
 8016c80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c84:	781b      	ldrb	r3, [r3, #0]
 8016c86:	f003 030f 	and.w	r3, r3, #15
 8016c8a:	b2db      	uxtb	r3, r3
 8016c8c:	009b      	lsls	r3, r3, #2
 8016c8e:	b2db      	uxtb	r3, r3
 8016c90:	2b14      	cmp	r3, #20
 8016c92:	f040 8171 	bne.w	8016f78 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c98:	88db      	ldrh	r3, [r3, #6]
 8016c9a:	b29b      	uxth	r3, r3
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	f7f6 fa8b 	bl	800d1b8 <lwip_htons>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ca8:	b29b      	uxth	r3, r3
 8016caa:	00db      	lsls	r3, r3, #3
 8016cac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cb0:	885b      	ldrh	r3, [r3, #2]
 8016cb2:	b29b      	uxth	r3, r3
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	f7f6 fa7f 	bl	800d1b8 <lwip_htons>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cc0:	781b      	ldrb	r3, [r3, #0]
 8016cc2:	f003 030f 	and.w	r3, r3, #15
 8016cc6:	b2db      	uxtb	r3, r3
 8016cc8:	009b      	lsls	r3, r3, #2
 8016cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016cce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016cd2:	b29b      	uxth	r3, r3
 8016cd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016cd6:	429a      	cmp	r2, r3
 8016cd8:	f0c0 8150 	bcc.w	8016f7c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016ce0:	b29b      	uxth	r3, r3
 8016ce2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016ce4:	1ad3      	subs	r3, r2, r3
 8016ce6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016ce8:	6878      	ldr	r0, [r7, #4]
 8016cea:	f7f7 fe4b 	bl	800e984 <pbuf_clen>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016cf2:	4b8c      	ldr	r3, [pc, #560]	; (8016f24 <ip4_reass+0x2b0>)
 8016cf4:	881b      	ldrh	r3, [r3, #0]
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	8c3b      	ldrh	r3, [r7, #32]
 8016cfa:	4413      	add	r3, r2
 8016cfc:	2b0a      	cmp	r3, #10
 8016cfe:	dd10      	ble.n	8016d22 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016d00:	8c3b      	ldrh	r3, [r7, #32]
 8016d02:	4619      	mov	r1, r3
 8016d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d06:	f7ff fd81 	bl	801680c <ip_reass_remove_oldest_datagram>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	f000 8137 	beq.w	8016f80 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016d12:	4b84      	ldr	r3, [pc, #528]	; (8016f24 <ip4_reass+0x2b0>)
 8016d14:	881b      	ldrh	r3, [r3, #0]
 8016d16:	461a      	mov	r2, r3
 8016d18:	8c3b      	ldrh	r3, [r7, #32]
 8016d1a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016d1c:	2b0a      	cmp	r3, #10
 8016d1e:	f300 812f 	bgt.w	8016f80 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016d22:	4b81      	ldr	r3, [pc, #516]	; (8016f28 <ip4_reass+0x2b4>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	633b      	str	r3, [r7, #48]	; 0x30
 8016d28:	e015      	b.n	8016d56 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d2c:	695a      	ldr	r2, [r3, #20]
 8016d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d30:	68db      	ldr	r3, [r3, #12]
 8016d32:	429a      	cmp	r2, r3
 8016d34:	d10c      	bne.n	8016d50 <ip4_reass+0xdc>
 8016d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d38:	699a      	ldr	r2, [r3, #24]
 8016d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d3c:	691b      	ldr	r3, [r3, #16]
 8016d3e:	429a      	cmp	r2, r3
 8016d40:	d106      	bne.n	8016d50 <ip4_reass+0xdc>
 8016d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d44:	899a      	ldrh	r2, [r3, #12]
 8016d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d48:	889b      	ldrh	r3, [r3, #4]
 8016d4a:	b29b      	uxth	r3, r3
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	d006      	beq.n	8016d5e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	633b      	str	r3, [r7, #48]	; 0x30
 8016d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d1e6      	bne.n	8016d2a <ip4_reass+0xb6>
 8016d5c:	e000      	b.n	8016d60 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016d5e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d109      	bne.n	8016d7a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016d66:	8c3b      	ldrh	r3, [r7, #32]
 8016d68:	4619      	mov	r1, r3
 8016d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d6c:	f7ff fdb0 	bl	80168d0 <ip_reass_enqueue_new_datagram>
 8016d70:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d11c      	bne.n	8016db2 <ip4_reass+0x13e>
      goto nullreturn;
 8016d78:	e105      	b.n	8016f86 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d7c:	88db      	ldrh	r3, [r3, #6]
 8016d7e:	b29b      	uxth	r3, r3
 8016d80:	4618      	mov	r0, r3
 8016d82:	f7f6 fa19 	bl	800d1b8 <lwip_htons>
 8016d86:	4603      	mov	r3, r0
 8016d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d110      	bne.n	8016db2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d92:	89db      	ldrh	r3, [r3, #14]
 8016d94:	4618      	mov	r0, r3
 8016d96:	f7f6 fa0f 	bl	800d1b8 <lwip_htons>
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d006      	beq.n	8016db2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016da6:	3308      	adds	r3, #8
 8016da8:	2214      	movs	r2, #20
 8016daa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016dac:	4618      	mov	r0, r3
 8016dae:	f000 fba5 	bl	80174fc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016db4:	88db      	ldrh	r3, [r3, #6]
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	f003 0320 	and.w	r3, r3, #32
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	bf0c      	ite	eq
 8016dc0:	2301      	moveq	r3, #1
 8016dc2:	2300      	movne	r3, #0
 8016dc4:	b2db      	uxtb	r3, r3
 8016dc6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016dc8:	69fb      	ldr	r3, [r7, #28]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d00e      	beq.n	8016dec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016dce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016dd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016dd2:	4413      	add	r3, r2
 8016dd4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016dd6:	8b7a      	ldrh	r2, [r7, #26]
 8016dd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016dda:	429a      	cmp	r2, r3
 8016ddc:	f0c0 80a0 	bcc.w	8016f20 <ip4_reass+0x2ac>
 8016de0:	8b7b      	ldrh	r3, [r7, #26]
 8016de2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016de6:	4293      	cmp	r3, r2
 8016de8:	f200 809a 	bhi.w	8016f20 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016dec:	69fa      	ldr	r2, [r7, #28]
 8016dee:	6879      	ldr	r1, [r7, #4]
 8016df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016df2:	f7ff fdd5 	bl	80169a0 <ip_reass_chain_frag_into_datagram_and_validate>
 8016df6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016df8:	697b      	ldr	r3, [r7, #20]
 8016dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016dfe:	f000 809b 	beq.w	8016f38 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016e02:	4b48      	ldr	r3, [pc, #288]	; (8016f24 <ip4_reass+0x2b0>)
 8016e04:	881a      	ldrh	r2, [r3, #0]
 8016e06:	8c3b      	ldrh	r3, [r7, #32]
 8016e08:	4413      	add	r3, r2
 8016e0a:	b29a      	uxth	r2, r3
 8016e0c:	4b45      	ldr	r3, [pc, #276]	; (8016f24 <ip4_reass+0x2b0>)
 8016e0e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016e10:	69fb      	ldr	r3, [r7, #28]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d00d      	beq.n	8016e32 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016e16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016e1a:	4413      	add	r3, r2
 8016e1c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e20:	8a7a      	ldrh	r2, [r7, #18]
 8016e22:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e26:	7f9b      	ldrb	r3, [r3, #30]
 8016e28:	f043 0301 	orr.w	r3, r3, #1
 8016e2c:	b2da      	uxtb	r2, r3
 8016e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e30:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016e32:	697b      	ldr	r3, [r7, #20]
 8016e34:	2b01      	cmp	r3, #1
 8016e36:	d171      	bne.n	8016f1c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e3a:	8b9b      	ldrh	r3, [r3, #28]
 8016e3c:	3314      	adds	r3, #20
 8016e3e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e42:	685b      	ldr	r3, [r3, #4]
 8016e44:	685b      	ldr	r3, [r3, #4]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e4c:	685b      	ldr	r3, [r3, #4]
 8016e4e:	685b      	ldr	r3, [r3, #4]
 8016e50:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e54:	3308      	adds	r3, #8
 8016e56:	2214      	movs	r2, #20
 8016e58:	4619      	mov	r1, r3
 8016e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e5c:	f000 fb4e 	bl	80174fc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016e60:	8a3b      	ldrh	r3, [r7, #16]
 8016e62:	4618      	mov	r0, r3
 8016e64:	f7f6 f9a8 	bl	800d1b8 <lwip_htons>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	461a      	mov	r2, r3
 8016e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e6e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e72:	2200      	movs	r2, #0
 8016e74:	719a      	strb	r2, [r3, #6]
 8016e76:	2200      	movs	r2, #0
 8016e78:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	729a      	strb	r2, [r3, #10]
 8016e80:	2200      	movs	r2, #0
 8016e82:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016e8a:	e00d      	b.n	8016ea8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016e92:	2114      	movs	r1, #20
 8016e94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016e96:	f7f7 fc67 	bl	800e768 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016e9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016e9c:	6878      	ldr	r0, [r7, #4]
 8016e9e:	f7f7 fdab 	bl	800e9f8 <pbuf_cat>
      r = iprh->next_pbuf;
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d1ee      	bne.n	8016e8c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016eae:	4b1e      	ldr	r3, [pc, #120]	; (8016f28 <ip4_reass+0x2b4>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016eb4:	429a      	cmp	r2, r3
 8016eb6:	d102      	bne.n	8016ebe <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016eb8:	2300      	movs	r3, #0
 8016eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ebc:	e010      	b.n	8016ee0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016ebe:	4b1a      	ldr	r3, [pc, #104]	; (8016f28 <ip4_reass+0x2b4>)
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ec4:	e007      	b.n	8016ed6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d006      	beq.n	8016ede <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d1f4      	bne.n	8016ec6 <ip4_reass+0x252>
 8016edc:	e000      	b.n	8016ee0 <ip4_reass+0x26c>
          break;
 8016ede:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016ee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ee4:	f7ff fd2e 	bl	8016944 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016ee8:	6878      	ldr	r0, [r7, #4]
 8016eea:	f7f7 fd4b 	bl	800e984 <pbuf_clen>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016ef2:	4b0c      	ldr	r3, [pc, #48]	; (8016f24 <ip4_reass+0x2b0>)
 8016ef4:	881b      	ldrh	r3, [r3, #0]
 8016ef6:	8c3a      	ldrh	r2, [r7, #32]
 8016ef8:	429a      	cmp	r2, r3
 8016efa:	d906      	bls.n	8016f0a <ip4_reass+0x296>
 8016efc:	4b0b      	ldr	r3, [pc, #44]	; (8016f2c <ip4_reass+0x2b8>)
 8016efe:	f240 229b 	movw	r2, #667	; 0x29b
 8016f02:	490b      	ldr	r1, [pc, #44]	; (8016f30 <ip4_reass+0x2bc>)
 8016f04:	480b      	ldr	r0, [pc, #44]	; (8016f34 <ip4_reass+0x2c0>)
 8016f06:	f000 fb0f 	bl	8017528 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016f0a:	4b06      	ldr	r3, [pc, #24]	; (8016f24 <ip4_reass+0x2b0>)
 8016f0c:	881a      	ldrh	r2, [r3, #0]
 8016f0e:	8c3b      	ldrh	r3, [r7, #32]
 8016f10:	1ad3      	subs	r3, r2, r3
 8016f12:	b29a      	uxth	r2, r3
 8016f14:	4b03      	ldr	r3, [pc, #12]	; (8016f24 <ip4_reass+0x2b0>)
 8016f16:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	e038      	b.n	8016f8e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	e036      	b.n	8016f8e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016f20:	bf00      	nop
 8016f22:	e00a      	b.n	8016f3a <ip4_reass+0x2c6>
 8016f24:	20009864 	.word	0x20009864
 8016f28:	20009860 	.word	0x20009860
 8016f2c:	0801afd0 	.word	0x0801afd0
 8016f30:	0801b140 	.word	0x0801b140
 8016f34:	0801b018 	.word	0x0801b018
    goto nullreturn_ipr;
 8016f38:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d106      	bne.n	8016f4e <ip4_reass+0x2da>
 8016f40:	4b15      	ldr	r3, [pc, #84]	; (8016f98 <ip4_reass+0x324>)
 8016f42:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016f46:	4915      	ldr	r1, [pc, #84]	; (8016f9c <ip4_reass+0x328>)
 8016f48:	4815      	ldr	r0, [pc, #84]	; (8016fa0 <ip4_reass+0x32c>)
 8016f4a:	f000 faed 	bl	8017528 <iprintf>
  if (ipr->p == NULL) {
 8016f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f50:	685b      	ldr	r3, [r3, #4]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d116      	bne.n	8016f84 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016f56:	4b13      	ldr	r3, [pc, #76]	; (8016fa4 <ip4_reass+0x330>)
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	d006      	beq.n	8016f6e <ip4_reass+0x2fa>
 8016f60:	4b0d      	ldr	r3, [pc, #52]	; (8016f98 <ip4_reass+0x324>)
 8016f62:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016f66:	4910      	ldr	r1, [pc, #64]	; (8016fa8 <ip4_reass+0x334>)
 8016f68:	480d      	ldr	r0, [pc, #52]	; (8016fa0 <ip4_reass+0x32c>)
 8016f6a:	f000 fadd 	bl	8017528 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016f6e:	2100      	movs	r1, #0
 8016f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f72:	f7ff fce7 	bl	8016944 <ip_reass_dequeue_datagram>
 8016f76:	e006      	b.n	8016f86 <ip4_reass+0x312>
    goto nullreturn;
 8016f78:	bf00      	nop
 8016f7a:	e004      	b.n	8016f86 <ip4_reass+0x312>
    goto nullreturn;
 8016f7c:	bf00      	nop
 8016f7e:	e002      	b.n	8016f86 <ip4_reass+0x312>
      goto nullreturn;
 8016f80:	bf00      	nop
 8016f82:	e000      	b.n	8016f86 <ip4_reass+0x312>
  }

nullreturn:
 8016f84:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016f86:	6878      	ldr	r0, [r7, #4]
 8016f88:	f7f7 fc74 	bl	800e874 <pbuf_free>
  return NULL;
 8016f8c:	2300      	movs	r3, #0
}
 8016f8e:	4618      	mov	r0, r3
 8016f90:	3738      	adds	r7, #56	; 0x38
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
 8016f96:	bf00      	nop
 8016f98:	0801afd0 	.word	0x0801afd0
 8016f9c:	0801b15c 	.word	0x0801b15c
 8016fa0:	0801b018 	.word	0x0801b018
 8016fa4:	20009860 	.word	0x20009860
 8016fa8:	0801b168 	.word	0x0801b168

08016fac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016fb0:	2005      	movs	r0, #5
 8016fb2:	f7f6 fd79 	bl	800daa8 <memp_malloc>
 8016fb6:	4603      	mov	r3, r0
}
 8016fb8:	4618      	mov	r0, r3
 8016fba:	bd80      	pop	{r7, pc}

08016fbc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b082      	sub	sp, #8
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d106      	bne.n	8016fd8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016fca:	4b07      	ldr	r3, [pc, #28]	; (8016fe8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016fcc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016fd0:	4906      	ldr	r1, [pc, #24]	; (8016fec <ip_frag_free_pbuf_custom_ref+0x30>)
 8016fd2:	4807      	ldr	r0, [pc, #28]	; (8016ff0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016fd4:	f000 faa8 	bl	8017528 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016fd8:	6879      	ldr	r1, [r7, #4]
 8016fda:	2005      	movs	r0, #5
 8016fdc:	f7f6 fdd4 	bl	800db88 <memp_free>
}
 8016fe0:	bf00      	nop
 8016fe2:	3708      	adds	r7, #8
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	bd80      	pop	{r7, pc}
 8016fe8:	0801afd0 	.word	0x0801afd0
 8016fec:	0801b188 	.word	0x0801b188
 8016ff0:	0801b018 	.word	0x0801b018

08016ff4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b084      	sub	sp, #16
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d106      	bne.n	8017014 <ipfrag_free_pbuf_custom+0x20>
 8017006:	4b11      	ldr	r3, [pc, #68]	; (801704c <ipfrag_free_pbuf_custom+0x58>)
 8017008:	f240 22ce 	movw	r2, #718	; 0x2ce
 801700c:	4910      	ldr	r1, [pc, #64]	; (8017050 <ipfrag_free_pbuf_custom+0x5c>)
 801700e:	4811      	ldr	r0, [pc, #68]	; (8017054 <ipfrag_free_pbuf_custom+0x60>)
 8017010:	f000 fa8a 	bl	8017528 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017014:	68fa      	ldr	r2, [r7, #12]
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	429a      	cmp	r2, r3
 801701a:	d006      	beq.n	801702a <ipfrag_free_pbuf_custom+0x36>
 801701c:	4b0b      	ldr	r3, [pc, #44]	; (801704c <ipfrag_free_pbuf_custom+0x58>)
 801701e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017022:	490d      	ldr	r1, [pc, #52]	; (8017058 <ipfrag_free_pbuf_custom+0x64>)
 8017024:	480b      	ldr	r0, [pc, #44]	; (8017054 <ipfrag_free_pbuf_custom+0x60>)
 8017026:	f000 fa7f 	bl	8017528 <iprintf>
  if (pcr->original != NULL) {
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	695b      	ldr	r3, [r3, #20]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d004      	beq.n	801703c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	695b      	ldr	r3, [r3, #20]
 8017036:	4618      	mov	r0, r3
 8017038:	f7f7 fc1c 	bl	800e874 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801703c:	68f8      	ldr	r0, [r7, #12]
 801703e:	f7ff ffbd 	bl	8016fbc <ip_frag_free_pbuf_custom_ref>
}
 8017042:	bf00      	nop
 8017044:	3710      	adds	r7, #16
 8017046:	46bd      	mov	sp, r7
 8017048:	bd80      	pop	{r7, pc}
 801704a:	bf00      	nop
 801704c:	0801afd0 	.word	0x0801afd0
 8017050:	0801b194 	.word	0x0801b194
 8017054:	0801b018 	.word	0x0801b018
 8017058:	0801b1a0 	.word	0x0801b1a0

0801705c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b094      	sub	sp, #80	; 0x50
 8017060:	af02      	add	r7, sp, #8
 8017062:	60f8      	str	r0, [r7, #12]
 8017064:	60b9      	str	r1, [r7, #8]
 8017066:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017068:	2300      	movs	r3, #0
 801706a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017072:	3b14      	subs	r3, #20
 8017074:	2b00      	cmp	r3, #0
 8017076:	da00      	bge.n	801707a <ip4_frag+0x1e>
 8017078:	3307      	adds	r3, #7
 801707a:	10db      	asrs	r3, r3, #3
 801707c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801707e:	2314      	movs	r3, #20
 8017080:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801708a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801708e:	781b      	ldrb	r3, [r3, #0]
 8017090:	f003 030f 	and.w	r3, r3, #15
 8017094:	b2db      	uxtb	r3, r3
 8017096:	009b      	lsls	r3, r3, #2
 8017098:	b2db      	uxtb	r3, r3
 801709a:	2b14      	cmp	r3, #20
 801709c:	d002      	beq.n	80170a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801709e:	f06f 0305 	mvn.w	r3, #5
 80170a2:	e110      	b.n	80172c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	895b      	ldrh	r3, [r3, #10]
 80170a8:	2b13      	cmp	r3, #19
 80170aa:	d809      	bhi.n	80170c0 <ip4_frag+0x64>
 80170ac:	4b88      	ldr	r3, [pc, #544]	; (80172d0 <ip4_frag+0x274>)
 80170ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80170b2:	4988      	ldr	r1, [pc, #544]	; (80172d4 <ip4_frag+0x278>)
 80170b4:	4888      	ldr	r0, [pc, #544]	; (80172d8 <ip4_frag+0x27c>)
 80170b6:	f000 fa37 	bl	8017528 <iprintf>
 80170ba:	f06f 0305 	mvn.w	r3, #5
 80170be:	e102      	b.n	80172c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80170c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170c2:	88db      	ldrh	r3, [r3, #6]
 80170c4:	b29b      	uxth	r3, r3
 80170c6:	4618      	mov	r0, r3
 80170c8:	f7f6 f876 	bl	800d1b8 <lwip_htons>
 80170cc:	4603      	mov	r3, r0
 80170ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80170d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80170d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80170d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80170da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80170dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80170e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	891b      	ldrh	r3, [r3, #8]
 80170e6:	3b14      	subs	r3, #20
 80170e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80170ec:	e0e1      	b.n	80172b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80170ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80170f0:	00db      	lsls	r3, r3, #3
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80170f8:	4293      	cmp	r3, r2
 80170fa:	bf28      	it	cs
 80170fc:	4613      	movcs	r3, r2
 80170fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017100:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017104:	2114      	movs	r1, #20
 8017106:	200e      	movs	r0, #14
 8017108:	f7f7 f8d0 	bl	800e2ac <pbuf_alloc>
 801710c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017110:	2b00      	cmp	r3, #0
 8017112:	f000 80d5 	beq.w	80172c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017118:	895b      	ldrh	r3, [r3, #10]
 801711a:	2b13      	cmp	r3, #19
 801711c:	d806      	bhi.n	801712c <ip4_frag+0xd0>
 801711e:	4b6c      	ldr	r3, [pc, #432]	; (80172d0 <ip4_frag+0x274>)
 8017120:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017124:	496d      	ldr	r1, [pc, #436]	; (80172dc <ip4_frag+0x280>)
 8017126:	486c      	ldr	r0, [pc, #432]	; (80172d8 <ip4_frag+0x27c>)
 8017128:	f000 f9fe 	bl	8017528 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801712e:	685b      	ldr	r3, [r3, #4]
 8017130:	2214      	movs	r2, #20
 8017132:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017134:	4618      	mov	r0, r3
 8017136:	f000 f9e1 	bl	80174fc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801713c:	685b      	ldr	r3, [r3, #4]
 801713e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017140:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017142:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017146:	e064      	b.n	8017212 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	895a      	ldrh	r2, [r3, #10]
 801714c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801714e:	1ad3      	subs	r3, r2, r3
 8017150:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	895b      	ldrh	r3, [r3, #10]
 8017156:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017158:	429a      	cmp	r2, r3
 801715a:	d906      	bls.n	801716a <ip4_frag+0x10e>
 801715c:	4b5c      	ldr	r3, [pc, #368]	; (80172d0 <ip4_frag+0x274>)
 801715e:	f240 322d 	movw	r2, #813	; 0x32d
 8017162:	495f      	ldr	r1, [pc, #380]	; (80172e0 <ip4_frag+0x284>)
 8017164:	485c      	ldr	r0, [pc, #368]	; (80172d8 <ip4_frag+0x27c>)
 8017166:	f000 f9df 	bl	8017528 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801716a:	8bfa      	ldrh	r2, [r7, #30]
 801716c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017170:	4293      	cmp	r3, r2
 8017172:	bf28      	it	cs
 8017174:	4613      	movcs	r3, r2
 8017176:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801717a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801717e:	2b00      	cmp	r3, #0
 8017180:	d105      	bne.n	801718e <ip4_frag+0x132>
        poff = 0;
 8017182:	2300      	movs	r3, #0
 8017184:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	60fb      	str	r3, [r7, #12]
        continue;
 801718c:	e041      	b.n	8017212 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801718e:	f7ff ff0d 	bl	8016fac <ip_frag_alloc_pbuf_custom_ref>
 8017192:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017194:	69bb      	ldr	r3, [r7, #24]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d103      	bne.n	80171a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801719a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801719c:	f7f7 fb6a 	bl	800e874 <pbuf_free>
        goto memerr;
 80171a0:	e08f      	b.n	80172c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80171a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80171a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80171aa:	4413      	add	r3, r2
 80171ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80171b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80171b4:	9201      	str	r2, [sp, #4]
 80171b6:	9300      	str	r3, [sp, #0]
 80171b8:	4603      	mov	r3, r0
 80171ba:	2241      	movs	r2, #65	; 0x41
 80171bc:	2000      	movs	r0, #0
 80171be:	f7f7 f99f 	bl	800e500 <pbuf_alloced_custom>
 80171c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80171c4:	697b      	ldr	r3, [r7, #20]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d106      	bne.n	80171d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80171ca:	69b8      	ldr	r0, [r7, #24]
 80171cc:	f7ff fef6 	bl	8016fbc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80171d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171d2:	f7f7 fb4f 	bl	800e874 <pbuf_free>
        goto memerr;
 80171d6:	e074      	b.n	80172c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80171d8:	68f8      	ldr	r0, [r7, #12]
 80171da:	f7f7 fbeb 	bl	800e9b4 <pbuf_ref>
      pcr->original = p;
 80171de:	69bb      	ldr	r3, [r7, #24]
 80171e0:	68fa      	ldr	r2, [r7, #12]
 80171e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80171e4:	69bb      	ldr	r3, [r7, #24]
 80171e6:	4a3f      	ldr	r2, [pc, #252]	; (80172e4 <ip4_frag+0x288>)
 80171e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80171ea:	6979      	ldr	r1, [r7, #20]
 80171ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171ee:	f7f7 fc03 	bl	800e9f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80171f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80171f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80171fa:	1ad3      	subs	r3, r2, r3
 80171fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017200:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017204:	2b00      	cmp	r3, #0
 8017206:	d004      	beq.n	8017212 <ip4_frag+0x1b6>
        poff = 0;
 8017208:	2300      	movs	r3, #0
 801720a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017212:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017216:	2b00      	cmp	r3, #0
 8017218:	d196      	bne.n	8017148 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801721a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801721c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017220:	4413      	add	r3, r2
 8017222:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017224:	68bb      	ldr	r3, [r7, #8]
 8017226:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017228:	f1a3 0213 	sub.w	r2, r3, #19
 801722c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017230:	429a      	cmp	r2, r3
 8017232:	bfcc      	ite	gt
 8017234:	2301      	movgt	r3, #1
 8017236:	2300      	movle	r3, #0
 8017238:	b2db      	uxtb	r3, r3
 801723a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801723c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017244:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017246:	6a3b      	ldr	r3, [r7, #32]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d002      	beq.n	8017252 <ip4_frag+0x1f6>
 801724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801724e:	2b00      	cmp	r3, #0
 8017250:	d003      	beq.n	801725a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017252:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017254:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017258:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801725a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801725c:	4618      	mov	r0, r3
 801725e:	f7f5 ffab 	bl	800d1b8 <lwip_htons>
 8017262:	4603      	mov	r3, r0
 8017264:	461a      	mov	r2, r3
 8017266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017268:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801726a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801726c:	3314      	adds	r3, #20
 801726e:	b29b      	uxth	r3, r3
 8017270:	4618      	mov	r0, r3
 8017272:	f7f5 ffa1 	bl	800d1b8 <lwip_htons>
 8017276:	4603      	mov	r3, r0
 8017278:	461a      	mov	r2, r3
 801727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801727c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017280:	2200      	movs	r2, #0
 8017282:	729a      	strb	r2, [r3, #10]
 8017284:	2200      	movs	r2, #0
 8017286:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017288:	68bb      	ldr	r3, [r7, #8]
 801728a:	695b      	ldr	r3, [r3, #20]
 801728c:	687a      	ldr	r2, [r7, #4]
 801728e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017290:	68b8      	ldr	r0, [r7, #8]
 8017292:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017296:	f7f7 faed 	bl	800e874 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801729a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801729e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80172a0:	1ad3      	subs	r3, r2, r3
 80172a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80172a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80172aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80172ac:	4413      	add	r3, r2
 80172ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80172b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	f47f af19 	bne.w	80170ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80172bc:	2300      	movs	r3, #0
 80172be:	e002      	b.n	80172c6 <ip4_frag+0x26a>
      goto memerr;
 80172c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80172c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80172c6:	4618      	mov	r0, r3
 80172c8:	3748      	adds	r7, #72	; 0x48
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd80      	pop	{r7, pc}
 80172ce:	bf00      	nop
 80172d0:	0801afd0 	.word	0x0801afd0
 80172d4:	0801b1ac 	.word	0x0801b1ac
 80172d8:	0801b018 	.word	0x0801b018
 80172dc:	0801b1c8 	.word	0x0801b1c8
 80172e0:	0801b1e8 	.word	0x0801b1e8
 80172e4:	08016ff5 	.word	0x08016ff5

080172e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b086      	sub	sp, #24
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
 80172f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80172f2:	230e      	movs	r3, #14
 80172f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	895b      	ldrh	r3, [r3, #10]
 80172fa:	2b0e      	cmp	r3, #14
 80172fc:	d96e      	bls.n	80173dc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	7bdb      	ldrb	r3, [r3, #15]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d106      	bne.n	8017314 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017306:	683b      	ldr	r3, [r7, #0]
 8017308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801730c:	3301      	adds	r3, #1
 801730e:	b2da      	uxtb	r2, r3
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	685b      	ldr	r3, [r3, #4]
 8017318:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801731a:	693b      	ldr	r3, [r7, #16]
 801731c:	7b1a      	ldrb	r2, [r3, #12]
 801731e:	7b5b      	ldrb	r3, [r3, #13]
 8017320:	021b      	lsls	r3, r3, #8
 8017322:	4313      	orrs	r3, r2
 8017324:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017326:	693b      	ldr	r3, [r7, #16]
 8017328:	781b      	ldrb	r3, [r3, #0]
 801732a:	f003 0301 	and.w	r3, r3, #1
 801732e:	2b00      	cmp	r3, #0
 8017330:	d023      	beq.n	801737a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017332:	693b      	ldr	r3, [r7, #16]
 8017334:	781b      	ldrb	r3, [r3, #0]
 8017336:	2b01      	cmp	r3, #1
 8017338:	d10f      	bne.n	801735a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801733a:	693b      	ldr	r3, [r7, #16]
 801733c:	785b      	ldrb	r3, [r3, #1]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d11b      	bne.n	801737a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017342:	693b      	ldr	r3, [r7, #16]
 8017344:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017346:	2b5e      	cmp	r3, #94	; 0x5e
 8017348:	d117      	bne.n	801737a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	7b5b      	ldrb	r3, [r3, #13]
 801734e:	f043 0310 	orr.w	r3, r3, #16
 8017352:	b2da      	uxtb	r2, r3
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	735a      	strb	r2, [r3, #13]
 8017358:	e00f      	b.n	801737a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801735a:	693b      	ldr	r3, [r7, #16]
 801735c:	2206      	movs	r2, #6
 801735e:	4928      	ldr	r1, [pc, #160]	; (8017400 <ethernet_input+0x118>)
 8017360:	4618      	mov	r0, r3
 8017362:	f000 f8bb 	bl	80174dc <memcmp>
 8017366:	4603      	mov	r3, r0
 8017368:	2b00      	cmp	r3, #0
 801736a:	d106      	bne.n	801737a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	7b5b      	ldrb	r3, [r3, #13]
 8017370:	f043 0308 	orr.w	r3, r3, #8
 8017374:	b2da      	uxtb	r2, r3
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801737a:	89fb      	ldrh	r3, [r7, #14]
 801737c:	2b08      	cmp	r3, #8
 801737e:	d003      	beq.n	8017388 <ethernet_input+0xa0>
 8017380:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017384:	d014      	beq.n	80173b0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017386:	e032      	b.n	80173ee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801738e:	f003 0308 	and.w	r3, r3, #8
 8017392:	2b00      	cmp	r3, #0
 8017394:	d024      	beq.n	80173e0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017396:	8afb      	ldrh	r3, [r7, #22]
 8017398:	4619      	mov	r1, r3
 801739a:	6878      	ldr	r0, [r7, #4]
 801739c:	f7f7 f9e4 	bl	800e768 <pbuf_remove_header>
 80173a0:	4603      	mov	r3, r0
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d11e      	bne.n	80173e4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80173a6:	6839      	ldr	r1, [r7, #0]
 80173a8:	6878      	ldr	r0, [r7, #4]
 80173aa:	f7fe ff21 	bl	80161f0 <ip4_input>
      break;
 80173ae:	e013      	b.n	80173d8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80173b6:	f003 0308 	and.w	r3, r3, #8
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d014      	beq.n	80173e8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80173be:	8afb      	ldrh	r3, [r7, #22]
 80173c0:	4619      	mov	r1, r3
 80173c2:	6878      	ldr	r0, [r7, #4]
 80173c4:	f7f7 f9d0 	bl	800e768 <pbuf_remove_header>
 80173c8:	4603      	mov	r3, r0
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d10e      	bne.n	80173ec <ethernet_input+0x104>
        etharp_input(p, netif);
 80173ce:	6839      	ldr	r1, [r7, #0]
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f7fe f8c1 	bl	8015558 <etharp_input>
      break;
 80173d6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80173d8:	2300      	movs	r3, #0
 80173da:	e00c      	b.n	80173f6 <ethernet_input+0x10e>
    goto free_and_return;
 80173dc:	bf00      	nop
 80173de:	e006      	b.n	80173ee <ethernet_input+0x106>
        goto free_and_return;
 80173e0:	bf00      	nop
 80173e2:	e004      	b.n	80173ee <ethernet_input+0x106>
        goto free_and_return;
 80173e4:	bf00      	nop
 80173e6:	e002      	b.n	80173ee <ethernet_input+0x106>
        goto free_and_return;
 80173e8:	bf00      	nop
 80173ea:	e000      	b.n	80173ee <ethernet_input+0x106>
        goto free_and_return;
 80173ec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80173ee:	6878      	ldr	r0, [r7, #4]
 80173f0:	f7f7 fa40 	bl	800e874 <pbuf_free>
  return ERR_OK;
 80173f4:	2300      	movs	r3, #0
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	3718      	adds	r7, #24
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}
 80173fe:	bf00      	nop
 8017400:	0801b38c 	.word	0x0801b38c

08017404 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017404:	b580      	push	{r7, lr}
 8017406:	b086      	sub	sp, #24
 8017408:	af00      	add	r7, sp, #0
 801740a:	60f8      	str	r0, [r7, #12]
 801740c:	60b9      	str	r1, [r7, #8]
 801740e:	607a      	str	r2, [r7, #4]
 8017410:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017412:	8c3b      	ldrh	r3, [r7, #32]
 8017414:	4618      	mov	r0, r3
 8017416:	f7f5 fecf 	bl	800d1b8 <lwip_htons>
 801741a:	4603      	mov	r3, r0
 801741c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801741e:	210e      	movs	r1, #14
 8017420:	68b8      	ldr	r0, [r7, #8]
 8017422:	f7f7 f991 	bl	800e748 <pbuf_add_header>
 8017426:	4603      	mov	r3, r0
 8017428:	2b00      	cmp	r3, #0
 801742a:	d125      	bne.n	8017478 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801742c:	68bb      	ldr	r3, [r7, #8]
 801742e:	685b      	ldr	r3, [r3, #4]
 8017430:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017432:	693b      	ldr	r3, [r7, #16]
 8017434:	8afa      	ldrh	r2, [r7, #22]
 8017436:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017438:	693b      	ldr	r3, [r7, #16]
 801743a:	2206      	movs	r2, #6
 801743c:	6839      	ldr	r1, [r7, #0]
 801743e:	4618      	mov	r0, r3
 8017440:	f000 f85c 	bl	80174fc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017444:	693b      	ldr	r3, [r7, #16]
 8017446:	3306      	adds	r3, #6
 8017448:	2206      	movs	r2, #6
 801744a:	6879      	ldr	r1, [r7, #4]
 801744c:	4618      	mov	r0, r3
 801744e:	f000 f855 	bl	80174fc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017458:	2b06      	cmp	r3, #6
 801745a:	d006      	beq.n	801746a <ethernet_output+0x66>
 801745c:	4b0a      	ldr	r3, [pc, #40]	; (8017488 <ethernet_output+0x84>)
 801745e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017462:	490a      	ldr	r1, [pc, #40]	; (801748c <ethernet_output+0x88>)
 8017464:	480a      	ldr	r0, [pc, #40]	; (8017490 <ethernet_output+0x8c>)
 8017466:	f000 f85f 	bl	8017528 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	699b      	ldr	r3, [r3, #24]
 801746e:	68b9      	ldr	r1, [r7, #8]
 8017470:	68f8      	ldr	r0, [r7, #12]
 8017472:	4798      	blx	r3
 8017474:	4603      	mov	r3, r0
 8017476:	e002      	b.n	801747e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017478:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801747a:	f06f 0301 	mvn.w	r3, #1
}
 801747e:	4618      	mov	r0, r3
 8017480:	3718      	adds	r7, #24
 8017482:	46bd      	mov	sp, r7
 8017484:	bd80      	pop	{r7, pc}
 8017486:	bf00      	nop
 8017488:	0801b1f8 	.word	0x0801b1f8
 801748c:	0801b230 	.word	0x0801b230
 8017490:	0801b264 	.word	0x0801b264

08017494 <__libc_init_array>:
 8017494:	b570      	push	{r4, r5, r6, lr}
 8017496:	4d0d      	ldr	r5, [pc, #52]	; (80174cc <__libc_init_array+0x38>)
 8017498:	4c0d      	ldr	r4, [pc, #52]	; (80174d0 <__libc_init_array+0x3c>)
 801749a:	1b64      	subs	r4, r4, r5
 801749c:	10a4      	asrs	r4, r4, #2
 801749e:	2600      	movs	r6, #0
 80174a0:	42a6      	cmp	r6, r4
 80174a2:	d109      	bne.n	80174b8 <__libc_init_array+0x24>
 80174a4:	4d0b      	ldr	r5, [pc, #44]	; (80174d4 <__libc_init_array+0x40>)
 80174a6:	4c0c      	ldr	r4, [pc, #48]	; (80174d8 <__libc_init_array+0x44>)
 80174a8:	f001 f904 	bl	80186b4 <_init>
 80174ac:	1b64      	subs	r4, r4, r5
 80174ae:	10a4      	asrs	r4, r4, #2
 80174b0:	2600      	movs	r6, #0
 80174b2:	42a6      	cmp	r6, r4
 80174b4:	d105      	bne.n	80174c2 <__libc_init_array+0x2e>
 80174b6:	bd70      	pop	{r4, r5, r6, pc}
 80174b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80174bc:	4798      	blx	r3
 80174be:	3601      	adds	r6, #1
 80174c0:	e7ee      	b.n	80174a0 <__libc_init_array+0xc>
 80174c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80174c6:	4798      	blx	r3
 80174c8:	3601      	adds	r6, #1
 80174ca:	e7f2      	b.n	80174b2 <__libc_init_array+0x1e>
 80174cc:	0801b4ec 	.word	0x0801b4ec
 80174d0:	0801b4ec 	.word	0x0801b4ec
 80174d4:	0801b4ec 	.word	0x0801b4ec
 80174d8:	0801b4f0 	.word	0x0801b4f0

080174dc <memcmp>:
 80174dc:	b510      	push	{r4, lr}
 80174de:	3901      	subs	r1, #1
 80174e0:	4402      	add	r2, r0
 80174e2:	4290      	cmp	r0, r2
 80174e4:	d101      	bne.n	80174ea <memcmp+0xe>
 80174e6:	2000      	movs	r0, #0
 80174e8:	e005      	b.n	80174f6 <memcmp+0x1a>
 80174ea:	7803      	ldrb	r3, [r0, #0]
 80174ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80174f0:	42a3      	cmp	r3, r4
 80174f2:	d001      	beq.n	80174f8 <memcmp+0x1c>
 80174f4:	1b18      	subs	r0, r3, r4
 80174f6:	bd10      	pop	{r4, pc}
 80174f8:	3001      	adds	r0, #1
 80174fa:	e7f2      	b.n	80174e2 <memcmp+0x6>

080174fc <memcpy>:
 80174fc:	440a      	add	r2, r1
 80174fe:	4291      	cmp	r1, r2
 8017500:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017504:	d100      	bne.n	8017508 <memcpy+0xc>
 8017506:	4770      	bx	lr
 8017508:	b510      	push	{r4, lr}
 801750a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801750e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017512:	4291      	cmp	r1, r2
 8017514:	d1f9      	bne.n	801750a <memcpy+0xe>
 8017516:	bd10      	pop	{r4, pc}

08017518 <memset>:
 8017518:	4402      	add	r2, r0
 801751a:	4603      	mov	r3, r0
 801751c:	4293      	cmp	r3, r2
 801751e:	d100      	bne.n	8017522 <memset+0xa>
 8017520:	4770      	bx	lr
 8017522:	f803 1b01 	strb.w	r1, [r3], #1
 8017526:	e7f9      	b.n	801751c <memset+0x4>

08017528 <iprintf>:
 8017528:	b40f      	push	{r0, r1, r2, r3}
 801752a:	4b0a      	ldr	r3, [pc, #40]	; (8017554 <iprintf+0x2c>)
 801752c:	b513      	push	{r0, r1, r4, lr}
 801752e:	681c      	ldr	r4, [r3, #0]
 8017530:	b124      	cbz	r4, 801753c <iprintf+0x14>
 8017532:	69a3      	ldr	r3, [r4, #24]
 8017534:	b913      	cbnz	r3, 801753c <iprintf+0x14>
 8017536:	4620      	mov	r0, r4
 8017538:	f000 faba 	bl	8017ab0 <__sinit>
 801753c:	ab05      	add	r3, sp, #20
 801753e:	9a04      	ldr	r2, [sp, #16]
 8017540:	68a1      	ldr	r1, [r4, #8]
 8017542:	9301      	str	r3, [sp, #4]
 8017544:	4620      	mov	r0, r4
 8017546:	f000 fcdd 	bl	8017f04 <_vfiprintf_r>
 801754a:	b002      	add	sp, #8
 801754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017550:	b004      	add	sp, #16
 8017552:	4770      	bx	lr
 8017554:	2000002c 	.word	0x2000002c

08017558 <_puts_r>:
 8017558:	b570      	push	{r4, r5, r6, lr}
 801755a:	460e      	mov	r6, r1
 801755c:	4605      	mov	r5, r0
 801755e:	b118      	cbz	r0, 8017568 <_puts_r+0x10>
 8017560:	6983      	ldr	r3, [r0, #24]
 8017562:	b90b      	cbnz	r3, 8017568 <_puts_r+0x10>
 8017564:	f000 faa4 	bl	8017ab0 <__sinit>
 8017568:	69ab      	ldr	r3, [r5, #24]
 801756a:	68ac      	ldr	r4, [r5, #8]
 801756c:	b913      	cbnz	r3, 8017574 <_puts_r+0x1c>
 801756e:	4628      	mov	r0, r5
 8017570:	f000 fa9e 	bl	8017ab0 <__sinit>
 8017574:	4b2c      	ldr	r3, [pc, #176]	; (8017628 <_puts_r+0xd0>)
 8017576:	429c      	cmp	r4, r3
 8017578:	d120      	bne.n	80175bc <_puts_r+0x64>
 801757a:	686c      	ldr	r4, [r5, #4]
 801757c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801757e:	07db      	lsls	r3, r3, #31
 8017580:	d405      	bmi.n	801758e <_puts_r+0x36>
 8017582:	89a3      	ldrh	r3, [r4, #12]
 8017584:	0598      	lsls	r0, r3, #22
 8017586:	d402      	bmi.n	801758e <_puts_r+0x36>
 8017588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801758a:	f000 fb41 	bl	8017c10 <__retarget_lock_acquire_recursive>
 801758e:	89a3      	ldrh	r3, [r4, #12]
 8017590:	0719      	lsls	r1, r3, #28
 8017592:	d51d      	bpl.n	80175d0 <_puts_r+0x78>
 8017594:	6923      	ldr	r3, [r4, #16]
 8017596:	b1db      	cbz	r3, 80175d0 <_puts_r+0x78>
 8017598:	3e01      	subs	r6, #1
 801759a:	68a3      	ldr	r3, [r4, #8]
 801759c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80175a0:	3b01      	subs	r3, #1
 80175a2:	60a3      	str	r3, [r4, #8]
 80175a4:	bb39      	cbnz	r1, 80175f6 <_puts_r+0x9e>
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	da38      	bge.n	801761c <_puts_r+0xc4>
 80175aa:	4622      	mov	r2, r4
 80175ac:	210a      	movs	r1, #10
 80175ae:	4628      	mov	r0, r5
 80175b0:	f000 f886 	bl	80176c0 <__swbuf_r>
 80175b4:	3001      	adds	r0, #1
 80175b6:	d011      	beq.n	80175dc <_puts_r+0x84>
 80175b8:	250a      	movs	r5, #10
 80175ba:	e011      	b.n	80175e0 <_puts_r+0x88>
 80175bc:	4b1b      	ldr	r3, [pc, #108]	; (801762c <_puts_r+0xd4>)
 80175be:	429c      	cmp	r4, r3
 80175c0:	d101      	bne.n	80175c6 <_puts_r+0x6e>
 80175c2:	68ac      	ldr	r4, [r5, #8]
 80175c4:	e7da      	b.n	801757c <_puts_r+0x24>
 80175c6:	4b1a      	ldr	r3, [pc, #104]	; (8017630 <_puts_r+0xd8>)
 80175c8:	429c      	cmp	r4, r3
 80175ca:	bf08      	it	eq
 80175cc:	68ec      	ldreq	r4, [r5, #12]
 80175ce:	e7d5      	b.n	801757c <_puts_r+0x24>
 80175d0:	4621      	mov	r1, r4
 80175d2:	4628      	mov	r0, r5
 80175d4:	f000 f8c6 	bl	8017764 <__swsetup_r>
 80175d8:	2800      	cmp	r0, #0
 80175da:	d0dd      	beq.n	8017598 <_puts_r+0x40>
 80175dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80175e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80175e2:	07da      	lsls	r2, r3, #31
 80175e4:	d405      	bmi.n	80175f2 <_puts_r+0x9a>
 80175e6:	89a3      	ldrh	r3, [r4, #12]
 80175e8:	059b      	lsls	r3, r3, #22
 80175ea:	d402      	bmi.n	80175f2 <_puts_r+0x9a>
 80175ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80175ee:	f000 fb10 	bl	8017c12 <__retarget_lock_release_recursive>
 80175f2:	4628      	mov	r0, r5
 80175f4:	bd70      	pop	{r4, r5, r6, pc}
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	da04      	bge.n	8017604 <_puts_r+0xac>
 80175fa:	69a2      	ldr	r2, [r4, #24]
 80175fc:	429a      	cmp	r2, r3
 80175fe:	dc06      	bgt.n	801760e <_puts_r+0xb6>
 8017600:	290a      	cmp	r1, #10
 8017602:	d004      	beq.n	801760e <_puts_r+0xb6>
 8017604:	6823      	ldr	r3, [r4, #0]
 8017606:	1c5a      	adds	r2, r3, #1
 8017608:	6022      	str	r2, [r4, #0]
 801760a:	7019      	strb	r1, [r3, #0]
 801760c:	e7c5      	b.n	801759a <_puts_r+0x42>
 801760e:	4622      	mov	r2, r4
 8017610:	4628      	mov	r0, r5
 8017612:	f000 f855 	bl	80176c0 <__swbuf_r>
 8017616:	3001      	adds	r0, #1
 8017618:	d1bf      	bne.n	801759a <_puts_r+0x42>
 801761a:	e7df      	b.n	80175dc <_puts_r+0x84>
 801761c:	6823      	ldr	r3, [r4, #0]
 801761e:	250a      	movs	r5, #10
 8017620:	1c5a      	adds	r2, r3, #1
 8017622:	6022      	str	r2, [r4, #0]
 8017624:	701d      	strb	r5, [r3, #0]
 8017626:	e7db      	b.n	80175e0 <_puts_r+0x88>
 8017628:	0801b470 	.word	0x0801b470
 801762c:	0801b490 	.word	0x0801b490
 8017630:	0801b450 	.word	0x0801b450

08017634 <puts>:
 8017634:	4b02      	ldr	r3, [pc, #8]	; (8017640 <puts+0xc>)
 8017636:	4601      	mov	r1, r0
 8017638:	6818      	ldr	r0, [r3, #0]
 801763a:	f7ff bf8d 	b.w	8017558 <_puts_r>
 801763e:	bf00      	nop
 8017640:	2000002c 	.word	0x2000002c

08017644 <rand>:
 8017644:	4b16      	ldr	r3, [pc, #88]	; (80176a0 <rand+0x5c>)
 8017646:	b510      	push	{r4, lr}
 8017648:	681c      	ldr	r4, [r3, #0]
 801764a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801764c:	b9b3      	cbnz	r3, 801767c <rand+0x38>
 801764e:	2018      	movs	r0, #24
 8017650:	f000 fb46 	bl	8017ce0 <malloc>
 8017654:	63a0      	str	r0, [r4, #56]	; 0x38
 8017656:	b928      	cbnz	r0, 8017664 <rand+0x20>
 8017658:	4602      	mov	r2, r0
 801765a:	4b12      	ldr	r3, [pc, #72]	; (80176a4 <rand+0x60>)
 801765c:	4812      	ldr	r0, [pc, #72]	; (80176a8 <rand+0x64>)
 801765e:	214e      	movs	r1, #78	; 0x4e
 8017660:	f000 f8ee 	bl	8017840 <__assert_func>
 8017664:	4a11      	ldr	r2, [pc, #68]	; (80176ac <rand+0x68>)
 8017666:	4b12      	ldr	r3, [pc, #72]	; (80176b0 <rand+0x6c>)
 8017668:	e9c0 2300 	strd	r2, r3, [r0]
 801766c:	4b11      	ldr	r3, [pc, #68]	; (80176b4 <rand+0x70>)
 801766e:	6083      	str	r3, [r0, #8]
 8017670:	230b      	movs	r3, #11
 8017672:	8183      	strh	r3, [r0, #12]
 8017674:	2201      	movs	r2, #1
 8017676:	2300      	movs	r3, #0
 8017678:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801767c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801767e:	4a0e      	ldr	r2, [pc, #56]	; (80176b8 <rand+0x74>)
 8017680:	6920      	ldr	r0, [r4, #16]
 8017682:	6963      	ldr	r3, [r4, #20]
 8017684:	490d      	ldr	r1, [pc, #52]	; (80176bc <rand+0x78>)
 8017686:	4342      	muls	r2, r0
 8017688:	fb01 2203 	mla	r2, r1, r3, r2
 801768c:	fba0 0101 	umull	r0, r1, r0, r1
 8017690:	1c43      	adds	r3, r0, #1
 8017692:	eb42 0001 	adc.w	r0, r2, r1
 8017696:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801769a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801769e:	bd10      	pop	{r4, pc}
 80176a0:	2000002c 	.word	0x2000002c
 80176a4:	0801b3a0 	.word	0x0801b3a0
 80176a8:	0801b3b7 	.word	0x0801b3b7
 80176ac:	abcd330e 	.word	0xabcd330e
 80176b0:	e66d1234 	.word	0xe66d1234
 80176b4:	0005deec 	.word	0x0005deec
 80176b8:	5851f42d 	.word	0x5851f42d
 80176bc:	4c957f2d 	.word	0x4c957f2d

080176c0 <__swbuf_r>:
 80176c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176c2:	460e      	mov	r6, r1
 80176c4:	4614      	mov	r4, r2
 80176c6:	4605      	mov	r5, r0
 80176c8:	b118      	cbz	r0, 80176d2 <__swbuf_r+0x12>
 80176ca:	6983      	ldr	r3, [r0, #24]
 80176cc:	b90b      	cbnz	r3, 80176d2 <__swbuf_r+0x12>
 80176ce:	f000 f9ef 	bl	8017ab0 <__sinit>
 80176d2:	4b21      	ldr	r3, [pc, #132]	; (8017758 <__swbuf_r+0x98>)
 80176d4:	429c      	cmp	r4, r3
 80176d6:	d12b      	bne.n	8017730 <__swbuf_r+0x70>
 80176d8:	686c      	ldr	r4, [r5, #4]
 80176da:	69a3      	ldr	r3, [r4, #24]
 80176dc:	60a3      	str	r3, [r4, #8]
 80176de:	89a3      	ldrh	r3, [r4, #12]
 80176e0:	071a      	lsls	r2, r3, #28
 80176e2:	d52f      	bpl.n	8017744 <__swbuf_r+0x84>
 80176e4:	6923      	ldr	r3, [r4, #16]
 80176e6:	b36b      	cbz	r3, 8017744 <__swbuf_r+0x84>
 80176e8:	6923      	ldr	r3, [r4, #16]
 80176ea:	6820      	ldr	r0, [r4, #0]
 80176ec:	1ac0      	subs	r0, r0, r3
 80176ee:	6963      	ldr	r3, [r4, #20]
 80176f0:	b2f6      	uxtb	r6, r6
 80176f2:	4283      	cmp	r3, r0
 80176f4:	4637      	mov	r7, r6
 80176f6:	dc04      	bgt.n	8017702 <__swbuf_r+0x42>
 80176f8:	4621      	mov	r1, r4
 80176fa:	4628      	mov	r0, r5
 80176fc:	f000 f944 	bl	8017988 <_fflush_r>
 8017700:	bb30      	cbnz	r0, 8017750 <__swbuf_r+0x90>
 8017702:	68a3      	ldr	r3, [r4, #8]
 8017704:	3b01      	subs	r3, #1
 8017706:	60a3      	str	r3, [r4, #8]
 8017708:	6823      	ldr	r3, [r4, #0]
 801770a:	1c5a      	adds	r2, r3, #1
 801770c:	6022      	str	r2, [r4, #0]
 801770e:	701e      	strb	r6, [r3, #0]
 8017710:	6963      	ldr	r3, [r4, #20]
 8017712:	3001      	adds	r0, #1
 8017714:	4283      	cmp	r3, r0
 8017716:	d004      	beq.n	8017722 <__swbuf_r+0x62>
 8017718:	89a3      	ldrh	r3, [r4, #12]
 801771a:	07db      	lsls	r3, r3, #31
 801771c:	d506      	bpl.n	801772c <__swbuf_r+0x6c>
 801771e:	2e0a      	cmp	r6, #10
 8017720:	d104      	bne.n	801772c <__swbuf_r+0x6c>
 8017722:	4621      	mov	r1, r4
 8017724:	4628      	mov	r0, r5
 8017726:	f000 f92f 	bl	8017988 <_fflush_r>
 801772a:	b988      	cbnz	r0, 8017750 <__swbuf_r+0x90>
 801772c:	4638      	mov	r0, r7
 801772e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017730:	4b0a      	ldr	r3, [pc, #40]	; (801775c <__swbuf_r+0x9c>)
 8017732:	429c      	cmp	r4, r3
 8017734:	d101      	bne.n	801773a <__swbuf_r+0x7a>
 8017736:	68ac      	ldr	r4, [r5, #8]
 8017738:	e7cf      	b.n	80176da <__swbuf_r+0x1a>
 801773a:	4b09      	ldr	r3, [pc, #36]	; (8017760 <__swbuf_r+0xa0>)
 801773c:	429c      	cmp	r4, r3
 801773e:	bf08      	it	eq
 8017740:	68ec      	ldreq	r4, [r5, #12]
 8017742:	e7ca      	b.n	80176da <__swbuf_r+0x1a>
 8017744:	4621      	mov	r1, r4
 8017746:	4628      	mov	r0, r5
 8017748:	f000 f80c 	bl	8017764 <__swsetup_r>
 801774c:	2800      	cmp	r0, #0
 801774e:	d0cb      	beq.n	80176e8 <__swbuf_r+0x28>
 8017750:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017754:	e7ea      	b.n	801772c <__swbuf_r+0x6c>
 8017756:	bf00      	nop
 8017758:	0801b470 	.word	0x0801b470
 801775c:	0801b490 	.word	0x0801b490
 8017760:	0801b450 	.word	0x0801b450

08017764 <__swsetup_r>:
 8017764:	4b32      	ldr	r3, [pc, #200]	; (8017830 <__swsetup_r+0xcc>)
 8017766:	b570      	push	{r4, r5, r6, lr}
 8017768:	681d      	ldr	r5, [r3, #0]
 801776a:	4606      	mov	r6, r0
 801776c:	460c      	mov	r4, r1
 801776e:	b125      	cbz	r5, 801777a <__swsetup_r+0x16>
 8017770:	69ab      	ldr	r3, [r5, #24]
 8017772:	b913      	cbnz	r3, 801777a <__swsetup_r+0x16>
 8017774:	4628      	mov	r0, r5
 8017776:	f000 f99b 	bl	8017ab0 <__sinit>
 801777a:	4b2e      	ldr	r3, [pc, #184]	; (8017834 <__swsetup_r+0xd0>)
 801777c:	429c      	cmp	r4, r3
 801777e:	d10f      	bne.n	80177a0 <__swsetup_r+0x3c>
 8017780:	686c      	ldr	r4, [r5, #4]
 8017782:	89a3      	ldrh	r3, [r4, #12]
 8017784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017788:	0719      	lsls	r1, r3, #28
 801778a:	d42c      	bmi.n	80177e6 <__swsetup_r+0x82>
 801778c:	06dd      	lsls	r5, r3, #27
 801778e:	d411      	bmi.n	80177b4 <__swsetup_r+0x50>
 8017790:	2309      	movs	r3, #9
 8017792:	6033      	str	r3, [r6, #0]
 8017794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017798:	81a3      	strh	r3, [r4, #12]
 801779a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801779e:	e03e      	b.n	801781e <__swsetup_r+0xba>
 80177a0:	4b25      	ldr	r3, [pc, #148]	; (8017838 <__swsetup_r+0xd4>)
 80177a2:	429c      	cmp	r4, r3
 80177a4:	d101      	bne.n	80177aa <__swsetup_r+0x46>
 80177a6:	68ac      	ldr	r4, [r5, #8]
 80177a8:	e7eb      	b.n	8017782 <__swsetup_r+0x1e>
 80177aa:	4b24      	ldr	r3, [pc, #144]	; (801783c <__swsetup_r+0xd8>)
 80177ac:	429c      	cmp	r4, r3
 80177ae:	bf08      	it	eq
 80177b0:	68ec      	ldreq	r4, [r5, #12]
 80177b2:	e7e6      	b.n	8017782 <__swsetup_r+0x1e>
 80177b4:	0758      	lsls	r0, r3, #29
 80177b6:	d512      	bpl.n	80177de <__swsetup_r+0x7a>
 80177b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80177ba:	b141      	cbz	r1, 80177ce <__swsetup_r+0x6a>
 80177bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80177c0:	4299      	cmp	r1, r3
 80177c2:	d002      	beq.n	80177ca <__swsetup_r+0x66>
 80177c4:	4630      	mov	r0, r6
 80177c6:	f000 fa93 	bl	8017cf0 <_free_r>
 80177ca:	2300      	movs	r3, #0
 80177cc:	6363      	str	r3, [r4, #52]	; 0x34
 80177ce:	89a3      	ldrh	r3, [r4, #12]
 80177d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80177d4:	81a3      	strh	r3, [r4, #12]
 80177d6:	2300      	movs	r3, #0
 80177d8:	6063      	str	r3, [r4, #4]
 80177da:	6923      	ldr	r3, [r4, #16]
 80177dc:	6023      	str	r3, [r4, #0]
 80177de:	89a3      	ldrh	r3, [r4, #12]
 80177e0:	f043 0308 	orr.w	r3, r3, #8
 80177e4:	81a3      	strh	r3, [r4, #12]
 80177e6:	6923      	ldr	r3, [r4, #16]
 80177e8:	b94b      	cbnz	r3, 80177fe <__swsetup_r+0x9a>
 80177ea:	89a3      	ldrh	r3, [r4, #12]
 80177ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80177f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80177f4:	d003      	beq.n	80177fe <__swsetup_r+0x9a>
 80177f6:	4621      	mov	r1, r4
 80177f8:	4630      	mov	r0, r6
 80177fa:	f000 fa31 	bl	8017c60 <__smakebuf_r>
 80177fe:	89a0      	ldrh	r0, [r4, #12]
 8017800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017804:	f010 0301 	ands.w	r3, r0, #1
 8017808:	d00a      	beq.n	8017820 <__swsetup_r+0xbc>
 801780a:	2300      	movs	r3, #0
 801780c:	60a3      	str	r3, [r4, #8]
 801780e:	6963      	ldr	r3, [r4, #20]
 8017810:	425b      	negs	r3, r3
 8017812:	61a3      	str	r3, [r4, #24]
 8017814:	6923      	ldr	r3, [r4, #16]
 8017816:	b943      	cbnz	r3, 801782a <__swsetup_r+0xc6>
 8017818:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801781c:	d1ba      	bne.n	8017794 <__swsetup_r+0x30>
 801781e:	bd70      	pop	{r4, r5, r6, pc}
 8017820:	0781      	lsls	r1, r0, #30
 8017822:	bf58      	it	pl
 8017824:	6963      	ldrpl	r3, [r4, #20]
 8017826:	60a3      	str	r3, [r4, #8]
 8017828:	e7f4      	b.n	8017814 <__swsetup_r+0xb0>
 801782a:	2000      	movs	r0, #0
 801782c:	e7f7      	b.n	801781e <__swsetup_r+0xba>
 801782e:	bf00      	nop
 8017830:	2000002c 	.word	0x2000002c
 8017834:	0801b470 	.word	0x0801b470
 8017838:	0801b490 	.word	0x0801b490
 801783c:	0801b450 	.word	0x0801b450

08017840 <__assert_func>:
 8017840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017842:	4614      	mov	r4, r2
 8017844:	461a      	mov	r2, r3
 8017846:	4b09      	ldr	r3, [pc, #36]	; (801786c <__assert_func+0x2c>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	4605      	mov	r5, r0
 801784c:	68d8      	ldr	r0, [r3, #12]
 801784e:	b14c      	cbz	r4, 8017864 <__assert_func+0x24>
 8017850:	4b07      	ldr	r3, [pc, #28]	; (8017870 <__assert_func+0x30>)
 8017852:	9100      	str	r1, [sp, #0]
 8017854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017858:	4906      	ldr	r1, [pc, #24]	; (8017874 <__assert_func+0x34>)
 801785a:	462b      	mov	r3, r5
 801785c:	f000 f9a6 	bl	8017bac <fiprintf>
 8017860:	f000 fe7a 	bl	8018558 <abort>
 8017864:	4b04      	ldr	r3, [pc, #16]	; (8017878 <__assert_func+0x38>)
 8017866:	461c      	mov	r4, r3
 8017868:	e7f3      	b.n	8017852 <__assert_func+0x12>
 801786a:	bf00      	nop
 801786c:	2000002c 	.word	0x2000002c
 8017870:	0801b412 	.word	0x0801b412
 8017874:	0801b41f 	.word	0x0801b41f
 8017878:	0801b44d 	.word	0x0801b44d

0801787c <__sflush_r>:
 801787c:	898a      	ldrh	r2, [r1, #12]
 801787e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017882:	4605      	mov	r5, r0
 8017884:	0710      	lsls	r0, r2, #28
 8017886:	460c      	mov	r4, r1
 8017888:	d458      	bmi.n	801793c <__sflush_r+0xc0>
 801788a:	684b      	ldr	r3, [r1, #4]
 801788c:	2b00      	cmp	r3, #0
 801788e:	dc05      	bgt.n	801789c <__sflush_r+0x20>
 8017890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017892:	2b00      	cmp	r3, #0
 8017894:	dc02      	bgt.n	801789c <__sflush_r+0x20>
 8017896:	2000      	movs	r0, #0
 8017898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801789c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801789e:	2e00      	cmp	r6, #0
 80178a0:	d0f9      	beq.n	8017896 <__sflush_r+0x1a>
 80178a2:	2300      	movs	r3, #0
 80178a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80178a8:	682f      	ldr	r7, [r5, #0]
 80178aa:	602b      	str	r3, [r5, #0]
 80178ac:	d032      	beq.n	8017914 <__sflush_r+0x98>
 80178ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80178b0:	89a3      	ldrh	r3, [r4, #12]
 80178b2:	075a      	lsls	r2, r3, #29
 80178b4:	d505      	bpl.n	80178c2 <__sflush_r+0x46>
 80178b6:	6863      	ldr	r3, [r4, #4]
 80178b8:	1ac0      	subs	r0, r0, r3
 80178ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80178bc:	b10b      	cbz	r3, 80178c2 <__sflush_r+0x46>
 80178be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80178c0:	1ac0      	subs	r0, r0, r3
 80178c2:	2300      	movs	r3, #0
 80178c4:	4602      	mov	r2, r0
 80178c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80178c8:	6a21      	ldr	r1, [r4, #32]
 80178ca:	4628      	mov	r0, r5
 80178cc:	47b0      	blx	r6
 80178ce:	1c43      	adds	r3, r0, #1
 80178d0:	89a3      	ldrh	r3, [r4, #12]
 80178d2:	d106      	bne.n	80178e2 <__sflush_r+0x66>
 80178d4:	6829      	ldr	r1, [r5, #0]
 80178d6:	291d      	cmp	r1, #29
 80178d8:	d82c      	bhi.n	8017934 <__sflush_r+0xb8>
 80178da:	4a2a      	ldr	r2, [pc, #168]	; (8017984 <__sflush_r+0x108>)
 80178dc:	40ca      	lsrs	r2, r1
 80178de:	07d6      	lsls	r6, r2, #31
 80178e0:	d528      	bpl.n	8017934 <__sflush_r+0xb8>
 80178e2:	2200      	movs	r2, #0
 80178e4:	6062      	str	r2, [r4, #4]
 80178e6:	04d9      	lsls	r1, r3, #19
 80178e8:	6922      	ldr	r2, [r4, #16]
 80178ea:	6022      	str	r2, [r4, #0]
 80178ec:	d504      	bpl.n	80178f8 <__sflush_r+0x7c>
 80178ee:	1c42      	adds	r2, r0, #1
 80178f0:	d101      	bne.n	80178f6 <__sflush_r+0x7a>
 80178f2:	682b      	ldr	r3, [r5, #0]
 80178f4:	b903      	cbnz	r3, 80178f8 <__sflush_r+0x7c>
 80178f6:	6560      	str	r0, [r4, #84]	; 0x54
 80178f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80178fa:	602f      	str	r7, [r5, #0]
 80178fc:	2900      	cmp	r1, #0
 80178fe:	d0ca      	beq.n	8017896 <__sflush_r+0x1a>
 8017900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017904:	4299      	cmp	r1, r3
 8017906:	d002      	beq.n	801790e <__sflush_r+0x92>
 8017908:	4628      	mov	r0, r5
 801790a:	f000 f9f1 	bl	8017cf0 <_free_r>
 801790e:	2000      	movs	r0, #0
 8017910:	6360      	str	r0, [r4, #52]	; 0x34
 8017912:	e7c1      	b.n	8017898 <__sflush_r+0x1c>
 8017914:	6a21      	ldr	r1, [r4, #32]
 8017916:	2301      	movs	r3, #1
 8017918:	4628      	mov	r0, r5
 801791a:	47b0      	blx	r6
 801791c:	1c41      	adds	r1, r0, #1
 801791e:	d1c7      	bne.n	80178b0 <__sflush_r+0x34>
 8017920:	682b      	ldr	r3, [r5, #0]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d0c4      	beq.n	80178b0 <__sflush_r+0x34>
 8017926:	2b1d      	cmp	r3, #29
 8017928:	d001      	beq.n	801792e <__sflush_r+0xb2>
 801792a:	2b16      	cmp	r3, #22
 801792c:	d101      	bne.n	8017932 <__sflush_r+0xb6>
 801792e:	602f      	str	r7, [r5, #0]
 8017930:	e7b1      	b.n	8017896 <__sflush_r+0x1a>
 8017932:	89a3      	ldrh	r3, [r4, #12]
 8017934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017938:	81a3      	strh	r3, [r4, #12]
 801793a:	e7ad      	b.n	8017898 <__sflush_r+0x1c>
 801793c:	690f      	ldr	r7, [r1, #16]
 801793e:	2f00      	cmp	r7, #0
 8017940:	d0a9      	beq.n	8017896 <__sflush_r+0x1a>
 8017942:	0793      	lsls	r3, r2, #30
 8017944:	680e      	ldr	r6, [r1, #0]
 8017946:	bf08      	it	eq
 8017948:	694b      	ldreq	r3, [r1, #20]
 801794a:	600f      	str	r7, [r1, #0]
 801794c:	bf18      	it	ne
 801794e:	2300      	movne	r3, #0
 8017950:	eba6 0807 	sub.w	r8, r6, r7
 8017954:	608b      	str	r3, [r1, #8]
 8017956:	f1b8 0f00 	cmp.w	r8, #0
 801795a:	dd9c      	ble.n	8017896 <__sflush_r+0x1a>
 801795c:	6a21      	ldr	r1, [r4, #32]
 801795e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017960:	4643      	mov	r3, r8
 8017962:	463a      	mov	r2, r7
 8017964:	4628      	mov	r0, r5
 8017966:	47b0      	blx	r6
 8017968:	2800      	cmp	r0, #0
 801796a:	dc06      	bgt.n	801797a <__sflush_r+0xfe>
 801796c:	89a3      	ldrh	r3, [r4, #12]
 801796e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017972:	81a3      	strh	r3, [r4, #12]
 8017974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017978:	e78e      	b.n	8017898 <__sflush_r+0x1c>
 801797a:	4407      	add	r7, r0
 801797c:	eba8 0800 	sub.w	r8, r8, r0
 8017980:	e7e9      	b.n	8017956 <__sflush_r+0xda>
 8017982:	bf00      	nop
 8017984:	20400001 	.word	0x20400001

08017988 <_fflush_r>:
 8017988:	b538      	push	{r3, r4, r5, lr}
 801798a:	690b      	ldr	r3, [r1, #16]
 801798c:	4605      	mov	r5, r0
 801798e:	460c      	mov	r4, r1
 8017990:	b913      	cbnz	r3, 8017998 <_fflush_r+0x10>
 8017992:	2500      	movs	r5, #0
 8017994:	4628      	mov	r0, r5
 8017996:	bd38      	pop	{r3, r4, r5, pc}
 8017998:	b118      	cbz	r0, 80179a2 <_fflush_r+0x1a>
 801799a:	6983      	ldr	r3, [r0, #24]
 801799c:	b90b      	cbnz	r3, 80179a2 <_fflush_r+0x1a>
 801799e:	f000 f887 	bl	8017ab0 <__sinit>
 80179a2:	4b14      	ldr	r3, [pc, #80]	; (80179f4 <_fflush_r+0x6c>)
 80179a4:	429c      	cmp	r4, r3
 80179a6:	d11b      	bne.n	80179e0 <_fflush_r+0x58>
 80179a8:	686c      	ldr	r4, [r5, #4]
 80179aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d0ef      	beq.n	8017992 <_fflush_r+0xa>
 80179b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80179b4:	07d0      	lsls	r0, r2, #31
 80179b6:	d404      	bmi.n	80179c2 <_fflush_r+0x3a>
 80179b8:	0599      	lsls	r1, r3, #22
 80179ba:	d402      	bmi.n	80179c2 <_fflush_r+0x3a>
 80179bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80179be:	f000 f927 	bl	8017c10 <__retarget_lock_acquire_recursive>
 80179c2:	4628      	mov	r0, r5
 80179c4:	4621      	mov	r1, r4
 80179c6:	f7ff ff59 	bl	801787c <__sflush_r>
 80179ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80179cc:	07da      	lsls	r2, r3, #31
 80179ce:	4605      	mov	r5, r0
 80179d0:	d4e0      	bmi.n	8017994 <_fflush_r+0xc>
 80179d2:	89a3      	ldrh	r3, [r4, #12]
 80179d4:	059b      	lsls	r3, r3, #22
 80179d6:	d4dd      	bmi.n	8017994 <_fflush_r+0xc>
 80179d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80179da:	f000 f91a 	bl	8017c12 <__retarget_lock_release_recursive>
 80179de:	e7d9      	b.n	8017994 <_fflush_r+0xc>
 80179e0:	4b05      	ldr	r3, [pc, #20]	; (80179f8 <_fflush_r+0x70>)
 80179e2:	429c      	cmp	r4, r3
 80179e4:	d101      	bne.n	80179ea <_fflush_r+0x62>
 80179e6:	68ac      	ldr	r4, [r5, #8]
 80179e8:	e7df      	b.n	80179aa <_fflush_r+0x22>
 80179ea:	4b04      	ldr	r3, [pc, #16]	; (80179fc <_fflush_r+0x74>)
 80179ec:	429c      	cmp	r4, r3
 80179ee:	bf08      	it	eq
 80179f0:	68ec      	ldreq	r4, [r5, #12]
 80179f2:	e7da      	b.n	80179aa <_fflush_r+0x22>
 80179f4:	0801b470 	.word	0x0801b470
 80179f8:	0801b490 	.word	0x0801b490
 80179fc:	0801b450 	.word	0x0801b450

08017a00 <std>:
 8017a00:	2300      	movs	r3, #0
 8017a02:	b510      	push	{r4, lr}
 8017a04:	4604      	mov	r4, r0
 8017a06:	e9c0 3300 	strd	r3, r3, [r0]
 8017a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017a0e:	6083      	str	r3, [r0, #8]
 8017a10:	8181      	strh	r1, [r0, #12]
 8017a12:	6643      	str	r3, [r0, #100]	; 0x64
 8017a14:	81c2      	strh	r2, [r0, #14]
 8017a16:	6183      	str	r3, [r0, #24]
 8017a18:	4619      	mov	r1, r3
 8017a1a:	2208      	movs	r2, #8
 8017a1c:	305c      	adds	r0, #92	; 0x5c
 8017a1e:	f7ff fd7b 	bl	8017518 <memset>
 8017a22:	4b05      	ldr	r3, [pc, #20]	; (8017a38 <std+0x38>)
 8017a24:	6263      	str	r3, [r4, #36]	; 0x24
 8017a26:	4b05      	ldr	r3, [pc, #20]	; (8017a3c <std+0x3c>)
 8017a28:	62a3      	str	r3, [r4, #40]	; 0x28
 8017a2a:	4b05      	ldr	r3, [pc, #20]	; (8017a40 <std+0x40>)
 8017a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017a2e:	4b05      	ldr	r3, [pc, #20]	; (8017a44 <std+0x44>)
 8017a30:	6224      	str	r4, [r4, #32]
 8017a32:	6323      	str	r3, [r4, #48]	; 0x30
 8017a34:	bd10      	pop	{r4, pc}
 8017a36:	bf00      	nop
 8017a38:	080184ad 	.word	0x080184ad
 8017a3c:	080184cf 	.word	0x080184cf
 8017a40:	08018507 	.word	0x08018507
 8017a44:	0801852b 	.word	0x0801852b

08017a48 <_cleanup_r>:
 8017a48:	4901      	ldr	r1, [pc, #4]	; (8017a50 <_cleanup_r+0x8>)
 8017a4a:	f000 b8c1 	b.w	8017bd0 <_fwalk_reent>
 8017a4e:	bf00      	nop
 8017a50:	08017989 	.word	0x08017989

08017a54 <__sfmoreglue>:
 8017a54:	b570      	push	{r4, r5, r6, lr}
 8017a56:	2268      	movs	r2, #104	; 0x68
 8017a58:	1e4d      	subs	r5, r1, #1
 8017a5a:	4355      	muls	r5, r2
 8017a5c:	460e      	mov	r6, r1
 8017a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017a62:	f000 f9b1 	bl	8017dc8 <_malloc_r>
 8017a66:	4604      	mov	r4, r0
 8017a68:	b140      	cbz	r0, 8017a7c <__sfmoreglue+0x28>
 8017a6a:	2100      	movs	r1, #0
 8017a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8017a70:	300c      	adds	r0, #12
 8017a72:	60a0      	str	r0, [r4, #8]
 8017a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017a78:	f7ff fd4e 	bl	8017518 <memset>
 8017a7c:	4620      	mov	r0, r4
 8017a7e:	bd70      	pop	{r4, r5, r6, pc}

08017a80 <__sfp_lock_acquire>:
 8017a80:	4801      	ldr	r0, [pc, #4]	; (8017a88 <__sfp_lock_acquire+0x8>)
 8017a82:	f000 b8c5 	b.w	8017c10 <__retarget_lock_acquire_recursive>
 8017a86:	bf00      	nop
 8017a88:	2000986d 	.word	0x2000986d

08017a8c <__sfp_lock_release>:
 8017a8c:	4801      	ldr	r0, [pc, #4]	; (8017a94 <__sfp_lock_release+0x8>)
 8017a8e:	f000 b8c0 	b.w	8017c12 <__retarget_lock_release_recursive>
 8017a92:	bf00      	nop
 8017a94:	2000986d 	.word	0x2000986d

08017a98 <__sinit_lock_acquire>:
 8017a98:	4801      	ldr	r0, [pc, #4]	; (8017aa0 <__sinit_lock_acquire+0x8>)
 8017a9a:	f000 b8b9 	b.w	8017c10 <__retarget_lock_acquire_recursive>
 8017a9e:	bf00      	nop
 8017aa0:	2000986e 	.word	0x2000986e

08017aa4 <__sinit_lock_release>:
 8017aa4:	4801      	ldr	r0, [pc, #4]	; (8017aac <__sinit_lock_release+0x8>)
 8017aa6:	f000 b8b4 	b.w	8017c12 <__retarget_lock_release_recursive>
 8017aaa:	bf00      	nop
 8017aac:	2000986e 	.word	0x2000986e

08017ab0 <__sinit>:
 8017ab0:	b510      	push	{r4, lr}
 8017ab2:	4604      	mov	r4, r0
 8017ab4:	f7ff fff0 	bl	8017a98 <__sinit_lock_acquire>
 8017ab8:	69a3      	ldr	r3, [r4, #24]
 8017aba:	b11b      	cbz	r3, 8017ac4 <__sinit+0x14>
 8017abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ac0:	f7ff bff0 	b.w	8017aa4 <__sinit_lock_release>
 8017ac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017ac8:	6523      	str	r3, [r4, #80]	; 0x50
 8017aca:	4b13      	ldr	r3, [pc, #76]	; (8017b18 <__sinit+0x68>)
 8017acc:	4a13      	ldr	r2, [pc, #76]	; (8017b1c <__sinit+0x6c>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	62a2      	str	r2, [r4, #40]	; 0x28
 8017ad2:	42a3      	cmp	r3, r4
 8017ad4:	bf04      	itt	eq
 8017ad6:	2301      	moveq	r3, #1
 8017ad8:	61a3      	streq	r3, [r4, #24]
 8017ada:	4620      	mov	r0, r4
 8017adc:	f000 f820 	bl	8017b20 <__sfp>
 8017ae0:	6060      	str	r0, [r4, #4]
 8017ae2:	4620      	mov	r0, r4
 8017ae4:	f000 f81c 	bl	8017b20 <__sfp>
 8017ae8:	60a0      	str	r0, [r4, #8]
 8017aea:	4620      	mov	r0, r4
 8017aec:	f000 f818 	bl	8017b20 <__sfp>
 8017af0:	2200      	movs	r2, #0
 8017af2:	60e0      	str	r0, [r4, #12]
 8017af4:	2104      	movs	r1, #4
 8017af6:	6860      	ldr	r0, [r4, #4]
 8017af8:	f7ff ff82 	bl	8017a00 <std>
 8017afc:	68a0      	ldr	r0, [r4, #8]
 8017afe:	2201      	movs	r2, #1
 8017b00:	2109      	movs	r1, #9
 8017b02:	f7ff ff7d 	bl	8017a00 <std>
 8017b06:	68e0      	ldr	r0, [r4, #12]
 8017b08:	2202      	movs	r2, #2
 8017b0a:	2112      	movs	r1, #18
 8017b0c:	f7ff ff78 	bl	8017a00 <std>
 8017b10:	2301      	movs	r3, #1
 8017b12:	61a3      	str	r3, [r4, #24]
 8017b14:	e7d2      	b.n	8017abc <__sinit+0xc>
 8017b16:	bf00      	nop
 8017b18:	0801b39c 	.word	0x0801b39c
 8017b1c:	08017a49 	.word	0x08017a49

08017b20 <__sfp>:
 8017b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b22:	4607      	mov	r7, r0
 8017b24:	f7ff ffac 	bl	8017a80 <__sfp_lock_acquire>
 8017b28:	4b1e      	ldr	r3, [pc, #120]	; (8017ba4 <__sfp+0x84>)
 8017b2a:	681e      	ldr	r6, [r3, #0]
 8017b2c:	69b3      	ldr	r3, [r6, #24]
 8017b2e:	b913      	cbnz	r3, 8017b36 <__sfp+0x16>
 8017b30:	4630      	mov	r0, r6
 8017b32:	f7ff ffbd 	bl	8017ab0 <__sinit>
 8017b36:	3648      	adds	r6, #72	; 0x48
 8017b38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017b3c:	3b01      	subs	r3, #1
 8017b3e:	d503      	bpl.n	8017b48 <__sfp+0x28>
 8017b40:	6833      	ldr	r3, [r6, #0]
 8017b42:	b30b      	cbz	r3, 8017b88 <__sfp+0x68>
 8017b44:	6836      	ldr	r6, [r6, #0]
 8017b46:	e7f7      	b.n	8017b38 <__sfp+0x18>
 8017b48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017b4c:	b9d5      	cbnz	r5, 8017b84 <__sfp+0x64>
 8017b4e:	4b16      	ldr	r3, [pc, #88]	; (8017ba8 <__sfp+0x88>)
 8017b50:	60e3      	str	r3, [r4, #12]
 8017b52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017b56:	6665      	str	r5, [r4, #100]	; 0x64
 8017b58:	f000 f859 	bl	8017c0e <__retarget_lock_init_recursive>
 8017b5c:	f7ff ff96 	bl	8017a8c <__sfp_lock_release>
 8017b60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017b64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017b68:	6025      	str	r5, [r4, #0]
 8017b6a:	61a5      	str	r5, [r4, #24]
 8017b6c:	2208      	movs	r2, #8
 8017b6e:	4629      	mov	r1, r5
 8017b70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017b74:	f7ff fcd0 	bl	8017518 <memset>
 8017b78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017b7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017b80:	4620      	mov	r0, r4
 8017b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b84:	3468      	adds	r4, #104	; 0x68
 8017b86:	e7d9      	b.n	8017b3c <__sfp+0x1c>
 8017b88:	2104      	movs	r1, #4
 8017b8a:	4638      	mov	r0, r7
 8017b8c:	f7ff ff62 	bl	8017a54 <__sfmoreglue>
 8017b90:	4604      	mov	r4, r0
 8017b92:	6030      	str	r0, [r6, #0]
 8017b94:	2800      	cmp	r0, #0
 8017b96:	d1d5      	bne.n	8017b44 <__sfp+0x24>
 8017b98:	f7ff ff78 	bl	8017a8c <__sfp_lock_release>
 8017b9c:	230c      	movs	r3, #12
 8017b9e:	603b      	str	r3, [r7, #0]
 8017ba0:	e7ee      	b.n	8017b80 <__sfp+0x60>
 8017ba2:	bf00      	nop
 8017ba4:	0801b39c 	.word	0x0801b39c
 8017ba8:	ffff0001 	.word	0xffff0001

08017bac <fiprintf>:
 8017bac:	b40e      	push	{r1, r2, r3}
 8017bae:	b503      	push	{r0, r1, lr}
 8017bb0:	4601      	mov	r1, r0
 8017bb2:	ab03      	add	r3, sp, #12
 8017bb4:	4805      	ldr	r0, [pc, #20]	; (8017bcc <fiprintf+0x20>)
 8017bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bba:	6800      	ldr	r0, [r0, #0]
 8017bbc:	9301      	str	r3, [sp, #4]
 8017bbe:	f000 f9a1 	bl	8017f04 <_vfiprintf_r>
 8017bc2:	b002      	add	sp, #8
 8017bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017bc8:	b003      	add	sp, #12
 8017bca:	4770      	bx	lr
 8017bcc:	2000002c 	.word	0x2000002c

08017bd0 <_fwalk_reent>:
 8017bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bd4:	4606      	mov	r6, r0
 8017bd6:	4688      	mov	r8, r1
 8017bd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017bdc:	2700      	movs	r7, #0
 8017bde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017be2:	f1b9 0901 	subs.w	r9, r9, #1
 8017be6:	d505      	bpl.n	8017bf4 <_fwalk_reent+0x24>
 8017be8:	6824      	ldr	r4, [r4, #0]
 8017bea:	2c00      	cmp	r4, #0
 8017bec:	d1f7      	bne.n	8017bde <_fwalk_reent+0xe>
 8017bee:	4638      	mov	r0, r7
 8017bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bf4:	89ab      	ldrh	r3, [r5, #12]
 8017bf6:	2b01      	cmp	r3, #1
 8017bf8:	d907      	bls.n	8017c0a <_fwalk_reent+0x3a>
 8017bfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017bfe:	3301      	adds	r3, #1
 8017c00:	d003      	beq.n	8017c0a <_fwalk_reent+0x3a>
 8017c02:	4629      	mov	r1, r5
 8017c04:	4630      	mov	r0, r6
 8017c06:	47c0      	blx	r8
 8017c08:	4307      	orrs	r7, r0
 8017c0a:	3568      	adds	r5, #104	; 0x68
 8017c0c:	e7e9      	b.n	8017be2 <_fwalk_reent+0x12>

08017c0e <__retarget_lock_init_recursive>:
 8017c0e:	4770      	bx	lr

08017c10 <__retarget_lock_acquire_recursive>:
 8017c10:	4770      	bx	lr

08017c12 <__retarget_lock_release_recursive>:
 8017c12:	4770      	bx	lr

08017c14 <__swhatbuf_r>:
 8017c14:	b570      	push	{r4, r5, r6, lr}
 8017c16:	460e      	mov	r6, r1
 8017c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c1c:	2900      	cmp	r1, #0
 8017c1e:	b096      	sub	sp, #88	; 0x58
 8017c20:	4614      	mov	r4, r2
 8017c22:	461d      	mov	r5, r3
 8017c24:	da08      	bge.n	8017c38 <__swhatbuf_r+0x24>
 8017c26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	602a      	str	r2, [r5, #0]
 8017c2e:	061a      	lsls	r2, r3, #24
 8017c30:	d410      	bmi.n	8017c54 <__swhatbuf_r+0x40>
 8017c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017c36:	e00e      	b.n	8017c56 <__swhatbuf_r+0x42>
 8017c38:	466a      	mov	r2, sp
 8017c3a:	f000 fca5 	bl	8018588 <_fstat_r>
 8017c3e:	2800      	cmp	r0, #0
 8017c40:	dbf1      	blt.n	8017c26 <__swhatbuf_r+0x12>
 8017c42:	9a01      	ldr	r2, [sp, #4]
 8017c44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017c48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017c4c:	425a      	negs	r2, r3
 8017c4e:	415a      	adcs	r2, r3
 8017c50:	602a      	str	r2, [r5, #0]
 8017c52:	e7ee      	b.n	8017c32 <__swhatbuf_r+0x1e>
 8017c54:	2340      	movs	r3, #64	; 0x40
 8017c56:	2000      	movs	r0, #0
 8017c58:	6023      	str	r3, [r4, #0]
 8017c5a:	b016      	add	sp, #88	; 0x58
 8017c5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017c60 <__smakebuf_r>:
 8017c60:	898b      	ldrh	r3, [r1, #12]
 8017c62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017c64:	079d      	lsls	r5, r3, #30
 8017c66:	4606      	mov	r6, r0
 8017c68:	460c      	mov	r4, r1
 8017c6a:	d507      	bpl.n	8017c7c <__smakebuf_r+0x1c>
 8017c6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017c70:	6023      	str	r3, [r4, #0]
 8017c72:	6123      	str	r3, [r4, #16]
 8017c74:	2301      	movs	r3, #1
 8017c76:	6163      	str	r3, [r4, #20]
 8017c78:	b002      	add	sp, #8
 8017c7a:	bd70      	pop	{r4, r5, r6, pc}
 8017c7c:	ab01      	add	r3, sp, #4
 8017c7e:	466a      	mov	r2, sp
 8017c80:	f7ff ffc8 	bl	8017c14 <__swhatbuf_r>
 8017c84:	9900      	ldr	r1, [sp, #0]
 8017c86:	4605      	mov	r5, r0
 8017c88:	4630      	mov	r0, r6
 8017c8a:	f000 f89d 	bl	8017dc8 <_malloc_r>
 8017c8e:	b948      	cbnz	r0, 8017ca4 <__smakebuf_r+0x44>
 8017c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c94:	059a      	lsls	r2, r3, #22
 8017c96:	d4ef      	bmi.n	8017c78 <__smakebuf_r+0x18>
 8017c98:	f023 0303 	bic.w	r3, r3, #3
 8017c9c:	f043 0302 	orr.w	r3, r3, #2
 8017ca0:	81a3      	strh	r3, [r4, #12]
 8017ca2:	e7e3      	b.n	8017c6c <__smakebuf_r+0xc>
 8017ca4:	4b0d      	ldr	r3, [pc, #52]	; (8017cdc <__smakebuf_r+0x7c>)
 8017ca6:	62b3      	str	r3, [r6, #40]	; 0x28
 8017ca8:	89a3      	ldrh	r3, [r4, #12]
 8017caa:	6020      	str	r0, [r4, #0]
 8017cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017cb0:	81a3      	strh	r3, [r4, #12]
 8017cb2:	9b00      	ldr	r3, [sp, #0]
 8017cb4:	6163      	str	r3, [r4, #20]
 8017cb6:	9b01      	ldr	r3, [sp, #4]
 8017cb8:	6120      	str	r0, [r4, #16]
 8017cba:	b15b      	cbz	r3, 8017cd4 <__smakebuf_r+0x74>
 8017cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017cc0:	4630      	mov	r0, r6
 8017cc2:	f000 fc73 	bl	80185ac <_isatty_r>
 8017cc6:	b128      	cbz	r0, 8017cd4 <__smakebuf_r+0x74>
 8017cc8:	89a3      	ldrh	r3, [r4, #12]
 8017cca:	f023 0303 	bic.w	r3, r3, #3
 8017cce:	f043 0301 	orr.w	r3, r3, #1
 8017cd2:	81a3      	strh	r3, [r4, #12]
 8017cd4:	89a0      	ldrh	r0, [r4, #12]
 8017cd6:	4305      	orrs	r5, r0
 8017cd8:	81a5      	strh	r5, [r4, #12]
 8017cda:	e7cd      	b.n	8017c78 <__smakebuf_r+0x18>
 8017cdc:	08017a49 	.word	0x08017a49

08017ce0 <malloc>:
 8017ce0:	4b02      	ldr	r3, [pc, #8]	; (8017cec <malloc+0xc>)
 8017ce2:	4601      	mov	r1, r0
 8017ce4:	6818      	ldr	r0, [r3, #0]
 8017ce6:	f000 b86f 	b.w	8017dc8 <_malloc_r>
 8017cea:	bf00      	nop
 8017cec:	2000002c 	.word	0x2000002c

08017cf0 <_free_r>:
 8017cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017cf2:	2900      	cmp	r1, #0
 8017cf4:	d044      	beq.n	8017d80 <_free_r+0x90>
 8017cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017cfa:	9001      	str	r0, [sp, #4]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8017d02:	bfb8      	it	lt
 8017d04:	18e4      	addlt	r4, r4, r3
 8017d06:	f000 fc73 	bl	80185f0 <__malloc_lock>
 8017d0a:	4a1e      	ldr	r2, [pc, #120]	; (8017d84 <_free_r+0x94>)
 8017d0c:	9801      	ldr	r0, [sp, #4]
 8017d0e:	6813      	ldr	r3, [r2, #0]
 8017d10:	b933      	cbnz	r3, 8017d20 <_free_r+0x30>
 8017d12:	6063      	str	r3, [r4, #4]
 8017d14:	6014      	str	r4, [r2, #0]
 8017d16:	b003      	add	sp, #12
 8017d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d1c:	f000 bc6e 	b.w	80185fc <__malloc_unlock>
 8017d20:	42a3      	cmp	r3, r4
 8017d22:	d908      	bls.n	8017d36 <_free_r+0x46>
 8017d24:	6825      	ldr	r5, [r4, #0]
 8017d26:	1961      	adds	r1, r4, r5
 8017d28:	428b      	cmp	r3, r1
 8017d2a:	bf01      	itttt	eq
 8017d2c:	6819      	ldreq	r1, [r3, #0]
 8017d2e:	685b      	ldreq	r3, [r3, #4]
 8017d30:	1949      	addeq	r1, r1, r5
 8017d32:	6021      	streq	r1, [r4, #0]
 8017d34:	e7ed      	b.n	8017d12 <_free_r+0x22>
 8017d36:	461a      	mov	r2, r3
 8017d38:	685b      	ldr	r3, [r3, #4]
 8017d3a:	b10b      	cbz	r3, 8017d40 <_free_r+0x50>
 8017d3c:	42a3      	cmp	r3, r4
 8017d3e:	d9fa      	bls.n	8017d36 <_free_r+0x46>
 8017d40:	6811      	ldr	r1, [r2, #0]
 8017d42:	1855      	adds	r5, r2, r1
 8017d44:	42a5      	cmp	r5, r4
 8017d46:	d10b      	bne.n	8017d60 <_free_r+0x70>
 8017d48:	6824      	ldr	r4, [r4, #0]
 8017d4a:	4421      	add	r1, r4
 8017d4c:	1854      	adds	r4, r2, r1
 8017d4e:	42a3      	cmp	r3, r4
 8017d50:	6011      	str	r1, [r2, #0]
 8017d52:	d1e0      	bne.n	8017d16 <_free_r+0x26>
 8017d54:	681c      	ldr	r4, [r3, #0]
 8017d56:	685b      	ldr	r3, [r3, #4]
 8017d58:	6053      	str	r3, [r2, #4]
 8017d5a:	4421      	add	r1, r4
 8017d5c:	6011      	str	r1, [r2, #0]
 8017d5e:	e7da      	b.n	8017d16 <_free_r+0x26>
 8017d60:	d902      	bls.n	8017d68 <_free_r+0x78>
 8017d62:	230c      	movs	r3, #12
 8017d64:	6003      	str	r3, [r0, #0]
 8017d66:	e7d6      	b.n	8017d16 <_free_r+0x26>
 8017d68:	6825      	ldr	r5, [r4, #0]
 8017d6a:	1961      	adds	r1, r4, r5
 8017d6c:	428b      	cmp	r3, r1
 8017d6e:	bf04      	itt	eq
 8017d70:	6819      	ldreq	r1, [r3, #0]
 8017d72:	685b      	ldreq	r3, [r3, #4]
 8017d74:	6063      	str	r3, [r4, #4]
 8017d76:	bf04      	itt	eq
 8017d78:	1949      	addeq	r1, r1, r5
 8017d7a:	6021      	streq	r1, [r4, #0]
 8017d7c:	6054      	str	r4, [r2, #4]
 8017d7e:	e7ca      	b.n	8017d16 <_free_r+0x26>
 8017d80:	b003      	add	sp, #12
 8017d82:	bd30      	pop	{r4, r5, pc}
 8017d84:	20009870 	.word	0x20009870

08017d88 <sbrk_aligned>:
 8017d88:	b570      	push	{r4, r5, r6, lr}
 8017d8a:	4e0e      	ldr	r6, [pc, #56]	; (8017dc4 <sbrk_aligned+0x3c>)
 8017d8c:	460c      	mov	r4, r1
 8017d8e:	6831      	ldr	r1, [r6, #0]
 8017d90:	4605      	mov	r5, r0
 8017d92:	b911      	cbnz	r1, 8017d9a <sbrk_aligned+0x12>
 8017d94:	f000 fb7a 	bl	801848c <_sbrk_r>
 8017d98:	6030      	str	r0, [r6, #0]
 8017d9a:	4621      	mov	r1, r4
 8017d9c:	4628      	mov	r0, r5
 8017d9e:	f000 fb75 	bl	801848c <_sbrk_r>
 8017da2:	1c43      	adds	r3, r0, #1
 8017da4:	d00a      	beq.n	8017dbc <sbrk_aligned+0x34>
 8017da6:	1cc4      	adds	r4, r0, #3
 8017da8:	f024 0403 	bic.w	r4, r4, #3
 8017dac:	42a0      	cmp	r0, r4
 8017dae:	d007      	beq.n	8017dc0 <sbrk_aligned+0x38>
 8017db0:	1a21      	subs	r1, r4, r0
 8017db2:	4628      	mov	r0, r5
 8017db4:	f000 fb6a 	bl	801848c <_sbrk_r>
 8017db8:	3001      	adds	r0, #1
 8017dba:	d101      	bne.n	8017dc0 <sbrk_aligned+0x38>
 8017dbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	bd70      	pop	{r4, r5, r6, pc}
 8017dc4:	20009874 	.word	0x20009874

08017dc8 <_malloc_r>:
 8017dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dcc:	1ccd      	adds	r5, r1, #3
 8017dce:	f025 0503 	bic.w	r5, r5, #3
 8017dd2:	3508      	adds	r5, #8
 8017dd4:	2d0c      	cmp	r5, #12
 8017dd6:	bf38      	it	cc
 8017dd8:	250c      	movcc	r5, #12
 8017dda:	2d00      	cmp	r5, #0
 8017ddc:	4607      	mov	r7, r0
 8017dde:	db01      	blt.n	8017de4 <_malloc_r+0x1c>
 8017de0:	42a9      	cmp	r1, r5
 8017de2:	d905      	bls.n	8017df0 <_malloc_r+0x28>
 8017de4:	230c      	movs	r3, #12
 8017de6:	603b      	str	r3, [r7, #0]
 8017de8:	2600      	movs	r6, #0
 8017dea:	4630      	mov	r0, r6
 8017dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017df0:	4e2e      	ldr	r6, [pc, #184]	; (8017eac <_malloc_r+0xe4>)
 8017df2:	f000 fbfd 	bl	80185f0 <__malloc_lock>
 8017df6:	6833      	ldr	r3, [r6, #0]
 8017df8:	461c      	mov	r4, r3
 8017dfa:	bb34      	cbnz	r4, 8017e4a <_malloc_r+0x82>
 8017dfc:	4629      	mov	r1, r5
 8017dfe:	4638      	mov	r0, r7
 8017e00:	f7ff ffc2 	bl	8017d88 <sbrk_aligned>
 8017e04:	1c43      	adds	r3, r0, #1
 8017e06:	4604      	mov	r4, r0
 8017e08:	d14d      	bne.n	8017ea6 <_malloc_r+0xde>
 8017e0a:	6834      	ldr	r4, [r6, #0]
 8017e0c:	4626      	mov	r6, r4
 8017e0e:	2e00      	cmp	r6, #0
 8017e10:	d140      	bne.n	8017e94 <_malloc_r+0xcc>
 8017e12:	6823      	ldr	r3, [r4, #0]
 8017e14:	4631      	mov	r1, r6
 8017e16:	4638      	mov	r0, r7
 8017e18:	eb04 0803 	add.w	r8, r4, r3
 8017e1c:	f000 fb36 	bl	801848c <_sbrk_r>
 8017e20:	4580      	cmp	r8, r0
 8017e22:	d13a      	bne.n	8017e9a <_malloc_r+0xd2>
 8017e24:	6821      	ldr	r1, [r4, #0]
 8017e26:	3503      	adds	r5, #3
 8017e28:	1a6d      	subs	r5, r5, r1
 8017e2a:	f025 0503 	bic.w	r5, r5, #3
 8017e2e:	3508      	adds	r5, #8
 8017e30:	2d0c      	cmp	r5, #12
 8017e32:	bf38      	it	cc
 8017e34:	250c      	movcc	r5, #12
 8017e36:	4629      	mov	r1, r5
 8017e38:	4638      	mov	r0, r7
 8017e3a:	f7ff ffa5 	bl	8017d88 <sbrk_aligned>
 8017e3e:	3001      	adds	r0, #1
 8017e40:	d02b      	beq.n	8017e9a <_malloc_r+0xd2>
 8017e42:	6823      	ldr	r3, [r4, #0]
 8017e44:	442b      	add	r3, r5
 8017e46:	6023      	str	r3, [r4, #0]
 8017e48:	e00e      	b.n	8017e68 <_malloc_r+0xa0>
 8017e4a:	6822      	ldr	r2, [r4, #0]
 8017e4c:	1b52      	subs	r2, r2, r5
 8017e4e:	d41e      	bmi.n	8017e8e <_malloc_r+0xc6>
 8017e50:	2a0b      	cmp	r2, #11
 8017e52:	d916      	bls.n	8017e82 <_malloc_r+0xba>
 8017e54:	1961      	adds	r1, r4, r5
 8017e56:	42a3      	cmp	r3, r4
 8017e58:	6025      	str	r5, [r4, #0]
 8017e5a:	bf18      	it	ne
 8017e5c:	6059      	strne	r1, [r3, #4]
 8017e5e:	6863      	ldr	r3, [r4, #4]
 8017e60:	bf08      	it	eq
 8017e62:	6031      	streq	r1, [r6, #0]
 8017e64:	5162      	str	r2, [r4, r5]
 8017e66:	604b      	str	r3, [r1, #4]
 8017e68:	4638      	mov	r0, r7
 8017e6a:	f104 060b 	add.w	r6, r4, #11
 8017e6e:	f000 fbc5 	bl	80185fc <__malloc_unlock>
 8017e72:	f026 0607 	bic.w	r6, r6, #7
 8017e76:	1d23      	adds	r3, r4, #4
 8017e78:	1af2      	subs	r2, r6, r3
 8017e7a:	d0b6      	beq.n	8017dea <_malloc_r+0x22>
 8017e7c:	1b9b      	subs	r3, r3, r6
 8017e7e:	50a3      	str	r3, [r4, r2]
 8017e80:	e7b3      	b.n	8017dea <_malloc_r+0x22>
 8017e82:	6862      	ldr	r2, [r4, #4]
 8017e84:	42a3      	cmp	r3, r4
 8017e86:	bf0c      	ite	eq
 8017e88:	6032      	streq	r2, [r6, #0]
 8017e8a:	605a      	strne	r2, [r3, #4]
 8017e8c:	e7ec      	b.n	8017e68 <_malloc_r+0xa0>
 8017e8e:	4623      	mov	r3, r4
 8017e90:	6864      	ldr	r4, [r4, #4]
 8017e92:	e7b2      	b.n	8017dfa <_malloc_r+0x32>
 8017e94:	4634      	mov	r4, r6
 8017e96:	6876      	ldr	r6, [r6, #4]
 8017e98:	e7b9      	b.n	8017e0e <_malloc_r+0x46>
 8017e9a:	230c      	movs	r3, #12
 8017e9c:	603b      	str	r3, [r7, #0]
 8017e9e:	4638      	mov	r0, r7
 8017ea0:	f000 fbac 	bl	80185fc <__malloc_unlock>
 8017ea4:	e7a1      	b.n	8017dea <_malloc_r+0x22>
 8017ea6:	6025      	str	r5, [r4, #0]
 8017ea8:	e7de      	b.n	8017e68 <_malloc_r+0xa0>
 8017eaa:	bf00      	nop
 8017eac:	20009870 	.word	0x20009870

08017eb0 <__sfputc_r>:
 8017eb0:	6893      	ldr	r3, [r2, #8]
 8017eb2:	3b01      	subs	r3, #1
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	b410      	push	{r4}
 8017eb8:	6093      	str	r3, [r2, #8]
 8017eba:	da08      	bge.n	8017ece <__sfputc_r+0x1e>
 8017ebc:	6994      	ldr	r4, [r2, #24]
 8017ebe:	42a3      	cmp	r3, r4
 8017ec0:	db01      	blt.n	8017ec6 <__sfputc_r+0x16>
 8017ec2:	290a      	cmp	r1, #10
 8017ec4:	d103      	bne.n	8017ece <__sfputc_r+0x1e>
 8017ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017eca:	f7ff bbf9 	b.w	80176c0 <__swbuf_r>
 8017ece:	6813      	ldr	r3, [r2, #0]
 8017ed0:	1c58      	adds	r0, r3, #1
 8017ed2:	6010      	str	r0, [r2, #0]
 8017ed4:	7019      	strb	r1, [r3, #0]
 8017ed6:	4608      	mov	r0, r1
 8017ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017edc:	4770      	bx	lr

08017ede <__sfputs_r>:
 8017ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ee0:	4606      	mov	r6, r0
 8017ee2:	460f      	mov	r7, r1
 8017ee4:	4614      	mov	r4, r2
 8017ee6:	18d5      	adds	r5, r2, r3
 8017ee8:	42ac      	cmp	r4, r5
 8017eea:	d101      	bne.n	8017ef0 <__sfputs_r+0x12>
 8017eec:	2000      	movs	r0, #0
 8017eee:	e007      	b.n	8017f00 <__sfputs_r+0x22>
 8017ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ef4:	463a      	mov	r2, r7
 8017ef6:	4630      	mov	r0, r6
 8017ef8:	f7ff ffda 	bl	8017eb0 <__sfputc_r>
 8017efc:	1c43      	adds	r3, r0, #1
 8017efe:	d1f3      	bne.n	8017ee8 <__sfputs_r+0xa>
 8017f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017f04 <_vfiprintf_r>:
 8017f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f08:	460d      	mov	r5, r1
 8017f0a:	b09d      	sub	sp, #116	; 0x74
 8017f0c:	4614      	mov	r4, r2
 8017f0e:	4698      	mov	r8, r3
 8017f10:	4606      	mov	r6, r0
 8017f12:	b118      	cbz	r0, 8017f1c <_vfiprintf_r+0x18>
 8017f14:	6983      	ldr	r3, [r0, #24]
 8017f16:	b90b      	cbnz	r3, 8017f1c <_vfiprintf_r+0x18>
 8017f18:	f7ff fdca 	bl	8017ab0 <__sinit>
 8017f1c:	4b89      	ldr	r3, [pc, #548]	; (8018144 <_vfiprintf_r+0x240>)
 8017f1e:	429d      	cmp	r5, r3
 8017f20:	d11b      	bne.n	8017f5a <_vfiprintf_r+0x56>
 8017f22:	6875      	ldr	r5, [r6, #4]
 8017f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f26:	07d9      	lsls	r1, r3, #31
 8017f28:	d405      	bmi.n	8017f36 <_vfiprintf_r+0x32>
 8017f2a:	89ab      	ldrh	r3, [r5, #12]
 8017f2c:	059a      	lsls	r2, r3, #22
 8017f2e:	d402      	bmi.n	8017f36 <_vfiprintf_r+0x32>
 8017f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f32:	f7ff fe6d 	bl	8017c10 <__retarget_lock_acquire_recursive>
 8017f36:	89ab      	ldrh	r3, [r5, #12]
 8017f38:	071b      	lsls	r3, r3, #28
 8017f3a:	d501      	bpl.n	8017f40 <_vfiprintf_r+0x3c>
 8017f3c:	692b      	ldr	r3, [r5, #16]
 8017f3e:	b9eb      	cbnz	r3, 8017f7c <_vfiprintf_r+0x78>
 8017f40:	4629      	mov	r1, r5
 8017f42:	4630      	mov	r0, r6
 8017f44:	f7ff fc0e 	bl	8017764 <__swsetup_r>
 8017f48:	b1c0      	cbz	r0, 8017f7c <_vfiprintf_r+0x78>
 8017f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f4c:	07dc      	lsls	r4, r3, #31
 8017f4e:	d50e      	bpl.n	8017f6e <_vfiprintf_r+0x6a>
 8017f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f54:	b01d      	add	sp, #116	; 0x74
 8017f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f5a:	4b7b      	ldr	r3, [pc, #492]	; (8018148 <_vfiprintf_r+0x244>)
 8017f5c:	429d      	cmp	r5, r3
 8017f5e:	d101      	bne.n	8017f64 <_vfiprintf_r+0x60>
 8017f60:	68b5      	ldr	r5, [r6, #8]
 8017f62:	e7df      	b.n	8017f24 <_vfiprintf_r+0x20>
 8017f64:	4b79      	ldr	r3, [pc, #484]	; (801814c <_vfiprintf_r+0x248>)
 8017f66:	429d      	cmp	r5, r3
 8017f68:	bf08      	it	eq
 8017f6a:	68f5      	ldreq	r5, [r6, #12]
 8017f6c:	e7da      	b.n	8017f24 <_vfiprintf_r+0x20>
 8017f6e:	89ab      	ldrh	r3, [r5, #12]
 8017f70:	0598      	lsls	r0, r3, #22
 8017f72:	d4ed      	bmi.n	8017f50 <_vfiprintf_r+0x4c>
 8017f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f76:	f7ff fe4c 	bl	8017c12 <__retarget_lock_release_recursive>
 8017f7a:	e7e9      	b.n	8017f50 <_vfiprintf_r+0x4c>
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8017f80:	2320      	movs	r3, #32
 8017f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f8a:	2330      	movs	r3, #48	; 0x30
 8017f8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018150 <_vfiprintf_r+0x24c>
 8017f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017f94:	f04f 0901 	mov.w	r9, #1
 8017f98:	4623      	mov	r3, r4
 8017f9a:	469a      	mov	sl, r3
 8017f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fa0:	b10a      	cbz	r2, 8017fa6 <_vfiprintf_r+0xa2>
 8017fa2:	2a25      	cmp	r2, #37	; 0x25
 8017fa4:	d1f9      	bne.n	8017f9a <_vfiprintf_r+0x96>
 8017fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8017faa:	d00b      	beq.n	8017fc4 <_vfiprintf_r+0xc0>
 8017fac:	465b      	mov	r3, fp
 8017fae:	4622      	mov	r2, r4
 8017fb0:	4629      	mov	r1, r5
 8017fb2:	4630      	mov	r0, r6
 8017fb4:	f7ff ff93 	bl	8017ede <__sfputs_r>
 8017fb8:	3001      	adds	r0, #1
 8017fba:	f000 80aa 	beq.w	8018112 <_vfiprintf_r+0x20e>
 8017fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017fc0:	445a      	add	r2, fp
 8017fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8017fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	f000 80a2 	beq.w	8018112 <_vfiprintf_r+0x20e>
 8017fce:	2300      	movs	r3, #0
 8017fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017fd8:	f10a 0a01 	add.w	sl, sl, #1
 8017fdc:	9304      	str	r3, [sp, #16]
 8017fde:	9307      	str	r3, [sp, #28]
 8017fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8017fe6:	4654      	mov	r4, sl
 8017fe8:	2205      	movs	r2, #5
 8017fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fee:	4858      	ldr	r0, [pc, #352]	; (8018150 <_vfiprintf_r+0x24c>)
 8017ff0:	f7e8 f90e 	bl	8000210 <memchr>
 8017ff4:	9a04      	ldr	r2, [sp, #16]
 8017ff6:	b9d8      	cbnz	r0, 8018030 <_vfiprintf_r+0x12c>
 8017ff8:	06d1      	lsls	r1, r2, #27
 8017ffa:	bf44      	itt	mi
 8017ffc:	2320      	movmi	r3, #32
 8017ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018002:	0713      	lsls	r3, r2, #28
 8018004:	bf44      	itt	mi
 8018006:	232b      	movmi	r3, #43	; 0x2b
 8018008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801800c:	f89a 3000 	ldrb.w	r3, [sl]
 8018010:	2b2a      	cmp	r3, #42	; 0x2a
 8018012:	d015      	beq.n	8018040 <_vfiprintf_r+0x13c>
 8018014:	9a07      	ldr	r2, [sp, #28]
 8018016:	4654      	mov	r4, sl
 8018018:	2000      	movs	r0, #0
 801801a:	f04f 0c0a 	mov.w	ip, #10
 801801e:	4621      	mov	r1, r4
 8018020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018024:	3b30      	subs	r3, #48	; 0x30
 8018026:	2b09      	cmp	r3, #9
 8018028:	d94e      	bls.n	80180c8 <_vfiprintf_r+0x1c4>
 801802a:	b1b0      	cbz	r0, 801805a <_vfiprintf_r+0x156>
 801802c:	9207      	str	r2, [sp, #28]
 801802e:	e014      	b.n	801805a <_vfiprintf_r+0x156>
 8018030:	eba0 0308 	sub.w	r3, r0, r8
 8018034:	fa09 f303 	lsl.w	r3, r9, r3
 8018038:	4313      	orrs	r3, r2
 801803a:	9304      	str	r3, [sp, #16]
 801803c:	46a2      	mov	sl, r4
 801803e:	e7d2      	b.n	8017fe6 <_vfiprintf_r+0xe2>
 8018040:	9b03      	ldr	r3, [sp, #12]
 8018042:	1d19      	adds	r1, r3, #4
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	9103      	str	r1, [sp, #12]
 8018048:	2b00      	cmp	r3, #0
 801804a:	bfbb      	ittet	lt
 801804c:	425b      	neglt	r3, r3
 801804e:	f042 0202 	orrlt.w	r2, r2, #2
 8018052:	9307      	strge	r3, [sp, #28]
 8018054:	9307      	strlt	r3, [sp, #28]
 8018056:	bfb8      	it	lt
 8018058:	9204      	strlt	r2, [sp, #16]
 801805a:	7823      	ldrb	r3, [r4, #0]
 801805c:	2b2e      	cmp	r3, #46	; 0x2e
 801805e:	d10c      	bne.n	801807a <_vfiprintf_r+0x176>
 8018060:	7863      	ldrb	r3, [r4, #1]
 8018062:	2b2a      	cmp	r3, #42	; 0x2a
 8018064:	d135      	bne.n	80180d2 <_vfiprintf_r+0x1ce>
 8018066:	9b03      	ldr	r3, [sp, #12]
 8018068:	1d1a      	adds	r2, r3, #4
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	9203      	str	r2, [sp, #12]
 801806e:	2b00      	cmp	r3, #0
 8018070:	bfb8      	it	lt
 8018072:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018076:	3402      	adds	r4, #2
 8018078:	9305      	str	r3, [sp, #20]
 801807a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018160 <_vfiprintf_r+0x25c>
 801807e:	7821      	ldrb	r1, [r4, #0]
 8018080:	2203      	movs	r2, #3
 8018082:	4650      	mov	r0, sl
 8018084:	f7e8 f8c4 	bl	8000210 <memchr>
 8018088:	b140      	cbz	r0, 801809c <_vfiprintf_r+0x198>
 801808a:	2340      	movs	r3, #64	; 0x40
 801808c:	eba0 000a 	sub.w	r0, r0, sl
 8018090:	fa03 f000 	lsl.w	r0, r3, r0
 8018094:	9b04      	ldr	r3, [sp, #16]
 8018096:	4303      	orrs	r3, r0
 8018098:	3401      	adds	r4, #1
 801809a:	9304      	str	r3, [sp, #16]
 801809c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180a0:	482c      	ldr	r0, [pc, #176]	; (8018154 <_vfiprintf_r+0x250>)
 80180a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80180a6:	2206      	movs	r2, #6
 80180a8:	f7e8 f8b2 	bl	8000210 <memchr>
 80180ac:	2800      	cmp	r0, #0
 80180ae:	d03f      	beq.n	8018130 <_vfiprintf_r+0x22c>
 80180b0:	4b29      	ldr	r3, [pc, #164]	; (8018158 <_vfiprintf_r+0x254>)
 80180b2:	bb1b      	cbnz	r3, 80180fc <_vfiprintf_r+0x1f8>
 80180b4:	9b03      	ldr	r3, [sp, #12]
 80180b6:	3307      	adds	r3, #7
 80180b8:	f023 0307 	bic.w	r3, r3, #7
 80180bc:	3308      	adds	r3, #8
 80180be:	9303      	str	r3, [sp, #12]
 80180c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180c2:	443b      	add	r3, r7
 80180c4:	9309      	str	r3, [sp, #36]	; 0x24
 80180c6:	e767      	b.n	8017f98 <_vfiprintf_r+0x94>
 80180c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80180cc:	460c      	mov	r4, r1
 80180ce:	2001      	movs	r0, #1
 80180d0:	e7a5      	b.n	801801e <_vfiprintf_r+0x11a>
 80180d2:	2300      	movs	r3, #0
 80180d4:	3401      	adds	r4, #1
 80180d6:	9305      	str	r3, [sp, #20]
 80180d8:	4619      	mov	r1, r3
 80180da:	f04f 0c0a 	mov.w	ip, #10
 80180de:	4620      	mov	r0, r4
 80180e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180e4:	3a30      	subs	r2, #48	; 0x30
 80180e6:	2a09      	cmp	r2, #9
 80180e8:	d903      	bls.n	80180f2 <_vfiprintf_r+0x1ee>
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d0c5      	beq.n	801807a <_vfiprintf_r+0x176>
 80180ee:	9105      	str	r1, [sp, #20]
 80180f0:	e7c3      	b.n	801807a <_vfiprintf_r+0x176>
 80180f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80180f6:	4604      	mov	r4, r0
 80180f8:	2301      	movs	r3, #1
 80180fa:	e7f0      	b.n	80180de <_vfiprintf_r+0x1da>
 80180fc:	ab03      	add	r3, sp, #12
 80180fe:	9300      	str	r3, [sp, #0]
 8018100:	462a      	mov	r2, r5
 8018102:	4b16      	ldr	r3, [pc, #88]	; (801815c <_vfiprintf_r+0x258>)
 8018104:	a904      	add	r1, sp, #16
 8018106:	4630      	mov	r0, r6
 8018108:	f3af 8000 	nop.w
 801810c:	4607      	mov	r7, r0
 801810e:	1c78      	adds	r0, r7, #1
 8018110:	d1d6      	bne.n	80180c0 <_vfiprintf_r+0x1bc>
 8018112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018114:	07d9      	lsls	r1, r3, #31
 8018116:	d405      	bmi.n	8018124 <_vfiprintf_r+0x220>
 8018118:	89ab      	ldrh	r3, [r5, #12]
 801811a:	059a      	lsls	r2, r3, #22
 801811c:	d402      	bmi.n	8018124 <_vfiprintf_r+0x220>
 801811e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018120:	f7ff fd77 	bl	8017c12 <__retarget_lock_release_recursive>
 8018124:	89ab      	ldrh	r3, [r5, #12]
 8018126:	065b      	lsls	r3, r3, #25
 8018128:	f53f af12 	bmi.w	8017f50 <_vfiprintf_r+0x4c>
 801812c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801812e:	e711      	b.n	8017f54 <_vfiprintf_r+0x50>
 8018130:	ab03      	add	r3, sp, #12
 8018132:	9300      	str	r3, [sp, #0]
 8018134:	462a      	mov	r2, r5
 8018136:	4b09      	ldr	r3, [pc, #36]	; (801815c <_vfiprintf_r+0x258>)
 8018138:	a904      	add	r1, sp, #16
 801813a:	4630      	mov	r0, r6
 801813c:	f000 f880 	bl	8018240 <_printf_i>
 8018140:	e7e4      	b.n	801810c <_vfiprintf_r+0x208>
 8018142:	bf00      	nop
 8018144:	0801b470 	.word	0x0801b470
 8018148:	0801b490 	.word	0x0801b490
 801814c:	0801b450 	.word	0x0801b450
 8018150:	0801b4b0 	.word	0x0801b4b0
 8018154:	0801b4ba 	.word	0x0801b4ba
 8018158:	00000000 	.word	0x00000000
 801815c:	08017edf 	.word	0x08017edf
 8018160:	0801b4b6 	.word	0x0801b4b6

08018164 <_printf_common>:
 8018164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018168:	4616      	mov	r6, r2
 801816a:	4699      	mov	r9, r3
 801816c:	688a      	ldr	r2, [r1, #8]
 801816e:	690b      	ldr	r3, [r1, #16]
 8018170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018174:	4293      	cmp	r3, r2
 8018176:	bfb8      	it	lt
 8018178:	4613      	movlt	r3, r2
 801817a:	6033      	str	r3, [r6, #0]
 801817c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018180:	4607      	mov	r7, r0
 8018182:	460c      	mov	r4, r1
 8018184:	b10a      	cbz	r2, 801818a <_printf_common+0x26>
 8018186:	3301      	adds	r3, #1
 8018188:	6033      	str	r3, [r6, #0]
 801818a:	6823      	ldr	r3, [r4, #0]
 801818c:	0699      	lsls	r1, r3, #26
 801818e:	bf42      	ittt	mi
 8018190:	6833      	ldrmi	r3, [r6, #0]
 8018192:	3302      	addmi	r3, #2
 8018194:	6033      	strmi	r3, [r6, #0]
 8018196:	6825      	ldr	r5, [r4, #0]
 8018198:	f015 0506 	ands.w	r5, r5, #6
 801819c:	d106      	bne.n	80181ac <_printf_common+0x48>
 801819e:	f104 0a19 	add.w	sl, r4, #25
 80181a2:	68e3      	ldr	r3, [r4, #12]
 80181a4:	6832      	ldr	r2, [r6, #0]
 80181a6:	1a9b      	subs	r3, r3, r2
 80181a8:	42ab      	cmp	r3, r5
 80181aa:	dc26      	bgt.n	80181fa <_printf_common+0x96>
 80181ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80181b0:	1e13      	subs	r3, r2, #0
 80181b2:	6822      	ldr	r2, [r4, #0]
 80181b4:	bf18      	it	ne
 80181b6:	2301      	movne	r3, #1
 80181b8:	0692      	lsls	r2, r2, #26
 80181ba:	d42b      	bmi.n	8018214 <_printf_common+0xb0>
 80181bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80181c0:	4649      	mov	r1, r9
 80181c2:	4638      	mov	r0, r7
 80181c4:	47c0      	blx	r8
 80181c6:	3001      	adds	r0, #1
 80181c8:	d01e      	beq.n	8018208 <_printf_common+0xa4>
 80181ca:	6823      	ldr	r3, [r4, #0]
 80181cc:	68e5      	ldr	r5, [r4, #12]
 80181ce:	6832      	ldr	r2, [r6, #0]
 80181d0:	f003 0306 	and.w	r3, r3, #6
 80181d4:	2b04      	cmp	r3, #4
 80181d6:	bf08      	it	eq
 80181d8:	1aad      	subeq	r5, r5, r2
 80181da:	68a3      	ldr	r3, [r4, #8]
 80181dc:	6922      	ldr	r2, [r4, #16]
 80181de:	bf0c      	ite	eq
 80181e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80181e4:	2500      	movne	r5, #0
 80181e6:	4293      	cmp	r3, r2
 80181e8:	bfc4      	itt	gt
 80181ea:	1a9b      	subgt	r3, r3, r2
 80181ec:	18ed      	addgt	r5, r5, r3
 80181ee:	2600      	movs	r6, #0
 80181f0:	341a      	adds	r4, #26
 80181f2:	42b5      	cmp	r5, r6
 80181f4:	d11a      	bne.n	801822c <_printf_common+0xc8>
 80181f6:	2000      	movs	r0, #0
 80181f8:	e008      	b.n	801820c <_printf_common+0xa8>
 80181fa:	2301      	movs	r3, #1
 80181fc:	4652      	mov	r2, sl
 80181fe:	4649      	mov	r1, r9
 8018200:	4638      	mov	r0, r7
 8018202:	47c0      	blx	r8
 8018204:	3001      	adds	r0, #1
 8018206:	d103      	bne.n	8018210 <_printf_common+0xac>
 8018208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801820c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018210:	3501      	adds	r5, #1
 8018212:	e7c6      	b.n	80181a2 <_printf_common+0x3e>
 8018214:	18e1      	adds	r1, r4, r3
 8018216:	1c5a      	adds	r2, r3, #1
 8018218:	2030      	movs	r0, #48	; 0x30
 801821a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801821e:	4422      	add	r2, r4
 8018220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018228:	3302      	adds	r3, #2
 801822a:	e7c7      	b.n	80181bc <_printf_common+0x58>
 801822c:	2301      	movs	r3, #1
 801822e:	4622      	mov	r2, r4
 8018230:	4649      	mov	r1, r9
 8018232:	4638      	mov	r0, r7
 8018234:	47c0      	blx	r8
 8018236:	3001      	adds	r0, #1
 8018238:	d0e6      	beq.n	8018208 <_printf_common+0xa4>
 801823a:	3601      	adds	r6, #1
 801823c:	e7d9      	b.n	80181f2 <_printf_common+0x8e>
	...

08018240 <_printf_i>:
 8018240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018244:	7e0f      	ldrb	r7, [r1, #24]
 8018246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018248:	2f78      	cmp	r7, #120	; 0x78
 801824a:	4691      	mov	r9, r2
 801824c:	4680      	mov	r8, r0
 801824e:	460c      	mov	r4, r1
 8018250:	469a      	mov	sl, r3
 8018252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018256:	d807      	bhi.n	8018268 <_printf_i+0x28>
 8018258:	2f62      	cmp	r7, #98	; 0x62
 801825a:	d80a      	bhi.n	8018272 <_printf_i+0x32>
 801825c:	2f00      	cmp	r7, #0
 801825e:	f000 80d8 	beq.w	8018412 <_printf_i+0x1d2>
 8018262:	2f58      	cmp	r7, #88	; 0x58
 8018264:	f000 80a3 	beq.w	80183ae <_printf_i+0x16e>
 8018268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801826c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018270:	e03a      	b.n	80182e8 <_printf_i+0xa8>
 8018272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018276:	2b15      	cmp	r3, #21
 8018278:	d8f6      	bhi.n	8018268 <_printf_i+0x28>
 801827a:	a101      	add	r1, pc, #4	; (adr r1, 8018280 <_printf_i+0x40>)
 801827c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018280:	080182d9 	.word	0x080182d9
 8018284:	080182ed 	.word	0x080182ed
 8018288:	08018269 	.word	0x08018269
 801828c:	08018269 	.word	0x08018269
 8018290:	08018269 	.word	0x08018269
 8018294:	08018269 	.word	0x08018269
 8018298:	080182ed 	.word	0x080182ed
 801829c:	08018269 	.word	0x08018269
 80182a0:	08018269 	.word	0x08018269
 80182a4:	08018269 	.word	0x08018269
 80182a8:	08018269 	.word	0x08018269
 80182ac:	080183f9 	.word	0x080183f9
 80182b0:	0801831d 	.word	0x0801831d
 80182b4:	080183db 	.word	0x080183db
 80182b8:	08018269 	.word	0x08018269
 80182bc:	08018269 	.word	0x08018269
 80182c0:	0801841b 	.word	0x0801841b
 80182c4:	08018269 	.word	0x08018269
 80182c8:	0801831d 	.word	0x0801831d
 80182cc:	08018269 	.word	0x08018269
 80182d0:	08018269 	.word	0x08018269
 80182d4:	080183e3 	.word	0x080183e3
 80182d8:	682b      	ldr	r3, [r5, #0]
 80182da:	1d1a      	adds	r2, r3, #4
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	602a      	str	r2, [r5, #0]
 80182e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80182e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80182e8:	2301      	movs	r3, #1
 80182ea:	e0a3      	b.n	8018434 <_printf_i+0x1f4>
 80182ec:	6820      	ldr	r0, [r4, #0]
 80182ee:	6829      	ldr	r1, [r5, #0]
 80182f0:	0606      	lsls	r6, r0, #24
 80182f2:	f101 0304 	add.w	r3, r1, #4
 80182f6:	d50a      	bpl.n	801830e <_printf_i+0xce>
 80182f8:	680e      	ldr	r6, [r1, #0]
 80182fa:	602b      	str	r3, [r5, #0]
 80182fc:	2e00      	cmp	r6, #0
 80182fe:	da03      	bge.n	8018308 <_printf_i+0xc8>
 8018300:	232d      	movs	r3, #45	; 0x2d
 8018302:	4276      	negs	r6, r6
 8018304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018308:	485e      	ldr	r0, [pc, #376]	; (8018484 <_printf_i+0x244>)
 801830a:	230a      	movs	r3, #10
 801830c:	e019      	b.n	8018342 <_printf_i+0x102>
 801830e:	680e      	ldr	r6, [r1, #0]
 8018310:	602b      	str	r3, [r5, #0]
 8018312:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018316:	bf18      	it	ne
 8018318:	b236      	sxthne	r6, r6
 801831a:	e7ef      	b.n	80182fc <_printf_i+0xbc>
 801831c:	682b      	ldr	r3, [r5, #0]
 801831e:	6820      	ldr	r0, [r4, #0]
 8018320:	1d19      	adds	r1, r3, #4
 8018322:	6029      	str	r1, [r5, #0]
 8018324:	0601      	lsls	r1, r0, #24
 8018326:	d501      	bpl.n	801832c <_printf_i+0xec>
 8018328:	681e      	ldr	r6, [r3, #0]
 801832a:	e002      	b.n	8018332 <_printf_i+0xf2>
 801832c:	0646      	lsls	r6, r0, #25
 801832e:	d5fb      	bpl.n	8018328 <_printf_i+0xe8>
 8018330:	881e      	ldrh	r6, [r3, #0]
 8018332:	4854      	ldr	r0, [pc, #336]	; (8018484 <_printf_i+0x244>)
 8018334:	2f6f      	cmp	r7, #111	; 0x6f
 8018336:	bf0c      	ite	eq
 8018338:	2308      	moveq	r3, #8
 801833a:	230a      	movne	r3, #10
 801833c:	2100      	movs	r1, #0
 801833e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018342:	6865      	ldr	r5, [r4, #4]
 8018344:	60a5      	str	r5, [r4, #8]
 8018346:	2d00      	cmp	r5, #0
 8018348:	bfa2      	ittt	ge
 801834a:	6821      	ldrge	r1, [r4, #0]
 801834c:	f021 0104 	bicge.w	r1, r1, #4
 8018350:	6021      	strge	r1, [r4, #0]
 8018352:	b90e      	cbnz	r6, 8018358 <_printf_i+0x118>
 8018354:	2d00      	cmp	r5, #0
 8018356:	d04d      	beq.n	80183f4 <_printf_i+0x1b4>
 8018358:	4615      	mov	r5, r2
 801835a:	fbb6 f1f3 	udiv	r1, r6, r3
 801835e:	fb03 6711 	mls	r7, r3, r1, r6
 8018362:	5dc7      	ldrb	r7, [r0, r7]
 8018364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018368:	4637      	mov	r7, r6
 801836a:	42bb      	cmp	r3, r7
 801836c:	460e      	mov	r6, r1
 801836e:	d9f4      	bls.n	801835a <_printf_i+0x11a>
 8018370:	2b08      	cmp	r3, #8
 8018372:	d10b      	bne.n	801838c <_printf_i+0x14c>
 8018374:	6823      	ldr	r3, [r4, #0]
 8018376:	07de      	lsls	r6, r3, #31
 8018378:	d508      	bpl.n	801838c <_printf_i+0x14c>
 801837a:	6923      	ldr	r3, [r4, #16]
 801837c:	6861      	ldr	r1, [r4, #4]
 801837e:	4299      	cmp	r1, r3
 8018380:	bfde      	ittt	le
 8018382:	2330      	movle	r3, #48	; 0x30
 8018384:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018388:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801838c:	1b52      	subs	r2, r2, r5
 801838e:	6122      	str	r2, [r4, #16]
 8018390:	f8cd a000 	str.w	sl, [sp]
 8018394:	464b      	mov	r3, r9
 8018396:	aa03      	add	r2, sp, #12
 8018398:	4621      	mov	r1, r4
 801839a:	4640      	mov	r0, r8
 801839c:	f7ff fee2 	bl	8018164 <_printf_common>
 80183a0:	3001      	adds	r0, #1
 80183a2:	d14c      	bne.n	801843e <_printf_i+0x1fe>
 80183a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80183a8:	b004      	add	sp, #16
 80183aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183ae:	4835      	ldr	r0, [pc, #212]	; (8018484 <_printf_i+0x244>)
 80183b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80183b4:	6829      	ldr	r1, [r5, #0]
 80183b6:	6823      	ldr	r3, [r4, #0]
 80183b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80183bc:	6029      	str	r1, [r5, #0]
 80183be:	061d      	lsls	r5, r3, #24
 80183c0:	d514      	bpl.n	80183ec <_printf_i+0x1ac>
 80183c2:	07df      	lsls	r7, r3, #31
 80183c4:	bf44      	itt	mi
 80183c6:	f043 0320 	orrmi.w	r3, r3, #32
 80183ca:	6023      	strmi	r3, [r4, #0]
 80183cc:	b91e      	cbnz	r6, 80183d6 <_printf_i+0x196>
 80183ce:	6823      	ldr	r3, [r4, #0]
 80183d0:	f023 0320 	bic.w	r3, r3, #32
 80183d4:	6023      	str	r3, [r4, #0]
 80183d6:	2310      	movs	r3, #16
 80183d8:	e7b0      	b.n	801833c <_printf_i+0xfc>
 80183da:	6823      	ldr	r3, [r4, #0]
 80183dc:	f043 0320 	orr.w	r3, r3, #32
 80183e0:	6023      	str	r3, [r4, #0]
 80183e2:	2378      	movs	r3, #120	; 0x78
 80183e4:	4828      	ldr	r0, [pc, #160]	; (8018488 <_printf_i+0x248>)
 80183e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80183ea:	e7e3      	b.n	80183b4 <_printf_i+0x174>
 80183ec:	0659      	lsls	r1, r3, #25
 80183ee:	bf48      	it	mi
 80183f0:	b2b6      	uxthmi	r6, r6
 80183f2:	e7e6      	b.n	80183c2 <_printf_i+0x182>
 80183f4:	4615      	mov	r5, r2
 80183f6:	e7bb      	b.n	8018370 <_printf_i+0x130>
 80183f8:	682b      	ldr	r3, [r5, #0]
 80183fa:	6826      	ldr	r6, [r4, #0]
 80183fc:	6961      	ldr	r1, [r4, #20]
 80183fe:	1d18      	adds	r0, r3, #4
 8018400:	6028      	str	r0, [r5, #0]
 8018402:	0635      	lsls	r5, r6, #24
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	d501      	bpl.n	801840c <_printf_i+0x1cc>
 8018408:	6019      	str	r1, [r3, #0]
 801840a:	e002      	b.n	8018412 <_printf_i+0x1d2>
 801840c:	0670      	lsls	r0, r6, #25
 801840e:	d5fb      	bpl.n	8018408 <_printf_i+0x1c8>
 8018410:	8019      	strh	r1, [r3, #0]
 8018412:	2300      	movs	r3, #0
 8018414:	6123      	str	r3, [r4, #16]
 8018416:	4615      	mov	r5, r2
 8018418:	e7ba      	b.n	8018390 <_printf_i+0x150>
 801841a:	682b      	ldr	r3, [r5, #0]
 801841c:	1d1a      	adds	r2, r3, #4
 801841e:	602a      	str	r2, [r5, #0]
 8018420:	681d      	ldr	r5, [r3, #0]
 8018422:	6862      	ldr	r2, [r4, #4]
 8018424:	2100      	movs	r1, #0
 8018426:	4628      	mov	r0, r5
 8018428:	f7e7 fef2 	bl	8000210 <memchr>
 801842c:	b108      	cbz	r0, 8018432 <_printf_i+0x1f2>
 801842e:	1b40      	subs	r0, r0, r5
 8018430:	6060      	str	r0, [r4, #4]
 8018432:	6863      	ldr	r3, [r4, #4]
 8018434:	6123      	str	r3, [r4, #16]
 8018436:	2300      	movs	r3, #0
 8018438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801843c:	e7a8      	b.n	8018390 <_printf_i+0x150>
 801843e:	6923      	ldr	r3, [r4, #16]
 8018440:	462a      	mov	r2, r5
 8018442:	4649      	mov	r1, r9
 8018444:	4640      	mov	r0, r8
 8018446:	47d0      	blx	sl
 8018448:	3001      	adds	r0, #1
 801844a:	d0ab      	beq.n	80183a4 <_printf_i+0x164>
 801844c:	6823      	ldr	r3, [r4, #0]
 801844e:	079b      	lsls	r3, r3, #30
 8018450:	d413      	bmi.n	801847a <_printf_i+0x23a>
 8018452:	68e0      	ldr	r0, [r4, #12]
 8018454:	9b03      	ldr	r3, [sp, #12]
 8018456:	4298      	cmp	r0, r3
 8018458:	bfb8      	it	lt
 801845a:	4618      	movlt	r0, r3
 801845c:	e7a4      	b.n	80183a8 <_printf_i+0x168>
 801845e:	2301      	movs	r3, #1
 8018460:	4632      	mov	r2, r6
 8018462:	4649      	mov	r1, r9
 8018464:	4640      	mov	r0, r8
 8018466:	47d0      	blx	sl
 8018468:	3001      	adds	r0, #1
 801846a:	d09b      	beq.n	80183a4 <_printf_i+0x164>
 801846c:	3501      	adds	r5, #1
 801846e:	68e3      	ldr	r3, [r4, #12]
 8018470:	9903      	ldr	r1, [sp, #12]
 8018472:	1a5b      	subs	r3, r3, r1
 8018474:	42ab      	cmp	r3, r5
 8018476:	dcf2      	bgt.n	801845e <_printf_i+0x21e>
 8018478:	e7eb      	b.n	8018452 <_printf_i+0x212>
 801847a:	2500      	movs	r5, #0
 801847c:	f104 0619 	add.w	r6, r4, #25
 8018480:	e7f5      	b.n	801846e <_printf_i+0x22e>
 8018482:	bf00      	nop
 8018484:	0801b4c1 	.word	0x0801b4c1
 8018488:	0801b4d2 	.word	0x0801b4d2

0801848c <_sbrk_r>:
 801848c:	b538      	push	{r3, r4, r5, lr}
 801848e:	4d06      	ldr	r5, [pc, #24]	; (80184a8 <_sbrk_r+0x1c>)
 8018490:	2300      	movs	r3, #0
 8018492:	4604      	mov	r4, r0
 8018494:	4608      	mov	r0, r1
 8018496:	602b      	str	r3, [r5, #0]
 8018498:	f7e9 fd5a 	bl	8001f50 <_sbrk>
 801849c:	1c43      	adds	r3, r0, #1
 801849e:	d102      	bne.n	80184a6 <_sbrk_r+0x1a>
 80184a0:	682b      	ldr	r3, [r5, #0]
 80184a2:	b103      	cbz	r3, 80184a6 <_sbrk_r+0x1a>
 80184a4:	6023      	str	r3, [r4, #0]
 80184a6:	bd38      	pop	{r3, r4, r5, pc}
 80184a8:	20009868 	.word	0x20009868

080184ac <__sread>:
 80184ac:	b510      	push	{r4, lr}
 80184ae:	460c      	mov	r4, r1
 80184b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184b4:	f000 f8a8 	bl	8018608 <_read_r>
 80184b8:	2800      	cmp	r0, #0
 80184ba:	bfab      	itete	ge
 80184bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80184be:	89a3      	ldrhlt	r3, [r4, #12]
 80184c0:	181b      	addge	r3, r3, r0
 80184c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80184c6:	bfac      	ite	ge
 80184c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80184ca:	81a3      	strhlt	r3, [r4, #12]
 80184cc:	bd10      	pop	{r4, pc}

080184ce <__swrite>:
 80184ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184d2:	461f      	mov	r7, r3
 80184d4:	898b      	ldrh	r3, [r1, #12]
 80184d6:	05db      	lsls	r3, r3, #23
 80184d8:	4605      	mov	r5, r0
 80184da:	460c      	mov	r4, r1
 80184dc:	4616      	mov	r6, r2
 80184de:	d505      	bpl.n	80184ec <__swrite+0x1e>
 80184e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184e4:	2302      	movs	r3, #2
 80184e6:	2200      	movs	r2, #0
 80184e8:	f000 f870 	bl	80185cc <_lseek_r>
 80184ec:	89a3      	ldrh	r3, [r4, #12]
 80184ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80184f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80184f6:	81a3      	strh	r3, [r4, #12]
 80184f8:	4632      	mov	r2, r6
 80184fa:	463b      	mov	r3, r7
 80184fc:	4628      	mov	r0, r5
 80184fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018502:	f000 b817 	b.w	8018534 <_write_r>

08018506 <__sseek>:
 8018506:	b510      	push	{r4, lr}
 8018508:	460c      	mov	r4, r1
 801850a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801850e:	f000 f85d 	bl	80185cc <_lseek_r>
 8018512:	1c43      	adds	r3, r0, #1
 8018514:	89a3      	ldrh	r3, [r4, #12]
 8018516:	bf15      	itete	ne
 8018518:	6560      	strne	r0, [r4, #84]	; 0x54
 801851a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801851e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018522:	81a3      	strheq	r3, [r4, #12]
 8018524:	bf18      	it	ne
 8018526:	81a3      	strhne	r3, [r4, #12]
 8018528:	bd10      	pop	{r4, pc}

0801852a <__sclose>:
 801852a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801852e:	f000 b81b 	b.w	8018568 <_close_r>
	...

08018534 <_write_r>:
 8018534:	b538      	push	{r3, r4, r5, lr}
 8018536:	4d07      	ldr	r5, [pc, #28]	; (8018554 <_write_r+0x20>)
 8018538:	4604      	mov	r4, r0
 801853a:	4608      	mov	r0, r1
 801853c:	4611      	mov	r1, r2
 801853e:	2200      	movs	r2, #0
 8018540:	602a      	str	r2, [r5, #0]
 8018542:	461a      	mov	r2, r3
 8018544:	f7ea fd7a 	bl	800303c <_write>
 8018548:	1c43      	adds	r3, r0, #1
 801854a:	d102      	bne.n	8018552 <_write_r+0x1e>
 801854c:	682b      	ldr	r3, [r5, #0]
 801854e:	b103      	cbz	r3, 8018552 <_write_r+0x1e>
 8018550:	6023      	str	r3, [r4, #0]
 8018552:	bd38      	pop	{r3, r4, r5, pc}
 8018554:	20009868 	.word	0x20009868

08018558 <abort>:
 8018558:	b508      	push	{r3, lr}
 801855a:	2006      	movs	r0, #6
 801855c:	f000 f88e 	bl	801867c <raise>
 8018560:	2001      	movs	r0, #1
 8018562:	f7e9 fcb7 	bl	8001ed4 <_exit>
	...

08018568 <_close_r>:
 8018568:	b538      	push	{r3, r4, r5, lr}
 801856a:	4d06      	ldr	r5, [pc, #24]	; (8018584 <_close_r+0x1c>)
 801856c:	2300      	movs	r3, #0
 801856e:	4604      	mov	r4, r0
 8018570:	4608      	mov	r0, r1
 8018572:	602b      	str	r3, [r5, #0]
 8018574:	f7e9 fcb8 	bl	8001ee8 <_close>
 8018578:	1c43      	adds	r3, r0, #1
 801857a:	d102      	bne.n	8018582 <_close_r+0x1a>
 801857c:	682b      	ldr	r3, [r5, #0]
 801857e:	b103      	cbz	r3, 8018582 <_close_r+0x1a>
 8018580:	6023      	str	r3, [r4, #0]
 8018582:	bd38      	pop	{r3, r4, r5, pc}
 8018584:	20009868 	.word	0x20009868

08018588 <_fstat_r>:
 8018588:	b538      	push	{r3, r4, r5, lr}
 801858a:	4d07      	ldr	r5, [pc, #28]	; (80185a8 <_fstat_r+0x20>)
 801858c:	2300      	movs	r3, #0
 801858e:	4604      	mov	r4, r0
 8018590:	4608      	mov	r0, r1
 8018592:	4611      	mov	r1, r2
 8018594:	602b      	str	r3, [r5, #0]
 8018596:	f7e9 fcb3 	bl	8001f00 <_fstat>
 801859a:	1c43      	adds	r3, r0, #1
 801859c:	d102      	bne.n	80185a4 <_fstat_r+0x1c>
 801859e:	682b      	ldr	r3, [r5, #0]
 80185a0:	b103      	cbz	r3, 80185a4 <_fstat_r+0x1c>
 80185a2:	6023      	str	r3, [r4, #0]
 80185a4:	bd38      	pop	{r3, r4, r5, pc}
 80185a6:	bf00      	nop
 80185a8:	20009868 	.word	0x20009868

080185ac <_isatty_r>:
 80185ac:	b538      	push	{r3, r4, r5, lr}
 80185ae:	4d06      	ldr	r5, [pc, #24]	; (80185c8 <_isatty_r+0x1c>)
 80185b0:	2300      	movs	r3, #0
 80185b2:	4604      	mov	r4, r0
 80185b4:	4608      	mov	r0, r1
 80185b6:	602b      	str	r3, [r5, #0]
 80185b8:	f7e9 fcb2 	bl	8001f20 <_isatty>
 80185bc:	1c43      	adds	r3, r0, #1
 80185be:	d102      	bne.n	80185c6 <_isatty_r+0x1a>
 80185c0:	682b      	ldr	r3, [r5, #0]
 80185c2:	b103      	cbz	r3, 80185c6 <_isatty_r+0x1a>
 80185c4:	6023      	str	r3, [r4, #0]
 80185c6:	bd38      	pop	{r3, r4, r5, pc}
 80185c8:	20009868 	.word	0x20009868

080185cc <_lseek_r>:
 80185cc:	b538      	push	{r3, r4, r5, lr}
 80185ce:	4d07      	ldr	r5, [pc, #28]	; (80185ec <_lseek_r+0x20>)
 80185d0:	4604      	mov	r4, r0
 80185d2:	4608      	mov	r0, r1
 80185d4:	4611      	mov	r1, r2
 80185d6:	2200      	movs	r2, #0
 80185d8:	602a      	str	r2, [r5, #0]
 80185da:	461a      	mov	r2, r3
 80185dc:	f7e9 fcab 	bl	8001f36 <_lseek>
 80185e0:	1c43      	adds	r3, r0, #1
 80185e2:	d102      	bne.n	80185ea <_lseek_r+0x1e>
 80185e4:	682b      	ldr	r3, [r5, #0]
 80185e6:	b103      	cbz	r3, 80185ea <_lseek_r+0x1e>
 80185e8:	6023      	str	r3, [r4, #0]
 80185ea:	bd38      	pop	{r3, r4, r5, pc}
 80185ec:	20009868 	.word	0x20009868

080185f0 <__malloc_lock>:
 80185f0:	4801      	ldr	r0, [pc, #4]	; (80185f8 <__malloc_lock+0x8>)
 80185f2:	f7ff bb0d 	b.w	8017c10 <__retarget_lock_acquire_recursive>
 80185f6:	bf00      	nop
 80185f8:	2000986c 	.word	0x2000986c

080185fc <__malloc_unlock>:
 80185fc:	4801      	ldr	r0, [pc, #4]	; (8018604 <__malloc_unlock+0x8>)
 80185fe:	f7ff bb08 	b.w	8017c12 <__retarget_lock_release_recursive>
 8018602:	bf00      	nop
 8018604:	2000986c 	.word	0x2000986c

08018608 <_read_r>:
 8018608:	b538      	push	{r3, r4, r5, lr}
 801860a:	4d07      	ldr	r5, [pc, #28]	; (8018628 <_read_r+0x20>)
 801860c:	4604      	mov	r4, r0
 801860e:	4608      	mov	r0, r1
 8018610:	4611      	mov	r1, r2
 8018612:	2200      	movs	r2, #0
 8018614:	602a      	str	r2, [r5, #0]
 8018616:	461a      	mov	r2, r3
 8018618:	f7ea fd26 	bl	8003068 <_read>
 801861c:	1c43      	adds	r3, r0, #1
 801861e:	d102      	bne.n	8018626 <_read_r+0x1e>
 8018620:	682b      	ldr	r3, [r5, #0]
 8018622:	b103      	cbz	r3, 8018626 <_read_r+0x1e>
 8018624:	6023      	str	r3, [r4, #0]
 8018626:	bd38      	pop	{r3, r4, r5, pc}
 8018628:	20009868 	.word	0x20009868

0801862c <_raise_r>:
 801862c:	291f      	cmp	r1, #31
 801862e:	b538      	push	{r3, r4, r5, lr}
 8018630:	4604      	mov	r4, r0
 8018632:	460d      	mov	r5, r1
 8018634:	d904      	bls.n	8018640 <_raise_r+0x14>
 8018636:	2316      	movs	r3, #22
 8018638:	6003      	str	r3, [r0, #0]
 801863a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801863e:	bd38      	pop	{r3, r4, r5, pc}
 8018640:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018642:	b112      	cbz	r2, 801864a <_raise_r+0x1e>
 8018644:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018648:	b94b      	cbnz	r3, 801865e <_raise_r+0x32>
 801864a:	4620      	mov	r0, r4
 801864c:	f000 f830 	bl	80186b0 <_getpid_r>
 8018650:	462a      	mov	r2, r5
 8018652:	4601      	mov	r1, r0
 8018654:	4620      	mov	r0, r4
 8018656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801865a:	f000 b817 	b.w	801868c <_kill_r>
 801865e:	2b01      	cmp	r3, #1
 8018660:	d00a      	beq.n	8018678 <_raise_r+0x4c>
 8018662:	1c59      	adds	r1, r3, #1
 8018664:	d103      	bne.n	801866e <_raise_r+0x42>
 8018666:	2316      	movs	r3, #22
 8018668:	6003      	str	r3, [r0, #0]
 801866a:	2001      	movs	r0, #1
 801866c:	e7e7      	b.n	801863e <_raise_r+0x12>
 801866e:	2400      	movs	r4, #0
 8018670:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018674:	4628      	mov	r0, r5
 8018676:	4798      	blx	r3
 8018678:	2000      	movs	r0, #0
 801867a:	e7e0      	b.n	801863e <_raise_r+0x12>

0801867c <raise>:
 801867c:	4b02      	ldr	r3, [pc, #8]	; (8018688 <raise+0xc>)
 801867e:	4601      	mov	r1, r0
 8018680:	6818      	ldr	r0, [r3, #0]
 8018682:	f7ff bfd3 	b.w	801862c <_raise_r>
 8018686:	bf00      	nop
 8018688:	2000002c 	.word	0x2000002c

0801868c <_kill_r>:
 801868c:	b538      	push	{r3, r4, r5, lr}
 801868e:	4d07      	ldr	r5, [pc, #28]	; (80186ac <_kill_r+0x20>)
 8018690:	2300      	movs	r3, #0
 8018692:	4604      	mov	r4, r0
 8018694:	4608      	mov	r0, r1
 8018696:	4611      	mov	r1, r2
 8018698:	602b      	str	r3, [r5, #0]
 801869a:	f7e9 fc09 	bl	8001eb0 <_kill>
 801869e:	1c43      	adds	r3, r0, #1
 80186a0:	d102      	bne.n	80186a8 <_kill_r+0x1c>
 80186a2:	682b      	ldr	r3, [r5, #0]
 80186a4:	b103      	cbz	r3, 80186a8 <_kill_r+0x1c>
 80186a6:	6023      	str	r3, [r4, #0]
 80186a8:	bd38      	pop	{r3, r4, r5, pc}
 80186aa:	bf00      	nop
 80186ac:	20009868 	.word	0x20009868

080186b0 <_getpid_r>:
 80186b0:	f7e9 bbf6 	b.w	8001ea0 <_getpid>

080186b4 <_init>:
 80186b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186b6:	bf00      	nop
 80186b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186ba:	bc08      	pop	{r3}
 80186bc:	469e      	mov	lr, r3
 80186be:	4770      	bx	lr

080186c0 <_fini>:
 80186c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186c2:	bf00      	nop
 80186c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186c6:	bc08      	pop	{r3}
 80186c8:	469e      	mov	lr, r3
 80186ca:	4770      	bx	lr
