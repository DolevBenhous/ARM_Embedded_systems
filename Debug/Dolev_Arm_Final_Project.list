
Dolev_Arm_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001712c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d90  080172fc  080172fc  000272fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a08c  0801a08c  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801a08c  0801a08c  0002a08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a094  0801a094  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a094  0801a094  0002a094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a098  0801a098  0002a098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801a09c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  0801a12c  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  0801a1cc  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000968c  200001d0  0801a26c  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000985c  0801a26c  0003985c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003648e  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008218  00000000  00000000  0006668e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000026f0  00000000  00000000  0006e8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000024c0  00000000  00000000  00070f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039dc1  00000000  00000000  00073458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00042c70  00000000  00000000  000ad219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00114e33  00000000  00000000  000efe89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00204cbc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a8cc  00000000  00000000  00204d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080172e4 	.word	0x080172e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	080172e4 	.word	0x080172e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_ADC1_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0x98>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0x98>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC1_Init+0x98>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_ADC1_Init+0x98>)
 80005f4:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_ADC1_Init+0xa0>)
 80005f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC1_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x98>)
 800060e:	2201      	movs	r2, #1
 8000610:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000612:	480e      	ldr	r0, [pc, #56]	; (800064c <MX_ADC1_Init+0x98>)
 8000614:	f002 f8bc 	bl	8002790 <HAL_ADC_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800061e:	f000 fcbb 	bl	8000f98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000626:	2301      	movs	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <MX_ADC1_Init+0x98>)
 8000634:	f002 fafa 	bl	8002c2c <HAL_ADC_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800063e:	f000 fcab 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200001ec 	.word	0x200001ec
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a35      	ldr	r2, [pc, #212]	; (800074c <HAL_ADC_MspInit+0xf4>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d163      	bne.n	8000742 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067a:	4b35      	ldr	r3, [pc, #212]	; (8000750 <HAL_ADC_MspInit+0xf8>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	4a34      	ldr	r2, [pc, #208]	; (8000750 <HAL_ADC_MspInit+0xf8>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000684:	6453      	str	r3, [r2, #68]	; 0x44
 8000686:	4b32      	ldr	r3, [pc, #200]	; (8000750 <HAL_ADC_MspInit+0xf8>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <HAL_ADC_MspInit+0xf8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a2e      	ldr	r2, [pc, #184]	; (8000750 <HAL_ADC_MspInit+0xf8>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <HAL_ADC_MspInit+0xf8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006aa:	2301      	movs	r3, #1
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ae:	2303      	movs	r3, #3
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4825      	ldr	r0, [pc, #148]	; (8000754 <HAL_ADC_MspInit+0xfc>)
 80006be:	f004 fc2b 	bl	8004f18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <HAL_ADC_MspInit+0x100>)
 80006c4:	4a25      	ldr	r2, [pc, #148]	; (800075c <HAL_ADC_MspInit+0x104>)
 80006c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <HAL_ADC_MspInit+0x100>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <HAL_ADC_MspInit+0x100>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <HAL_ADC_MspInit+0x100>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <HAL_ADC_MspInit+0x100>)
 80006dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <HAL_ADC_MspInit+0x100>)
 80006e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <HAL_ADC_MspInit+0x100>)
 80006ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_ADC_MspInit+0x100>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <HAL_ADC_MspInit+0x100>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <HAL_ADC_MspInit+0x100>)
 8000700:	2204      	movs	r2, #4
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_ADC_MspInit+0x100>)
 8000706:	2203      	movs	r2, #3
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <HAL_ADC_MspInit+0x100>)
 800070c:	2200      	movs	r2, #0
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <HAL_ADC_MspInit+0x100>)
 8000712:	2200      	movs	r2, #0
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <HAL_ADC_MspInit+0x100>)
 8000718:	f002 fdf4 	bl	8003304 <HAL_DMA_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_ADC_MspInit+0xce>
    {
      Error_Handler();
 8000722:	f000 fc39 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <HAL_ADC_MspInit+0x100>)
 800072a:	639a      	str	r2, [r3, #56]	; 0x38
 800072c:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <HAL_ADC_MspInit+0x100>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2012      	movs	r0, #18
 8000738:	f002 fdad 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800073c:	2012      	movs	r0, #18
 800073e:	f002 fdc6 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40012000 	.word	0x40012000
 8000750:	40023800 	.word	0x40023800
 8000754:	40020000 	.word	0x40020000
 8000758:	20000234 	.word	0x20000234
 800075c:	40026470 	.word	0x40026470

08000760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000766:	4b42      	ldr	r3, [pc, #264]	; (8000870 <MX_DMA_Init+0x110>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a41      	ldr	r2, [pc, #260]	; (8000870 <MX_DMA_Init+0x110>)
 800076c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b3f      	ldr	r3, [pc, #252]	; (8000870 <MX_DMA_Init+0x110>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077e:	4b3c      	ldr	r3, [pc, #240]	; (8000870 <MX_DMA_Init+0x110>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a3b      	ldr	r2, [pc, #236]	; (8000870 <MX_DMA_Init+0x110>)
 8000784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b39      	ldr	r3, [pc, #228]	; (8000870 <MX_DMA_Init+0x110>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	200b      	movs	r0, #11
 800079c:	f002 fd7b 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80007a0:	200b      	movs	r0, #11
 80007a2:	f002 fd94 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	200d      	movs	r0, #13
 80007ac:	f002 fd73 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80007b0:	200d      	movs	r0, #13
 80007b2:	f002 fd8c 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	200e      	movs	r0, #14
 80007bc:	f002 fd6b 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007c0:	200e      	movs	r0, #14
 80007c2:	f002 fd84 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	200f      	movs	r0, #15
 80007cc:	f002 fd63 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007d0:	200f      	movs	r0, #15
 80007d2:	f002 fd7c 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2011      	movs	r0, #17
 80007dc:	f002 fd5b 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007e0:	2011      	movs	r0, #17
 80007e2:	f002 fd74 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	202f      	movs	r0, #47	; 0x2f
 80007ec:	f002 fd53 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80007f0:	202f      	movs	r0, #47	; 0x2f
 80007f2:	f002 fd6c 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2038      	movs	r0, #56	; 0x38
 80007fc:	f002 fd4b 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000800:	2038      	movs	r0, #56	; 0x38
 8000802:	f002 fd64 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2039      	movs	r0, #57	; 0x39
 800080c:	f002 fd43 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000810:	2039      	movs	r0, #57	; 0x39
 8000812:	f002 fd5c 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	203a      	movs	r0, #58	; 0x3a
 800081c:	f002 fd3b 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000820:	203a      	movs	r0, #58	; 0x3a
 8000822:	f002 fd54 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	203b      	movs	r0, #59	; 0x3b
 800082c:	f002 fd33 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000830:	203b      	movs	r0, #59	; 0x3b
 8000832:	f002 fd4c 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	203c      	movs	r0, #60	; 0x3c
 800083c:	f002 fd2b 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000840:	203c      	movs	r0, #60	; 0x3c
 8000842:	f002 fd44 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2044      	movs	r0, #68	; 0x44
 800084c:	f002 fd23 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000850:	2044      	movs	r0, #68	; 0x44
 8000852:	f002 fd3c 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2045      	movs	r0, #69	; 0x45
 800085c:	f002 fd1b 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000860:	2045      	movs	r0, #69	; 0x45
 8000862:	f002 fd34 	bl	80032ce <HAL_NVIC_EnableIRQ>

}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PD6   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088a:	4b55      	ldr	r3, [pc, #340]	; (80009e0 <MX_GPIO_Init+0x16c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a54      	ldr	r2, [pc, #336]	; (80009e0 <MX_GPIO_Init+0x16c>)
 8000890:	f043 0310 	orr.w	r3, r3, #16
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b52      	ldr	r3, [pc, #328]	; (80009e0 <MX_GPIO_Init+0x16c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b4f      	ldr	r3, [pc, #316]	; (80009e0 <MX_GPIO_Init+0x16c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a4e      	ldr	r2, [pc, #312]	; (80009e0 <MX_GPIO_Init+0x16c>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b4c      	ldr	r3, [pc, #304]	; (80009e0 <MX_GPIO_Init+0x16c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <MX_GPIO_Init+0x16c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a48      	ldr	r2, [pc, #288]	; (80009e0 <MX_GPIO_Init+0x16c>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b46      	ldr	r3, [pc, #280]	; (80009e0 <MX_GPIO_Init+0x16c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b43      	ldr	r3, [pc, #268]	; (80009e0 <MX_GPIO_Init+0x16c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a42      	ldr	r2, [pc, #264]	; (80009e0 <MX_GPIO_Init+0x16c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <MX_GPIO_Init+0x16c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <MX_GPIO_Init+0x16c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a3c      	ldr	r2, [pc, #240]	; (80009e0 <MX_GPIO_Init+0x16c>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b3a      	ldr	r3, [pc, #232]	; (80009e0 <MX_GPIO_Init+0x16c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <MX_GPIO_Init+0x16c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a36      	ldr	r2, [pc, #216]	; (80009e0 <MX_GPIO_Init+0x16c>)
 8000908:	f043 0308 	orr.w	r3, r3, #8
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <MX_GPIO_Init+0x16c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091a:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <MX_GPIO_Init+0x16c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a30      	ldr	r2, [pc, #192]	; (80009e0 <MX_GPIO_Init+0x16c>)
 8000920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <MX_GPIO_Init+0x16c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f244 0181 	movw	r1, #16513	; 0x4081
 8000938:	482a      	ldr	r0, [pc, #168]	; (80009e4 <MX_GPIO_Init+0x170>)
 800093a:	f004 fc99 	bl	8005270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	4829      	ldr	r0, [pc, #164]	; (80009e8 <MX_GPIO_Init+0x174>)
 8000944:	f004 fc94 	bl	8005270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4823      	ldr	r0, [pc, #140]	; (80009ec <MX_GPIO_Init+0x178>)
 8000960:	f004 fada 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000964:	f244 0381 	movw	r3, #16513	; 0x4081
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4819      	ldr	r0, [pc, #100]	; (80009e4 <MX_GPIO_Init+0x170>)
 800097e:	f004 facb 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000982:	2340      	movs	r3, #64	; 0x40
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4813      	ldr	r0, [pc, #76]	; (80009e8 <MX_GPIO_Init+0x174>)
 800099a:	f004 fabd 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_GPIO_Init+0x174>)
 80009b2:	f004 fab1 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009b6:	2340      	movs	r3, #64	; 0x40
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009be:	2301      	movs	r3, #1
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c6:	2307      	movs	r3, #7
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80009d2:	f004 faa1 	bl	8004f18 <HAL_GPIO_Init>

}
 80009d6:	bf00      	nop
 80009d8:	3730      	adds	r7, #48	; 0x30
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40021800 	.word	0x40021800
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020c00 	.word	0x40020c00

080009f4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_I2C1_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <MX_I2C1_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <MX_I2C1_Init+0x7c>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2e:	480e      	ldr	r0, [pc, #56]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a30:	f004 fc38 	bl	80052a4 <HAL_I2C_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a3a:	f000 faad 	bl	8000f98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a42:	f006 fb1b 	bl	800707c <HAL_I2CEx_ConfigAnalogFilter>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a4c:	f000 faa4 	bl	8000f98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a50:	2100      	movs	r1, #0
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_I2C1_Init+0x74>)
 8000a54:	f006 fb5d 	bl	8007112 <HAL_I2CEx_ConfigDigitalFilter>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 fa9b 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000294 	.word	0x20000294
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	00808cd2 	.word	0x00808cd2

08000a74 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <MX_I2C2_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <MX_I2C2_Init+0x7c>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 154;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a86:	229a      	movs	r2, #154	; 0x9a
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000ab0:	f004 fbf8 	bl	80052a4 <HAL_I2C_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aba:	f000 fa6d 	bl	8000f98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000ac2:	f006 fadb 	bl	800707c <HAL_I2CEx_ConfigAnalogFilter>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000acc:	f000 fa64 	bl	8000f98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_I2C2_Init+0x74>)
 8000ad4:	f006 fb1d 	bl	8007112 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ade:	f000 fa5b 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200002e8 	.word	0x200002e8
 8000aec:	40005800 	.word	0x40005800
 8000af0:	00808cd2 	.word	0x00808cd2

08000af4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0ac      	sub	sp, #176	; 0xb0
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0c:	f107 0318 	add.w	r3, r7, #24
 8000b10:	2284      	movs	r2, #132	; 0x84
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f015 fb03 	bl	8016120 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a5c      	ldr	r2, [pc, #368]	; (8000c90 <HAL_I2C_MspInit+0x19c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	f040 80c3 	bne.w	8000cac <HAL_I2C_MspInit+0x1b8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	4618      	mov	r0, r3
 8000b36:	f007 f95b 	bl	8007df0 <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000b40:	f000 fa2a 	bl	8000f98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b44:	4b53      	ldr	r3, [pc, #332]	; (8000c94 <HAL_I2C_MspInit+0x1a0>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	4a52      	ldr	r2, [pc, #328]	; (8000c94 <HAL_I2C_MspInit+0x1a0>)
 8000b4a:	f043 0302 	orr.w	r3, r3, #2
 8000b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b50:	4b50      	ldr	r3, [pc, #320]	; (8000c94 <HAL_I2C_MspInit+0x1a0>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b5c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b76:	2304      	movs	r3, #4
 8000b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b80:	4619      	mov	r1, r3
 8000b82:	4845      	ldr	r0, [pc, #276]	; (8000c98 <HAL_I2C_MspInit+0x1a4>)
 8000b84:	f004 f9c8 	bl	8004f18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b88:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <HAL_I2C_MspInit+0x1a0>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a41      	ldr	r2, [pc, #260]	; (8000c94 <HAL_I2C_MspInit+0x1a0>)
 8000b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <HAL_I2C_MspInit+0x1a0>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000ba2:	4a3f      	ldr	r2, [pc, #252]	; (8000ca0 <HAL_I2C_MspInit+0x1ac>)
 8000ba4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bac:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bae:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb4:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bba:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc2:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc8:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000bce:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd4:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bda:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000be0:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000be2:	2203      	movs	r2, #3
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000be6:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000bec:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000bf2:	482a      	ldr	r0, [pc, #168]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000bf4:	f002 fb86 	bl	8003304 <HAL_DMA_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8000bfe:	f000 f9cb 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a25      	ldr	r2, [pc, #148]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000c06:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c08:	4a24      	ldr	r2, [pc, #144]	; (8000c9c <HAL_I2C_MspInit+0x1a8>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c10:	4a25      	ldr	r2, [pc, #148]	; (8000ca8 <HAL_I2C_MspInit+0x1b4>)
 8000c12:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c1a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c1e:	2240      	movs	r2, #64	; 0x40
 8000c20:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c50:	2203      	movs	r2, #3
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c60:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c62:	f002 fb4f 	bl	8003304 <HAL_DMA_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_I2C_MspInit+0x17c>
    {
      Error_Handler();
 8000c6c:	f000 f994 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c74:	639a      	str	r2, [r3, #56]	; 0x38
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <HAL_I2C_MspInit+0x1b0>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	201f      	movs	r0, #31
 8000c82:	f002 fb08 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c86:	201f      	movs	r0, #31
 8000c88:	f002 fb21 	bl	80032ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c8c:	e0c8      	b.n	8000e20 <HAL_I2C_MspInit+0x32c>
 8000c8e:	bf00      	nop
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	2000033c 	.word	0x2000033c
 8000ca0:	40026010 	.word	0x40026010
 8000ca4:	2000039c 	.word	0x2000039c
 8000ca8:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a5d      	ldr	r2, [pc, #372]	; (8000e28 <HAL_I2C_MspInit+0x334>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f040 80b4 	bne.w	8000e20 <HAL_I2C_MspInit+0x32c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc4:	f107 0318 	add.w	r3, r7, #24
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f007 f891 	bl	8007df0 <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_I2C_MspInit+0x1e4>
      Error_Handler();
 8000cd4:	f000 f960 	bl	8000f98 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd8:	4b54      	ldr	r3, [pc, #336]	; (8000e2c <HAL_I2C_MspInit+0x338>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a53      	ldr	r2, [pc, #332]	; (8000e2c <HAL_I2C_MspInit+0x338>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce4:	4b51      	ldr	r3, [pc, #324]	; (8000e2c <HAL_I2C_MspInit+0x338>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cf0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf8:	2312      	movs	r3, #18
 8000cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d14:	4619      	mov	r1, r3
 8000d16:	4846      	ldr	r0, [pc, #280]	; (8000e30 <HAL_I2C_MspInit+0x33c>)
 8000d18:	f004 f8fe 	bl	8004f18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d1c:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <HAL_I2C_MspInit+0x338>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	4a42      	ldr	r2, [pc, #264]	; (8000e2c <HAL_I2C_MspInit+0x338>)
 8000d22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d26:	6413      	str	r3, [r2, #64]	; 0x40
 8000d28:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <HAL_I2C_MspInit+0x338>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000d34:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d36:	4a40      	ldr	r2, [pc, #256]	; (8000e38 <HAL_I2C_MspInit+0x344>)
 8000d38:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d3c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000d40:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d42:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d48:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d4e:	4b39      	ldr	r3, [pc, #228]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d54:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d56:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5c:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000d62:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d68:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d6e:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d70:	2204      	movs	r2, #4
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d74:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d76:	2203      	movs	r2, #3
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d80:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000d86:	482b      	ldr	r0, [pc, #172]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d88:	f002 fabc 	bl	8003304 <HAL_DMA_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_I2C_MspInit+0x2a2>
      Error_Handler();
 8000d92:	f000 f901 	bl	8000f98 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d9c:	4a25      	ldr	r2, [pc, #148]	; (8000e34 <HAL_I2C_MspInit+0x340>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000da4:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <HAL_I2C_MspInit+0x34c>)
 8000da6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000daa:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000dae:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000db2:	2240      	movs	r2, #64	; 0x40
 8000db4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000dde:	2204      	movs	r2, #4
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000de4:	2203      	movs	r2, #3
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000df4:	4811      	ldr	r0, [pc, #68]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000df6:	f002 fa85 	bl	8003304 <HAL_DMA_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_I2C_MspInit+0x310>
      Error_Handler();
 8000e00:	f000 f8ca 	bl	8000f98 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
 8000e0a:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <HAL_I2C_MspInit+0x348>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2021      	movs	r0, #33	; 0x21
 8000e16:	f002 fa3e 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000e1a:	2021      	movs	r0, #33	; 0x21
 8000e1c:	f002 fa57 	bl	80032ce <HAL_NVIC_EnableIRQ>
}
 8000e20:	bf00      	nop
 8000e22:	37b0      	adds	r7, #176	; 0xb0
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020400 	.word	0x40020400
 8000e34:	200003fc 	.word	0x200003fc
 8000e38:	40026058 	.word	0x40026058
 8000e3c:	2000045c 	.word	0x2000045c
 8000e40:	400260b8 	.word	0x400260b8

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f001 fc21 	bl	800268e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f83c 	bl	8000ec8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8000e50:	f7ff fc86 	bl	8000760 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f7ff fd0e 	bl	8000874 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e58:	f000 fcac 	bl	80017b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e5c:	f000 fef8 	bl	8001c50 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000e60:	f00a fa96 	bl	800b390 <MX_LWIP_Init>
  MX_UART4_Init();
 8000e64:	f000 fc76 	bl	8001754 <MX_UART4_Init>
  MX_I2C2_Init();
 8000e68:	f7ff fe04 	bl	8000a74 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000e6c:	f000 f89a 	bl	8000fa4 <MX_SPI1_Init>
  MX_DMA_Init();
 8000e70:	f7ff fc76 	bl	8000760 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e74:	f7ff fb9e 	bl	80005b4 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000e78:	f000 fccc 	bl	8001814 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000e7c:	f7ff fdba 	bl	80009f4 <MX_I2C1_Init>
  MX_SPI4_Init();
 8000e80:	f000 f8ce 	bl	8001020 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
	udpServer_init ();
 8000e84:	f001 f900 	bl	8002088 <udpServer_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 8000e88:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <main+0x6c>)
 8000e8a:	f00a fd1d 	bl	800b8c8 <ethernetif_input>
	  sys_check_timeouts();
 8000e8e:	f012 f889 	bl	8012fa4 <sys_check_timeouts>
	  if (packet_flag)
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <main+0x70>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f6      	beq.n	8000e88 <main+0x44>
		  test(iter, per, length, test_check);
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <main+0x74>)
 8000e9c:	7818      	ldrb	r0, [r3, #0]
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <main+0x78>)
 8000ea0:	7819      	ldrb	r1, [r3, #0]
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <main+0x7c>)
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <main+0x80>)
 8000ea8:	f001 f9d4 	bl	8002254 <test>
	  ethernetif_input(&gnetif);
 8000eac:	e7ec      	b.n	8000e88 <main+0x44>
 8000eae:	bf00      	nop
 8000eb0:	200016a0 	.word	0x200016a0
 8000eb4:	200005bf 	.word	0x200005bf
 8000eb8:	200004bc 	.word	0x200004bc
 8000ebc:	200004bd 	.word	0x200004bd
 8000ec0:	200004be 	.word	0x200004be
 8000ec4:	200004c0 	.word	0x200004c0

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	; 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2230      	movs	r2, #48	; 0x30
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f015 f922 	bl	8016120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000eec:	f006 faa6 	bl	800743c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <SystemClock_Config+0xc8>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a26      	ldr	r2, [pc, #152]	; (8000f90 <SystemClock_Config+0xc8>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <SystemClock_Config+0xc8>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <SystemClock_Config+0xcc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f10:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <SystemClock_Config+0xcc>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <SystemClock_Config+0xcc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f28:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f3c:	2348      	movs	r3, #72	; 0x48
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f44:	2303      	movs	r3, #3
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f006 fa85 	bl	800745c <HAL_RCC_OscConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f58:	f000 f81e 	bl	8000f98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f60:	2302      	movs	r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2102      	movs	r1, #2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 fd13 	bl	80079a4 <HAL_RCC_ClockConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f84:	f000 f808 	bl	8000f98 <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3750      	adds	r7, #80	; 0x50
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9c:	b672      	cpsid	i
}
 8000f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <Error_Handler+0x8>
	...

08000fa4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_SPI1_Init+0x74>)
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <MX_SPI1_Init+0x78>)
 8000fac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_SPI1_Init+0x74>)
 8000fb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_SPI1_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_SPI1_Init+0x74>)
 8000fbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fc2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_SPI1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_SPI1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_SPI1_Init+0x74>)
 8000fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_SPI1_Init+0x74>)
 8000fda:	2220      	movs	r2, #32
 8000fdc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_SPI1_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_SPI1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_SPI1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_SPI1_Init+0x74>)
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_SPI1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_SPI1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_SPI1_Init+0x74>)
 8001004:	f007 fae4 	bl	80085d0 <HAL_SPI_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800100e:	f7ff ffc3 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200005c0 	.word	0x200005c0
 800101c:	40013000 	.word	0x40013000

08001020 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_SPI4_Init+0x6c>)
 8001026:	4a1a      	ldr	r2, [pc, #104]	; (8001090 <MX_SPI4_Init+0x70>)
 8001028:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_SPI4_Init+0x6c>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_SPI4_Init+0x6c>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_SPI4_Init+0x6c>)
 8001038:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800103c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_SPI4_Init+0x6c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_SPI4_Init+0x6c>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <MX_SPI4_Init+0x6c>)
 800104c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001050:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_SPI4_Init+0x6c>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_SPI4_Init+0x6c>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_SPI4_Init+0x6c>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_SPI4_Init+0x6c>)
 8001066:	2207      	movs	r2, #7
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_SPI4_Init+0x6c>)
 800106c:	2200      	movs	r2, #0
 800106e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_SPI4_Init+0x6c>)
 8001072:	2200      	movs	r2, #0
 8001074:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_SPI4_Init+0x6c>)
 8001078:	f007 faaa 	bl	80085d0 <HAL_SPI_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_SPI4_Init+0x66>
  {
    Error_Handler();
 8001082:	f7ff ff89 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000624 	.word	0x20000624
 8001090:	40013400 	.word	0x40013400

08001094 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	; 0x30
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a5f      	ldr	r2, [pc, #380]	; (8001230 <HAL_SPI_MspInit+0x19c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	f040 80cc 	bne.w	8001250 <HAL_SPI_MspInit+0x1bc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010b8:	4b5e      	ldr	r3, [pc, #376]	; (8001234 <HAL_SPI_MspInit+0x1a0>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	4a5d      	ldr	r2, [pc, #372]	; (8001234 <HAL_SPI_MspInit+0x1a0>)
 80010be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010c2:	6453      	str	r3, [r2, #68]	; 0x44
 80010c4:	4b5b      	ldr	r3, [pc, #364]	; (8001234 <HAL_SPI_MspInit+0x1a0>)
 80010c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b58      	ldr	r3, [pc, #352]	; (8001234 <HAL_SPI_MspInit+0x1a0>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a57      	ldr	r2, [pc, #348]	; (8001234 <HAL_SPI_MspInit+0x1a0>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b55      	ldr	r3, [pc, #340]	; (8001234 <HAL_SPI_MspInit+0x1a0>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b52      	ldr	r3, [pc, #328]	; (8001234 <HAL_SPI_MspInit+0x1a0>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4a51      	ldr	r2, [pc, #324]	; (8001234 <HAL_SPI_MspInit+0x1a0>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
 80010f4:	4b4f      	ldr	r3, [pc, #316]	; (8001234 <HAL_SPI_MspInit+0x1a0>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001100:	2360      	movs	r3, #96	; 0x60
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001110:	2305      	movs	r3, #5
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4847      	ldr	r0, [pc, #284]	; (8001238 <HAL_SPI_MspInit+0x1a4>)
 800111c:	f003 fefc 	bl	8004f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001120:	2320      	movs	r3, #32
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001130:	2305      	movs	r3, #5
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	4840      	ldr	r0, [pc, #256]	; (800123c <HAL_SPI_MspInit+0x1a8>)
 800113c:	f003 feec 	bl	8004f18 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001140:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 8001142:	4a40      	ldr	r2, [pc, #256]	; (8001244 <HAL_SPI_MspInit+0x1b0>)
 8001144:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001146:	4b3e      	ldr	r3, [pc, #248]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 8001148:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800114c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800114e:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001154:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800115a:	4b39      	ldr	r3, [pc, #228]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 800115c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001160:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001162:	4b37      	ldr	r3, [pc, #220]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001168:	4b35      	ldr	r3, [pc, #212]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800116e:	4b34      	ldr	r3, [pc, #208]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 800117c:	2204      	movs	r2, #4
 800117e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 8001182:	2203      	movs	r2, #3
 8001184:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 8001188:	2200      	movs	r2, #0
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 800118e:	2200      	movs	r2, #0
 8001190:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001192:	482b      	ldr	r0, [pc, #172]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 8001194:	f002 f8b6 	bl	8003304 <HAL_DMA_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 800119e:	f7ff fefb 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 80011a6:	659a      	str	r2, [r3, #88]	; 0x58
 80011a8:	4a25      	ldr	r2, [pc, #148]	; (8001240 <HAL_SPI_MspInit+0x1ac>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011b0:	4a26      	ldr	r2, [pc, #152]	; (800124c <HAL_SPI_MspInit+0x1b8>)
 80011b2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011b6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80011ba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011ea:	2204      	movs	r2, #4
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011f0:	2203      	movs	r2, #3
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001200:	4811      	ldr	r0, [pc, #68]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 8001202:	f002 f87f 	bl	8003304 <HAL_DMA_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_SPI_MspInit+0x17c>
    {
      Error_Handler();
 800120c:	f7ff fec4 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
 8001216:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <HAL_SPI_MspInit+0x1b4>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2023      	movs	r0, #35	; 0x23
 8001222:	f002 f838 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001226:	2023      	movs	r0, #35	; 0x23
 8001228:	f002 f851 	bl	80032ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800122c:	e0b4      	b.n	8001398 <HAL_SPI_MspInit+0x304>
 800122e:	bf00      	nop
 8001230:	40013000 	.word	0x40013000
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020400 	.word	0x40020400
 8001240:	20000688 	.word	0x20000688
 8001244:	40026410 	.word	0x40026410
 8001248:	200006e8 	.word	0x200006e8
 800124c:	40026488 	.word	0x40026488
  else if(spiHandle->Instance==SPI4)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a52      	ldr	r2, [pc, #328]	; (80013a0 <HAL_SPI_MspInit+0x30c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	f040 809e 	bne.w	8001398 <HAL_SPI_MspInit+0x304>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800125c:	4b51      	ldr	r3, [pc, #324]	; (80013a4 <HAL_SPI_MspInit+0x310>)
 800125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001260:	4a50      	ldr	r2, [pc, #320]	; (80013a4 <HAL_SPI_MspInit+0x310>)
 8001262:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001266:	6453      	str	r3, [r2, #68]	; 0x44
 8001268:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <HAL_SPI_MspInit+0x310>)
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001274:	4b4b      	ldr	r3, [pc, #300]	; (80013a4 <HAL_SPI_MspInit+0x310>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4a4a      	ldr	r2, [pc, #296]	; (80013a4 <HAL_SPI_MspInit+0x310>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6313      	str	r3, [r2, #48]	; 0x30
 8001280:	4b48      	ldr	r3, [pc, #288]	; (80013a4 <HAL_SPI_MspInit+0x310>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800128c:	2364      	movs	r3, #100	; 0x64
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800129c:	2305      	movs	r3, #5
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4840      	ldr	r0, [pc, #256]	; (80013a8 <HAL_SPI_MspInit+0x314>)
 80012a8:	f003 fe36 	bl	8004f18 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012ae:	4a40      	ldr	r2, [pc, #256]	; (80013b0 <HAL_SPI_MspInit+0x31c>)
 80012b0:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 80012b2:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012b4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80012b8:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ba:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c0:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012cc:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80012da:	4b34      	ldr	r3, [pc, #208]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012dc:	2200      	movs	r2, #0
 80012de:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012e0:	4b32      	ldr	r3, [pc, #200]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012e6:	4b31      	ldr	r3, [pc, #196]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012e8:	2204      	movs	r2, #4
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012ee:	2203      	movs	r2, #3
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012f8:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <HAL_SPI_MspInit+0x318>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80012fe:	482b      	ldr	r0, [pc, #172]	; (80013ac <HAL_SPI_MspInit+0x318>)
 8001300:	f002 f800 	bl	8003304 <HAL_DMA_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_SPI_MspInit+0x27a>
      Error_Handler();
 800130a:	f7ff fe45 	bl	8000f98 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a26      	ldr	r2, [pc, #152]	; (80013ac <HAL_SPI_MspInit+0x318>)
 8001312:	659a      	str	r2, [r3, #88]	; 0x58
 8001314:	4a25      	ldr	r2, [pc, #148]	; (80013ac <HAL_SPI_MspInit+0x318>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 800131c:	4a26      	ldr	r2, [pc, #152]	; (80013b8 <HAL_SPI_MspInit+0x324>)
 800131e:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 8001322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001326:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 800132a:	2240      	movs	r2, #64	; 0x40
 800132c:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 8001336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800133a:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 8001356:	2204      	movs	r2, #4
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 800135c:	2203      	movs	r2, #3
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 8001362:	2200      	movs	r2, #0
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 8001368:	2200      	movs	r2, #0
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800136c:	4811      	ldr	r0, [pc, #68]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 800136e:	f001 ffc9 	bl	8003304 <HAL_DMA_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_SPI_MspInit+0x2e8>
      Error_Handler();
 8001378:	f7ff fe0e 	bl	8000f98 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
 8001382:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <HAL_SPI_MspInit+0x320>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2054      	movs	r0, #84	; 0x54
 800138e:	f001 ff82 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001392:	2054      	movs	r0, #84	; 0x54
 8001394:	f001 ff9b 	bl	80032ce <HAL_NVIC_EnableIRQ>
}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	; 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40013400 	.word	0x40013400
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40021000 	.word	0x40021000
 80013ac:	20000748 	.word	0x20000748
 80013b0:	40026458 	.word	0x40026458
 80013b4:	200007a8 	.word	0x200007a8
 80013b8:	40026428 	.word	0x40026428

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_MspInit+0x44>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_MspInit+0x44>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_MspInit+0x44>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_MspInit+0x44>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <HAL_MspInit+0x44>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_MspInit+0x44>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <NMI_Handler+0x4>

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001450:	f001 f95a 	bl	8002708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DMA1_Stream0_IRQHandler+0x10>)
 800145e:	f002 f8f1 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000033c 	.word	0x2000033c

0800146c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <DMA1_Stream2_IRQHandler+0x10>)
 8001472:	f002 f8e7 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200009f0 	.word	0x200009f0

08001480 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <DMA1_Stream3_IRQHandler+0x10>)
 8001486:	f002 f8dd 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200003fc 	.word	0x200003fc

08001494 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <DMA1_Stream4_IRQHandler+0x10>)
 800149a:	f002 f8d3 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000a50 	.word	0x20000a50

080014a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <DMA1_Stream6_IRQHandler+0x10>)
 80014ae:	f002 f8c9 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000039c 	.word	0x2000039c

080014bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <ADC_IRQHandler+0x10>)
 80014c2:	f001 fa81 	bl	80029c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200001ec 	.word	0x200001ec

080014d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM2_IRQHandler+0x10>)
 80014d6:	f007 fed9 	bl	800928c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000080c 	.word	0x2000080c

080014e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <I2C1_EV_IRQHandler+0x10>)
 80014ea:	f004 fab7 	bl	8005a5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000294 	.word	0x20000294

080014f8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <I2C2_EV_IRQHandler+0x10>)
 80014fe:	f004 faad 	bl	8005a5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200002e8 	.word	0x200002e8

0800150c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <SPI1_IRQHandler+0x10>)
 8001512:	f007 fa95 	bl	8008a40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200005c0 	.word	0x200005c0

08001520 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <DMA1_Stream7_IRQHandler+0x10>)
 8001526:	f002 f88d 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000045c 	.word	0x2000045c

08001534 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <UART4_IRQHandler+0x10>)
 800153a:	f008 fa6b 	bl	8009a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000858 	.word	0x20000858

08001548 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <DMA2_Stream0_IRQHandler+0x10>)
 800154e:	f002 f879 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000688 	.word	0x20000688

0800155c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <DMA2_Stream1_IRQHandler+0x10>)
 8001562:	f002 f86f 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200007a8 	.word	0x200007a8

08001570 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <DMA2_Stream2_IRQHandler+0x10>)
 8001576:	f002 f865 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000ab0 	.word	0x20000ab0

08001584 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <DMA2_Stream3_IRQHandler+0x10>)
 800158a:	f002 f85b 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000748 	.word	0x20000748

08001598 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <DMA2_Stream4_IRQHandler+0x10>)
 800159e:	f002 f851 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000234 	.word	0x20000234

080015ac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <ETH_IRQHandler+0x10>)
 80015b2:	f002 fdcb 	bl	800414c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20006078 	.word	0x20006078

080015c0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <DMA2_Stream5_IRQHandler+0x10>)
 80015c6:	f002 f83d 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200006e8 	.word	0x200006e8

080015d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <DMA2_Stream6_IRQHandler+0x10>)
 80015da:	f002 f833 	bl	8003644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000b10 	.word	0x20000b10

080015e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <USART6_IRQHandler+0x10>)
 80015ee:	f008 fa11 	bl	8009a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000968 	.word	0x20000968

080015fc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <SPI4_IRQHandler+0x10>)
 8001602:	f007 fa1d 	bl	8008a40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000624 	.word	0x20000624

08001610 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
	return 1;
 8001614:	2301      	movs	r3, #1
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_kill>:

int _kill(int pid, int sig)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <_kill+0x20>)
 800162c:	2216      	movs	r2, #22
 800162e:	601a      	str	r2, [r3, #0]
	return -1;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	2000984c 	.word	0x2000984c

08001644 <_exit>:

void _exit (int status)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ffe5 	bl	8001620 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001656:	e7fe      	b.n	8001656 <_exit+0x12>

08001658 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	return -1;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001680:	605a      	str	r2, [r3, #4]
	return 0;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_isatty>:

int _isatty(int file)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	return 1;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
	return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d205      	bcs.n	80016fc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <_sbrk+0x6c>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	e009      	b.n	8001710 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	4a06      	ldr	r2, [pc, #24]	; (8001724 <_sbrk+0x64>)
 800170c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	20050000 	.word	0x20050000
 8001720:	00000400 	.word	0x00000400
 8001724:	20000808 	.word	0x20000808
 8001728:	20009860 	.word	0x20009860
 800172c:	2000984c 	.word	0x2000984c

08001730 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <SystemInit+0x20>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <SystemInit+0x20>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_UART4_Init+0x58>)
 800175a:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <MX_UART4_Init+0x5c>)
 800175c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_UART4_Init+0x58>)
 8001760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001764:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_UART4_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_UART4_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_UART4_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_UART4_Init+0x58>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_UART4_Init+0x58>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_UART4_Init+0x58>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_UART4_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_UART4_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_UART4_Init+0x58>)
 8001798:	f007 fee7 	bl	800956a <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80017a2:	f7ff fbf9 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000858 	.word	0x20000858
 80017b0:	40004c00 	.word	0x40004c00

080017b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_USART3_UART_Init+0x58>)
 80017ba:	4a15      	ldr	r2, [pc, #84]	; (8001810 <MX_USART3_UART_Init+0x5c>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <MX_USART3_UART_Init+0x58>)
 80017c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_USART3_UART_Init+0x58>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_USART3_UART_Init+0x58>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_USART3_UART_Init+0x58>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_USART3_UART_Init+0x58>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_USART3_UART_Init+0x58>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_USART3_UART_Init+0x58>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_USART3_UART_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_USART3_UART_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_USART3_UART_Init+0x58>)
 80017f8:	f007 feb7 	bl	800956a <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001802:	f7ff fbc9 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200008e0 	.word	0x200008e0
 8001810:	40004800 	.word	0x40004800

08001814 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_USART6_UART_Init+0x58>)
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <MX_USART6_UART_Init+0x5c>)
 800181c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <MX_USART6_UART_Init+0x58>)
 8001820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_USART6_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_USART6_UART_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_USART6_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_USART6_UART_Init+0x58>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <MX_USART6_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_USART6_UART_Init+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <MX_USART6_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_USART6_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_USART6_UART_Init+0x58>)
 8001858:	f007 fe87 	bl	800956a <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001862:	f7ff fb99 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000968 	.word	0x20000968
 8001870:	40011400 	.word	0x40011400

08001874 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b0ae      	sub	sp, #184	; 0xb8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800188c:	f107 0320 	add.w	r3, r7, #32
 8001890:	2284      	movs	r2, #132	; 0x84
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f014 fc43 	bl	8016120 <memset>
  if(uartHandle->Instance==UART4)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a7d      	ldr	r2, [pc, #500]	; (8001a94 <HAL_UART_MspInit+0x220>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	f040 80b4 	bne.w	8001a0e <HAL_UART_MspInit+0x19a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	4618      	mov	r0, r3
 80018b6:	f006 fa9b 	bl	8007df0 <HAL_RCCEx_PeriphCLKConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80018c0:	f7ff fb6a 	bl	8000f98 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018c4:	4b74      	ldr	r3, [pc, #464]	; (8001a98 <HAL_UART_MspInit+0x224>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a73      	ldr	r2, [pc, #460]	; (8001a98 <HAL_UART_MspInit+0x224>)
 80018ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
 80018d0:	4b71      	ldr	r3, [pc, #452]	; (8001a98 <HAL_UART_MspInit+0x224>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018dc:	4b6e      	ldr	r3, [pc, #440]	; (8001a98 <HAL_UART_MspInit+0x224>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	4a6d      	ldr	r2, [pc, #436]	; (8001a98 <HAL_UART_MspInit+0x224>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6313      	str	r3, [r2, #48]	; 0x30
 80018e8:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <HAL_UART_MspInit+0x224>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001902:	2301      	movs	r3, #1
 8001904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800190e:	2308      	movs	r3, #8
 8001910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001914:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001918:	4619      	mov	r1, r3
 800191a:	4860      	ldr	r0, [pc, #384]	; (8001a9c <HAL_UART_MspInit+0x228>)
 800191c:	f003 fafc 	bl	8004f18 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001920:	4b5f      	ldr	r3, [pc, #380]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 8001922:	4a60      	ldr	r2, [pc, #384]	; (8001aa4 <HAL_UART_MspInit+0x230>)
 8001924:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001926:	4b5e      	ldr	r3, [pc, #376]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 8001928:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800192c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800192e:	4b5c      	ldr	r3, [pc, #368]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001934:	4b5a      	ldr	r3, [pc, #360]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800193a:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 800193c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001940:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001942:	4b57      	ldr	r3, [pc, #348]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001948:	4b55      	ldr	r3, [pc, #340]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800194e:	4b54      	ldr	r3, [pc, #336]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 8001950:	2200      	movs	r2, #0
 8001952:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001954:	4b52      	ldr	r3, [pc, #328]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 8001956:	2200      	movs	r2, #0
 8001958:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800195a:	4b51      	ldr	r3, [pc, #324]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 800195c:	2204      	movs	r2, #4
 800195e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001960:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 8001962:	2203      	movs	r2, #3
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001966:	4b4e      	ldr	r3, [pc, #312]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 8001968:	2200      	movs	r2, #0
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800196c:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 800196e:	2200      	movs	r2, #0
 8001970:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001972:	484b      	ldr	r0, [pc, #300]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 8001974:	f001 fcc6 	bl	8003304 <HAL_DMA_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800197e:	f7ff fb0b 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a46      	ldr	r2, [pc, #280]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 8001986:	675a      	str	r2, [r3, #116]	; 0x74
 8001988:	4a45      	ldr	r2, [pc, #276]	; (8001aa0 <HAL_UART_MspInit+0x22c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800198e:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 8001990:	4a46      	ldr	r2, [pc, #280]	; (8001aac <HAL_UART_MspInit+0x238>)
 8001992:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001994:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 8001996:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800199a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800199c:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 800199e:	2240      	movs	r2, #64	; 0x40
 80019a0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019a8:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ae:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b0:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b6:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80019bc:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019c2:	4b39      	ldr	r3, [pc, #228]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019c8:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019ca:	2204      	movs	r2, #4
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019ce:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019d0:	2203      	movs	r2, #3
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80019d4:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019dc:	2200      	movs	r2, #0
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80019e0:	4831      	ldr	r0, [pc, #196]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019e2:	f001 fc8f 	bl	8003304 <HAL_DMA_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_UART_MspInit+0x17c>
    {
      Error_Handler();
 80019ec:	f7ff fad4 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019f4:	671a      	str	r2, [r3, #112]	; 0x70
 80019f6:	4a2c      	ldr	r2, [pc, #176]	; (8001aa8 <HAL_UART_MspInit+0x234>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2100      	movs	r1, #0
 8001a00:	2034      	movs	r0, #52	; 0x34
 8001a02:	f001 fc48 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001a06:	2034      	movs	r0, #52	; 0x34
 8001a08:	f001 fc61 	bl	80032ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001a0c:	e10d      	b.n	8001c2a <HAL_UART_MspInit+0x3b6>
  else if(uartHandle->Instance==USART3)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <HAL_UART_MspInit+0x23c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d14f      	bne.n	8001ab8 <HAL_UART_MspInit+0x244>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a1c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	4618      	mov	r0, r3
 8001a28:	f006 f9e2 	bl	8007df0 <HAL_RCCEx_PeriphCLKConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8001a32:	f7ff fab1 	bl	8000f98 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_UART_MspInit+0x224>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_UART_MspInit+0x224>)
 8001a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_UART_MspInit+0x224>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_UART_MspInit+0x224>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_UART_MspInit+0x224>)
 8001a54:	f043 0308 	orr.w	r3, r3, #8
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_UART_MspInit+0x224>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a80:	2307      	movs	r3, #7
 8001a82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <HAL_UART_MspInit+0x240>)
 8001a8e:	f003 fa43 	bl	8004f18 <HAL_GPIO_Init>
}
 8001a92:	e0ca      	b.n	8001c2a <HAL_UART_MspInit+0x3b6>
 8001a94:	40004c00 	.word	0x40004c00
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	200009f0 	.word	0x200009f0
 8001aa4:	40026040 	.word	0x40026040
 8001aa8:	20000a50 	.word	0x20000a50
 8001aac:	40026070 	.word	0x40026070
 8001ab0:	40004800 	.word	0x40004800
 8001ab4:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART6)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a5d      	ldr	r2, [pc, #372]	; (8001c34 <HAL_UART_MspInit+0x3c0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	f040 80b3 	bne.w	8001c2a <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ac8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001aca:	2300      	movs	r3, #0
 8001acc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ace:	f107 0320 	add.w	r3, r7, #32
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f006 f98c 	bl	8007df0 <HAL_RCCEx_PeriphCLKConfig>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8001ade:	f7ff fa5b 	bl	8000f98 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ae2:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <HAL_UART_MspInit+0x3c4>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a54      	ldr	r2, [pc, #336]	; (8001c38 <HAL_UART_MspInit+0x3c4>)
 8001ae8:	f043 0320 	orr.w	r3, r3, #32
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b52      	ldr	r3, [pc, #328]	; (8001c38 <HAL_UART_MspInit+0x3c4>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001afa:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <HAL_UART_MspInit+0x3c4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a4e      	ldr	r2, [pc, #312]	; (8001c38 <HAL_UART_MspInit+0x3c4>)
 8001b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <HAL_UART_MspInit+0x3c4>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001b12:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b36:	4619      	mov	r1, r3
 8001b38:	4840      	ldr	r0, [pc, #256]	; (8001c3c <HAL_UART_MspInit+0x3c8>)
 8001b3a:	f003 f9ed 	bl	8004f18 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8001b3e:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b40:	4a40      	ldr	r2, [pc, #256]	; (8001c44 <HAL_UART_MspInit+0x3d0>)
 8001b42:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001b44:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b46:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001b4a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b4c:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b58:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b5e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b60:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b66:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b72:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b80:	2203      	movs	r2, #3
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b84:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001b90:	482b      	ldr	r0, [pc, #172]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001b92:	f001 fbb7 	bl	8003304 <HAL_DMA_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_UART_MspInit+0x32c>
      Error_Handler();
 8001b9c:	f7ff f9fc 	bl	8000f98 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a27      	ldr	r2, [pc, #156]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001ba4:	675a      	str	r2, [r3, #116]	; 0x74
 8001ba6:	4a26      	ldr	r2, [pc, #152]	; (8001c40 <HAL_UART_MspInit+0x3cc>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001bac:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001bae:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <HAL_UART_MspInit+0x3d8>)
 8001bb0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001bb2:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001bb4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001bb8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001bbc:	2240      	movs	r2, #64	; 0x40
 8001bbe:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bcc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001be8:	2204      	movs	r2, #4
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001bee:	2203      	movs	r2, #3
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001bfe:	4812      	ldr	r0, [pc, #72]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001c00:	f001 fb80 	bl	8003304 <HAL_DMA_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_UART_MspInit+0x39a>
      Error_Handler();
 8001c0a:	f7ff f9c5 	bl	8000f98 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001c12:	671a      	str	r2, [r3, #112]	; 0x70
 8001c14:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <HAL_UART_MspInit+0x3d4>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2047      	movs	r0, #71	; 0x47
 8001c20:	f001 fb39 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c24:	2047      	movs	r0, #71	; 0x47
 8001c26:	f001 fb52 	bl	80032ce <HAL_NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	37b8      	adds	r7, #184	; 0xb8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40011400 	.word	0x40011400
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	20000ab0 	.word	0x20000ab0
 8001c44:	40026440 	.word	0x40026440
 8001c48:	20000b10 	.word	0x20000b10
 8001c4c:	400264a0 	.word	0x400264a0

08001c50 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c5e:	2206      	movs	r2, #6
 8001c60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c64:	2202      	movs	r2, #2
 8001c66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c70:	2202      	movs	r2, #2
 8001c72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c94:	f005 fa89 	bl	80071aa <HAL_PCD_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c9e:	f7ff f97b 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000b70 	.word	0x20000b70

08001cac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b0ac      	sub	sp, #176	; 0xb0
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	2284      	movs	r2, #132	; 0x84
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f014 fa27 	bl	8016120 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cda:	d159      	bne.n	8001d90 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001cdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ce0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce8:	f107 0318 	add.w	r3, r7, #24
 8001cec:	4618      	mov	r0, r3
 8001cee:	f006 f87f 	bl	8007df0 <HAL_RCCEx_PeriphCLKConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001cf8:	f7ff f94e 	bl	8000f98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_PCD_MspInit+0xec>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	4a25      	ldr	r2, [pc, #148]	; (8001d98 <HAL_PCD_MspInit+0xec>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6313      	str	r3, [r2, #48]	; 0x30
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_PCD_MspInit+0xec>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d14:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d2e:	230a      	movs	r3, #10
 8001d30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4818      	ldr	r0, [pc, #96]	; (8001d9c <HAL_PCD_MspInit+0xf0>)
 8001d3c:	f003 f8ec 	bl	8004f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4810      	ldr	r0, [pc, #64]	; (8001d9c <HAL_PCD_MspInit+0xf0>)
 8001d5c:	f003 f8dc 	bl	8004f18 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_PCD_MspInit+0xec>)
 8001d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d64:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <HAL_PCD_MspInit+0xec>)
 8001d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6a:	6353      	str	r3, [r2, #52]	; 0x34
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_PCD_MspInit+0xec>)
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <HAL_PCD_MspInit+0xec>)
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <HAL_PCD_MspInit+0xec>)
 8001d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d82:	6453      	str	r3, [r2, #68]	; 0x44
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_PCD_MspInit+0xec>)
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001d90:	bf00      	nop
 8001d92:	37b0      	adds	r7, #176	; 0xb0
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020000 	.word	0x40020000

08001da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001da4:	480d      	ldr	r0, [pc, #52]	; (8001ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001da6:	490e      	ldr	r1, [pc, #56]	; (8001de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001da8:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dac:	e002      	b.n	8001db4 <LoopCopyDataInit>

08001dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db2:	3304      	adds	r3, #4

08001db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db8:	d3f9      	bcc.n	8001dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dba:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dbc:	4c0b      	ldr	r4, [pc, #44]	; (8001dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc0:	e001      	b.n	8001dc6 <LoopFillZerobss>

08001dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc4:	3204      	adds	r2, #4

08001dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc8:	d3fb      	bcc.n	8001dc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dca:	f7ff fcb1 	bl	8001730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dce:	f014 f965 	bl	801609c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd2:	f7ff f837 	bl	8000e44 <main>
  bx  lr    
 8001dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dd8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001de4:	0801a09c 	.word	0x0801a09c
  ldr r2, =_sbss
 8001de8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001dec:	2000985c 	.word	0x2000985c

08001df0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <CAN1_RX0_IRQHandler>
	...

08001df4 <DB_ADC>:
  * @brief In this method we will check the voltage in 3.3V port.
  * We use "ADC1" port to test this action.
  * @param  uint8_t iteration counter.
  * @retval uint8_t status check.
  */
uint8_t DB_ADC(uint8_t mainIter){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
	printf("Start test of ADC:\r\n");
 8001dfe:	481c      	ldr	r0, [pc, #112]	; (8001e70 <DB_ADC+0x7c>)
 8001e00:	f014 fa1c 	bl	801623c <puts>
	while (mainIter)
 8001e04:	e026      	b.n	8001e54 <DB_ADC+0x60>
	{
		HAL_ADC_Start_IT(ADC_1);													// start interrupt for ADC1 pin, jump to callback
 8001e06:	481b      	ldr	r0, [pc, #108]	; (8001e74 <DB_ADC+0x80>)
 8001e08:	f000 fd06 	bl	8002818 <HAL_ADC_Start_IT>
		if (adc_flag)
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <DB_ADC+0x84>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01f      	beq.n	8001e54 <DB_ADC+0x60>
		{
			currentVoltage =  HAL_ADC_GetValue(ADC_1);								// get value from 3.3V port.
 8001e14:	4817      	ldr	r0, [pc, #92]	; (8001e74 <DB_ADC+0x80>)
 8001e16:	f000 fee7 	bl	8002be8 <HAL_ADC_GetValue>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <DB_ADC+0x88>)
 8001e1e:	6013      	str	r3, [r2, #0]

			if (BOTTOM_BOUND < currentVoltage && currentVoltage < TOP_BOUND)		// check if the range of Voltage is okay.
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <DB_ADC+0x88>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001e28:	d912      	bls.n	8001e50 <DB_ADC+0x5c>
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <DB_ADC+0x88>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f241 0267 	movw	r2, #4199	; 0x1067
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d80c      	bhi.n	8001e50 <DB_ADC+0x5c>
			{
				printf("ADC value =%lu\r\n", currentVoltage);
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <DB_ADC+0x88>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4810      	ldr	r0, [pc, #64]	; (8001e80 <DB_ADC+0x8c>)
 8001e3e:	f014 f977 	bl	8016130 <iprintf>
			}
			else
			{
				return FAILURE;
			}
			mainIter --;
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	71fb      	strb	r3, [r7, #7]
			adc_flag = 0;
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <DB_ADC+0x84>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e001      	b.n	8001e54 <DB_ADC+0x60>
				return FAILURE;
 8001e50:	23ff      	movs	r3, #255	; 0xff
 8001e52:	e009      	b.n	8001e68 <DB_ADC+0x74>
	while (mainIter)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1d5      	bne.n	8001e06 <DB_ADC+0x12>
		}
	}
	printf("ADC_WORKS_GOOD\r\n");
 8001e5a:	480a      	ldr	r0, [pc, #40]	; (8001e84 <DB_ADC+0x90>)
 8001e5c:	f014 f9ee 	bl	801623c <puts>
    printf("---------------------\r\n");
 8001e60:	4809      	ldr	r0, [pc, #36]	; (8001e88 <DB_ADC+0x94>)
 8001e62:	f014 f9eb 	bl	801623c <puts>
	return SUCCESS;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	080172fc 	.word	0x080172fc
 8001e74:	200001ec 	.word	0x200001ec
 8001e78:	20001078 	.word	0x20001078
 8001e7c:	2000107c 	.word	0x2000107c
 8001e80:	08017310 	.word	0x08017310
 8001e84:	08017324 	.word	0x08017324
 8001e88:	08017334 	.word	0x08017334

08001e8c <HAL_ADC_ConvCpltCallback>:

// ADC interrupt Callback (notify that data conversion is finished)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	adc_flag = 1;																	// go through the loop.
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20001078 	.word	0x20001078

08001eac <DB_I2C>:
  * @param  uint8_t length of string received from client.
  * @param  char* string that client sent to use in protocol test.
  * @retval uint8_t status check.
  */
uint8_t DB_I2C(uint8_t mainIter, uint8_t length, char * stringToCheck)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	603a      	str	r2, [r7, #0]
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	71bb      	strb	r3, [r7, #6]
//	HAL_StatusTypeDef status ;
	printf("Start test of I2C protocol:\r\n");
 8001ebc:	4822      	ldr	r0, [pc, #136]	; (8001f48 <DB_I2C+0x9c>)
 8001ebe:	f014 f9bd 	bl	801623c <puts>
	while (mainIter --)
 8001ec2:	e030      	b.n	8001f26 <DB_I2C+0x7a>
	{
//		status = HAL_I2C_Slave_Receive_DMA(I2C_SLAVE, dataFromMaster, length);
		HAL_I2C_Slave_Receive_DMA(I2C_SLAVE, dataFromMaster, length);
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4920      	ldr	r1, [pc, #128]	; (8001f4c <DB_I2C+0xa0>)
 8001ecc:	4820      	ldr	r0, [pc, #128]	; (8001f50 <DB_I2C+0xa4>)
 8001ece:	f003 fd0f 	bl	80058f0 <HAL_I2C_Slave_Receive_DMA>
		// I2C_SLAVE is ready to receive data from I2C_MASTER.
		HAL_I2C_Master_Transmit_DMA(I2C_MASTER, SLAVE_ADDRESS, (uint8_t *)stringToCheck, length);
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <DB_I2C+0xa4>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	b299      	uxth	r1, r3
 8001ed8:	79bb      	ldrb	r3, [r7, #6]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	481d      	ldr	r0, [pc, #116]	; (8001f54 <DB_I2C+0xa8>)
 8001ee0:	f003 fa70 	bl	80053c4 <HAL_I2C_Master_Transmit_DMA>
		// I2C_MASTER transmit data that he get from client.
		HAL_Delay(50);
 8001ee4:	2032      	movs	r0, #50	; 0x32
 8001ee6:	f000 fc2f 	bl	8002748 <HAL_Delay>

		HAL_I2C_Slave_Transmit_DMA(I2C_SLAVE, dataFromMaster, length);
 8001eea:	79bb      	ldrb	r3, [r7, #6]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4916      	ldr	r1, [pc, #88]	; (8001f4c <DB_I2C+0xa0>)
 8001ef2:	4817      	ldr	r0, [pc, #92]	; (8001f50 <DB_I2C+0xa4>)
 8001ef4:	f003 fc46 	bl	8005784 <HAL_I2C_Slave_Transmit_DMA>
		// I2C_SLAVE is ready to transmit data to I2C_MASTER.
		HAL_I2C_Master_Receive_DMA(I2C_MASTER, SLAVE_ADDRESS, dataFromSlave, length);
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <DB_I2C+0xa4>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	b299      	uxth	r1, r3
 8001efe:	79bb      	ldrb	r3, [r7, #6]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <DB_I2C+0xac>)
 8001f04:	4813      	ldr	r0, [pc, #76]	; (8001f54 <DB_I2C+0xa8>)
 8001f06:	f003 fb4d 	bl	80055a4 <HAL_I2C_Master_Receive_DMA>
		// I2C_MASTER receive data from I2C_SLAVE.
		HAL_Delay(50);
 8001f0a:	2032      	movs	r0, #50	; 0x32
 8001f0c:	f000 fc1c 	bl	8002748 <HAL_Delay>

		if(strncmp((char *)stringToCheck, (char *)dataFromSlave,length))
 8001f10:	79bb      	ldrb	r3, [r7, #6]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4910      	ldr	r1, [pc, #64]	; (8001f58 <DB_I2C+0xac>)
 8001f16:	6838      	ldr	r0, [r7, #0]
 8001f18:	f014 f9d6 	bl	80162c8 <strncmp>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <DB_I2C+0x7a>
		// check that string at the end of 'I2C' is the same as the string at the beginning.
		{
			return FAILURE;
 8001f22:	23ff      	movs	r3, #255	; 0xff
 8001f24:	e00b      	b.n	8001f3e <DB_I2C+0x92>
	while (mainIter --)
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	71fa      	strb	r2, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1c9      	bne.n	8001ec4 <DB_I2C+0x18>
		}
	}
	printf("I2C_WORKS_GOOD\r\n");
 8001f30:	480a      	ldr	r0, [pc, #40]	; (8001f5c <DB_I2C+0xb0>)
 8001f32:	f014 f983 	bl	801623c <puts>
    printf("---------------------\r\n");
 8001f36:	480a      	ldr	r0, [pc, #40]	; (8001f60 <DB_I2C+0xb4>)
 8001f38:	f014 f980 	bl	801623c <puts>
	return SUCCESS;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	0801734c 	.word	0x0801734c
 8001f4c:	20001080 	.word	0x20001080
 8001f50:	200002e8 	.word	0x200002e8
 8001f54:	20000294 	.word	0x20000294
 8001f58:	20001180 	.word	0x20001180
 8001f5c:	0801736c 	.word	0x0801736c
 8001f60:	0801737c 	.word	0x0801737c

08001f64 <udp_receive_callback>:
#define testIdRecBegin 			(buf + 0)
#define resultRecBegin 			(buf + 4)
#define receivePackSize			 5

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
	client_addr = *addr; 	// holds client's address.
 8001f72:	4a3c      	ldr	r2, [pc, #240]	; (8002064 <udp_receive_callback+0x100>)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6013      	str	r3, [r2, #0]
	client_port = port;		// holds client's port.
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <udp_receive_callback+0x104>)
 8001f7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f7e:	8013      	strh	r3, [r2, #0]
	packet_flag = 1;
 8001f80:	4b3a      	ldr	r3, [pc, #232]	; (800206c <udp_receive_callback+0x108>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]

	struct pbuf *txBuf = pbuf_alloc(PBUF_TRANSPORT,5, PBUF_RAM); //Create buffer for transmit packet back to client.
 8001f86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001f8a:	2105      	movs	r1, #5
 8001f8c:	2036      	movs	r0, #54	; 0x36
 8001f8e:	f00a ff91 	bl	800ceb4 <pbuf_alloc>
 8001f92:	61f8      	str	r0, [r7, #28]
	//Get packet from client into packet for future test uses in SERVER -> (receivePack)
	receive_pack.testId            = *(uint32_t *)(testIdBegin);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a35      	ldr	r2, [pc, #212]	; (8002070 <udp_receive_callback+0x10c>)
 8001f9c:	6013      	str	r3, [r2, #0]
	receive_pack.perToTest         = *(uint8_t *)(perToTestBegin);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	791a      	ldrb	r2, [r3, #4]
 8001fa4:	4b32      	ldr	r3, [pc, #200]	; (8002070 <udp_receive_callback+0x10c>)
 8001fa6:	711a      	strb	r2, [r3, #4]
	receive_pack.iter              = *(uint8_t *)(iterBegin) ;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	795a      	ldrb	r2, [r3, #5]
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <udp_receive_callback+0x10c>)
 8001fb0:	715a      	strb	r2, [r3, #5]
	receive_pack.bitPatternLength  = *(uint8_t *)(bitPatternLengthBegin);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	799a      	ldrb	r2, [r3, #6]
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <udp_receive_callback+0x10c>)
 8001fba:	719a      	strb	r2, [r3, #6]
	memcpy(receive_pack.bitPattern, bitPatternBegin, receive_pack.bitPatternLength);
 8001fbc:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <udp_receive_callback+0x10c>)
 8001fbe:	6898      	ldr	r0, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	3307      	adds	r3, #7
 8001fc6:	4a2a      	ldr	r2, [pc, #168]	; (8002070 <udp_receive_callback+0x10c>)
 8001fc8:	7992      	ldrb	r2, [r2, #6]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f014 f89a 	bl	8016104 <memcpy>

	iter    =  receive_pack.iter;				// parameter to know how many times test the protocol.
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <udp_receive_callback+0x10c>)
 8001fd2:	795a      	ldrb	r2, [r3, #5]
 8001fd4:	4b27      	ldr	r3, [pc, #156]	; (8002074 <udp_receive_callback+0x110>)
 8001fd6:	701a      	strb	r2, [r3, #0]
	per     =  receive_pack.perToTest;			// parameter to know which protocol to test.
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <udp_receive_callback+0x10c>)
 8001fda:	791a      	ldrb	r2, [r3, #4]
 8001fdc:	4b26      	ldr	r3, [pc, #152]	; (8002078 <udp_receive_callback+0x114>)
 8001fde:	701a      	strb	r2, [r3, #0]
	length  =  receive_pack.bitPatternLength;	// parameter to know length of the string in protocol test.
 8001fe0:	4b23      	ldr	r3, [pc, #140]	; (8002070 <udp_receive_callback+0x10c>)
 8001fe2:	799a      	ldrb	r2, [r3, #6]
 8001fe4:	4b25      	ldr	r3, [pc, #148]	; (800207c <udp_receive_callback+0x118>)
 8001fe6:	701a      	strb	r2, [r3, #0]
	memcpy(test_check, receive_pack.bitPattern,receive_pack.bitPatternLength);
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <udp_receive_callback+0x10c>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a20      	ldr	r2, [pc, #128]	; (8002070 <udp_receive_callback+0x10c>)
 8001fee:	7992      	ldrb	r2, [r2, #6]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4823      	ldr	r0, [pc, #140]	; (8002080 <udp_receive_callback+0x11c>)
 8001ff4:	f014 f886 	bl	8016104 <memcpy>
	// copy the string received from client in order to use in protocols tests

	char buf[5];										//Initialize buffer
	status.result = test(iter, per, length, test_check); // get the result from the chosen test.
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <udp_receive_callback+0x110>)
 8001ffa:	7818      	ldrb	r0, [r3, #0]
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <udp_receive_callback+0x114>)
 8001ffe:	7819      	ldrb	r1, [r3, #0]
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <udp_receive_callback+0x118>)
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <udp_receive_callback+0x11c>)
 8002006:	f000 f925 	bl	8002254 <test>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <udp_receive_callback+0x120>)
 8002010:	711a      	strb	r2, [r3, #4]
    *(uint32_t *)(testIdRecBegin) = receive_pack.testId;	// fill the buffer with testID
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4a16      	ldr	r2, [pc, #88]	; (8002070 <udp_receive_callback+0x10c>)
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	601a      	str	r2, [r3, #0]
    *(uint8_t *)(resultRecBegin) = status.result;			// fill the buffer with test's result
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	3304      	adds	r3, #4
 8002022:	4a18      	ldr	r2, [pc, #96]	; (8002084 <udp_receive_callback+0x120>)
 8002024:	7912      	ldrb	r2, [r2, #4]
 8002026:	701a      	strb	r2, [r3, #0]
	pbuf_take(txBuf, buf, receivePackSize);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	2205      	movs	r2, #5
 800202e:	4619      	mov	r1, r3
 8002030:	69f8      	ldr	r0, [r7, #28]
 8002032:	f00b fc8f 	bl	800d954 <pbuf_take>

	udp_connect(upcb, addr, port);	// Connect to the remote client
 8002036:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002038:	461a      	mov	r2, r3
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	68b8      	ldr	r0, [r7, #8]
 800203e:	f011 fc27 	bl	8013890 <udp_connect>

	udp_send(upcb, txBuf);			// Send a Reply to the Client
 8002042:	69f9      	ldr	r1, [r7, #28]
 8002044:	68b8      	ldr	r0, [r7, #8]
 8002046:	f011 f9b1 	bl	80133ac <udp_send>

	udp_disconnect(upcb);			// free the UDP connection, so we can accept new clients
 800204a:	68b8      	ldr	r0, [r7, #8]
 800204c:	f011 fc8e 	bl	801396c <udp_disconnect>

	pbuf_free(txBuf);				// Free the p_tx buffer
 8002050:	69f8      	ldr	r0, [r7, #28]
 8002052:	f00b fa13 	bl	800d47c <pbuf_free>

	pbuf_free(p);					// Free the p buffer
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f00b fa10 	bl	800d47c <pbuf_free>
}
 800205c:	bf00      	nop
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20001294 	.word	0x20001294
 8002068:	20001298 	.word	0x20001298
 800206c:	200005bf 	.word	0x200005bf
 8002070:	20001288 	.word	0x20001288
 8002074:	200004bc 	.word	0x200004bc
 8002078:	200004bd 	.word	0x200004bd
 800207c:	200004be 	.word	0x200004be
 8002080:	200004c0 	.word	0x200004c0
 8002084:	20001280 	.word	0x20001280

08002088 <udpServer_init>:

void udpServer_init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
   struct udp_pcb* UDP_SOCKET = udp_new(); 				//1. Create a new UDP control block.
 800208e:	f011 fcf7 	bl	8013a80 <udp_new>
 8002092:	6078      	str	r0, [r7, #4]

   err_t err = udp_bind(UDP_SOCKET, IP_ADDR_ANY, 7);	//2. Bind the upcb to the local port.
 8002094:	2207      	movs	r2, #7
 8002096:	490b      	ldr	r1, [pc, #44]	; (80020c4 <udpServer_init+0x3c>)
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f011 fb71 	bl	8013780 <udp_bind>
 800209e:	4603      	mov	r3, r0
 80020a0:	70fb      	strb	r3, [r7, #3]

   if (err == ERR_OK)									//3. Set a receive callback for the upcb.
 80020a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <udpServer_init+0x2e>

   {
	   udp_recv(UDP_SOCKET, udp_receive_callback, NULL);
 80020aa:	2200      	movs	r2, #0
 80020ac:	4906      	ldr	r1, [pc, #24]	; (80020c8 <udpServer_init+0x40>)
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f011 fc84 	bl	80139bc <udp_recv>
   }
   else
   {
	   udp_remove(UDP_SOCKET);
   }
}
 80020b4:	e002      	b.n	80020bc <udpServer_init+0x34>
	   udp_remove(UDP_SOCKET);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f011 fca0 	bl	80139fc <udp_remove>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	08019f30 	.word	0x08019f30
 80020c8:	08001f65 	.word	0x08001f65

080020cc <DB_SPI>:
  * @param  uint8_t length of string received from client.
  * @param  char* string that client sent to use in protocol test.
  * @retval uint8_t status check.
  */
uint8_t DB_SPI(uint8_t mainIter, uint8_t length, char * stringToCheck)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	603a      	str	r2, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
 80020d8:	460b      	mov	r3, r1
 80020da:	71bb      	strb	r3, [r7, #6]
	printf("Start test of SPI protocol:\r\n");
 80020dc:	4823      	ldr	r0, [pc, #140]	; (800216c <DB_SPI+0xa0>)
 80020de:	f014 f8ad 	bl	801623c <puts>
	while (mainIter --)
 80020e2:	e032      	b.n	800214a <DB_SPI+0x7e>
	{
		HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, SLAVE_BUFF,SLAVE_BUFF , length);
 80020e4:	79bb      	ldrb	r3, [r7, #6]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4a21      	ldr	r2, [pc, #132]	; (8002170 <DB_SPI+0xa4>)
 80020ea:	4921      	ldr	r1, [pc, #132]	; (8002170 <DB_SPI+0xa4>)
 80020ec:	4821      	ldr	r0, [pc, #132]	; (8002174 <DB_SPI+0xa8>)
 80020ee:	f006 fb1b 	bl	8008728 <HAL_SPI_TransmitReceive_DMA>
		// SLAVE is ready to get data to SLAVE_BUFF and transmit SLAVE_BUFF to MASTER.
		HAL_Delay(100);
 80020f2:	2064      	movs	r0, #100	; 0x64
 80020f4:	f000 fb28 	bl	8002748 <HAL_Delay>
		HAL_SPI_TransmitReceive_DMA(SPI_MASTER, (uint8_t *)stringToCheck, MASTER_BUFF , length);
 80020f8:	79bb      	ldrb	r3, [r7, #6]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <DB_SPI+0xac>)
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	481e      	ldr	r0, [pc, #120]	; (800217c <DB_SPI+0xb0>)
 8002102:	f006 fb11 	bl	8008728 <HAL_SPI_TransmitReceive_DMA>
		// MASTER transmit the string from client to SLAVE_BUFF and receive empty SLAVE_BUFF to MASTER_BUFF.
		HAL_Delay(100);
 8002106:	2064      	movs	r0, #100	; 0x64
 8002108:	f000 fb1e 	bl	8002748 <HAL_Delay>
		HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, SLAVE_BUFF,SLAVE_BUFF , length);
 800210c:	79bb      	ldrb	r3, [r7, #6]
 800210e:	b29b      	uxth	r3, r3
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <DB_SPI+0xa4>)
 8002112:	4917      	ldr	r1, [pc, #92]	; (8002170 <DB_SPI+0xa4>)
 8002114:	4817      	ldr	r0, [pc, #92]	; (8002174 <DB_SPI+0xa8>)
 8002116:	f006 fb07 	bl	8008728 <HAL_SPI_TransmitReceive_DMA>
		// SLAVE transmit his buffer to MASTER_BUFF and ready to receive MASTER_BUFF to SLAVE_BUFF.
		HAL_Delay(100);
 800211a:	2064      	movs	r0, #100	; 0x64
 800211c:	f000 fb14 	bl	8002748 <HAL_Delay>
		HAL_SPI_TransmitReceive_DMA(SPI_MASTER, MASTER_BUFF, MASTER_BUFF , length);
 8002120:	79bb      	ldrb	r3, [r7, #6]
 8002122:	b29b      	uxth	r3, r3
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <DB_SPI+0xac>)
 8002126:	4914      	ldr	r1, [pc, #80]	; (8002178 <DB_SPI+0xac>)
 8002128:	4814      	ldr	r0, [pc, #80]	; (800217c <DB_SPI+0xb0>)
 800212a:	f006 fafd 	bl	8008728 <HAL_SPI_TransmitReceive_DMA>
		// MASTER receive SLAVE_BUFF to MASTER_BUFF and transmit empty MASTER_BUFF to SLAVE_BUFF.
		HAL_Delay(100);
 800212e:	2064      	movs	r0, #100	; 0x64
 8002130:	f000 fb0a 	bl	8002748 <HAL_Delay>

		if(strncmp((char *)stringToCheck, (char *)MASTER_BUFF,length))
 8002134:	79bb      	ldrb	r3, [r7, #6]
 8002136:	461a      	mov	r2, r3
 8002138:	490f      	ldr	r1, [pc, #60]	; (8002178 <DB_SPI+0xac>)
 800213a:	6838      	ldr	r0, [r7, #0]
 800213c:	f014 f8c4 	bl	80162c8 <strncmp>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <DB_SPI+0x7e>
		// check that string at the end of 'SPI' is the same as the string at the beginning.
		{
			return FAILURE;
 8002146:	23ff      	movs	r3, #255	; 0xff
 8002148:	e00b      	b.n	8002162 <DB_SPI+0x96>
	while (mainIter --)
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	71fa      	strb	r2, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1c7      	bne.n	80020e4 <DB_SPI+0x18>
		}
	}
	printf("SPI_WORKS_GOOD\r\n");
 8002154:	480a      	ldr	r0, [pc, #40]	; (8002180 <DB_SPI+0xb4>)
 8002156:	f014 f871 	bl	801623c <puts>
    printf("---------------------\r\n");
 800215a:	480a      	ldr	r0, [pc, #40]	; (8002184 <DB_SPI+0xb8>)
 800215c:	f014 f86e 	bl	801623c <puts>
	return SUCCESS;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	08017394 	.word	0x08017394
 8002170:	2000129c 	.word	0x2000129c
 8002174:	20000624 	.word	0x20000624
 8002178:	2000139c 	.word	0x2000139c
 800217c:	200005c0 	.word	0x200005c0
 8002180:	080173b4 	.word	0x080173b4
 8002184:	080173c4 	.word	0x080173c4

08002188 <DB_UART>:
  * @param  uint8_t length of string received from client.
  * @param  char* string that client sent to use in protocol test.
  * @retval uint8_t status check.
  */
uint8_t DB_UART(uint8_t mainIter, uint8_t length, char * stringToCheck)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	603a      	str	r2, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	460b      	mov	r3, r1
 8002196:	71bb      	strb	r3, [r7, #6]
	printf("Start test of UART protocol:\r\n");
 8002198:	4827      	ldr	r0, [pc, #156]	; (8002238 <DB_UART+0xb0>)
 800219a:	f014 f84f 	bl	801623c <puts>
	HAL_UART_Receive_DMA(UART_6, U6_BUFF, length); // UART6 is ready to receive data.
 800219e:	79bb      	ldrb	r3, [r7, #6]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	4925      	ldr	r1, [pc, #148]	; (800223c <DB_UART+0xb4>)
 80021a6:	4826      	ldr	r0, [pc, #152]	; (8002240 <DB_UART+0xb8>)
 80021a8:	f007 fbf0 	bl	800998c <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(UART_4, U4_BUFF, length); // UART4 is ready to receive data.
 80021ac:	79bb      	ldrb	r3, [r7, #6]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	4924      	ldr	r1, [pc, #144]	; (8002244 <DB_UART+0xbc>)
 80021b4:	4824      	ldr	r0, [pc, #144]	; (8002248 <DB_UART+0xc0>)
 80021b6:	f007 fbe9 	bl	800998c <HAL_UART_Receive_DMA>
	while(mainIter --)
 80021ba:	e02c      	b.n	8002216 <DB_UART+0x8e>
	{
		HAL_UART_Transmit_DMA(UART_4, (uint8_t *)stringToCheck, length); // UART4 transmit the data from client to UART6.
 80021bc:	79bb      	ldrb	r3, [r7, #6]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	6839      	ldr	r1, [r7, #0]
 80021c4:	4820      	ldr	r0, [pc, #128]	; (8002248 <DB_UART+0xc0>)
 80021c6:	f007 fb65 	bl	8009894 <HAL_UART_Transmit_DMA>
		HAL_Delay(50);
 80021ca:	2032      	movs	r0, #50	; 0x32
 80021cc:	f000 fabc 	bl	8002748 <HAL_Delay>
		HAL_UART_Receive_DMA(UART_6, U6_BUFF, length); 					 // UART6 receive data from UART4.
 80021d0:	79bb      	ldrb	r3, [r7, #6]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	4919      	ldr	r1, [pc, #100]	; (800223c <DB_UART+0xb4>)
 80021d8:	4819      	ldr	r0, [pc, #100]	; (8002240 <DB_UART+0xb8>)
 80021da:	f007 fbd7 	bl	800998c <HAL_UART_Receive_DMA>

		HAL_UART_Transmit_DMA(UART_6, U6_BUFF, length);					 // UART6 transmit back his buffer to UART4.
 80021de:	79bb      	ldrb	r3, [r7, #6]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	4915      	ldr	r1, [pc, #84]	; (800223c <DB_UART+0xb4>)
 80021e6:	4816      	ldr	r0, [pc, #88]	; (8002240 <DB_UART+0xb8>)
 80021e8:	f007 fb54 	bl	8009894 <HAL_UART_Transmit_DMA>
		HAL_Delay(50);
 80021ec:	2032      	movs	r0, #50	; 0x32
 80021ee:	f000 faab 	bl	8002748 <HAL_Delay>
		HAL_UART_Receive_DMA(UART_4, U4_BUFF, length);					 // UART4 receive data from UART6.
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	4912      	ldr	r1, [pc, #72]	; (8002244 <DB_UART+0xbc>)
 80021fa:	4813      	ldr	r0, [pc, #76]	; (8002248 <DB_UART+0xc0>)
 80021fc:	f007 fbc6 	bl	800998c <HAL_UART_Receive_DMA>

		if(strncmp((char *)stringToCheck, (char *)U4_BUFF,length))
 8002200:	79bb      	ldrb	r3, [r7, #6]
 8002202:	461a      	mov	r2, r3
 8002204:	490f      	ldr	r1, [pc, #60]	; (8002244 <DB_UART+0xbc>)
 8002206:	6838      	ldr	r0, [r7, #0]
 8002208:	f014 f85e 	bl	80162c8 <strncmp>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <DB_UART+0x8e>
		// check that string at the end of 'UART' is the same as the string at the beginning.
		{
			return FAILURE;
 8002212:	23ff      	movs	r3, #255	; 0xff
 8002214:	e00b      	b.n	800222e <DB_UART+0xa6>
	while(mainIter --)
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	71fa      	strb	r2, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1cd      	bne.n	80021bc <DB_UART+0x34>
		}
	}
	printf("UART_WORKS_GOOD\r\n");
 8002220:	480a      	ldr	r0, [pc, #40]	; (800224c <DB_UART+0xc4>)
 8002222:	f014 f80b 	bl	801623c <puts>
    printf("---------------------\r\n");
 8002226:	480a      	ldr	r0, [pc, #40]	; (8002250 <DB_UART+0xc8>)
 8002228:	f014 f808 	bl	801623c <puts>
	return SUCCESS;
 800222c:	2301      	movs	r3, #1
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	080173dc 	.word	0x080173dc
 800223c:	2000149c 	.word	0x2000149c
 8002240:	20000968 	.word	0x20000968
 8002244:	2000159c 	.word	0x2000159c
 8002248:	20000858 	.word	0x20000858
 800224c:	080173fc 	.word	0x080173fc
 8002250:	08017410 	.word	0x08017410

08002254 <test>:
  * @param  uint8_t length of string received from client.
  * @param  char* string that client sent to use in protocol test.
  * @retval uint8_t status check.
  */
uint8_t test(uint8_t mainIter, uint8_t perToCheck, uint8_t length, char * stringToCheck)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
 8002260:	460b      	mov	r3, r1
 8002262:	71bb      	strb	r3, [r7, #6]
 8002264:	4613      	mov	r3, r2
 8002266:	717b      	strb	r3, [r7, #5]
	uint8_t status = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
	switch(perToCheck)
 800226c:	79bb      	ldrb	r3, [r7, #6]
 800226e:	3b01      	subs	r3, #1
 8002270:	2b0f      	cmp	r3, #15
 8002272:	d84b      	bhi.n	800230c <test+0xb8>
 8002274:	a201      	add	r2, pc, #4	; (adr r2, 800227c <test+0x28>)
 8002276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227a:	bf00      	nop
 800227c:	080022bd 	.word	0x080022bd
 8002280:	080022c9 	.word	0x080022c9
 8002284:	0800230d 	.word	0x0800230d
 8002288:	080022db 	.word	0x080022db
 800228c:	0800230d 	.word	0x0800230d
 8002290:	0800230d 	.word	0x0800230d
 8002294:	0800230d 	.word	0x0800230d
 8002298:	080022ed 	.word	0x080022ed
 800229c:	0800230d 	.word	0x0800230d
 80022a0:	0800230d 	.word	0x0800230d
 80022a4:	0800230d 	.word	0x0800230d
 80022a8:	0800230d 	.word	0x0800230d
 80022ac:	0800230d 	.word	0x0800230d
 80022b0:	0800230d 	.word	0x0800230d
 80022b4:	0800230d 	.word	0x0800230d
 80022b8:	080022ff 	.word	0x080022ff
	{
		case TIMER:
			printf ("TIMER WILL BE HERE\r\n");
 80022bc:	4817      	ldr	r0, [pc, #92]	; (800231c <test+0xc8>)
 80022be:	f013 ffbd 	bl	801623c <puts>
			status = SUCCESS;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
			break;
 80022c6:	e024      	b.n	8002312 <test+0xbe>
		case UART:
			status = DB_UART(mainIter, length, stringToCheck);
 80022c8:	7979      	ldrb	r1, [r7, #5]
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff5a 	bl	8002188 <DB_UART>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
			break;
 80022d8:	e01b      	b.n	8002312 <test+0xbe>
		case SPI:
			status = DB_SPI(mainIter, length, stringToCheck);
 80022da:	7979      	ldrb	r1, [r7, #5]
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fef3 	bl	80020cc <DB_SPI>
 80022e6:	4603      	mov	r3, r0
 80022e8:	73fb      	strb	r3, [r7, #15]
			break;
 80022ea:	e012      	b.n	8002312 <test+0xbe>
		case I2C:
			status = DB_I2C(mainIter, length, stringToCheck);
 80022ec:	7979      	ldrb	r1, [r7, #5]
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fdda 	bl	8001eac <DB_I2C>
 80022f8:	4603      	mov	r3, r0
 80022fa:	73fb      	strb	r3, [r7, #15]
			break;
 80022fc:	e009      	b.n	8002312 <test+0xbe>
		case ADCDAC:
			status = DB_ADC(mainIter);
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fd77 	bl	8001df4 <DB_ADC>
 8002306:	4603      	mov	r3, r0
 8002308:	73fb      	strb	r3, [r7, #15]
			break;
 800230a:	e002      	b.n	8002312 <test+0xbe>
		default:
			printf ("chose different per\r\n");
 800230c:	4804      	ldr	r0, [pc, #16]	; (8002320 <test+0xcc>)
 800230e:	f013 ff95 	bl	801623c <puts>
	}
	return status;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	08017428 	.word	0x08017428
 8002320:	0801743c 	.word	0x0801743c

08002324 <_write>:
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, len, 0xFFFF);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	b29a      	uxth	r2, r3
 8002334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	4804      	ldr	r0, [pc, #16]	; (800234c <_write+0x28>)
 800233c:	f007 f963 	bl	8009606 <HAL_UART_Transmit>
	return len;
 8002340:	687b      	ldr	r3, [r7, #4]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200008e0 	.word	0x200008e0

08002350 <_read>:

// scanf
int _read(int file, char *ptr, int len)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
	int ch=0;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUG, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002360:	f107 0114 	add.w	r1, r7, #20
 8002364:	f04f 33ff 	mov.w	r3, #4294967295
 8002368:	2201      	movs	r2, #1
 800236a:	4817      	ldr	r0, [pc, #92]	; (80023c8 <_read+0x78>)
 800236c:	f007 f9ce 	bl	800970c <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8002370:	f107 0114 	add.w	r1, r7, #20
 8002374:	f04f 33ff 	mov.w	r3, #4294967295
 8002378:	2201      	movs	r2, #1
 800237a:	4813      	ldr	r0, [pc, #76]	; (80023c8 <_read+0x78>)
 800237c:	f007 f943 	bl	8009606 <HAL_UART_Transmit>
	if(ch==13)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b0d      	cmp	r3, #13
 8002384:	d10a      	bne.n	800239c <_read+0x4c>
	{
		ch=10;
 8002386:	230a      	movs	r3, #10
 8002388:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 800238a:	f107 0114 	add.w	r1, r7, #20
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	2201      	movs	r2, #1
 8002394:	480c      	ldr	r0, [pc, #48]	; (80023c8 <_read+0x78>)
 8002396:	f007 f936 	bl	8009606 <HAL_UART_Transmit>
 800239a:	e00c      	b.n	80023b6 <_read+0x66>
	}
	else if(ch==8)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d109      	bne.n	80023b6 <_read+0x66>
	{
		ch=0x30;
 80023a2:	2330      	movs	r3, #48	; 0x30
 80023a4:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 80023a6:	f107 0114 	add.w	r1, r7, #20
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	2201      	movs	r2, #1
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <_read+0x78>)
 80023b2:	f007 f928 	bl	8009606 <HAL_UART_Transmit>
	}

	*ptr=ch;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	701a      	strb	r2, [r3, #0]

	return 1;
 80023be:	2301      	movs	r3, #1
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200008e0 	.word	0x200008e0

080023cc <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00b      	beq.n	80023f4 <LAN8742_RegisterBusIO+0x28>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <LAN8742_RegisterBusIO+0x28>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <LAN8742_RegisterBusIO+0x28>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80023f4:	f04f 33ff 	mov.w	r3, #4294967295
 80023f8:	e014      	b.n	8002424 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d17c      	bne.n	800254a <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e01c      	b.n	80024a4 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f107 0208 	add.w	r2, r7, #8
 8002472:	2112      	movs	r1, #18
 8002474:	6978      	ldr	r0, [r7, #20]
 8002476:	4798      	blx	r3
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	da03      	bge.n	8002486 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800247e:	f06f 0304 	mvn.w	r3, #4
 8002482:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002484:	e00b      	b.n	800249e <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	429a      	cmp	r2, r3
 8002490:	d105      	bne.n	800249e <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
         break;
 800249c:	e005      	b.n	80024aa <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b1f      	cmp	r3, #31
 80024a8:	d9df      	bls.n	800246a <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b1f      	cmp	r3, #31
 80024b0:	d902      	bls.n	80024b8 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80024b2:	f06f 0302 	mvn.w	r3, #2
 80024b6:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d145      	bne.n	800254a <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6810      	ldr	r0, [r2, #0]
 80024c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024ca:	2100      	movs	r1, #0
 80024cc:	4798      	blx	r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db37      	blt.n	8002544 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6810      	ldr	r0, [r2, #0]
 80024dc:	f107 0208 	add.w	r2, r7, #8
 80024e0:	2100      	movs	r1, #0
 80024e2:	4798      	blx	r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db28      	blt.n	800253c <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	4798      	blx	r3
 80024f0:	4603      	mov	r3, r0
 80024f2:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80024f4:	e01c      	b.n	8002530 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	4798      	blx	r3
 80024fc:	4603      	mov	r3, r0
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002508:	d80e      	bhi.n	8002528 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6810      	ldr	r0, [r2, #0]
 8002512:	f107 0208 	add.w	r2, r7, #8
 8002516:	2100      	movs	r1, #0
 8002518:	4798      	blx	r3
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	da07      	bge.n	8002530 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002520:	f06f 0304 	mvn.w	r3, #4
 8002524:	613b      	str	r3, [r7, #16]
                 break;
 8002526:	e010      	b.n	800254a <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002528:	f06f 0301 	mvn.w	r3, #1
 800252c:	613b      	str	r3, [r7, #16]
               break;
 800252e:	e00c      	b.n	800254a <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1dd      	bne.n	80024f6 <LAN8742_Init+0xc6>
 800253a:	e006      	b.n	800254a <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800253c:	f06f 0304 	mvn.w	r3, #4
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	e002      	b.n	800254a <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002544:	f06f 0303 	mvn.w	r3, #3
 8002548:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d112      	bne.n	8002576 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4798      	blx	r3
 8002556:	4603      	mov	r3, r0
 8002558:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800255a:	bf00      	nop
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4798      	blx	r3
 8002562:	4603      	mov	r3, r0
 8002564:	461a      	mov	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800256e:	d9f5      	bls.n	800255c <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002576:	693b      	ldr	r3, [r7, #16]
 }
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6810      	ldr	r0, [r2, #0]
 8002594:	f107 020c 	add.w	r2, r7, #12
 8002598:	2101      	movs	r1, #1
 800259a:	4798      	blx	r3
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	da02      	bge.n	80025a8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025a2:	f06f 0304 	mvn.w	r3, #4
 80025a6:	e06e      	b.n	8002686 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6810      	ldr	r0, [r2, #0]
 80025b0:	f107 020c 	add.w	r2, r7, #12
 80025b4:	2101      	movs	r1, #1
 80025b6:	4798      	blx	r3
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	da02      	bge.n	80025c4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025be:	f06f 0304 	mvn.w	r3, #4
 80025c2:	e060      	b.n	8002686 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80025ce:	2301      	movs	r3, #1
 80025d0:	e059      	b.n	8002686 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6810      	ldr	r0, [r2, #0]
 80025da:	f107 020c 	add.w	r2, r7, #12
 80025de:	2100      	movs	r1, #0
 80025e0:	4798      	blx	r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	da02      	bge.n	80025ee <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025e8:	f06f 0304 	mvn.w	r3, #4
 80025ec:	e04b      	b.n	8002686 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d11b      	bne.n	8002630 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <LAN8742_GetLinkState+0x90>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800260c:	2302      	movs	r3, #2
 800260e:	e03a      	b.n	8002686 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800261a:	2303      	movs	r3, #3
 800261c:	e033      	b.n	8002686 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002628:	2304      	movs	r3, #4
 800262a:	e02c      	b.n	8002686 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800262c:	2305      	movs	r3, #5
 800262e:	e02a      	b.n	8002686 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6810      	ldr	r0, [r2, #0]
 8002638:	f107 020c 	add.w	r2, r7, #12
 800263c:	211f      	movs	r1, #31
 800263e:	4798      	blx	r3
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	da02      	bge.n	800264c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002646:	f06f 0304 	mvn.w	r3, #4
 800264a:	e01c      	b.n	8002686 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002656:	2306      	movs	r3, #6
 8002658:	e015      	b.n	8002686 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 031c 	and.w	r3, r3, #28
 8002660:	2b18      	cmp	r3, #24
 8002662:	d101      	bne.n	8002668 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002664:	2302      	movs	r3, #2
 8002666:	e00e      	b.n	8002686 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 031c 	and.w	r3, r3, #28
 800266e:	2b08      	cmp	r3, #8
 8002670:	d101      	bne.n	8002676 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002672:	2303      	movs	r3, #3
 8002674:	e007      	b.n	8002686 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f003 031c 	and.w	r3, r3, #28
 800267c:	2b14      	cmp	r3, #20
 800267e:	d101      	bne.n	8002684 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002680:	2304      	movs	r3, #4
 8002682:	e000      	b.n	8002686 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002684:	2305      	movs	r3, #5
    }				
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002692:	2003      	movs	r0, #3
 8002694:	f000 fdf4 	bl	8003280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002698:	2000      	movs	r0, #0
 800269a:	f000 f805 	bl	80026a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800269e:	f7fe fe8d 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_InitTick+0x54>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_InitTick+0x58>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026be:	fbb3 f3f1 	udiv	r3, r3, r1
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fe0f 	bl	80032ea <HAL_SYSTICK_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00e      	b.n	80026f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b0f      	cmp	r3, #15
 80026da:	d80a      	bhi.n	80026f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026dc:	2200      	movs	r2, #0
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	f000 fdd7 	bl	8003296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e8:	4a06      	ldr	r2, [pc, #24]	; (8002704 <HAL_InitTick+0x5c>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000008 	.word	0x20000008
 8002704:	20000004 	.word	0x20000004

08002708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_IncTick+0x20>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_IncTick+0x24>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4413      	add	r3, r2
 8002718:	4a04      	ldr	r2, [pc, #16]	; (800272c <HAL_IncTick+0x24>)
 800271a:	6013      	str	r3, [r2, #0]
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000008 	.word	0x20000008
 800272c:	2000169c 	.word	0x2000169c

08002730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return uwTick;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_GetTick+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	2000169c 	.word	0x2000169c

08002748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff ffee 	bl	8002730 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d005      	beq.n	800276e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_Delay+0x44>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276e:	bf00      	nop
 8002770:	f7ff ffde 	bl	8002730 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	429a      	cmp	r2, r3
 800277e:	d8f7      	bhi.n	8002770 <HAL_Delay+0x28>
  {
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000008 	.word	0x20000008

08002790 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e031      	b.n	800280a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fd ff52 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d116      	bne.n	80027fc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_ADC_Init+0x84>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	f043 0202 	orr.w	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fb7a 	bl	8002ed8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
 80027fa:	e001      	b.n	8002800 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	ffffeefd 	.word	0xffffeefd

08002818 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_ADC_Start_IT+0x1a>
 800282e:	2302      	movs	r3, #2
 8002830:	e0b5      	b.n	800299e <HAL_ADC_Start_IT+0x186>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d018      	beq.n	800287a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002858:	4b54      	ldr	r3, [pc, #336]	; (80029ac <HAL_ADC_Start_IT+0x194>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a54      	ldr	r2, [pc, #336]	; (80029b0 <HAL_ADC_Start_IT+0x198>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0c9a      	lsrs	r2, r3, #18
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800286c:	e002      	b.n	8002874 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3b01      	subs	r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f9      	bne.n	800286e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d17d      	bne.n	8002984 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288c:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_ADC_Start_IT+0x19c>)
 800288e:	4013      	ands	r3, r2
 8002890:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c2:	d106      	bne.n	80028d2 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	f023 0206 	bic.w	r2, r3, #6
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
 80028d0:	e002      	b.n	80028d8 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028e8:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <HAL_ADC_Start_IT+0x1a0>)
 80028f6:	430b      	orrs	r3, r1
 80028f8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80028fa:	4b30      	ldr	r3, [pc, #192]	; (80029bc <HAL_ADC_Start_IT+0x1a4>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10f      	bne.n	8002926 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d143      	bne.n	800299c <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	e03a      	b.n	800299c <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a25      	ldr	r2, [pc, #148]	; (80029c0 <HAL_ADC_Start_IT+0x1a8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d10e      	bne.n	800294e <HAL_ADC_Start_IT+0x136>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d107      	bne.n	800294e <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800294c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_ADC_Start_IT+0x1a4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d120      	bne.n	800299c <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <HAL_ADC_Start_IT+0x1ac>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d11b      	bne.n	800299c <HAL_ADC_Start_IT+0x184>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d114      	bne.n	800299c <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	e00b      	b.n	800299c <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f043 0210 	orr.w	r2, r3, #16
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	f043 0201 	orr.w	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000000 	.word	0x20000000
 80029b0:	431bde83 	.word	0x431bde83
 80029b4:	fffff8fe 	.word	0xfffff8fe
 80029b8:	04000020 	.word	0x04000020
 80029bc:	40012300 	.word	0x40012300
 80029c0:	40012000 	.word	0x40012000
 80029c4:	40012200 	.word	0x40012200

080029c8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d049      	beq.n	8002a92 <HAL_ADC_IRQHandler+0xca>
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d046      	beq.n	8002a92 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d12b      	bne.n	8002a82 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d127      	bne.n	8002a82 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d119      	bne.n	8002a82 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0220 	bic.w	r2, r2, #32
 8002a5c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fa02 	bl	8001e8c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0212 	mvn.w	r2, #18
 8002a90:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d057      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x190>
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d054      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d105      	bne.n	8002ac6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d139      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d12b      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d124      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d11d      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d119      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f043 0201 	orr.w	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fabf 	bl	80030cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f06f 020c 	mvn.w	r2, #12
 8002b56:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d017      	beq.n	8002b9e <HAL_ADC_IRQHandler+0x1d6>
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d014      	beq.n	8002b9e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d10d      	bne.n	8002b9e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f837 	bl	8002c02 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0201 	mvn.w	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bac:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d015      	beq.n	8002be0 <HAL_ADC_IRQHandler+0x218>
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d012      	beq.n	8002be0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f043 0202 	orr.w	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0220 	mvn.w	r2, #32
 8002bce:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f820 	bl	8002c16 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f06f 0220 	mvn.w	r2, #32
 8002bde:	601a      	str	r2, [r3, #0]
  }
}
 8002be0:	bf00      	nop
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x1c>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e136      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x28a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b09      	cmp	r3, #9
 8002c56:	d93a      	bls.n	8002cce <HAL_ADC_ConfigChannel+0xa2>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c60:	d035      	beq.n	8002cce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68d9      	ldr	r1, [r3, #12]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	3b1e      	subs	r3, #30
 8002c78:	2207      	movs	r2, #7
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	400a      	ands	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a8d      	ldr	r2, [pc, #564]	; (8002ec4 <HAL_ADC_ConfigChannel+0x298>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10a      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68d9      	ldr	r1, [r3, #12]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	061a      	lsls	r2, r3, #24
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ca6:	e035      	b.n	8002d14 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68d9      	ldr	r1, [r3, #12]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4403      	add	r3, r0
 8002cc0:	3b1e      	subs	r3, #30
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ccc:	e022      	b.n	8002d14 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6919      	ldr	r1, [r3, #16]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	2207      	movs	r2, #7
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	400a      	ands	r2, r1
 8002cf0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6919      	ldr	r1, [r3, #16]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	4603      	mov	r3, r0
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4403      	add	r3, r0
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b06      	cmp	r3, #6
 8002d1a:	d824      	bhi.n	8002d66 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3b05      	subs	r3, #5
 8002d2e:	221f      	movs	r2, #31
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43da      	mvns	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	3b05      	subs	r3, #5
 8002d58:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	635a      	str	r2, [r3, #52]	; 0x34
 8002d64:	e04c      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b0c      	cmp	r3, #12
 8002d6c:	d824      	bhi.n	8002db8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3b23      	subs	r3, #35	; 0x23
 8002d80:	221f      	movs	r2, #31
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43da      	mvns	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	3b23      	subs	r3, #35	; 0x23
 8002daa:	fa00 f203 	lsl.w	r2, r0, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
 8002db6:	e023      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3b41      	subs	r3, #65	; 0x41
 8002dca:	221f      	movs	r2, #31
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4618      	mov	r0, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	3b41      	subs	r3, #65	; 0x41
 8002df4:	fa00 f203 	lsl.w	r2, r0, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a30      	ldr	r2, [pc, #192]	; (8002ec8 <HAL_ADC_ConfigChannel+0x29c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d10a      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x1f4>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e12:	d105      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a2c      	ldr	r2, [pc, #176]	; (8002ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8002e1a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e1e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a28      	ldr	r2, [pc, #160]	; (8002ec8 <HAL_ADC_ConfigChannel+0x29c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10f      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x21e>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b12      	cmp	r3, #18
 8002e30:	d10b      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002e32:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8002e38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e3c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8002e44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e48:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <HAL_ADC_ConfigChannel+0x29c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d12b      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x280>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1a      	ldr	r2, [pc, #104]	; (8002ec4 <HAL_ADC_ConfigChannel+0x298>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <HAL_ADC_ConfigChannel+0x23a>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b11      	cmp	r3, #17
 8002e64:	d122      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002e66:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8002e6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e70:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e72:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4a15      	ldr	r2, [pc, #84]	; (8002ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8002e78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e7c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <HAL_ADC_ConfigChannel+0x298>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d111      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e88:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a11      	ldr	r2, [pc, #68]	; (8002ed4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	0c9a      	lsrs	r2, r3, #18
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e9e:	e002      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f9      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	10000012 	.word	0x10000012
 8002ec8:	40012000 	.word	0x40012000
 8002ecc:	40012300 	.word	0x40012300
 8002ed0:	20000000 	.word	0x20000000
 8002ed4:	431bde83 	.word	0x431bde83

08002ed8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ee0:	4b78      	ldr	r3, [pc, #480]	; (80030c4 <ADC_Init+0x1ec>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a77      	ldr	r2, [pc, #476]	; (80030c4 <ADC_Init+0x1ec>)
 8002ee6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002eea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002eec:	4b75      	ldr	r3, [pc, #468]	; (80030c4 <ADC_Init+0x1ec>)
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4973      	ldr	r1, [pc, #460]	; (80030c4 <ADC_Init+0x1ec>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	021a      	lsls	r2, r3, #8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6899      	ldr	r1, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	4a58      	ldr	r2, [pc, #352]	; (80030c8 <ADC_Init+0x1f0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d022      	beq.n	8002fb2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6899      	ldr	r1, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	e00f      	b.n	8002fd2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0202 	bic.w	r2, r2, #2
 8002fe0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6899      	ldr	r1, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	005a      	lsls	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01b      	beq.n	8003038 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800300e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800301e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6859      	ldr	r1, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	3b01      	subs	r3, #1
 800302c:	035a      	lsls	r2, r3, #13
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	e007      	b.n	8003048 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003046:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	3b01      	subs	r3, #1
 8003064:	051a      	lsls	r2, r3, #20
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800307c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6899      	ldr	r1, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800308a:	025a      	lsls	r2, r3, #9
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	029a      	lsls	r2, r3, #10
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40012300 	.word	0x40012300
 80030c8:	0f000001 	.word	0x0f000001

080030cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <__NVIC_SetPriorityGrouping+0x40>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030fc:	4013      	ands	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <__NVIC_SetPriorityGrouping+0x44>)
 800310a:	4313      	orrs	r3, r2
 800310c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310e:	4a04      	ldr	r2, [pc, #16]	; (8003120 <__NVIC_SetPriorityGrouping+0x40>)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	60d3      	str	r3, [r2, #12]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000ed00 	.word	0xe000ed00
 8003124:	05fa0000 	.word	0x05fa0000

08003128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <__NVIC_GetPriorityGrouping+0x18>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	0a1b      	lsrs	r3, r3, #8
 8003132:	f003 0307 	and.w	r3, r3, #7
}
 8003136:	4618      	mov	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	2b00      	cmp	r3, #0
 8003154:	db0b      	blt.n	800316e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	f003 021f 	and.w	r2, r3, #31
 800315c:	4907      	ldr	r1, [pc, #28]	; (800317c <__NVIC_EnableIRQ+0x38>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2001      	movs	r0, #1
 8003166:	fa00 f202 	lsl.w	r2, r0, r2
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000e100 	.word	0xe000e100

08003180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	6039      	str	r1, [r7, #0]
 800318a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	2b00      	cmp	r3, #0
 8003192:	db0a      	blt.n	80031aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	490c      	ldr	r1, [pc, #48]	; (80031cc <__NVIC_SetPriority+0x4c>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	440b      	add	r3, r1
 80031a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a8:	e00a      	b.n	80031c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4908      	ldr	r1, [pc, #32]	; (80031d0 <__NVIC_SetPriority+0x50>)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	3b04      	subs	r3, #4
 80031b8:	0112      	lsls	r2, r2, #4
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	440b      	add	r3, r1
 80031be:	761a      	strb	r2, [r3, #24]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000e100 	.word	0xe000e100
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f1c3 0307 	rsb	r3, r3, #7
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	bf28      	it	cs
 80031f2:	2304      	movcs	r3, #4
 80031f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d902      	bls.n	8003204 <NVIC_EncodePriority+0x30>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3b03      	subs	r3, #3
 8003202:	e000      	b.n	8003206 <NVIC_EncodePriority+0x32>
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	f04f 32ff 	mov.w	r2, #4294967295
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	401a      	ands	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800321c:	f04f 31ff 	mov.w	r1, #4294967295
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	43d9      	mvns	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800322c:	4313      	orrs	r3, r2
         );
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800324c:	d301      	bcc.n	8003252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800324e:	2301      	movs	r3, #1
 8003250:	e00f      	b.n	8003272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <SysTick_Config+0x40>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325a:	210f      	movs	r1, #15
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	f7ff ff8e 	bl	8003180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <SysTick_Config+0x40>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <SysTick_Config+0x40>)
 800326c:	2207      	movs	r2, #7
 800326e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	e000e010 	.word	0xe000e010

08003280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff29 	bl	80030e0 <__NVIC_SetPriorityGrouping>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a8:	f7ff ff3e 	bl	8003128 <__NVIC_GetPriorityGrouping>
 80032ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	6978      	ldr	r0, [r7, #20]
 80032b4:	f7ff ff8e 	bl	80031d4 <NVIC_EncodePriority>
 80032b8:	4602      	mov	r2, r0
 80032ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff5d 	bl	8003180 <__NVIC_SetPriority>
}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff31 	bl	8003144 <__NVIC_EnableIRQ>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ffa2 	bl	800323c <SysTick_Config>
 80032f8:	4603      	mov	r3, r0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003310:	f7ff fa0e 	bl	8002730 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e099      	b.n	8003454 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003340:	e00f      	b.n	8003362 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003342:	f7ff f9f5 	bl	8002730 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b05      	cmp	r3, #5
 800334e:	d908      	bls.n	8003362 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2203      	movs	r2, #3
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e078      	b.n	8003454 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e8      	bne.n	8003342 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4b38      	ldr	r3, [pc, #224]	; (800345c <HAL_DMA_Init+0x158>)
 800337c:	4013      	ands	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d107      	bne.n	80033cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	4313      	orrs	r3, r2
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0307 	bic.w	r3, r3, #7
 80033e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d117      	bne.n	8003426 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00e      	beq.n	8003426 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fb23 	bl	8003a54 <DMA_CheckFifoParam>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2240      	movs	r2, #64	; 0x40
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003422:	2301      	movs	r3, #1
 8003424:	e016      	b.n	8003454 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fada 	bl	80039e8 <DMA_CalcBaseAndBitshift>
 8003434:	4603      	mov	r3, r0
 8003436:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	223f      	movs	r2, #63	; 0x3f
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	f010803f 	.word	0xf010803f

08003460 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_DMA_Start_IT+0x26>
 8003482:	2302      	movs	r3, #2
 8003484:	e048      	b.n	8003518 <HAL_DMA_Start_IT+0xb8>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d137      	bne.n	800350a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2202      	movs	r2, #2
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fa6c 	bl	800398c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	223f      	movs	r2, #63	; 0x3f
 80034ba:	409a      	lsls	r2, r3
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0216 	orr.w	r2, r2, #22
 80034ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034de:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0208 	orr.w	r2, r2, #8
 80034f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e005      	b.n	8003516 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003512:	2302      	movs	r3, #2
 8003514:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003516:	7dfb      	ldrb	r3, [r7, #23]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800352e:	f7ff f8ff 	bl	8002730 <HAL_GetTick>
 8003532:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d008      	beq.n	8003552 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2280      	movs	r2, #128	; 0x80
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e052      	b.n	80035f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0216 	bic.w	r2, r2, #22
 8003560:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003570:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d103      	bne.n	8003582 <HAL_DMA_Abort+0x62>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0208 	bic.w	r2, r2, #8
 8003590:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a2:	e013      	b.n	80035cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035a4:	f7ff f8c4 	bl	8002730 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b05      	cmp	r3, #5
 80035b0:	d90c      	bls.n	80035cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e015      	b.n	80035f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e4      	bne.n	80035a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	223f      	movs	r2, #63	; 0x3f
 80035e0:	409a      	lsls	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d004      	beq.n	800361e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e00c      	b.n	8003638 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2205      	movs	r2, #5
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003650:	4b8e      	ldr	r3, [pc, #568]	; (800388c <HAL_DMA_IRQHandler+0x248>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a8e      	ldr	r2, [pc, #568]	; (8003890 <HAL_DMA_IRQHandler+0x24c>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	0a9b      	lsrs	r3, r3, #10
 800365c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003662:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	2208      	movs	r2, #8
 8003670:	409a      	lsls	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01a      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	2208      	movs	r2, #8
 800369e:	409a      	lsls	r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	2201      	movs	r2, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d012      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	2201      	movs	r2, #1
 80036d4:	409a      	lsls	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	f043 0202 	orr.w	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	2204      	movs	r2, #4
 80036ec:	409a      	lsls	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d012      	beq.n	800371c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00b      	beq.n	800371c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	2204      	movs	r2, #4
 800370a:	409a      	lsls	r2, r3
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	f043 0204 	orr.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	2210      	movs	r2, #16
 8003722:	409a      	lsls	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d043      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d03c      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	2210      	movs	r2, #16
 8003740:	409a      	lsls	r2, r3
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d018      	beq.n	8003786 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d024      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
 8003772:	e01f      	b.n	80037b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
 8003784:	e016      	b.n	80037b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0208 	bic.w	r2, r2, #8
 80037a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	2220      	movs	r2, #32
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 808f 	beq.w	80038e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8087 	beq.w	80038e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	2220      	movs	r2, #32
 80037dc:	409a      	lsls	r2, r3
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d136      	bne.n	800385c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0216 	bic.w	r2, r2, #22
 80037fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800380c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <HAL_DMA_IRQHandler+0x1da>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0208 	bic.w	r2, r2, #8
 800382c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	223f      	movs	r2, #63	; 0x3f
 8003834:	409a      	lsls	r2, r3
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384e:	2b00      	cmp	r3, #0
 8003850:	d07e      	beq.n	8003950 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
        }
        return;
 800385a:	e079      	b.n	8003950 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01d      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10d      	bne.n	8003894 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387c:	2b00      	cmp	r3, #0
 800387e:	d031      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e02c      	b.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
 800388a:	bf00      	nop
 800388c:	20000000 	.word	0x20000000
 8003890:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d023      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
 80038a4:	e01e      	b.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10f      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0210 	bic.w	r2, r2, #16
 80038c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d032      	beq.n	8003952 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d022      	beq.n	800393e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2205      	movs	r2, #5
 80038fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3301      	adds	r3, #1
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	d307      	bcc.n	800392c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f2      	bne.n	8003910 <HAL_DMA_IRQHandler+0x2cc>
 800392a:	e000      	b.n	800392e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800392c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
 800394e:	e000      	b.n	8003952 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003950:	bf00      	nop
    }
  }
}
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003966:	b2db      	uxtb	r3, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d108      	bne.n	80039cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ca:	e007      	b.n	80039dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	60da      	str	r2, [r3, #12]
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	3b10      	subs	r3, #16
 80039f8:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <DMA_CalcBaseAndBitshift+0x60>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a02:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <DMA_CalcBaseAndBitshift+0x64>)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d908      	bls.n	8003a28 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <DMA_CalcBaseAndBitshift+0x68>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	1d1a      	adds	r2, r3, #4
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	659a      	str	r2, [r3, #88]	; 0x58
 8003a26:	e006      	b.n	8003a36 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <DMA_CalcBaseAndBitshift+0x68>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	aaaaaaab 	.word	0xaaaaaaab
 8003a4c:	08019e4c 	.word	0x08019e4c
 8003a50:	fffffc00 	.word	0xfffffc00

08003a54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d11f      	bne.n	8003aae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d856      	bhi.n	8003b22 <DMA_CheckFifoParam+0xce>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <DMA_CheckFifoParam+0x28>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003a8d 	.word	0x08003a8d
 8003a80:	08003a9f 	.word	0x08003a9f
 8003a84:	08003a8d 	.word	0x08003a8d
 8003a88:	08003b23 	.word	0x08003b23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d046      	beq.n	8003b26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e043      	b.n	8003b26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa6:	d140      	bne.n	8003b2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aac:	e03d      	b.n	8003b2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab6:	d121      	bne.n	8003afc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d837      	bhi.n	8003b2e <DMA_CheckFifoParam+0xda>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <DMA_CheckFifoParam+0x70>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003adb 	.word	0x08003adb
 8003acc:	08003ad5 	.word	0x08003ad5
 8003ad0:	08003aed 	.word	0x08003aed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad8:	e030      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d025      	beq.n	8003b32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aea:	e022      	b.n	8003b32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003af4:	d11f      	bne.n	8003b36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003afa:	e01c      	b.n	8003b36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d903      	bls.n	8003b0a <DMA_CheckFifoParam+0xb6>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d003      	beq.n	8003b10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b08:	e018      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0e:	e015      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e00b      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
      break;
 8003b22:	bf00      	nop
 8003b24:	e00a      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b26:	bf00      	nop
 8003b28:	e008      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e006      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e004      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b32:	bf00      	nop
 8003b34:	e002      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop

08003b4c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e06a      	b.n	8003c34 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d106      	bne.n	8003b76 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2223      	movs	r2, #35	; 0x23
 8003b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f007 ff19 	bl	800b9a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b76:	4b31      	ldr	r3, [pc, #196]	; (8003c3c <HAL_ETH_Init+0xf0>)
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	4a30      	ldr	r2, [pc, #192]	; (8003c3c <HAL_ETH_Init+0xf0>)
 8003b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b80:	6453      	str	r3, [r2, #68]	; 0x44
 8003b82:	4b2e      	ldr	r3, [pc, #184]	; (8003c3c <HAL_ETH_Init+0xf0>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003b8e:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <HAL_ETH_Init+0xf4>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4a2b      	ldr	r2, [pc, #172]	; (8003c40 <HAL_ETH_Init+0xf4>)
 8003b94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b98:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003b9a:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_ETH_Init+0xf4>)
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	4927      	ldr	r1, [pc, #156]	; (8003c40 <HAL_ETH_Init+0xf4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003ba8:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <HAL_ETH_Init+0xf4>)
 8003baa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bc4:	f7fe fdb4 	bl	8002730 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bca:	e011      	b.n	8003bf0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003bcc:	f7fe fdb0 	bl	8002730 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bda:	d909      	bls.n	8003bf0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2204      	movs	r2, #4
 8003be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	22e0      	movs	r2, #224	; 0xe0
 8003be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e021      	b.n	8003c34 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e4      	bne.n	8003bcc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fee4 	bl	80049d0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 ff8b 	bl	8004b24 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 ffe1 	bl	8004bd6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 ff49 	bl	8004ab4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40013800 	.word	0x40013800

08003c44 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d150      	bne.n	8003cf8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2223      	movs	r2, #35	; 0x23
 8003c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2204      	movs	r2, #4
 8003c62:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f9fd 	bl	8004064 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0208 	orr.w	r2, r2, #8
 8003c78:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c82:	2001      	movs	r0, #1
 8003c84:	f7fe fd60 	bl	8002748 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0204 	orr.w	r2, r2, #4
 8003c9e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f7fe fd4d 	bl	8002748 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fd2a 	bl	8004710 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cd2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	f043 0302 	orr.w	r3, r3, #2
 8003ce6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cea:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2223      	movs	r2, #35	; 0x23
 8003cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e000      	b.n	8003cfa <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
  }
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d10:	2b23      	cmp	r3, #35	; 0x23
 8003d12:	d14a      	bne.n	8003daa <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2223      	movs	r2, #35	; 0x23
 8003d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d32:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	f023 0302 	bic.w	r3, r3, #2
 8003d46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d4a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d64:	2001      	movs	r0, #1
 8003d66:	f7fe fcef 	bl	8002748 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fccc 	bl	8004710 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0208 	bic.w	r2, r2, #8
 8003d86:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d90:	2001      	movs	r0, #1
 8003d92:	f7fe fcd9 	bl	8002748 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2210      	movs	r2, #16
 8003da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e000      	b.n	8003dac <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
  }
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f043 0201 	orr.w	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e07c      	b.n	8003ed4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de0:	2b23      	cmp	r3, #35	; 0x23
 8003de2:	d176      	bne.n	8003ed2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003de4:	2200      	movs	r2, #0
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 ff61 	bl	8004cb0 <ETH_Prepare_Tx_Descriptors>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f043 0202 	orr.w	r2, r3, #2
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e065      	b.n	8003ed4 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e08:	f3bf 8f4f 	dsb	sy
}
 8003e0c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3206      	adds	r2, #6
 8003e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e1a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	629a      	str	r2, [r3, #40]	; 0x28
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d904      	bls.n	8003e38 <HAL_ETH_Transmit+0x84>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	1f1a      	subs	r2, r3, #4
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3106      	adds	r1, #6
 8003e44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e4c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003e4e:	f7fe fc6f 	bl	8002730 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003e54:	e037      	b.n	8003ec6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d011      	beq.n	8003e8c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f043 0208 	orr.w	r2, r3, #8
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e023      	b.n	8003ed4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	d018      	beq.n	8003ec6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e94:	f7fe fc4c 	bl	8002730 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d302      	bcc.n	8003eaa <HAL_ETH_Transmit+0xf6>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10d      	bne.n	8003ec6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f043 0204 	orr.w	r2, r3, #4
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003ec0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e006      	b.n	8003ed4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	dbc3      	blt.n	8003e56 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e000      	b.n	8003ed4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0a8      	b.n	800405a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f0e:	2b23      	cmp	r3, #35	; 0x23
 8003f10:	d001      	beq.n	8003f16 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e0a1      	b.n	800405a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	3212      	adds	r2, #18
 8003f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f26:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2c:	f1c3 0304 	rsb	r3, r3, #4
 8003f30:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003f32:	e06a      	b.n	800400a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d007      	beq.n	8003f50 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	699a      	ldr	r2, [r3, #24]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d103      	bne.n	8003f64 <HAL_ETH_ReadData+0x88>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d040      	beq.n	8003fe6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00c      	beq.n	8003fa8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	0c1b      	lsrs	r3, r3, #16
 8003f94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003f98:	3b04      	subs	r3, #4
 8003f9a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f007 feb9 	bl	800bd3c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	441a      	add	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d902      	bls.n	8003ff8 <HAL_ETH_ReadData+0x11c>
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	3b04      	subs	r3, #4
 8003ff6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	3212      	adds	r2, #18
 8003ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004002:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3301      	adds	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	db06      	blt.n	8004020 <HAL_ETH_ReadData+0x144>
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	d202      	bcs.n	8004020 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d089      	beq.n	8003f34 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	441a      	add	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f815 	bl	8004064 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d108      	bne.n	8004058 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004070:	2301      	movs	r3, #1
 8004072:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004078:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	3212      	adds	r2, #18
 8004080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004084:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800408a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800408c:	e040      	b.n	8004110 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d112      	bne.n	80040bc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004096:	f107 030c 	add.w	r3, r7, #12
 800409a:	4618      	mov	r0, r3
 800409c:	f007 fe1e 	bl	800bcdc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d102      	bne.n	80040ac <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	74fb      	strb	r3, [r7, #19]
 80040aa:	e007      	b.n	80040bc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	461a      	mov	r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	461a      	mov	r2, r3
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d026      	beq.n	8004110 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <ETH_UpdateDescriptor+0xe4>)
 80040ce:	605a      	str	r2, [r3, #4]
 80040d0:	e003      	b.n	80040da <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80040d8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80040da:	f3bf 8f5f 	dmb	sy
}
 80040de:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	3301      	adds	r3, #1
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d902      	bls.n	80040fe <ETH_UpdateDescriptor+0x9a>
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	3b04      	subs	r3, #4
 80040fc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	3212      	adds	r2, #18
 8004104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004108:	617b      	str	r3, [r7, #20]
      desccount--;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	3b01      	subs	r3, #1
 800410e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <ETH_UpdateDescriptor+0xb8>
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1b8      	bne.n	800408e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	429a      	cmp	r2, r3
 8004124:	d00c      	beq.n	8004140 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412e:	461a      	mov	r2, r3
 8004130:	2300      	movs	r3, #0
 8004132:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004140:	bf00      	nop
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	800045f8 	.word	0x800045f8

0800414c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b40      	cmp	r3, #64	; 0x40
 8004164:	d112      	bne.n	800418c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b40      	cmp	r3, #64	; 0x40
 8004176:	d109      	bne.n	800418c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004180:	461a      	mov	r2, r3
 8004182:	4b50      	ldr	r3, [pc, #320]	; (80042c4 <HAL_ETH_IRQHandler+0x178>)
 8004184:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8ac 	bl	80042e4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d113      	bne.n	80041c6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d10a      	bne.n	80041c6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b8:	461a      	mov	r2, r3
 80041ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80041be:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f885 	bl	80042d0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d8:	d14c      	bne.n	8004274 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ec:	d142      	bne.n	8004274 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f043 0208 	orr.w	r2, r3, #8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800420c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004210:	d11a      	bne.n	8004248 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	4b2a      	ldr	r3, [pc, #168]	; (80042c8 <HAL_ETH_IRQHandler+0x17c>)
 800421e:	4013      	ands	r3, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004238:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800423c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	22e0      	movs	r2, #224	; 0xe0
 8004242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004246:	e012      	b.n	800426e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	f248 6380 	movw	r3, #34432	; 0x8680
 8004256:	4013      	ands	r3, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004266:	461a      	mov	r2, r3
 8004268:	f248 6380 	movw	r3, #34432	; 0x8680
 800426c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f842 	bl	80042f8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b08      	cmp	r3, #8
 8004280:	d10e      	bne.n	80042a0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f83a 	bl	800430c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <HAL_ETH_IRQHandler+0x180>)
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d006      	beq.n	80042ba <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80042ac:	4b07      	ldr	r3, [pc, #28]	; (80042cc <HAL_ETH_IRQHandler+0x180>)
 80042ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80042b2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f833 	bl	8004320 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	00010040 	.word	0x00010040
 80042c8:	007e2000 	.word	0x007e2000
 80042cc:	40013c00 	.word	0x40013c00

080042d0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f003 031c 	and.w	r3, r3, #28
 8004350:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	02db      	lsls	r3, r3, #11
 8004356:	b29b      	uxth	r3, r3
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	019b      	lsls	r3, r3, #6
 8004362:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f023 0302 	bic.w	r3, r3, #2
 8004372:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004384:	f7fe f9d4 	bl	8002730 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800438a:	e00d      	b.n	80043a8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800438c:	f7fe f9d0 	bl	8002730 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439a:	d301      	bcc.n	80043a0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e010      	b.n	80043c2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1ec      	bne.n	800438c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b086      	sub	sp, #24
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f003 031c 	and.w	r3, r3, #28
 80043e6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	02db      	lsls	r3, r3, #11
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	019b      	lsls	r3, r3, #6
 80043f8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f043 0302 	orr.w	r3, r3, #2
 8004408:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004424:	f7fe f984 	bl	8002730 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800442a:	e00d      	b.n	8004448 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800442c:	f7fe f980 	bl	8002730 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443a:	d301      	bcc.n	8004440 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e009      	b.n	8004454 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1ec      	bne.n	800442c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0d9      	b.n	8004624 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf0c      	ite	eq
 80044de:	2301      	moveq	r3, #1
 80044e0:	2300      	movne	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf14      	ite	ne
 80044f8:	2301      	movne	r3, #1
 80044fa:	2300      	moveq	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452a:	2b00      	cmp	r3, #0
 800452c:	bf0c      	ite	eq
 800452e:	2301      	moveq	r3, #1
 8004530:	2300      	movne	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004544:	2b00      	cmp	r3, #0
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	2b00      	cmp	r3, #0
 8004560:	bf14      	ite	ne
 8004562:	2301      	movne	r3, #1
 8004564:	2300      	moveq	r3, #0
 8004566:	b2db      	uxtb	r3, r3
 8004568:	461a      	mov	r2, r3
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004586:	2b00      	cmp	r3, #0
 8004588:	bf14      	ite	ne
 800458a:	2301      	movne	r3, #1
 800458c:	2300      	moveq	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	0c1b      	lsrs	r3, r3, #16
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	461a      	mov	r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e00b      	b.n	800465c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464a:	2b10      	cmp	r3, #16
 800464c:	d105      	bne.n	800465a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f883 	bl	800475c <ETH_SetMACConfig>

    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 031c 	bic.w	r3, r3, #28
 800467a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800467c:	f003 fb84 	bl	8007d88 <HAL_RCC_GetHCLKFreq>
 8004680:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <HAL_ETH_SetMDIOClockRange+0x98>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d908      	bls.n	800469c <HAL_ETH_SetMDIOClockRange+0x38>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4a1c      	ldr	r2, [pc, #112]	; (8004700 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d804      	bhi.n	800469c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f043 0308 	orr.w	r3, r3, #8
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	e027      	b.n	80046ec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4a18      	ldr	r2, [pc, #96]	; (8004700 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d908      	bls.n	80046b6 <HAL_ETH_SetMDIOClockRange+0x52>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4a17      	ldr	r2, [pc, #92]	; (8004704 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d204      	bcs.n	80046b6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f043 030c 	orr.w	r3, r3, #12
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	e01a      	b.n	80046ec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4a12      	ldr	r2, [pc, #72]	; (8004704 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d303      	bcc.n	80046c6 <HAL_ETH_SetMDIOClockRange+0x62>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4a11      	ldr	r2, [pc, #68]	; (8004708 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d911      	bls.n	80046ea <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	4a0f      	ldr	r2, [pc, #60]	; (8004708 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d908      	bls.n	80046e0 <HAL_ETH_SetMDIOClockRange+0x7c>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4a0e      	ldr	r2, [pc, #56]	; (800470c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d804      	bhi.n	80046e0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f043 0304 	orr.w	r3, r3, #4
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e005      	b.n	80046ec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f043 0310 	orr.w	r3, r3, #16
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	e000      	b.n	80046ec <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80046ea:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	611a      	str	r2, [r3, #16]
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	01312cff 	.word	0x01312cff
 8004700:	02160ebf 	.word	0x02160ebf
 8004704:	03938700 	.word	0x03938700
 8004708:	05f5e0ff 	.word	0x05f5e0ff
 800470c:	08f0d17f 	.word	0x08f0d17f

08004710 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004732:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004740:	2001      	movs	r0, #1
 8004742:	f7fe f801 	bl	8002748 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004750:	6193      	str	r3, [r2, #24]
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4b51      	ldr	r3, [pc, #324]	; (80048b8 <ETH_SetMACConfig+0x15c>)
 8004772:	4013      	ands	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	7c1b      	ldrb	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <ETH_SetMACConfig+0x28>
 800477e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004782:	e000      	b.n	8004786 <ETH_SetMACConfig+0x2a>
 8004784:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	7c5b      	ldrb	r3, [r3, #17]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <ETH_SetMACConfig+0x38>
 800478e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004792:	e000      	b.n	8004796 <ETH_SetMACConfig+0x3a>
 8004794:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004796:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800479c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	7fdb      	ldrb	r3, [r3, #31]
 80047a2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80047a4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80047aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	7f92      	ldrb	r2, [r2, #30]
 80047b0:	2a00      	cmp	r2, #0
 80047b2:	d102      	bne.n	80047ba <ETH_SetMACConfig+0x5e>
 80047b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047b8:	e000      	b.n	80047bc <ETH_SetMACConfig+0x60>
 80047ba:	2200      	movs	r2, #0
                        macconf->Speed |
 80047bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	7f1b      	ldrb	r3, [r3, #28]
 80047c2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80047c4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80047ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	791b      	ldrb	r3, [r3, #4]
 80047d0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80047d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80047da:	2a00      	cmp	r2, #0
 80047dc:	d102      	bne.n	80047e4 <ETH_SetMACConfig+0x88>
 80047de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e2:	e000      	b.n	80047e6 <ETH_SetMACConfig+0x8a>
 80047e4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80047e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	7bdb      	ldrb	r3, [r3, #15]
 80047ec:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80047ee:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80047f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047fc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80047fe:	4313      	orrs	r3, r2
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004816:	2001      	movs	r0, #1
 8004818:	f7fd ff96 	bl	8002748 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004832:	4013      	ands	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004842:	2a00      	cmp	r2, #0
 8004844:	d101      	bne.n	800484a <ETH_SetMACConfig+0xee>
 8004846:	2280      	movs	r2, #128	; 0x80
 8004848:	e000      	b.n	800484c <ETH_SetMACConfig+0xf0>
 800484a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800484c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004852:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800485a:	2a01      	cmp	r2, #1
 800485c:	d101      	bne.n	8004862 <ETH_SetMACConfig+0x106>
 800485e:	2208      	movs	r2, #8
 8004860:	e000      	b.n	8004864 <ETH_SetMACConfig+0x108>
 8004862:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004864:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800486c:	2a01      	cmp	r2, #1
 800486e:	d101      	bne.n	8004874 <ETH_SetMACConfig+0x118>
 8004870:	2204      	movs	r2, #4
 8004872:	e000      	b.n	8004876 <ETH_SetMACConfig+0x11a>
 8004874:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004876:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800487e:	2a01      	cmp	r2, #1
 8004880:	d101      	bne.n	8004886 <ETH_SetMACConfig+0x12a>
 8004882:	2202      	movs	r2, #2
 8004884:	e000      	b.n	8004888 <ETH_SetMACConfig+0x12c>
 8004886:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004888:	4313      	orrs	r3, r2
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7fd ff51 	bl	8002748 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	619a      	str	r2, [r3, #24]
}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	ff20810f 	.word	0xff20810f

080048bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4b3d      	ldr	r3, [pc, #244]	; (80049cc <ETH_SetDMAConfig+0x110>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	7b1b      	ldrb	r3, [r3, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <ETH_SetDMAConfig+0x2c>
 80048e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80048e6:	e000      	b.n	80048ea <ETH_SetDMAConfig+0x2e>
 80048e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	7b5b      	ldrb	r3, [r3, #13]
 80048ee:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80048f0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	7f52      	ldrb	r2, [r2, #29]
 80048f6:	2a00      	cmp	r2, #0
 80048f8:	d102      	bne.n	8004900 <ETH_SetDMAConfig+0x44>
 80048fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80048fe:	e000      	b.n	8004902 <ETH_SetDMAConfig+0x46>
 8004900:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004902:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	7b9b      	ldrb	r3, [r3, #14]
 8004908:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800490a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004910:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	7f1b      	ldrb	r3, [r3, #28]
 8004916:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004918:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	7f9b      	ldrb	r3, [r3, #30]
 800491e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004920:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004926:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800492e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004930:	4313      	orrs	r3, r2
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004940:	461a      	mov	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004952:	2001      	movs	r0, #1
 8004954:	f7fd fef8 	bl	8002748 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004960:	461a      	mov	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	791b      	ldrb	r3, [r3, #4]
 800496a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004970:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004976:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800497c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004984:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004986:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800498e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004994:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800499e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049a2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049b0:	2001      	movs	r0, #1
 80049b2:	f7fd fec9 	bl	8002748 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049be:	461a      	mov	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6013      	str	r3, [r2, #0]
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	f8de3f23 	.word	0xf8de3f23

080049d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b0a6      	sub	sp, #152	; 0x98
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80049e4:	2300      	movs	r3, #0
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004a00:	2300      	movs	r3, #0
 8004a02:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004a20:	2300      	movs	r3, #0
 8004a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004a32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a36:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004a44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff fe86 	bl	800475c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004a50:	2301      	movs	r3, #1
 8004a52:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004a54:	2301      	movs	r3, #1
 8004a56:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004a72:	2300      	movs	r3, #0
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004a76:	2301      	movs	r3, #1
 8004a78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a84:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004a86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a8a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a90:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004aa0:	f107 0308 	add.w	r3, r7, #8
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff ff08 	bl	80048bc <ETH_SetDMAConfig>
}
 8004aac:	bf00      	nop
 8004aae:	3798      	adds	r7, #152	; 0x98
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3305      	adds	r3, #5
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	3204      	adds	r2, #4
 8004acc:	7812      	ldrb	r2, [r2, #0]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <ETH_MACAddressConfig+0x68>)
 8004ad6:	4413      	add	r3, r2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3303      	adds	r3, #3
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	061a      	lsls	r2, r3, #24
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3302      	adds	r3, #2
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3301      	adds	r3, #1
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	4313      	orrs	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	7812      	ldrb	r2, [r2, #0]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <ETH_MACAddressConfig+0x6c>)
 8004b06:	4413      	add	r3, r2
 8004b08:	461a      	mov	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6013      	str	r3, [r2, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40028040 	.word	0x40028040
 8004b20:	40028044 	.word	0x40028044

08004b24 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e03e      	b.n	8004bb0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68d9      	ldr	r1, [r3, #12]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	440b      	add	r3, r1
 8004b42:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2200      	movs	r2, #0
 8004b54:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	3206      	adds	r2, #6
 8004b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d80c      	bhi.n	8004b94 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68d9      	ldr	r1, [r3, #12]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	440b      	add	r3, r1
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	e004      	b.n	8004b9e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3301      	adds	r3, #1
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d9bd      	bls.n	8004b32 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc8:	611a      	str	r2, [r3, #16]
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	e046      	b.n	8004c72 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6919      	ldr	r1, [r3, #16]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	440b      	add	r3, r1
 8004bf4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2200      	movs	r2, #0
 8004c06:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2200      	movs	r2, #0
 8004c12:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2200      	movs	r2, #0
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c20:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004c28:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	3212      	adds	r2, #18
 8004c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d80c      	bhi.n	8004c62 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6919      	ldr	r1, [r3, #16]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	440b      	add	r3, r1
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	60da      	str	r2, [r3, #12]
 8004c60:	e004      	b.n	8004c6c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	461a      	mov	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d9b5      	bls.n	8004be4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca2:	60da      	str	r2, [r3, #12]
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b08d      	sub	sp, #52	; 0x34
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3318      	adds	r3, #24
 8004cc0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cda:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cf2:	d007      	beq.n	8004d04 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004d04:	2302      	movs	r3, #2
 8004d06:	e0ff      	b.n	8004f08 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	4b7d      	ldr	r3, [pc, #500]	; (8004f14 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	6852      	ldr	r2, [r2, #4]
 8004d24:	431a      	orrs	r2, r3
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	431a      	orrs	r2, r3
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004d8a:	f3bf 8f5f 	dmb	sy
}
 8004d8e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004d9c:	e082      	b.n	8004ea4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d006      	beq.n	8004dbe <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	e005      	b.n	8004dca <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	3301      	adds	r3, #1
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d902      	bls.n	8004ddc <ETH_Prepare_Tx_Descriptors+0x12c>
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	3b04      	subs	r3, #4
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfe:	d007      	beq.n	8004e10 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	3304      	adds	r3, #4
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d029      	beq.n	8004e64 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e1c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e22:	e019      	b.n	8004e58 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004e24:	f3bf 8f5f 	dmb	sy
}
 8004e28:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	3301      	adds	r3, #1
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d902      	bls.n	8004e48 <ETH_Prepare_Tx_Descriptors+0x198>
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	3b04      	subs	r3, #4
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e50:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	3301      	adds	r3, #1
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d3e1      	bcc.n	8004e24 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004e60:	2302      	movs	r3, #2
 8004e62:	e051      	b.n	8004f08 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	3301      	adds	r3, #1
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	4b25      	ldr	r3, [pc, #148]	; (8004f14 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	6852      	ldr	r2, [r2, #4]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004e92:	f3bf 8f5f 	dmb	sy
}
 8004e96:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f47f af78 	bne.w	8004d9e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d006      	beq.n	8004ec2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	e005      	b.n	8004ece <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ede:	6979      	ldr	r1, [r7, #20]
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eee:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ef0:	b672      	cpsid	i
}
 8004ef2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	4413      	add	r3, r2
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004f02:	b662      	cpsie	i
}
 8004f04:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3734      	adds	r7, #52	; 0x34
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	ffffe000 	.word	0xffffe000

08004f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	; 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	e175      	b.n	8005224 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f38:	2201      	movs	r2, #1
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	f040 8164 	bne.w	800521e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d005      	beq.n	8004f6e <HAL_GPIO_Init+0x56>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d130      	bne.n	8004fd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	2203      	movs	r2, #3
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4013      	ands	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	43db      	mvns	r3, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	f003 0201 	and.w	r2, r3, #1
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d017      	beq.n	800500c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	2203      	movs	r2, #3
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	43db      	mvns	r3, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4313      	orrs	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d123      	bne.n	8005060 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	08da      	lsrs	r2, r3, #3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3208      	adds	r2, #8
 8005020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	220f      	movs	r2, #15
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	43db      	mvns	r3, r3
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4013      	ands	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	4313      	orrs	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	08da      	lsrs	r2, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3208      	adds	r2, #8
 800505a:	69b9      	ldr	r1, [r7, #24]
 800505c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	2203      	movs	r2, #3
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4013      	ands	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f003 0203 	and.w	r2, r3, #3
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 80be 	beq.w	800521e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a2:	4b66      	ldr	r3, [pc, #408]	; (800523c <HAL_GPIO_Init+0x324>)
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	4a65      	ldr	r2, [pc, #404]	; (800523c <HAL_GPIO_Init+0x324>)
 80050a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050ac:	6453      	str	r3, [r2, #68]	; 0x44
 80050ae:	4b63      	ldr	r3, [pc, #396]	; (800523c <HAL_GPIO_Init+0x324>)
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80050ba:	4a61      	ldr	r2, [pc, #388]	; (8005240 <HAL_GPIO_Init+0x328>)
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	3302      	adds	r3, #2
 80050c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	220f      	movs	r2, #15
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4013      	ands	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a58      	ldr	r2, [pc, #352]	; (8005244 <HAL_GPIO_Init+0x32c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d037      	beq.n	8005156 <HAL_GPIO_Init+0x23e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a57      	ldr	r2, [pc, #348]	; (8005248 <HAL_GPIO_Init+0x330>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d031      	beq.n	8005152 <HAL_GPIO_Init+0x23a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a56      	ldr	r2, [pc, #344]	; (800524c <HAL_GPIO_Init+0x334>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d02b      	beq.n	800514e <HAL_GPIO_Init+0x236>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a55      	ldr	r2, [pc, #340]	; (8005250 <HAL_GPIO_Init+0x338>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d025      	beq.n	800514a <HAL_GPIO_Init+0x232>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a54      	ldr	r2, [pc, #336]	; (8005254 <HAL_GPIO_Init+0x33c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01f      	beq.n	8005146 <HAL_GPIO_Init+0x22e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a53      	ldr	r2, [pc, #332]	; (8005258 <HAL_GPIO_Init+0x340>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d019      	beq.n	8005142 <HAL_GPIO_Init+0x22a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a52      	ldr	r2, [pc, #328]	; (800525c <HAL_GPIO_Init+0x344>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <HAL_GPIO_Init+0x226>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a51      	ldr	r2, [pc, #324]	; (8005260 <HAL_GPIO_Init+0x348>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00d      	beq.n	800513a <HAL_GPIO_Init+0x222>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a50      	ldr	r2, [pc, #320]	; (8005264 <HAL_GPIO_Init+0x34c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <HAL_GPIO_Init+0x21e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a4f      	ldr	r2, [pc, #316]	; (8005268 <HAL_GPIO_Init+0x350>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <HAL_GPIO_Init+0x21a>
 800512e:	2309      	movs	r3, #9
 8005130:	e012      	b.n	8005158 <HAL_GPIO_Init+0x240>
 8005132:	230a      	movs	r3, #10
 8005134:	e010      	b.n	8005158 <HAL_GPIO_Init+0x240>
 8005136:	2308      	movs	r3, #8
 8005138:	e00e      	b.n	8005158 <HAL_GPIO_Init+0x240>
 800513a:	2307      	movs	r3, #7
 800513c:	e00c      	b.n	8005158 <HAL_GPIO_Init+0x240>
 800513e:	2306      	movs	r3, #6
 8005140:	e00a      	b.n	8005158 <HAL_GPIO_Init+0x240>
 8005142:	2305      	movs	r3, #5
 8005144:	e008      	b.n	8005158 <HAL_GPIO_Init+0x240>
 8005146:	2304      	movs	r3, #4
 8005148:	e006      	b.n	8005158 <HAL_GPIO_Init+0x240>
 800514a:	2303      	movs	r3, #3
 800514c:	e004      	b.n	8005158 <HAL_GPIO_Init+0x240>
 800514e:	2302      	movs	r3, #2
 8005150:	e002      	b.n	8005158 <HAL_GPIO_Init+0x240>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <HAL_GPIO_Init+0x240>
 8005156:	2300      	movs	r3, #0
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	f002 0203 	and.w	r2, r2, #3
 800515e:	0092      	lsls	r2, r2, #2
 8005160:	4093      	lsls	r3, r2
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4313      	orrs	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005168:	4935      	ldr	r1, [pc, #212]	; (8005240 <HAL_GPIO_Init+0x328>)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	089b      	lsrs	r3, r3, #2
 800516e:	3302      	adds	r3, #2
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005176:	4b3d      	ldr	r3, [pc, #244]	; (800526c <HAL_GPIO_Init+0x354>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	43db      	mvns	r3, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4013      	ands	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800519a:	4a34      	ldr	r2, [pc, #208]	; (800526c <HAL_GPIO_Init+0x354>)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051a0:	4b32      	ldr	r3, [pc, #200]	; (800526c <HAL_GPIO_Init+0x354>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051c4:	4a29      	ldr	r2, [pc, #164]	; (800526c <HAL_GPIO_Init+0x354>)
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051ca:	4b28      	ldr	r3, [pc, #160]	; (800526c <HAL_GPIO_Init+0x354>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	43db      	mvns	r3, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4013      	ands	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051ee:	4a1f      	ldr	r2, [pc, #124]	; (800526c <HAL_GPIO_Init+0x354>)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051f4:	4b1d      	ldr	r3, [pc, #116]	; (800526c <HAL_GPIO_Init+0x354>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	43db      	mvns	r3, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4013      	ands	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005218:	4a14      	ldr	r2, [pc, #80]	; (800526c <HAL_GPIO_Init+0x354>)
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	3301      	adds	r3, #1
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b0f      	cmp	r3, #15
 8005228:	f67f ae86 	bls.w	8004f38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	3724      	adds	r7, #36	; 0x24
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40023800 	.word	0x40023800
 8005240:	40013800 	.word	0x40013800
 8005244:	40020000 	.word	0x40020000
 8005248:	40020400 	.word	0x40020400
 800524c:	40020800 	.word	0x40020800
 8005250:	40020c00 	.word	0x40020c00
 8005254:	40021000 	.word	0x40021000
 8005258:	40021400 	.word	0x40021400
 800525c:	40021800 	.word	0x40021800
 8005260:	40021c00 	.word	0x40021c00
 8005264:	40022000 	.word	0x40022000
 8005268:	40022400 	.word	0x40022400
 800526c:	40013c00 	.word	0x40013c00

08005270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	807b      	strh	r3, [r7, #2]
 800527c:	4613      	mov	r3, r2
 800527e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005280:	787b      	ldrb	r3, [r7, #1]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005286:	887a      	ldrh	r2, [r7, #2]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800528c:	e003      	b.n	8005296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800528e:	887b      	ldrh	r3, [r7, #2]
 8005290:	041a      	lsls	r2, r3, #16
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	619a      	str	r2, [r3, #24]
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
	...

080052a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e07f      	b.n	80053b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fb fc12 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2224      	movs	r2, #36	; 0x24
 80052d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0201 	bic.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005304:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d107      	bne.n	800531e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800531a:	609a      	str	r2, [r3, #8]
 800531c:	e006      	b.n	800532c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800532a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d104      	bne.n	800533e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800533c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6859      	ldr	r1, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <HAL_I2C_Init+0x11c>)
 800534a:	430b      	orrs	r3, r1
 800534c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800535c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69d9      	ldr	r1, [r3, #28]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1a      	ldr	r2, [r3, #32]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	02008000 	.word	0x02008000

080053c4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	461a      	mov	r2, r3
 80053d0:	460b      	mov	r3, r1
 80053d2:	817b      	strh	r3, [r7, #10]
 80053d4:	4613      	mov	r3, r2
 80053d6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	f040 80cd 	bne.w	8005580 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f4:	d101      	bne.n	80053fa <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 80053f6:	2302      	movs	r3, #2
 80053f8:	e0c3      	b.n	8005582 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_I2C_Master_Transmit_DMA+0x44>
 8005404:	2302      	movs	r3, #2
 8005406:	e0bc      	b.n	8005582 <HAL_I2C_Master_Transmit_DMA+0x1be>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2221      	movs	r2, #33	; 0x21
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2210      	movs	r2, #16
 800541c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	893a      	ldrh	r2, [r7, #8]
 8005430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4a55      	ldr	r2, [pc, #340]	; (800558c <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8005436:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4a55      	ldr	r2, [pc, #340]	; (8005590 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 800543c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	2bff      	cmp	r3, #255	; 0xff
 8005446:	d906      	bls.n	8005456 <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	22ff      	movs	r2, #255	; 0xff
 800544c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800544e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e007      	b.n	8005466 <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005464:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	d070      	beq.n	8005550 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	2b00      	cmp	r3, #0
 8005474:	d020      	beq.n	80054b8 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	4a46      	ldr	r2, [pc, #280]	; (8005594 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 800547c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	4a45      	ldr	r2, [pc, #276]	; (8005598 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8005484:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	2200      	movs	r2, #0
 800548c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	2200      	movs	r2, #0
 8005494:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3328      	adds	r3, #40	; 0x28
 80054a2:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80054a8:	f7fd ffda 	bl	8003460 <HAL_DMA_Start_IT>
 80054ac:	4603      	mov	r3, r0
 80054ae:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d138      	bne.n	8005528 <HAL_I2C_Master_Transmit_DMA+0x164>
 80054b6:	e013      	b.n	80054e0 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e050      	b.n	8005582 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	8979      	ldrh	r1, [r7, #10]
 80054e8:	4b2c      	ldr	r3, [pc, #176]	; (800559c <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f001 fcca 	bl	8006e88 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800550e:	2110      	movs	r1, #16
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f001 fceb 	bl	8006eec <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e029      	b.n	800557c <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553c:	f043 0210 	orr.w	r2, r3, #16
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e018      	b.n	8005582 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4a13      	ldr	r2, [pc, #76]	; (80055a0 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8005554:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555a:	b2da      	uxtb	r2, r3
 800555c:	8979      	ldrh	r1, [r7, #10]
 800555e:	4b0f      	ldr	r3, [pc, #60]	; (800559c <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f001 fc8e 	bl	8006e88 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005574:	2101      	movs	r1, #1
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f001 fcb8 	bl	8006eec <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e000      	b.n	8005582 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005580:	2302      	movs	r3, #2
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	ffff0000 	.word	0xffff0000
 8005590:	08005fb7 	.word	0x08005fb7
 8005594:	08006c27 	.word	0x08006c27
 8005598:	08006dd9 	.word	0x08006dd9
 800559c:	80002000 	.word	0x80002000
 80055a0:	08005b61 	.word	0x08005b61

080055a4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	461a      	mov	r2, r3
 80055b0:	460b      	mov	r3, r1
 80055b2:	817b      	strh	r3, [r7, #10]
 80055b4:	4613      	mov	r3, r2
 80055b6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	f040 80cd 	bne.w	8005760 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d4:	d101      	bne.n	80055da <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80055d6:	2302      	movs	r3, #2
 80055d8:	e0c3      	b.n	8005762 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_I2C_Master_Receive_DMA+0x44>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e0bc      	b.n	8005762 <HAL_I2C_Master_Receive_DMA+0x1be>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2222      	movs	r2, #34	; 0x22
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2210      	movs	r2, #16
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	893a      	ldrh	r2, [r7, #8]
 8005610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a55      	ldr	r2, [pc, #340]	; (800576c <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8005616:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a55      	ldr	r2, [pc, #340]	; (8005770 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800561c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	2bff      	cmp	r3, #255	; 0xff
 8005626:	d906      	bls.n	8005636 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	22ff      	movs	r2, #255	; 0xff
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800562e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	e007      	b.n	8005646 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005644:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564a:	2b00      	cmp	r3, #0
 800564c:	d070      	beq.n	8005730 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d020      	beq.n	8005698 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565a:	4a46      	ldr	r2, [pc, #280]	; (8005774 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800565c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	4a45      	ldr	r2, [pc, #276]	; (8005778 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005664:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566a:	2200      	movs	r2, #0
 800566c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	2200      	movs	r2, #0
 8005674:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3324      	adds	r3, #36	; 0x24
 8005680:	4619      	mov	r1, r3
 8005682:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005688:	f7fd feea 	bl	8003460 <HAL_DMA_Start_IT>
 800568c:	4603      	mov	r3, r0
 800568e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005690:	7cfb      	ldrb	r3, [r7, #19]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d138      	bne.n	8005708 <HAL_I2C_Master_Receive_DMA+0x164>
 8005696:	e013      	b.n	80056c0 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e050      	b.n	8005762 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	8979      	ldrh	r1, [r7, #10]
 80056c8:	4b2c      	ldr	r3, [pc, #176]	; (800577c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f001 fbda 	bl	8006e88 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80056ee:	2110      	movs	r1, #16
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f001 fbfb 	bl	8006eec <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	e029      	b.n	800575c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571c:	f043 0210 	orr.w	r2, r3, #16
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e018      	b.n	8005762 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a13      	ldr	r2, [pc, #76]	; (8005780 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005734:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573a:	b2da      	uxtb	r2, r3
 800573c:	8979      	ldrh	r1, [r7, #10]
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f001 fb9e 	bl	8006e88 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005754:	2101      	movs	r1, #1
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f001 fbc8 	bl	8006eec <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	e000      	b.n	8005762 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005760:	2302      	movs	r3, #2
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	ffff0000 	.word	0xffff0000
 8005770:	08005fb7 	.word	0x08005fb7
 8005774:	08006cfd 	.word	0x08006cfd
 8005778:	08006dd9 	.word	0x08006dd9
 800577c:	80002400 	.word	0x80002400
 8005780:	08005b61 	.word	0x08005b61

08005784 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b20      	cmp	r3, #32
 800579c:	f040 809b 	bne.w	80058d6 <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <HAL_I2C_Slave_Transmit_DMA+0x28>
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e08f      	b.n	80058d8 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_I2C_Slave_Transmit_DMA+0x42>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e088      	b.n	80058d8 <HAL_I2C_Slave_Transmit_DMA+0x154>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2221      	movs	r2, #33	; 0x21
 80057d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	88fa      	ldrh	r2, [r7, #6]
 80057ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a38      	ldr	r2, [pc, #224]	; (80058e0 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 80057fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4a38      	ldr	r2, [pc, #224]	; (80058e4 <HAL_I2C_Slave_Transmit_DMA+0x160>)
 8005804:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	2b00      	cmp	r3, #0
 800580c:	d020      	beq.n	8005850 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	4a35      	ldr	r2, [pc, #212]	; (80058e8 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 8005814:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	4a34      	ldr	r2, [pc, #208]	; (80058ec <HAL_I2C_Slave_Transmit_DMA+0x168>)
 800581c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	2200      	movs	r2, #0
 8005824:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	2200      	movs	r2, #0
 800582c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3328      	adds	r3, #40	; 0x28
 800583a:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005840:	f7fd fe0e 	bl	8003460 <HAL_DMA_Start_IT>
 8005844:	4603      	mov	r3, r0
 8005846:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d12f      	bne.n	80058ae <HAL_I2C_Slave_Transmit_DMA+0x12a>
 800584e:	e013      	b.n	8005878 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2228      	movs	r2, #40	; 0x28
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005864:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e02f      	b.n	80058d8 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005886:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f001 fb29 	bl	8006eec <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058a8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e014      	b.n	80058d8 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2228      	movs	r2, #40	; 0x28
 80058b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	f043 0210 	orr.w	r2, r3, #16
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
  }
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	ffff0000 	.word	0xffff0000
 80058e4:	0800619d 	.word	0x0800619d
 80058e8:	08006cbd 	.word	0x08006cbd
 80058ec:	08006dd9 	.word	0x08006dd9

080058f0 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b20      	cmp	r3, #32
 8005908:	f040 809b 	bne.w	8005a42 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_I2C_Slave_Receive_DMA+0x28>
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d105      	bne.n	8005924 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e08f      	b.n	8005a44 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_I2C_Slave_Receive_DMA+0x42>
 800592e:	2302      	movs	r3, #2
 8005930:	e088      	b.n	8005a44 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2222      	movs	r2, #34	; 0x22
 800593e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	88fa      	ldrh	r2, [r7, #6]
 800595a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4a38      	ldr	r2, [pc, #224]	; (8005a4c <HAL_I2C_Slave_Receive_DMA+0x15c>)
 800596a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a38      	ldr	r2, [pc, #224]	; (8005a50 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005970:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d020      	beq.n	80059bc <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	4a35      	ldr	r2, [pc, #212]	; (8005a54 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005980:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005986:	4a34      	ldr	r2, [pc, #208]	; (8005a58 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005988:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598e:	2200      	movs	r2, #0
 8005990:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005996:	2200      	movs	r2, #0
 8005998:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3324      	adds	r3, #36	; 0x24
 80059a4:	4619      	mov	r1, r3
 80059a6:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80059ac:	f7fd fd58 	bl	8003460 <HAL_DMA_Start_IT>
 80059b0:	4603      	mov	r3, r0
 80059b2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d12f      	bne.n	8005a1a <HAL_I2C_Slave_Receive_DMA+0x12a>
 80059ba:	e013      	b.n	80059e4 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2228      	movs	r2, #40	; 0x28
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e02f      	b.n	8005a44 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059f2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80059fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f001 fa73 	bl	8006eec <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a14:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e014      	b.n	8005a44 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2228      	movs	r2, #40	; 0x28
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	f043 0210 	orr.w	r2, r3, #16
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005a42:	2302      	movs	r3, #2
  }
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	ffff0000 	.word	0xffff0000
 8005a50:	0800619d 	.word	0x0800619d
 8005a54:	08006d93 	.word	0x08006d93
 8005a58:	08006dd9 	.word	0x08006dd9

08005a5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
  }
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
 8005aec:	4613      	mov	r3, r2
 8005aee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <I2C_Master_ISR_IT+0x1e>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e114      	b.n	8005da8 <I2C_Master_ISR_IT+0x248>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	091b      	lsrs	r3, r3, #4
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d013      	beq.n	8005bba <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00d      	beq.n	8005bba <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005baa:	f043 0204 	orr.w	r2, r3, #4
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f001 f813 	bl	8006bde <I2C_Flush_TXDR>
 8005bb8:	e0e1      	b.n	8005d7e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	089b      	lsrs	r3, r3, #2
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d023      	beq.n	8005c0e <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	089b      	lsrs	r3, r3, #2
 8005bca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01d      	beq.n	8005c0e <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f023 0304 	bic.w	r3, r3, #4
 8005bd8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c0c:	e0b7      	b.n	8005d7e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01e      	beq.n	8005c58 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d018      	beq.n	8005c58 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	781a      	ldrb	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c56:	e092      	b.n	8005d7e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	09db      	lsrs	r3, r3, #7
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d05d      	beq.n	8005d20 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	099b      	lsrs	r3, r3, #6
 8005c68:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d057      	beq.n	8005d20 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d040      	beq.n	8005cfc <I2C_Master_ISR_IT+0x19c>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d13c      	bne.n	8005cfc <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c8e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2bff      	cmp	r3, #255	; 0xff
 8005c98:	d90e      	bls.n	8005cb8 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	22ff      	movs	r2, #255	; 0xff
 8005c9e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	8a79      	ldrh	r1, [r7, #18]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f001 f8e9 	bl	8006e88 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cb6:	e032      	b.n	8005d1e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cca:	d00b      	beq.n	8005ce4 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	8a79      	ldrh	r1, [r7, #18]
 8005cd8:	2000      	movs	r0, #0
 8005cda:	9000      	str	r0, [sp, #0]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f001 f8d3 	bl	8006e88 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ce2:	e01c      	b.n	8005d1e <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	8a79      	ldrh	r1, [r7, #18]
 8005cec:	2300      	movs	r3, #0
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f001 f8c7 	bl	8006e88 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cfa:	e010      	b.n	8005d1e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d0a:	d003      	beq.n	8005d14 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 fba9 	bl	8006464 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d12:	e034      	b.n	8005d7e <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d14:	2140      	movs	r1, #64	; 0x40
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 fe6a 	bl	80069f0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d1c:	e02f      	b.n	8005d7e <I2C_Master_ISR_IT+0x21e>
 8005d1e:	e02e      	b.n	8005d7e <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	099b      	lsrs	r3, r3, #6
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d028      	beq.n	8005d7e <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	099b      	lsrs	r3, r3, #6
 8005d30:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d022      	beq.n	8005d7e <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d119      	bne.n	8005d76 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d50:	d015      	beq.n	8005d7e <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d5a:	d108      	bne.n	8005d6e <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d6a:	605a      	str	r2, [r3, #4]
 8005d6c:	e007      	b.n	8005d7e <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fb78 	bl	8006464 <I2C_ITMasterSeqCplt>
 8005d74:	e003      	b.n	8005d7e <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d76:	2140      	movs	r1, #64	; 0x40
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fe39 	bl	80069f0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005d96:	6979      	ldr	r1, [r7, #20]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 fbff 	bl	800659c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <I2C_Slave_ISR_IT+0x24>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e0ec      	b.n	8005fae <I2C_Slave_ISR_IT+0x1fe>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d009      	beq.n	8005dfc <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005df4:	6939      	ldr	r1, [r7, #16]
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 fc9a 	bl	8006730 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	091b      	lsrs	r3, r3, #4
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d04d      	beq.n	8005ea4 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	091b      	lsrs	r3, r3, #4
 8005e0c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d047      	beq.n	8005ea4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d128      	bne.n	8005e70 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b28      	cmp	r3, #40	; 0x28
 8005e28:	d108      	bne.n	8005e3c <I2C_Slave_ISR_IT+0x8c>
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e30:	d104      	bne.n	8005e3c <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e32:	6939      	ldr	r1, [r7, #16]
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fd85 	bl	8006944 <I2C_ITListenCplt>
 8005e3a:	e032      	b.n	8005ea2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b29      	cmp	r3, #41	; 0x29
 8005e46:	d10e      	bne.n	8005e66 <I2C_Slave_ISR_IT+0xb6>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e4e:	d00a      	beq.n	8005e66 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2210      	movs	r2, #16
 8005e56:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fec0 	bl	8006bde <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fb3d 	bl	80064de <I2C_ITSlaveSeqCplt>
 8005e64:	e01d      	b.n	8005ea2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2210      	movs	r2, #16
 8005e6c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005e6e:	e096      	b.n	8005f9e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2210      	movs	r2, #16
 8005e76:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7c:	f043 0204 	orr.w	r2, r3, #4
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d004      	beq.n	8005e94 <I2C_Slave_ISR_IT+0xe4>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e90:	f040 8085 	bne.w	8005f9e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e98:	4619      	mov	r1, r3
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fda8 	bl	80069f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005ea0:	e07d      	b.n	8005f9e <I2C_Slave_ISR_IT+0x1ee>
 8005ea2:	e07c      	b.n	8005f9e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	089b      	lsrs	r3, r3, #2
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d030      	beq.n	8005f12 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	089b      	lsrs	r3, r3, #2
 8005eb4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d02a      	beq.n	8005f12 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d018      	beq.n	8005ef8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d14f      	bne.n	8005fa2 <I2C_Slave_ISR_IT+0x1f2>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f08:	d04b      	beq.n	8005fa2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fae7 	bl	80064de <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005f10:	e047      	b.n	8005fa2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	08db      	lsrs	r3, r3, #3
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	08db      	lsrs	r3, r3, #3
 8005f22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d004      	beq.n	8005f34 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005f2a:	6939      	ldr	r1, [r7, #16]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 fa15 	bl	800635c <I2C_ITAddrCplt>
 8005f32:	e037      	b.n	8005fa4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	085b      	lsrs	r3, r3, #1
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d031      	beq.n	8005fa4 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	085b      	lsrs	r3, r3, #1
 8005f44:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d02b      	beq.n	8005fa4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d018      	beq.n	8005f88 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	781a      	ldrb	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	851a      	strh	r2, [r3, #40]	; 0x28
 8005f86:	e00d      	b.n	8005fa4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f8e:	d002      	beq.n	8005f96 <I2C_Slave_ISR_IT+0x1e6>
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 faa1 	bl	80064de <I2C_ITSlaveSeqCplt>
 8005f9c:	e002      	b.n	8005fa4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005fa2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b088      	sub	sp, #32
 8005fba:	af02      	add	r7, sp, #8
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <I2C_Master_ISR_DMA+0x1a>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e0e1      	b.n	8006194 <I2C_Master_ISR_DMA+0x1de>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	091b      	lsrs	r3, r3, #4
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d017      	beq.n	8006014 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	091b      	lsrs	r3, r3, #4
 8005fe8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d011      	beq.n	8006014 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffc:	f043 0204 	orr.w	r2, r3, #4
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006004:	2120      	movs	r1, #32
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 ff70 	bl	8006eec <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fde6 	bl	8006bde <I2C_Flush_TXDR>
 8006012:	e0ba      	b.n	800618a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	09db      	lsrs	r3, r3, #7
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d072      	beq.n	8006106 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	099b      	lsrs	r3, r3, #6
 8006024:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006028:	2b00      	cmp	r3, #0
 800602a:	d06c      	beq.n	8006106 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800603a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d04e      	beq.n	80060e4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006052:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006058:	b29b      	uxth	r3, r3
 800605a:	2bff      	cmp	r3, #255	; 0xff
 800605c:	d906      	bls.n	800606c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	22ff      	movs	r2, #255	; 0xff
 8006062:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e010      	b.n	800608e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800607e:	d003      	beq.n	8006088 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e002      	b.n	800608e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006088:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800608c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006092:	b2da      	uxtb	r2, r3
 8006094:	8a79      	ldrh	r1, [r7, #18]
 8006096:	2300      	movs	r3, #0
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 fef3 	bl	8006e88 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b22      	cmp	r3, #34	; 0x22
 80060be:	d108      	bne.n	80060d2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80060d0:	e05b      	b.n	800618a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80060e2:	e052      	b.n	800618a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060f2:	d003      	beq.n	80060fc <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f9b5 	bl	8006464 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80060fa:	e046      	b.n	800618a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80060fc:	2140      	movs	r1, #64	; 0x40
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fc76 	bl	80069f0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006104:	e041      	b.n	800618a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	099b      	lsrs	r3, r3, #6
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d029      	beq.n	8006166 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	099b      	lsrs	r3, r3, #6
 8006116:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800611a:	2b00      	cmp	r3, #0
 800611c:	d023      	beq.n	8006166 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d119      	bne.n	800615c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006136:	d027      	beq.n	8006188 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006140:	d108      	bne.n	8006154 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006150:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006152:	e019      	b.n	8006188 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f985 	bl	8006464 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800615a:	e015      	b.n	8006188 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800615c:	2140      	movs	r1, #64	; 0x40
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 fc46 	bl	80069f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006164:	e010      	b.n	8006188 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 fa0b 	bl	800659c <I2C_ITMasterCplt>
 8006186:	e000      	b.n	800618a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006188:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <I2C_Slave_ISR_DMA+0x24>
 80061bc:	2302      	movs	r3, #2
 80061be:	e0c9      	b.n	8006354 <I2C_Slave_ISR_DMA+0x1b8>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 faa4 	bl	8006730 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 809a 	beq.w	800632a <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 8093 	beq.w	800632a <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	0b9b      	lsrs	r3, r3, #14
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d105      	bne.n	800621c <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	0bdb      	lsrs	r3, r3, #15
 8006214:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006218:	2b00      	cmp	r3, #0
 800621a:	d07f      	beq.n	800631c <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00d      	beq.n	8006240 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	0bdb      	lsrs	r3, r3, #15
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800623c:	2301      	movs	r3, #1
 800623e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00d      	beq.n	8006264 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	0b9b      	lsrs	r3, r3, #14
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8006260:	2301      	movs	r3, #1
 8006262:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d128      	bne.n	80062bc <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b28      	cmp	r3, #40	; 0x28
 8006274:	d108      	bne.n	8006288 <I2C_Slave_ISR_DMA+0xec>
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800627c:	d104      	bne.n	8006288 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fb5f 	bl	8006944 <I2C_ITListenCplt>
 8006286:	e048      	b.n	800631a <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b29      	cmp	r3, #41	; 0x29
 8006292:	d10e      	bne.n	80062b2 <I2C_Slave_ISR_DMA+0x116>
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800629a:	d00a      	beq.n	80062b2 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2210      	movs	r2, #16
 80062a2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fc9a 	bl	8006bde <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f917 	bl	80064de <I2C_ITSlaveSeqCplt>
 80062b0:	e033      	b.n	800631a <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2210      	movs	r2, #16
 80062b8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80062ba:	e034      	b.n	8006326 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2210      	movs	r2, #16
 80062c2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c8:	f043 0204 	orr.w	r2, r3, #4
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d6:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <I2C_Slave_ISR_DMA+0x14a>
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062e4:	d11f      	bne.n	8006326 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
 80062e8:	2b21      	cmp	r3, #33	; 0x21
 80062ea:	d002      	beq.n	80062f2 <I2C_Slave_ISR_DMA+0x156>
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	2b29      	cmp	r3, #41	; 0x29
 80062f0:	d103      	bne.n	80062fa <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2221      	movs	r2, #33	; 0x21
 80062f6:	631a      	str	r2, [r3, #48]	; 0x30
 80062f8:	e008      	b.n	800630c <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
 80062fc:	2b22      	cmp	r3, #34	; 0x22
 80062fe:	d002      	beq.n	8006306 <I2C_Slave_ISR_DMA+0x16a>
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	2b2a      	cmp	r3, #42	; 0x2a
 8006304:	d102      	bne.n	800630c <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2222      	movs	r2, #34	; 0x22
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006310:	4619      	mov	r1, r3
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 fb6c 	bl	80069f0 <I2C_ITError>
      if (treatdmanack == 1U)
 8006318:	e005      	b.n	8006326 <I2C_Slave_ISR_DMA+0x18a>
 800631a:	e004      	b.n	8006326 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2210      	movs	r2, #16
 8006322:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006324:	e011      	b.n	800634a <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8006326:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006328:	e00f      	b.n	800634a <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	08db      	lsrs	r3, r3, #3
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	08db      	lsrs	r3, r3, #3
 800633a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f809 	bl	800635c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3720      	adds	r7, #32
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800636c:	b2db      	uxtb	r3, r3
 800636e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006372:	2b28      	cmp	r3, #40	; 0x28
 8006374:	d16a      	bne.n	800644c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	b2db      	uxtb	r3, r3
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	0c1b      	lsrs	r3, r3, #16
 800638e:	b29b      	uxth	r3, r3
 8006390:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006394:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	b29b      	uxth	r3, r3
 800639e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063a2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80063b0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d138      	bne.n	800642c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80063ba:	897b      	ldrh	r3, [r7, #10]
 80063bc:	09db      	lsrs	r3, r3, #7
 80063be:	b29a      	uxth	r2, r3
 80063c0:	89bb      	ldrh	r3, [r7, #12]
 80063c2:	4053      	eors	r3, r2
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f003 0306 	and.w	r3, r3, #6
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d11c      	bne.n	8006408 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80063ce:	897b      	ldrh	r3, [r7, #10]
 80063d0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d13b      	bne.n	800645c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2208      	movs	r2, #8
 80063f0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063fa:	89ba      	ldrh	r2, [r7, #12]
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7ff fb6d 	bl	8005ae0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006406:	e029      	b.n	800645c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006408:	893b      	ldrh	r3, [r7, #8]
 800640a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800640c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fdd5 	bl	8006fc0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800641e:	89ba      	ldrh	r2, [r7, #12]
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fb5b 	bl	8005ae0 <HAL_I2C_AddrCallback>
}
 800642a:	e017      	b.n	800645c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800642c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fdc5 	bl	8006fc0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800643e:	89ba      	ldrh	r2, [r7, #12]
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7ff fb4b 	bl	8005ae0 <HAL_I2C_AddrCallback>
}
 800644a:	e007      	b.n	800645c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2208      	movs	r2, #8
 8006452:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800645c:	bf00      	nop
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b21      	cmp	r3, #33	; 0x21
 800647e:	d115      	bne.n	80064ac <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2211      	movs	r2, #17
 800648c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006494:	2101      	movs	r1, #1
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fd92 	bl	8006fc0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff faf3 	bl	8005a90 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064aa:	e014      	b.n	80064d6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2212      	movs	r2, #18
 80064b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80064c0:	2102      	movs	r1, #2
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fd7c 	bl	8006fc0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fae7 	bl	8005aa4 <HAL_I2C_MasterRxCpltCallback>
}
 80064d6:	bf00      	nop
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	0b9b      	lsrs	r3, r3, #14
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	e00d      	b.n	8006530 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	0bdb      	lsrs	r3, r3, #15
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800652e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b29      	cmp	r3, #41	; 0x29
 800653a:	d112      	bne.n	8006562 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2228      	movs	r2, #40	; 0x28
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2221      	movs	r2, #33	; 0x21
 8006548:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800654a:	2101      	movs	r1, #1
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fd37 	bl	8006fc0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff faac 	bl	8005ab8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006560:	e017      	b.n	8006592 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b2a      	cmp	r3, #42	; 0x2a
 800656c:	d111      	bne.n	8006592 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2228      	movs	r2, #40	; 0x28
 8006572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2222      	movs	r2, #34	; 0x22
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800657c:	2102      	movs	r1, #2
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fd1e 	bl	8006fc0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff fa9d 	bl	8005acc <HAL_I2C_SlaveRxCpltCallback>
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2220      	movs	r2, #32
 80065b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b21      	cmp	r3, #33	; 0x21
 80065bc:	d107      	bne.n	80065ce <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80065be:	2101      	movs	r1, #1
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fcfd 	bl	8006fc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2211      	movs	r2, #17
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
 80065cc:	e00c      	b.n	80065e8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b22      	cmp	r3, #34	; 0x22
 80065d8:	d106      	bne.n	80065e8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80065da:	2102      	movs	r1, #2
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fcef 	bl	8006fc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2212      	movs	r2, #18
 80065e6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6859      	ldr	r1, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b4d      	ldr	r3, [pc, #308]	; (8006728 <I2C_ITMasterCplt+0x18c>)
 80065f4:	400b      	ands	r3, r1
 80065f6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a4a      	ldr	r2, [pc, #296]	; (800672c <I2C_ITMasterCplt+0x190>)
 8006602:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2210      	movs	r2, #16
 8006616:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661c:	f043 0204 	orr.w	r2, r3, #4
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b60      	cmp	r3, #96	; 0x60
 800662e:	d10b      	bne.n	8006648 <I2C_ITMasterCplt+0xac>
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	089b      	lsrs	r3, r3, #2
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	b2db      	uxtb	r3, r3
 8006644:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006646:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fac8 	bl	8006bde <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006652:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b60      	cmp	r3, #96	; 0x60
 800665e:	d002      	beq.n	8006666 <I2C_ITMasterCplt+0xca>
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d006      	beq.n	8006674 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f9bf 	bl	80069f0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006672:	e054      	b.n	800671e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b21      	cmp	r3, #33	; 0x21
 800667e:	d124      	bne.n	80066ca <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b40      	cmp	r3, #64	; 0x40
 8006698:	d10b      	bne.n	80066b2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff fa30 	bl	8005b10 <HAL_I2C_MemTxCpltCallback>
}
 80066b0:	e035      	b.n	800671e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff f9e4 	bl	8005a90 <HAL_I2C_MasterTxCpltCallback>
}
 80066c8:	e029      	b.n	800671e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b22      	cmp	r3, #34	; 0x22
 80066d4:	d123      	bne.n	800671e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	d10b      	bne.n	8006708 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff fa0f 	bl	8005b24 <HAL_I2C_MemRxCpltCallback>
}
 8006706:	e00a      	b.n	800671e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff f9c3 	bl	8005aa4 <HAL_I2C_MasterRxCpltCallback>
}
 800671e:	bf00      	nop
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	fe00e800 	.word	0xfe00e800
 800672c:	ffff0000 	.word	0xffff0000

08006730 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800674c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2220      	movs	r2, #32
 8006754:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	2b21      	cmp	r3, #33	; 0x21
 800675a:	d002      	beq.n	8006762 <I2C_ITSlaveCplt+0x32>
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	2b29      	cmp	r3, #41	; 0x29
 8006760:	d108      	bne.n	8006774 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006762:	f248 0101 	movw	r1, #32769	; 0x8001
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fc2a 	bl	8006fc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2221      	movs	r2, #33	; 0x21
 8006770:	631a      	str	r2, [r3, #48]	; 0x30
 8006772:	e00d      	b.n	8006790 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	2b22      	cmp	r3, #34	; 0x22
 8006778:	d002      	beq.n	8006780 <I2C_ITSlaveCplt+0x50>
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	2b2a      	cmp	r3, #42	; 0x2a
 800677e:	d107      	bne.n	8006790 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006780:	f248 0102 	movw	r1, #32770	; 0x8002
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fc1b 	bl	8006fc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2222      	movs	r2, #34	; 0x22
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800679e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6859      	ldr	r1, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b64      	ldr	r3, [pc, #400]	; (800693c <I2C_ITSlaveCplt+0x20c>)
 80067ac:	400b      	ands	r3, r1
 80067ae:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fa14 	bl	8006bde <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	0b9b      	lsrs	r3, r3, #14
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d013      	beq.n	80067ea <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d020      	beq.n	800681c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e8:	e018      	b.n	800681c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	0bdb      	lsrs	r3, r3, #15
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d012      	beq.n	800681c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006804:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680a:	2b00      	cmp	r3, #0
 800680c:	d006      	beq.n	800681c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	b29a      	uxth	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	089b      	lsrs	r3, r3, #2
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d020      	beq.n	800686a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f023 0304 	bic.w	r3, r3, #4
 800682e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00c      	beq.n	800686a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006878:	f043 0204 	orr.w	r2, r3, #4
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006892:	2b00      	cmp	r3, #0
 8006894:	d010      	beq.n	80068b8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f8a7 	bl	80069f0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b28      	cmp	r3, #40	; 0x28
 80068ac:	d141      	bne.n	8006932 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80068ae:	6979      	ldr	r1, [r7, #20]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f847 	bl	8006944 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068b6:	e03c      	b.n	8006932 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068c0:	d014      	beq.n	80068ec <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff fe0b 	bl	80064de <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a1d      	ldr	r2, [pc, #116]	; (8006940 <I2C_ITSlaveCplt+0x210>)
 80068cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff f909 	bl	8005afc <HAL_I2C_ListenCpltCallback>
}
 80068ea:	e022      	b.n	8006932 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b22      	cmp	r3, #34	; 0x22
 80068f6:	d10e      	bne.n	8006916 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff f8dc 	bl	8005acc <HAL_I2C_SlaveRxCpltCallback>
}
 8006914:	e00d      	b.n	8006932 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7ff f8c3 	bl	8005ab8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006932:	bf00      	nop
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	fe00e800 	.word	0xfe00e800
 8006940:	ffff0000 	.word	0xffff0000

08006944 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a26      	ldr	r2, [pc, #152]	; (80069ec <I2C_ITListenCplt+0xa8>)
 8006952:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	089b      	lsrs	r3, r3, #2
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d022      	beq.n	80069c2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	d012      	beq.n	80069c2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	f043 0204 	orr.w	r2, r3, #4
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80069c2:	f248 0103 	movw	r1, #32771	; 0x8003
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fafa 	bl	8006fc0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2210      	movs	r2, #16
 80069d2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff f88d 	bl	8005afc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	ffff0000 	.word	0xffff0000

080069f0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a5d      	ldr	r2, [pc, #372]	; (8006b84 <I2C_ITError+0x194>)
 8006a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	2b28      	cmp	r3, #40	; 0x28
 8006a26:	d005      	beq.n	8006a34 <I2C_ITError+0x44>
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	2b29      	cmp	r3, #41	; 0x29
 8006a2c:	d002      	beq.n	8006a34 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b2a      	cmp	r3, #42	; 0x2a
 8006a32:	d10b      	bne.n	8006a4c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a34:	2103      	movs	r1, #3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fac2 	bl	8006fc0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2228      	movs	r2, #40	; 0x28
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a50      	ldr	r2, [pc, #320]	; (8006b88 <I2C_ITError+0x198>)
 8006a48:	635a      	str	r2, [r3, #52]	; 0x34
 8006a4a:	e011      	b.n	8006a70 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a4c:	f248 0103 	movw	r1, #32771	; 0x8003
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fab5 	bl	8006fc0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b60      	cmp	r3, #96	; 0x60
 8006a60:	d003      	beq.n	8006a6a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d039      	beq.n	8006af2 <I2C_ITError+0x102>
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b11      	cmp	r3, #17
 8006a82:	d002      	beq.n	8006a8a <I2C_ITError+0x9a>
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b21      	cmp	r3, #33	; 0x21
 8006a88:	d133      	bne.n	8006af2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a98:	d107      	bne.n	8006aaa <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006aa8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fc ff52 	bl	8003958 <HAL_DMA_GetState>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d017      	beq.n	8006aea <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	4a33      	ldr	r2, [pc, #204]	; (8006b8c <I2C_ITError+0x19c>)
 8006ac0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fc fd96 	bl	8003600 <HAL_DMA_Abort_IT>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d04d      	beq.n	8006b76 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ae8:	e045      	b.n	8006b76 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f850 	bl	8006b90 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006af0:	e041      	b.n	8006b76 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d039      	beq.n	8006b6e <I2C_ITError+0x17e>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b12      	cmp	r3, #18
 8006afe:	d002      	beq.n	8006b06 <I2C_ITError+0x116>
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b22      	cmp	r3, #34	; 0x22
 8006b04:	d133      	bne.n	8006b6e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b14:	d107      	bne.n	8006b26 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b24:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fc ff14 	bl	8003958 <HAL_DMA_GetState>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d017      	beq.n	8006b66 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3a:	4a14      	ldr	r2, [pc, #80]	; (8006b8c <I2C_ITError+0x19c>)
 8006b3c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fc fd58 	bl	8003600 <HAL_DMA_Abort_IT>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d011      	beq.n	8006b7a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b60:	4610      	mov	r0, r2
 8006b62:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b64:	e009      	b.n	8006b7a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f812 	bl	8006b90 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b6c:	e005      	b.n	8006b7a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f80e 	bl	8006b90 <I2C_TreatErrorCallback>
  }
}
 8006b74:	e002      	b.n	8006b7c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b76:	bf00      	nop
 8006b78:	e000      	b.n	8006b7c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b7a:	bf00      	nop
}
 8006b7c:	bf00      	nop
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	ffff0000 	.word	0xffff0000
 8006b88:	08005db1 	.word	0x08005db1
 8006b8c:	08006e4d 	.word	0x08006e4d

08006b90 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b60      	cmp	r3, #96	; 0x60
 8006ba2:	d10e      	bne.n	8006bc2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7fe ffc6 	bl	8005b4c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006bc0:	e009      	b.n	8006bd6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7fe ffb1 	bl	8005b38 <HAL_I2C_ErrorCallback>
}
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d103      	bne.n	8006bfc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d007      	beq.n	8006c1a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0201 	orr.w	r2, r2, #1
 8006c18:	619a      	str	r2, [r3, #24]
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c42:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d104      	bne.n	8006c58 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006c4e:	2120      	movs	r1, #32
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f94b 	bl	8006eec <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006c56:	e02d      	b.n	8006cb4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006c60:	441a      	add	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2bff      	cmp	r3, #255	; 0xff
 8006c6e:	d903      	bls.n	8006c78 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	22ff      	movs	r2, #255	; 0xff
 8006c74:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c76:	e004      	b.n	8006c82 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3328      	adds	r3, #40	; 0x28
 8006c92:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006c98:	f7fc fbe2 	bl	8003460 <HAL_DMA_Start_IT>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006ca2:	2110      	movs	r1, #16
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff fea3 	bl	80069f0 <I2C_ITError>
}
 8006caa:	e003      	b.n	8006cb4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006cac:	2140      	movs	r1, #64	; 0x40
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f000 f91c 	bl	8006eec <I2C_Enable_IRQ>
}
 8006cb4:	bf00      	nop
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cce:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cd6:	d002      	beq.n	8006cde <I2C_DMASlaveTransmitCplt+0x22>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006cec:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff fbf5 	bl	80064de <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006cf4:	bf00      	nop
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d18:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d104      	bne.n	8006d2e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006d24:	2120      	movs	r1, #32
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 f8e0 	bl	8006eec <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006d2c:	e02d      	b.n	8006d8a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006d36:	441a      	add	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	2bff      	cmp	r3, #255	; 0xff
 8006d44:	d903      	bls.n	8006d4e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	22ff      	movs	r2, #255	; 0xff
 8006d4a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006d4c:	e004      	b.n	8006d58 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3324      	adds	r3, #36	; 0x24
 8006d62:	4619      	mov	r1, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006d6e:	f7fc fb77 	bl	8003460 <HAL_DMA_Start_IT>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d004      	beq.n	8006d82 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006d78:	2110      	movs	r1, #16
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7ff fe38 	bl	80069f0 <I2C_ITError>
}
 8006d80:	e003      	b.n	8006d8a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006d82:	2140      	movs	r1, #64	; 0x40
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f8b1 	bl	8006eec <I2C_Enable_IRQ>
}
 8006d8a:	bf00      	nop
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10e      	bne.n	8006dd0 <I2C_DMASlaveReceiveCplt+0x3e>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006db8:	d00a      	beq.n	8006dd0 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dc8:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7ff fb87 	bl	80064de <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006dd0:	bf00      	nop
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8006e16:	2301      	movs	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fc fdaa 	bl	8003974 <HAL_DMA_GetError>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d00e      	beq.n	8006e44 <I2C_DMAError+0x6c>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00b      	beq.n	8006e44 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e3a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006e3c:	2110      	movs	r1, #16
 8006e3e:	68b8      	ldr	r0, [r7, #8]
 8006e40:	f7ff fdd6 	bl	80069f0 <I2C_ITError>
  }
}
 8006e44:	bf00      	nop
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	2200      	movs	r2, #0
 8006e68:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e76:	2200      	movs	r2, #0
 8006e78:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7ff fe88 	bl	8006b90 <I2C_TreatErrorCallback>
}
 8006e80:	bf00      	nop
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	607b      	str	r3, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	817b      	strh	r3, [r7, #10]
 8006e96:	4613      	mov	r3, r2
 8006e98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e9a:	897b      	ldrh	r3, [r7, #10]
 8006e9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ea0:	7a7b      	ldrb	r3, [r7, #9]
 8006ea2:	041b      	lsls	r3, r3, #16
 8006ea4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ea8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eb6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	0d5b      	lsrs	r3, r3, #21
 8006ec2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ec6:	4b08      	ldr	r3, [pc, #32]	; (8006ee8 <I2C_TransferConfig+0x60>)
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	ea02 0103 	and.w	r1, r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	03ff63ff 	.word	0x03ff63ff

08006eec <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f00:	4a2d      	ldr	r2, [pc, #180]	; (8006fb8 <I2C_Enable_IRQ+0xcc>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d004      	beq.n	8006f10 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006f0a:	4a2c      	ldr	r2, [pc, #176]	; (8006fbc <I2C_Enable_IRQ+0xd0>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d11d      	bne.n	8006f4c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006f10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	da03      	bge.n	8006f20 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006f1e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006f20:	887b      	ldrh	r3, [r7, #2]
 8006f22:	2b10      	cmp	r3, #16
 8006f24:	d103      	bne.n	8006f2e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006f2c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006f2e:	887b      	ldrh	r3, [r7, #2]
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d103      	bne.n	8006f3c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f3a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006f3c:	887b      	ldrh	r3, [r7, #2]
 8006f3e:	2b40      	cmp	r3, #64	; 0x40
 8006f40:	d12c      	bne.n	8006f9c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f48:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006f4a:	e027      	b.n	8006f9c <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006f4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	da03      	bge.n	8006f5c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006f5a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006f5c:	887b      	ldrh	r3, [r7, #2]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006f6c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006f6e:	887b      	ldrh	r3, [r7, #2]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006f7e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006f80:	887b      	ldrh	r3, [r7, #2]
 8006f82:	2b10      	cmp	r3, #16
 8006f84:	d103      	bne.n	8006f8e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006f8c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006f8e:	887b      	ldrh	r3, [r7, #2]
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d103      	bne.n	8006f9c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f043 0320 	orr.w	r3, r3, #32
 8006f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6819      	ldr	r1, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	601a      	str	r2, [r3, #0]
}
 8006fac:	bf00      	nop
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	08005fb7 	.word	0x08005fb7
 8006fbc:	0800619d 	.word	0x0800619d

08006fc0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006fd0:	887b      	ldrh	r3, [r7, #2]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00f      	beq.n	8006ffa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006fe0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006fee:	2b28      	cmp	r3, #40	; 0x28
 8006ff0:	d003      	beq.n	8006ffa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006ff8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006ffa:	887b      	ldrh	r3, [r7, #2]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00f      	beq.n	8007024 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800700a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007012:	b2db      	uxtb	r3, r3
 8007014:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007018:	2b28      	cmp	r3, #40	; 0x28
 800701a:	d003      	beq.n	8007024 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007022:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007024:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007028:	2b00      	cmp	r3, #0
 800702a:	da03      	bge.n	8007034 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007032:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007034:	887b      	ldrh	r3, [r7, #2]
 8007036:	2b10      	cmp	r3, #16
 8007038:	d103      	bne.n	8007042 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007040:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007042:	887b      	ldrh	r3, [r7, #2]
 8007044:	2b20      	cmp	r3, #32
 8007046:	d103      	bne.n	8007050 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f043 0320 	orr.w	r3, r3, #32
 800704e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007050:	887b      	ldrh	r3, [r7, #2]
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d103      	bne.n	800705e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800705c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6819      	ldr	r1, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	43da      	mvns	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	400a      	ands	r2, r1
 800706e:	601a      	str	r2, [r3, #0]
}
 8007070:	bf00      	nop
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b20      	cmp	r3, #32
 8007090:	d138      	bne.n	8007104 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800709c:	2302      	movs	r3, #2
 800709e:	e032      	b.n	8007106 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2224      	movs	r2, #36	; 0x24
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0201 	bic.w	r2, r2, #1
 80070be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6819      	ldr	r1, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e000      	b.n	8007106 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007104:	2302      	movs	r3, #2
  }
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b20      	cmp	r3, #32
 8007126:	d139      	bne.n	800719c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007132:	2302      	movs	r3, #2
 8007134:	e033      	b.n	800719e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2224      	movs	r2, #36	; 0x24
 8007142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0201 	bic.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007164:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	021b      	lsls	r3, r3, #8
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0201 	orr.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e000      	b.n	800719e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800719c:	2302      	movs	r3, #2
  }
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80071aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ac:	b08f      	sub	sp, #60	; 0x3c
 80071ae:	af0a      	add	r7, sp, #40	; 0x28
 80071b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e116      	b.n	80073ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7fa fd68 	bl	8001cac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2203      	movs	r2, #3
 80071e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f003 fe2c 	bl	800ae58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	603b      	str	r3, [r7, #0]
 8007206:	687e      	ldr	r6, [r7, #4]
 8007208:	466d      	mov	r5, sp
 800720a:	f106 0410 	add.w	r4, r6, #16
 800720e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007216:	e894 0003 	ldmia.w	r4, {r0, r1}
 800721a:	e885 0003 	stmia.w	r5, {r0, r1}
 800721e:	1d33      	adds	r3, r6, #4
 8007220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007222:	6838      	ldr	r0, [r7, #0]
 8007224:	f003 fdc0 	bl	800ada8 <USB_CoreInit>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2202      	movs	r2, #2
 8007232:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e0d7      	b.n	80073ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2100      	movs	r1, #0
 8007240:	4618      	mov	r0, r3
 8007242:	f003 fe1a 	bl	800ae7a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007246:	2300      	movs	r3, #0
 8007248:	73fb      	strb	r3, [r7, #15]
 800724a:	e04a      	b.n	80072e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800724c:	7bfa      	ldrb	r2, [r7, #15]
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	4613      	mov	r3, r2
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	4413      	add	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	440b      	add	r3, r1
 800725a:	333d      	adds	r3, #61	; 0x3d
 800725c:	2201      	movs	r2, #1
 800725e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007260:	7bfa      	ldrb	r2, [r7, #15]
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	4613      	mov	r3, r2
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	4413      	add	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	440b      	add	r3, r1
 800726e:	333c      	adds	r3, #60	; 0x3c
 8007270:	7bfa      	ldrb	r2, [r7, #15]
 8007272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007274:	7bfa      	ldrb	r2, [r7, #15]
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	b298      	uxth	r0, r3
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4613      	mov	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	3344      	adds	r3, #68	; 0x44
 8007288:	4602      	mov	r2, r0
 800728a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800728c:	7bfa      	ldrb	r2, [r7, #15]
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	4613      	mov	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	440b      	add	r3, r1
 800729a:	3340      	adds	r3, #64	; 0x40
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80072a0:	7bfa      	ldrb	r2, [r7, #15]
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	4613      	mov	r3, r2
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	440b      	add	r3, r1
 80072ae:	3348      	adds	r3, #72	; 0x48
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80072b4:	7bfa      	ldrb	r2, [r7, #15]
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	334c      	adds	r3, #76	; 0x4c
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80072c8:	7bfa      	ldrb	r2, [r7, #15]
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	4613      	mov	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	3354      	adds	r3, #84	; 0x54
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	3301      	adds	r3, #1
 80072e0:	73fb      	strb	r3, [r7, #15]
 80072e2:	7bfa      	ldrb	r2, [r7, #15]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d3af      	bcc.n	800724c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072ec:	2300      	movs	r3, #0
 80072ee:	73fb      	strb	r3, [r7, #15]
 80072f0:	e044      	b.n	800737c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80072f2:	7bfa      	ldrb	r2, [r7, #15]
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007304:	2200      	movs	r2, #0
 8007306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007308:	7bfa      	ldrb	r2, [r7, #15]
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4613      	mov	r3, r2
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	4413      	add	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800731a:	7bfa      	ldrb	r2, [r7, #15]
 800731c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800731e:	7bfa      	ldrb	r2, [r7, #15]
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	4613      	mov	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	440b      	add	r3, r1
 800732c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007330:	2200      	movs	r2, #0
 8007332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007334:	7bfa      	ldrb	r2, [r7, #15]
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	4613      	mov	r3, r2
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007346:	2200      	movs	r2, #0
 8007348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800734a:	7bfa      	ldrb	r2, [r7, #15]
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007360:	7bfa      	ldrb	r2, [r7, #15]
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4613      	mov	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	3301      	adds	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
 800737c:	7bfa      	ldrb	r2, [r7, #15]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	429a      	cmp	r2, r3
 8007384:	d3b5      	bcc.n	80072f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	687e      	ldr	r6, [r7, #4]
 800738e:	466d      	mov	r5, sp
 8007390:	f106 0410 	add.w	r4, r6, #16
 8007394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800739a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800739c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80073a4:	1d33      	adds	r3, r6, #4
 80073a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073a8:	6838      	ldr	r0, [r7, #0]
 80073aa:	f003 fdb3 	bl	800af14 <USB_DevInit>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e014      	b.n	80073ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d102      	bne.n	80073de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f80b 	bl	80073f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f003 ff71 	bl	800b2ca <USB_DevDisconnect>

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080073f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007422:	4b05      	ldr	r3, [pc, #20]	; (8007438 <HAL_PCDEx_ActivateLPM+0x44>)
 8007424:	4313      	orrs	r3, r2
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	10000003 	.word	0x10000003

0800743c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a04      	ldr	r2, [pc, #16]	; (8007458 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800744a:	6013      	str	r3, [r2, #0]
}
 800744c:	bf00      	nop
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40007000 	.word	0x40007000

0800745c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007464:	2300      	movs	r3, #0
 8007466:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e291      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 8087 	beq.w	800758e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007480:	4b96      	ldr	r3, [pc, #600]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f003 030c 	and.w	r3, r3, #12
 8007488:	2b04      	cmp	r3, #4
 800748a:	d00c      	beq.n	80074a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800748c:	4b93      	ldr	r3, [pc, #588]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f003 030c 	and.w	r3, r3, #12
 8007494:	2b08      	cmp	r3, #8
 8007496:	d112      	bne.n	80074be <HAL_RCC_OscConfig+0x62>
 8007498:	4b90      	ldr	r3, [pc, #576]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074a4:	d10b      	bne.n	80074be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074a6:	4b8d      	ldr	r3, [pc, #564]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d06c      	beq.n	800758c <HAL_RCC_OscConfig+0x130>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d168      	bne.n	800758c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e26b      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c6:	d106      	bne.n	80074d6 <HAL_RCC_OscConfig+0x7a>
 80074c8:	4b84      	ldr	r3, [pc, #528]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a83      	ldr	r2, [pc, #524]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80074ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	e02e      	b.n	8007534 <HAL_RCC_OscConfig+0xd8>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10c      	bne.n	80074f8 <HAL_RCC_OscConfig+0x9c>
 80074de:	4b7f      	ldr	r3, [pc, #508]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a7e      	ldr	r2, [pc, #504]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80074e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	4b7c      	ldr	r3, [pc, #496]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a7b      	ldr	r2, [pc, #492]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80074f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074f4:	6013      	str	r3, [r2, #0]
 80074f6:	e01d      	b.n	8007534 <HAL_RCC_OscConfig+0xd8>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007500:	d10c      	bne.n	800751c <HAL_RCC_OscConfig+0xc0>
 8007502:	4b76      	ldr	r3, [pc, #472]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a75      	ldr	r2, [pc, #468]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	4b73      	ldr	r3, [pc, #460]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a72      	ldr	r2, [pc, #456]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	e00b      	b.n	8007534 <HAL_RCC_OscConfig+0xd8>
 800751c:	4b6f      	ldr	r3, [pc, #444]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a6e      	ldr	r2, [pc, #440]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	4b6c      	ldr	r3, [pc, #432]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a6b      	ldr	r2, [pc, #428]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 800752e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d013      	beq.n	8007564 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753c:	f7fb f8f8 	bl	8002730 <HAL_GetTick>
 8007540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007542:	e008      	b.n	8007556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007544:	f7fb f8f4 	bl	8002730 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b64      	cmp	r3, #100	; 0x64
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e21f      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007556:	4b61      	ldr	r3, [pc, #388]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0f0      	beq.n	8007544 <HAL_RCC_OscConfig+0xe8>
 8007562:	e014      	b.n	800758e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007564:	f7fb f8e4 	bl	8002730 <HAL_GetTick>
 8007568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800756a:	e008      	b.n	800757e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800756c:	f7fb f8e0 	bl	8002730 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b64      	cmp	r3, #100	; 0x64
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e20b      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800757e:	4b57      	ldr	r3, [pc, #348]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1f0      	bne.n	800756c <HAL_RCC_OscConfig+0x110>
 800758a:	e000      	b.n	800758e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800758c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d069      	beq.n	800766e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800759a:	4b50      	ldr	r3, [pc, #320]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f003 030c 	and.w	r3, r3, #12
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00b      	beq.n	80075be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075a6:	4b4d      	ldr	r3, [pc, #308]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 030c 	and.w	r3, r3, #12
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	d11c      	bne.n	80075ec <HAL_RCC_OscConfig+0x190>
 80075b2:	4b4a      	ldr	r3, [pc, #296]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d116      	bne.n	80075ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075be:	4b47      	ldr	r3, [pc, #284]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <HAL_RCC_OscConfig+0x17a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d001      	beq.n	80075d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e1df      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075d6:	4b41      	ldr	r3, [pc, #260]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	493d      	ldr	r1, [pc, #244]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ea:	e040      	b.n	800766e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d023      	beq.n	800763c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075f4:	4b39      	ldr	r3, [pc, #228]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a38      	ldr	r2, [pc, #224]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80075fa:	f043 0301 	orr.w	r3, r3, #1
 80075fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007600:	f7fb f896 	bl	8002730 <HAL_GetTick>
 8007604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007606:	e008      	b.n	800761a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007608:	f7fb f892 	bl	8002730 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b02      	cmp	r3, #2
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e1bd      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800761a:	4b30      	ldr	r3, [pc, #192]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0f0      	beq.n	8007608 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007626:	4b2d      	ldr	r3, [pc, #180]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	00db      	lsls	r3, r3, #3
 8007634:	4929      	ldr	r1, [pc, #164]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007636:	4313      	orrs	r3, r2
 8007638:	600b      	str	r3, [r1, #0]
 800763a:	e018      	b.n	800766e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800763c:	4b27      	ldr	r3, [pc, #156]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a26      	ldr	r2, [pc, #152]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007642:	f023 0301 	bic.w	r3, r3, #1
 8007646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007648:	f7fb f872 	bl	8002730 <HAL_GetTick>
 800764c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007650:	f7fb f86e 	bl	8002730 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e199      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007662:	4b1e      	ldr	r3, [pc, #120]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f0      	bne.n	8007650 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0308 	and.w	r3, r3, #8
 8007676:	2b00      	cmp	r3, #0
 8007678:	d038      	beq.n	80076ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d019      	beq.n	80076b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007682:	4b16      	ldr	r3, [pc, #88]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007686:	4a15      	ldr	r2, [pc, #84]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 8007688:	f043 0301 	orr.w	r3, r3, #1
 800768c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800768e:	f7fb f84f 	bl	8002730 <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007694:	e008      	b.n	80076a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007696:	f7fb f84b 	bl	8002730 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e176      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076a8:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80076aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ac:	f003 0302 	and.w	r3, r3, #2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0f0      	beq.n	8007696 <HAL_RCC_OscConfig+0x23a>
 80076b4:	e01a      	b.n	80076ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076b6:	4b09      	ldr	r3, [pc, #36]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80076b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ba:	4a08      	ldr	r2, [pc, #32]	; (80076dc <HAL_RCC_OscConfig+0x280>)
 80076bc:	f023 0301 	bic.w	r3, r3, #1
 80076c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c2:	f7fb f835 	bl	8002730 <HAL_GetTick>
 80076c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076c8:	e00a      	b.n	80076e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076ca:	f7fb f831 	bl	8002730 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d903      	bls.n	80076e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e15c      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
 80076dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076e0:	4b91      	ldr	r3, [pc, #580]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80076e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1ee      	bne.n	80076ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 80a4 	beq.w	8007842 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076fa:	4b8b      	ldr	r3, [pc, #556]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80076fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10d      	bne.n	8007722 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007706:	4b88      	ldr	r3, [pc, #544]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	4a87      	ldr	r2, [pc, #540]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 800770c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007710:	6413      	str	r3, [r2, #64]	; 0x40
 8007712:	4b85      	ldr	r3, [pc, #532]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800771a:	60bb      	str	r3, [r7, #8]
 800771c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800771e:	2301      	movs	r3, #1
 8007720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007722:	4b82      	ldr	r3, [pc, #520]	; (800792c <HAL_RCC_OscConfig+0x4d0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772a:	2b00      	cmp	r3, #0
 800772c:	d118      	bne.n	8007760 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800772e:	4b7f      	ldr	r3, [pc, #508]	; (800792c <HAL_RCC_OscConfig+0x4d0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a7e      	ldr	r2, [pc, #504]	; (800792c <HAL_RCC_OscConfig+0x4d0>)
 8007734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800773a:	f7fa fff9 	bl	8002730 <HAL_GetTick>
 800773e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007740:	e008      	b.n	8007754 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007742:	f7fa fff5 	bl	8002730 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b64      	cmp	r3, #100	; 0x64
 800774e:	d901      	bls.n	8007754 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e120      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007754:	4b75      	ldr	r3, [pc, #468]	; (800792c <HAL_RCC_OscConfig+0x4d0>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0f0      	beq.n	8007742 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d106      	bne.n	8007776 <HAL_RCC_OscConfig+0x31a>
 8007768:	4b6f      	ldr	r3, [pc, #444]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 800776a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776c:	4a6e      	ldr	r2, [pc, #440]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 800776e:	f043 0301 	orr.w	r3, r3, #1
 8007772:	6713      	str	r3, [r2, #112]	; 0x70
 8007774:	e02d      	b.n	80077d2 <HAL_RCC_OscConfig+0x376>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10c      	bne.n	8007798 <HAL_RCC_OscConfig+0x33c>
 800777e:	4b6a      	ldr	r3, [pc, #424]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 8007780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007782:	4a69      	ldr	r2, [pc, #420]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 8007784:	f023 0301 	bic.w	r3, r3, #1
 8007788:	6713      	str	r3, [r2, #112]	; 0x70
 800778a:	4b67      	ldr	r3, [pc, #412]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 800778c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778e:	4a66      	ldr	r2, [pc, #408]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 8007790:	f023 0304 	bic.w	r3, r3, #4
 8007794:	6713      	str	r3, [r2, #112]	; 0x70
 8007796:	e01c      	b.n	80077d2 <HAL_RCC_OscConfig+0x376>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	2b05      	cmp	r3, #5
 800779e:	d10c      	bne.n	80077ba <HAL_RCC_OscConfig+0x35e>
 80077a0:	4b61      	ldr	r3, [pc, #388]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80077a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a4:	4a60      	ldr	r2, [pc, #384]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80077a6:	f043 0304 	orr.w	r3, r3, #4
 80077aa:	6713      	str	r3, [r2, #112]	; 0x70
 80077ac:	4b5e      	ldr	r3, [pc, #376]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80077ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b0:	4a5d      	ldr	r2, [pc, #372]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80077b2:	f043 0301 	orr.w	r3, r3, #1
 80077b6:	6713      	str	r3, [r2, #112]	; 0x70
 80077b8:	e00b      	b.n	80077d2 <HAL_RCC_OscConfig+0x376>
 80077ba:	4b5b      	ldr	r3, [pc, #364]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80077bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077be:	4a5a      	ldr	r2, [pc, #360]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80077c0:	f023 0301 	bic.w	r3, r3, #1
 80077c4:	6713      	str	r3, [r2, #112]	; 0x70
 80077c6:	4b58      	ldr	r3, [pc, #352]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ca:	4a57      	ldr	r2, [pc, #348]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80077cc:	f023 0304 	bic.w	r3, r3, #4
 80077d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d015      	beq.n	8007806 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077da:	f7fa ffa9 	bl	8002730 <HAL_GetTick>
 80077de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077e0:	e00a      	b.n	80077f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077e2:	f7fa ffa5 	bl	8002730 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d901      	bls.n	80077f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e0ce      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077f8:	4b4b      	ldr	r3, [pc, #300]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80077fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b00      	cmp	r3, #0
 8007802:	d0ee      	beq.n	80077e2 <HAL_RCC_OscConfig+0x386>
 8007804:	e014      	b.n	8007830 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007806:	f7fa ff93 	bl	8002730 <HAL_GetTick>
 800780a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800780c:	e00a      	b.n	8007824 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800780e:	f7fa ff8f 	bl	8002730 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	f241 3288 	movw	r2, #5000	; 0x1388
 800781c:	4293      	cmp	r3, r2
 800781e:	d901      	bls.n	8007824 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e0b8      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007824:	4b40      	ldr	r3, [pc, #256]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 8007826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1ee      	bne.n	800780e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d105      	bne.n	8007842 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007836:	4b3c      	ldr	r3, [pc, #240]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 8007838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783a:	4a3b      	ldr	r2, [pc, #236]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 800783c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007840:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 80a4 	beq.w	8007994 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800784c:	4b36      	ldr	r3, [pc, #216]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 030c 	and.w	r3, r3, #12
 8007854:	2b08      	cmp	r3, #8
 8007856:	d06b      	beq.n	8007930 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	2b02      	cmp	r3, #2
 800785e:	d149      	bne.n	80078f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007860:	4b31      	ldr	r3, [pc, #196]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a30      	ldr	r2, [pc, #192]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 8007866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800786a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786c:	f7fa ff60 	bl	8002730 <HAL_GetTick>
 8007870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007872:	e008      	b.n	8007886 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007874:	f7fa ff5c 	bl	8002730 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d901      	bls.n	8007886 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e087      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007886:	4b28      	ldr	r3, [pc, #160]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1f0      	bne.n	8007874 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	69da      	ldr	r2, [r3, #28]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	431a      	orrs	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	019b      	lsls	r3, r3, #6
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	085b      	lsrs	r3, r3, #1
 80078aa:	3b01      	subs	r3, #1
 80078ac:	041b      	lsls	r3, r3, #16
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	061b      	lsls	r3, r3, #24
 80078b6:	4313      	orrs	r3, r2
 80078b8:	4a1b      	ldr	r2, [pc, #108]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80078ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078c0:	4b19      	ldr	r3, [pc, #100]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a18      	ldr	r2, [pc, #96]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80078c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078cc:	f7fa ff30 	bl	8002730 <HAL_GetTick>
 80078d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078d4:	f7fa ff2c 	bl	8002730 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e057      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078e6:	4b10      	ldr	r3, [pc, #64]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0f0      	beq.n	80078d4 <HAL_RCC_OscConfig+0x478>
 80078f2:	e04f      	b.n	8007994 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078f4:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a0b      	ldr	r2, [pc, #44]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 80078fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007900:	f7fa ff16 	bl	8002730 <HAL_GetTick>
 8007904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007906:	e008      	b.n	800791a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007908:	f7fa ff12 	bl	8002730 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b02      	cmp	r3, #2
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e03d      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800791a:	4b03      	ldr	r3, [pc, #12]	; (8007928 <HAL_RCC_OscConfig+0x4cc>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1f0      	bne.n	8007908 <HAL_RCC_OscConfig+0x4ac>
 8007926:	e035      	b.n	8007994 <HAL_RCC_OscConfig+0x538>
 8007928:	40023800 	.word	0x40023800
 800792c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007930:	4b1b      	ldr	r3, [pc, #108]	; (80079a0 <HAL_RCC_OscConfig+0x544>)
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d028      	beq.n	8007990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007948:	429a      	cmp	r2, r3
 800794a:	d121      	bne.n	8007990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007956:	429a      	cmp	r2, r3
 8007958:	d11a      	bne.n	8007990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007960:	4013      	ands	r3, r2
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007966:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007968:	4293      	cmp	r3, r2
 800796a:	d111      	bne.n	8007990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	3b01      	subs	r3, #1
 800797a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800797c:	429a      	cmp	r2, r3
 800797e:	d107      	bne.n	8007990 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800798c:	429a      	cmp	r2, r3
 800798e:	d001      	beq.n	8007994 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e000      	b.n	8007996 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	40023800 	.word	0x40023800

080079a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e0d0      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079bc:	4b6a      	ldr	r3, [pc, #424]	; (8007b68 <HAL_RCC_ClockConfig+0x1c4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d910      	bls.n	80079ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ca:	4b67      	ldr	r3, [pc, #412]	; (8007b68 <HAL_RCC_ClockConfig+0x1c4>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f023 020f 	bic.w	r2, r3, #15
 80079d2:	4965      	ldr	r1, [pc, #404]	; (8007b68 <HAL_RCC_ClockConfig+0x1c4>)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079da:	4b63      	ldr	r3, [pc, #396]	; (8007b68 <HAL_RCC_ClockConfig+0x1c4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 030f 	and.w	r3, r3, #15
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d001      	beq.n	80079ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e0b8      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d020      	beq.n	8007a3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d005      	beq.n	8007a10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a04:	4b59      	ldr	r3, [pc, #356]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	4a58      	ldr	r2, [pc, #352]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a1c:	4b53      	ldr	r3, [pc, #332]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	4a52      	ldr	r2, [pc, #328]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a28:	4b50      	ldr	r3, [pc, #320]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	494d      	ldr	r1, [pc, #308]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d040      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d107      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a4e:	4b47      	ldr	r3, [pc, #284]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d115      	bne.n	8007a86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e07f      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d107      	bne.n	8007a76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a66:	4b41      	ldr	r3, [pc, #260]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d109      	bne.n	8007a86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e073      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a76:	4b3d      	ldr	r3, [pc, #244]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e06b      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a86:	4b39      	ldr	r3, [pc, #228]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f023 0203 	bic.w	r2, r3, #3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	4936      	ldr	r1, [pc, #216]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a98:	f7fa fe4a 	bl	8002730 <HAL_GetTick>
 8007a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a9e:	e00a      	b.n	8007ab6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aa0:	f7fa fe46 	bl	8002730 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e053      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ab6:	4b2d      	ldr	r3, [pc, #180]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f003 020c 	and.w	r2, r3, #12
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d1eb      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ac8:	4b27      	ldr	r3, [pc, #156]	; (8007b68 <HAL_RCC_ClockConfig+0x1c4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 030f 	and.w	r3, r3, #15
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d210      	bcs.n	8007af8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ad6:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <HAL_RCC_ClockConfig+0x1c4>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f023 020f 	bic.w	r2, r3, #15
 8007ade:	4922      	ldr	r1, [pc, #136]	; (8007b68 <HAL_RCC_ClockConfig+0x1c4>)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ae6:	4b20      	ldr	r3, [pc, #128]	; (8007b68 <HAL_RCC_ClockConfig+0x1c4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d001      	beq.n	8007af8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e032      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d008      	beq.n	8007b16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b04:	4b19      	ldr	r3, [pc, #100]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	4916      	ldr	r1, [pc, #88]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0308 	and.w	r3, r3, #8
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d009      	beq.n	8007b36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007b22:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	490e      	ldr	r1, [pc, #56]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b36:	f000 f821 	bl	8007b7c <HAL_RCC_GetSysClockFreq>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	4b0b      	ldr	r3, [pc, #44]	; (8007b6c <HAL_RCC_ClockConfig+0x1c8>)
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	091b      	lsrs	r3, r3, #4
 8007b42:	f003 030f 	and.w	r3, r3, #15
 8007b46:	490a      	ldr	r1, [pc, #40]	; (8007b70 <HAL_RCC_ClockConfig+0x1cc>)
 8007b48:	5ccb      	ldrb	r3, [r1, r3]
 8007b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4e:	4a09      	ldr	r2, [pc, #36]	; (8007b74 <HAL_RCC_ClockConfig+0x1d0>)
 8007b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007b52:	4b09      	ldr	r3, [pc, #36]	; (8007b78 <HAL_RCC_ClockConfig+0x1d4>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fa fda6 	bl	80026a8 <HAL_InitTick>

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40023c00 	.word	0x40023c00
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	08019e34 	.word	0x08019e34
 8007b74:	20000000 	.word	0x20000000
 8007b78:	20000004 	.word	0x20000004

08007b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b80:	b094      	sub	sp, #80	; 0x50
 8007b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	647b      	str	r3, [r7, #68]	; 0x44
 8007b88:	2300      	movs	r3, #0
 8007b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b94:	4b79      	ldr	r3, [pc, #484]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f003 030c 	and.w	r3, r3, #12
 8007b9c:	2b08      	cmp	r3, #8
 8007b9e:	d00d      	beq.n	8007bbc <HAL_RCC_GetSysClockFreq+0x40>
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	f200 80e1 	bhi.w	8007d68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d003      	beq.n	8007bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007bae:	e0db      	b.n	8007d68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bb0:	4b73      	ldr	r3, [pc, #460]	; (8007d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8007bb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007bb4:	e0db      	b.n	8007d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bb6:	4b73      	ldr	r3, [pc, #460]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x208>)
 8007bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007bba:	e0d8      	b.n	8007d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bbc:	4b6f      	ldr	r3, [pc, #444]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bc4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007bc6:	4b6d      	ldr	r3, [pc, #436]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d063      	beq.n	8007c9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bd2:	4b6a      	ldr	r3, [pc, #424]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	099b      	lsrs	r3, r3, #6
 8007bd8:	2200      	movs	r2, #0
 8007bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be4:	633b      	str	r3, [r7, #48]	; 0x30
 8007be6:	2300      	movs	r3, #0
 8007be8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007bee:	4622      	mov	r2, r4
 8007bf0:	462b      	mov	r3, r5
 8007bf2:	f04f 0000 	mov.w	r0, #0
 8007bf6:	f04f 0100 	mov.w	r1, #0
 8007bfa:	0159      	lsls	r1, r3, #5
 8007bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c00:	0150      	lsls	r0, r2, #5
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4621      	mov	r1, r4
 8007c08:	1a51      	subs	r1, r2, r1
 8007c0a:	6139      	str	r1, [r7, #16]
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	f04f 0300 	mov.w	r3, #0
 8007c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c20:	4659      	mov	r1, fp
 8007c22:	018b      	lsls	r3, r1, #6
 8007c24:	4651      	mov	r1, sl
 8007c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c2a:	4651      	mov	r1, sl
 8007c2c:	018a      	lsls	r2, r1, #6
 8007c2e:	4651      	mov	r1, sl
 8007c30:	ebb2 0801 	subs.w	r8, r2, r1
 8007c34:	4659      	mov	r1, fp
 8007c36:	eb63 0901 	sbc.w	r9, r3, r1
 8007c3a:	f04f 0200 	mov.w	r2, #0
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c4e:	4690      	mov	r8, r2
 8007c50:	4699      	mov	r9, r3
 8007c52:	4623      	mov	r3, r4
 8007c54:	eb18 0303 	adds.w	r3, r8, r3
 8007c58:	60bb      	str	r3, [r7, #8]
 8007c5a:	462b      	mov	r3, r5
 8007c5c:	eb49 0303 	adc.w	r3, r9, r3
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	f04f 0200 	mov.w	r2, #0
 8007c66:	f04f 0300 	mov.w	r3, #0
 8007c6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007c6e:	4629      	mov	r1, r5
 8007c70:	024b      	lsls	r3, r1, #9
 8007c72:	4621      	mov	r1, r4
 8007c74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007c78:	4621      	mov	r1, r4
 8007c7a:	024a      	lsls	r2, r1, #9
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c82:	2200      	movs	r2, #0
 8007c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c8c:	f7f8 fb10 	bl	80002b0 <__aeabi_uldivmod>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4613      	mov	r3, r2
 8007c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c98:	e058      	b.n	8007d4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c9a:	4b38      	ldr	r3, [pc, #224]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	099b      	lsrs	r3, r3, #6
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007caa:	623b      	str	r3, [r7, #32]
 8007cac:	2300      	movs	r3, #0
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	f04f 0000 	mov.w	r0, #0
 8007cbc:	f04f 0100 	mov.w	r1, #0
 8007cc0:	0159      	lsls	r1, r3, #5
 8007cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cc6:	0150      	lsls	r0, r2, #5
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4641      	mov	r1, r8
 8007cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007cd8:	f04f 0200 	mov.w	r2, #0
 8007cdc:	f04f 0300 	mov.w	r3, #0
 8007ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007cec:	ebb2 040a 	subs.w	r4, r2, sl
 8007cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	00eb      	lsls	r3, r5, #3
 8007cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d02:	00e2      	lsls	r2, r4, #3
 8007d04:	4614      	mov	r4, r2
 8007d06:	461d      	mov	r5, r3
 8007d08:	4643      	mov	r3, r8
 8007d0a:	18e3      	adds	r3, r4, r3
 8007d0c:	603b      	str	r3, [r7, #0]
 8007d0e:	464b      	mov	r3, r9
 8007d10:	eb45 0303 	adc.w	r3, r5, r3
 8007d14:	607b      	str	r3, [r7, #4]
 8007d16:	f04f 0200 	mov.w	r2, #0
 8007d1a:	f04f 0300 	mov.w	r3, #0
 8007d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d22:	4629      	mov	r1, r5
 8007d24:	028b      	lsls	r3, r1, #10
 8007d26:	4621      	mov	r1, r4
 8007d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	028a      	lsls	r2, r1, #10
 8007d30:	4610      	mov	r0, r2
 8007d32:	4619      	mov	r1, r3
 8007d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d36:	2200      	movs	r2, #0
 8007d38:	61bb      	str	r3, [r7, #24]
 8007d3a:	61fa      	str	r2, [r7, #28]
 8007d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d40:	f7f8 fab6 	bl	80002b0 <__aeabi_uldivmod>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4613      	mov	r3, r2
 8007d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d4c:	4b0b      	ldr	r3, [pc, #44]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	0c1b      	lsrs	r3, r3, #16
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	3301      	adds	r3, #1
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d66:	e002      	b.n	8007d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d68:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3750      	adds	r7, #80	; 0x50
 8007d74:	46bd      	mov	sp, r7
 8007d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40023800 	.word	0x40023800
 8007d80:	00f42400 	.word	0x00f42400
 8007d84:	007a1200 	.word	0x007a1200

08007d88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d8c:	4b03      	ldr	r3, [pc, #12]	; (8007d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	20000000 	.word	0x20000000

08007da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007da4:	f7ff fff0 	bl	8007d88 <HAL_RCC_GetHCLKFreq>
 8007da8:	4602      	mov	r2, r0
 8007daa:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	0a9b      	lsrs	r3, r3, #10
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	4903      	ldr	r1, [pc, #12]	; (8007dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007db6:	5ccb      	ldrb	r3, [r1, r3]
 8007db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40023800 	.word	0x40023800
 8007dc4:	08019e44 	.word	0x08019e44

08007dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007dcc:	f7ff ffdc 	bl	8007d88 <HAL_RCC_GetHCLKFreq>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	0b5b      	lsrs	r3, r3, #13
 8007dd8:	f003 0307 	and.w	r3, r3, #7
 8007ddc:	4903      	ldr	r1, [pc, #12]	; (8007dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dde:	5ccb      	ldrb	r3, [r1, r3]
 8007de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	40023800 	.word	0x40023800
 8007dec:	08019e44 	.word	0x08019e44

08007df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007e00:	2300      	movs	r3, #0
 8007e02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d012      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e18:	4b69      	ldr	r3, [pc, #420]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	4a68      	ldr	r2, [pc, #416]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007e22:	6093      	str	r3, [r2, #8]
 8007e24:	4b66      	ldr	r3, [pc, #408]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2c:	4964      	ldr	r1, [pc, #400]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d017      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e4a:	4b5d      	ldr	r3, [pc, #372]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e58:	4959      	ldr	r1, [pc, #356]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e68:	d101      	bne.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007e76:	2301      	movs	r3, #1
 8007e78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d017      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007e86:	4b4e      	ldr	r3, [pc, #312]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e94:	494a      	ldr	r1, [pc, #296]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ea4:	d101      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 808b 	beq.w	8007fea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ed4:	4b3a      	ldr	r3, [pc, #232]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	4a39      	ldr	r2, [pc, #228]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ede:	6413      	str	r3, [r2, #64]	; 0x40
 8007ee0:	4b37      	ldr	r3, [pc, #220]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ee8:	60bb      	str	r3, [r7, #8]
 8007eea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007eec:	4b35      	ldr	r3, [pc, #212]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a34      	ldr	r2, [pc, #208]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ef8:	f7fa fc1a 	bl	8002730 <HAL_GetTick>
 8007efc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007efe:	e008      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f00:	f7fa fc16 	bl	8002730 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b64      	cmp	r3, #100	; 0x64
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e357      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f12:	4b2c      	ldr	r3, [pc, #176]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0f0      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f1e:	4b28      	ldr	r3, [pc, #160]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d035      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d02e      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f3c:	4b20      	ldr	r3, [pc, #128]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f46:	4b1e      	ldr	r3, [pc, #120]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4a:	4a1d      	ldr	r2, [pc, #116]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f52:	4b1b      	ldr	r3, [pc, #108]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f56:	4a1a      	ldr	r2, [pc, #104]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007f5e:	4a18      	ldr	r2, [pc, #96]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007f64:	4b16      	ldr	r3, [pc, #88]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d114      	bne.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f70:	f7fa fbde 	bl	8002730 <HAL_GetTick>
 8007f74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f76:	e00a      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f78:	f7fa fbda 	bl	8002730 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e319      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0ee      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fa6:	d111      	bne.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007fa8:	4b05      	ldr	r3, [pc, #20]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007fb4:	4b04      	ldr	r3, [pc, #16]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007fb6:	400b      	ands	r3, r1
 8007fb8:	4901      	ldr	r1, [pc, #4]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	608b      	str	r3, [r1, #8]
 8007fbe:	e00b      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007fc0:	40023800 	.word	0x40023800
 8007fc4:	40007000 	.word	0x40007000
 8007fc8:	0ffffcff 	.word	0x0ffffcff
 8007fcc:	4baa      	ldr	r3, [pc, #680]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	4aa9      	ldr	r2, [pc, #676]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007fd6:	6093      	str	r3, [r2, #8]
 8007fd8:	4ba7      	ldr	r3, [pc, #668]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fe4:	49a4      	ldr	r1, [pc, #656]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0310 	and.w	r3, r3, #16
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d010      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ff6:	4ba0      	ldr	r3, [pc, #640]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ffc:	4a9e      	ldr	r2, [pc, #632]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008002:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008006:	4b9c      	ldr	r3, [pc, #624]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008008:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	4999      	ldr	r1, [pc, #612]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008012:	4313      	orrs	r3, r2
 8008014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008024:	4b94      	ldr	r3, [pc, #592]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800802a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008032:	4991      	ldr	r1, [pc, #580]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008034:	4313      	orrs	r3, r2
 8008036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008046:	4b8c      	ldr	r3, [pc, #560]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008054:	4988      	ldr	r1, [pc, #544]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008068:	4b83      	ldr	r3, [pc, #524]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800806a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008076:	4980      	ldr	r1, [pc, #512]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008078:	4313      	orrs	r3, r2
 800807a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800808a:	4b7b      	ldr	r3, [pc, #492]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800808c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008090:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008098:	4977      	ldr	r1, [pc, #476]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800809a:	4313      	orrs	r3, r2
 800809c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080ac:	4b72      	ldr	r3, [pc, #456]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b2:	f023 0203 	bic.w	r2, r3, #3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ba:	496f      	ldr	r1, [pc, #444]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80080ce:	4b6a      	ldr	r3, [pc, #424]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080d4:	f023 020c 	bic.w	r2, r3, #12
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080dc:	4966      	ldr	r1, [pc, #408]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80080f0:	4b61      	ldr	r3, [pc, #388]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080fe:	495e      	ldr	r1, [pc, #376]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008100:	4313      	orrs	r3, r2
 8008102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008112:	4b59      	ldr	r3, [pc, #356]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008118:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008120:	4955      	ldr	r1, [pc, #340]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008122:	4313      	orrs	r3, r2
 8008124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008134:	4b50      	ldr	r3, [pc, #320]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008142:	494d      	ldr	r1, [pc, #308]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008144:	4313      	orrs	r3, r2
 8008146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008156:	4b48      	ldr	r3, [pc, #288]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800815c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008164:	4944      	ldr	r1, [pc, #272]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008166:	4313      	orrs	r3, r2
 8008168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008178:	4b3f      	ldr	r3, [pc, #252]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008186:	493c      	ldr	r1, [pc, #240]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008188:	4313      	orrs	r3, r2
 800818a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800819a:	4b37      	ldr	r3, [pc, #220]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800819c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a8:	4933      	ldr	r1, [pc, #204]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081bc:	4b2e      	ldr	r3, [pc, #184]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081ca:	492b      	ldr	r1, [pc, #172]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d011      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80081de:	4b26      	ldr	r3, [pc, #152]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ec:	4922      	ldr	r1, [pc, #136]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081fc:	d101      	bne.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80081fe:	2301      	movs	r3, #1
 8008200:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800820e:	2301      	movs	r3, #1
 8008210:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800821e:	4b16      	ldr	r3, [pc, #88]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008224:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800822c:	4912      	ldr	r1, [pc, #72]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800822e:	4313      	orrs	r3, r2
 8008230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00b      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008240:	4b0d      	ldr	r3, [pc, #52]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008246:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008250:	4909      	ldr	r1, [pc, #36]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008252:	4313      	orrs	r3, r2
 8008254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d006      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 80d9 	beq.w	800841e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800826c:	4b02      	ldr	r3, [pc, #8]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a01      	ldr	r2, [pc, #4]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008272:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008276:	e001      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008278:	40023800 	.word	0x40023800
 800827c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800827e:	f7fa fa57 	bl	8002730 <HAL_GetTick>
 8008282:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008284:	e008      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008286:	f7fa fa53 	bl	8002730 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	2b64      	cmp	r3, #100	; 0x64
 8008292:	d901      	bls.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e194      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008298:	4b6c      	ldr	r3, [pc, #432]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1f0      	bne.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d021      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d11d      	bne.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80082b8:	4b64      	ldr	r3, [pc, #400]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	f003 0303 	and.w	r3, r3, #3
 80082c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80082c6:	4b61      	ldr	r3, [pc, #388]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082cc:	0e1b      	lsrs	r3, r3, #24
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	019a      	lsls	r2, r3, #6
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	041b      	lsls	r3, r3, #16
 80082de:	431a      	orrs	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	061b      	lsls	r3, r3, #24
 80082e4:	431a      	orrs	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	071b      	lsls	r3, r3, #28
 80082ec:	4957      	ldr	r1, [pc, #348]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d004      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008308:	d00a      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008312:	2b00      	cmp	r3, #0
 8008314:	d02e      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800831e:	d129      	bne.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008320:	4b4a      	ldr	r3, [pc, #296]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008326:	0c1b      	lsrs	r3, r3, #16
 8008328:	f003 0303 	and.w	r3, r3, #3
 800832c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800832e:	4b47      	ldr	r3, [pc, #284]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008334:	0f1b      	lsrs	r3, r3, #28
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	019a      	lsls	r2, r3, #6
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	041b      	lsls	r3, r3, #16
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	061b      	lsls	r3, r3, #24
 800834e:	431a      	orrs	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	071b      	lsls	r3, r3, #28
 8008354:	493d      	ldr	r1, [pc, #244]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008356:	4313      	orrs	r3, r2
 8008358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800835c:	4b3b      	ldr	r3, [pc, #236]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800835e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008362:	f023 021f 	bic.w	r2, r3, #31
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	3b01      	subs	r3, #1
 800836c:	4937      	ldr	r1, [pc, #220]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800836e:	4313      	orrs	r3, r2
 8008370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01d      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008380:	4b32      	ldr	r3, [pc, #200]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008386:	0e1b      	lsrs	r3, r3, #24
 8008388:	f003 030f 	and.w	r3, r3, #15
 800838c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800838e:	4b2f      	ldr	r3, [pc, #188]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008394:	0f1b      	lsrs	r3, r3, #28
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	019a      	lsls	r2, r3, #6
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	041b      	lsls	r3, r3, #16
 80083a8:	431a      	orrs	r2, r3
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	061b      	lsls	r3, r3, #24
 80083ae:	431a      	orrs	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	071b      	lsls	r3, r3, #28
 80083b4:	4925      	ldr	r1, [pc, #148]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d011      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	019a      	lsls	r2, r3, #6
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	041b      	lsls	r3, r3, #16
 80083d4:	431a      	orrs	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	061b      	lsls	r3, r3, #24
 80083dc:	431a      	orrs	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	071b      	lsls	r3, r3, #28
 80083e4:	4919      	ldr	r1, [pc, #100]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80083ec:	4b17      	ldr	r3, [pc, #92]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a16      	ldr	r2, [pc, #88]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083f8:	f7fa f99a 	bl	8002730 <HAL_GetTick>
 80083fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083fe:	e008      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008400:	f7fa f996 	bl	8002730 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2b64      	cmp	r3, #100	; 0x64
 800840c:	d901      	bls.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e0d7      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008412:	4b0e      	ldr	r3, [pc, #56]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d0f0      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b01      	cmp	r3, #1
 8008422:	f040 80cd 	bne.w	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008426:	4b09      	ldr	r3, [pc, #36]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a08      	ldr	r2, [pc, #32]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800842c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008432:	f7fa f97d 	bl	8002730 <HAL_GetTick>
 8008436:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008438:	e00a      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800843a:	f7fa f979 	bl	8002730 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	2b64      	cmp	r3, #100	; 0x64
 8008446:	d903      	bls.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e0ba      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800844c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008450:	4b5e      	ldr	r3, [pc, #376]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800845c:	d0ed      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d009      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800847a:	2b00      	cmp	r3, #0
 800847c:	d02e      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	d12a      	bne.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008486:	4b51      	ldr	r3, [pc, #324]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848c:	0c1b      	lsrs	r3, r3, #16
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008494:	4b4d      	ldr	r3, [pc, #308]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800849a:	0f1b      	lsrs	r3, r3, #28
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	019a      	lsls	r2, r3, #6
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	041b      	lsls	r3, r3, #16
 80084ac:	431a      	orrs	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	061b      	lsls	r3, r3, #24
 80084b4:	431a      	orrs	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	071b      	lsls	r3, r3, #28
 80084ba:	4944      	ldr	r1, [pc, #272]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80084c2:	4b42      	ldr	r3, [pc, #264]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d0:	3b01      	subs	r3, #1
 80084d2:	021b      	lsls	r3, r3, #8
 80084d4:	493d      	ldr	r1, [pc, #244]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d022      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084f0:	d11d      	bne.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80084f2:	4b36      	ldr	r3, [pc, #216]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f8:	0e1b      	lsrs	r3, r3, #24
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008500:	4b32      	ldr	r3, [pc, #200]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008506:	0f1b      	lsrs	r3, r3, #28
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	019a      	lsls	r2, r3, #6
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	041b      	lsls	r3, r3, #16
 800851a:	431a      	orrs	r2, r3
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	061b      	lsls	r3, r3, #24
 8008520:	431a      	orrs	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	071b      	lsls	r3, r3, #28
 8008526:	4929      	ldr	r1, [pc, #164]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008528:	4313      	orrs	r3, r2
 800852a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d028      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800853a:	4b24      	ldr	r3, [pc, #144]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800853c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008540:	0e1b      	lsrs	r3, r3, #24
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008548:	4b20      	ldr	r3, [pc, #128]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800854a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854e:	0c1b      	lsrs	r3, r3, #16
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	019a      	lsls	r2, r3, #6
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	041b      	lsls	r3, r3, #16
 8008560:	431a      	orrs	r2, r3
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	061b      	lsls	r3, r3, #24
 8008566:	431a      	orrs	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	071b      	lsls	r3, r3, #28
 800856e:	4917      	ldr	r1, [pc, #92]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008576:	4b15      	ldr	r3, [pc, #84]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800857c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	4911      	ldr	r1, [pc, #68]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008586:	4313      	orrs	r3, r2
 8008588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800858c:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a0e      	ldr	r2, [pc, #56]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008598:	f7fa f8ca 	bl	8002730 <HAL_GetTick>
 800859c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800859e:	e008      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80085a0:	f7fa f8c6 	bl	8002730 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	2b64      	cmp	r3, #100	; 0x64
 80085ac:	d901      	bls.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e007      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085b2:	4b06      	ldr	r3, [pc, #24]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085be:	d1ef      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3720      	adds	r7, #32
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	40023800 	.word	0x40023800

080085d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e09d      	b.n	800871e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d108      	bne.n	80085fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085f2:	d009      	beq.n	8008608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	61da      	str	r2, [r3, #28]
 80085fa:	e005      	b.n	8008608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d106      	bne.n	8008628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7f8 fd36 	bl	8001094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800863e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008648:	d902      	bls.n	8008650 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]
 800864e:	e002      	b.n	8008656 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008654:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800865e:	d007      	beq.n	8008670 <HAL_SPI_Init+0xa0>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008668:	d002      	beq.n	8008670 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008680:	431a      	orrs	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	431a      	orrs	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800869e:	431a      	orrs	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086a8:	431a      	orrs	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b2:	ea42 0103 	orr.w	r1, r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	0c1b      	lsrs	r3, r3, #16
 80086cc:	f003 0204 	and.w	r2, r3, #4
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	f003 0310 	and.w	r3, r3, #16
 80086d8:	431a      	orrs	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086de:	f003 0308 	and.w	r3, r3, #8
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80086ec:	ea42 0103 	orr.w	r1, r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	69da      	ldr	r2, [r3, #28]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800870c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008740:	2b01      	cmp	r3, #1
 8008742:	d101      	bne.n	8008748 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008744:	2302      	movs	r3, #2
 8008746:	e16c      	b.n	8008a22 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008756:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800875e:	7dbb      	ldrb	r3, [r7, #22]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d00d      	beq.n	8008780 <HAL_SPI_TransmitReceive_DMA+0x58>
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800876a:	d106      	bne.n	800877a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d102      	bne.n	800877a <HAL_SPI_TransmitReceive_DMA+0x52>
 8008774:	7dbb      	ldrb	r3, [r7, #22]
 8008776:	2b04      	cmp	r3, #4
 8008778:	d002      	beq.n	8008780 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800877a:	2302      	movs	r3, #2
 800877c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800877e:	e14b      	b.n	8008a18 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800878c:	887b      	ldrh	r3, [r7, #2]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d102      	bne.n	8008798 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008796:	e13f      	b.n	8008a18 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b04      	cmp	r3, #4
 80087a2:	d003      	beq.n	80087ac <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2205      	movs	r2, #5
 80087a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	887a      	ldrh	r2, [r7, #2]
 80087bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	887a      	ldrh	r2, [r7, #2]
 80087c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	887a      	ldrh	r2, [r7, #2]
 80087ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	887a      	ldrh	r2, [r7, #2]
 80087d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80087f4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087fe:	d908      	bls.n	8008812 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800880e:	605a      	str	r2, [r3, #4]
 8008810:	e06f      	b.n	80088f2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008820:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800882c:	d126      	bne.n	800887c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10f      	bne.n	800885a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008848:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800884e:	b29b      	uxth	r3, r3
 8008850:	085b      	lsrs	r3, r3, #1
 8008852:	b29a      	uxth	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008858:	e010      	b.n	800887c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008868:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800886e:	b29b      	uxth	r3, r3
 8008870:	085b      	lsrs	r3, r3, #1
 8008872:	b29b      	uxth	r3, r3
 8008874:	3301      	adds	r3, #1
 8008876:	b29a      	uxth	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008886:	d134      	bne.n	80088f2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008896:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800889e:	b29b      	uxth	r3, r3
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d111      	bne.n	80088cc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088b6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088be:	b29b      	uxth	r3, r3
 80088c0:	085b      	lsrs	r3, r3, #1
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80088ca:	e012      	b.n	80088f2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088da:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	085b      	lsrs	r3, r3, #1
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	3301      	adds	r3, #1
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d108      	bne.n	8008910 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008902:	4a4a      	ldr	r2, [pc, #296]	; (8008a2c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008904:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800890a:	4a49      	ldr	r2, [pc, #292]	; (8008a30 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800890c:	63da      	str	r2, [r3, #60]	; 0x3c
 800890e:	e007      	b.n	8008920 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008914:	4a47      	ldr	r2, [pc, #284]	; (8008a34 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8008916:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891c:	4a46      	ldr	r2, [pc, #280]	; (8008a38 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800891e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008924:	4a45      	ldr	r2, [pc, #276]	; (8008a3c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8008926:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800892c:	2200      	movs	r2, #0
 800892e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	330c      	adds	r3, #12
 800893a:	4619      	mov	r1, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008940:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008948:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800894a:	f7fa fd89 	bl	8003460 <HAL_DMA_Start_IT>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00c      	beq.n	800896e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008958:	f043 0210 	orr.w	r2, r3, #16
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800896c:	e054      	b.n	8008a18 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f042 0201 	orr.w	r2, r2, #1
 800897c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008982:	2200      	movs	r2, #0
 8008984:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898a:	2200      	movs	r2, #0
 800898c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	2200      	movs	r2, #0
 8008994:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899a:	2200      	movs	r2, #0
 800899c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	4619      	mov	r1, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	330c      	adds	r3, #12
 80089ae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80089b6:	f7fa fd53 	bl	8003460 <HAL_DMA_Start_IT>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00c      	beq.n	80089da <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089c4:	f043 0210 	orr.w	r2, r3, #16
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80089d8:	e01e      	b.n	8008a18 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e4:	2b40      	cmp	r3, #64	; 0x40
 80089e6:	d007      	beq.n	80089f8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089f6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0220 	orr.w	r2, r2, #32
 8008a06:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0202 	orr.w	r2, r2, #2
 8008a16:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	08008de1 	.word	0x08008de1
 8008a30:	08008ca5 	.word	0x08008ca5
 8008a34:	08008dfd 	.word	0x08008dfd
 8008a38:	08008d4f 	.word	0x08008d4f
 8008a3c:	08008e19 	.word	0x08008e19

08008a40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	099b      	lsrs	r3, r3, #6
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10f      	bne.n	8008a84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00a      	beq.n	8008a84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	099b      	lsrs	r3, r3, #6
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d004      	beq.n	8008a84 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	4798      	blx	r3
    return;
 8008a82:	e0d7      	b.n	8008c34 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	085b      	lsrs	r3, r3, #1
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00a      	beq.n	8008aa6 <HAL_SPI_IRQHandler+0x66>
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	09db      	lsrs	r3, r3, #7
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d004      	beq.n	8008aa6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	4798      	blx	r3
    return;
 8008aa4:	e0c6      	b.n	8008c34 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	095b      	lsrs	r3, r3, #5
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10c      	bne.n	8008acc <HAL_SPI_IRQHandler+0x8c>
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	099b      	lsrs	r3, r3, #6
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d106      	bne.n	8008acc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	0a1b      	lsrs	r3, r3, #8
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 80b4 	beq.w	8008c34 <HAL_SPI_IRQHandler+0x1f4>
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	095b      	lsrs	r3, r3, #5
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 80ad 	beq.w	8008c34 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	099b      	lsrs	r3, r3, #6
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d023      	beq.n	8008b2e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d011      	beq.n	8008b16 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008af6:	f043 0204 	orr.w	r2, r3, #4
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008afe:	2300      	movs	r3, #0
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	617b      	str	r3, [r7, #20]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	617b      	str	r3, [r7, #20]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	e00b      	b.n	8008b2e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b16:	2300      	movs	r3, #0
 8008b18:	613b      	str	r3, [r7, #16]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	613b      	str	r3, [r7, #16]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	613b      	str	r3, [r7, #16]
 8008b2a:	693b      	ldr	r3, [r7, #16]
        return;
 8008b2c:	e082      	b.n	8008c34 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d014      	beq.n	8008b64 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b3e:	f043 0201 	orr.w	r2, r3, #1
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008b46:	2300      	movs	r3, #0
 8008b48:	60fb      	str	r3, [r7, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	0a1b      	lsrs	r3, r3, #8
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00c      	beq.n	8008b8a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b74:	f043 0208 	orr.w	r2, r3, #8
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60bb      	str	r3, [r7, #8]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	60bb      	str	r3, [r7, #8]
 8008b88:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d04f      	beq.n	8008c32 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ba0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d104      	bne.n	8008bbe <HAL_SPI_IRQHandler+0x17e>
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d034      	beq.n	8008c28 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 0203 	bic.w	r2, r2, #3
 8008bcc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d011      	beq.n	8008bfa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bda:	4a18      	ldr	r2, [pc, #96]	; (8008c3c <HAL_SPI_IRQHandler+0x1fc>)
 8008bdc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fa fd0c 	bl	8003600 <HAL_DMA_Abort_IT>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d005      	beq.n	8008bfa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d016      	beq.n	8008c30 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c06:	4a0d      	ldr	r2, [pc, #52]	; (8008c3c <HAL_SPI_IRQHandler+0x1fc>)
 8008c08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fa fcf6 	bl	8003600 <HAL_DMA_Abort_IT>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008c26:	e003      	b.n	8008c30 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f831 	bl	8008c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008c2e:	e000      	b.n	8008c32 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008c30:	bf00      	nop
    return;
 8008c32:	bf00      	nop
  }
}
 8008c34:	3720      	adds	r7, #32
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	08008e59 	.word	0x08008e59

08008c40 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cb2:	f7f9 fd3d 	bl	8002730 <HAL_GetTick>
 8008cb6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc6:	d03c      	beq.n	8008d42 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 0220 	bic.w	r2, r2, #32
 8008cd6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10d      	bne.n	8008cfc <SPI_DMAReceiveCplt+0x58>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ce8:	d108      	bne.n	8008cfc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f022 0203 	bic.w	r2, r2, #3
 8008cf8:	605a      	str	r2, [r3, #4]
 8008cfa:	e007      	b.n	8008d0c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0201 	bic.w	r2, r2, #1
 8008d0a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	2164      	movs	r1, #100	; 0x64
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 f9d5 	bl	80090c0 <SPI_EndRxTransaction>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f7ff ffa8 	bl	8008c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008d40:	e002      	b.n	8008d48 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7ff ff7c 	bl	8008c40 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d5c:	f7f9 fce8 	bl	8002730 <HAL_GetTick>
 8008d60:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d70:	d030      	beq.n	8008dd4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0220 	bic.w	r2, r2, #32
 8008d80:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	2164      	movs	r1, #100	; 0x64
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 fa16 	bl	80091b8 <SPI_EndRxTxTransaction>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d005      	beq.n	8008d9e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d96:	f043 0220 	orr.w	r2, r3, #32
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0203 	bic.w	r2, r2, #3
 8008dac:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7ff ff5f 	bl	8008c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008dd2:	e002      	b.n	8008dda <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f7ff ff3d 	bl	8008c54 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dec:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f7ff ff3a 	bl	8008c68 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008df4:	bf00      	nop
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e08:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f7ff ff36 	bl	8008c7c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008e10:	bf00      	nop
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 0203 	bic.w	r2, r2, #3
 8008e34:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e3a:	f043 0210 	orr.w	r2, r3, #16
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f7ff ff20 	bl	8008c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008e50:	bf00      	nop
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff ff0b 	bl	8008c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b088      	sub	sp, #32
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	4613      	mov	r3, r2
 8008e92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e94:	f7f9 fc4c 	bl	8002730 <HAL_GetTick>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	1a9b      	subs	r3, r3, r2
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008ea4:	f7f9 fc44 	bl	8002730 <HAL_GetTick>
 8008ea8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008eaa:	4b39      	ldr	r3, [pc, #228]	; (8008f90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	015b      	lsls	r3, r3, #5
 8008eb0:	0d1b      	lsrs	r3, r3, #20
 8008eb2:	69fa      	ldr	r2, [r7, #28]
 8008eb4:	fb02 f303 	mul.w	r3, r2, r3
 8008eb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008eba:	e054      	b.n	8008f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec2:	d050      	beq.n	8008f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ec4:	f7f9 fc34 	bl	8002730 <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	69fa      	ldr	r2, [r7, #28]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d902      	bls.n	8008eda <SPI_WaitFlagStateUntilTimeout+0x56>
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d13d      	bne.n	8008f56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ee8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ef2:	d111      	bne.n	8008f18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008efc:	d004      	beq.n	8008f08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f06:	d107      	bne.n	8008f18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f20:	d10f      	bne.n	8008f42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e017      	b.n	8008f86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689a      	ldr	r2, [r3, #8]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	bf0c      	ite	eq
 8008f76:	2301      	moveq	r3, #1
 8008f78:	2300      	movne	r3, #0
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d19b      	bne.n	8008ebc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3720      	adds	r7, #32
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20000000 	.word	0x20000000

08008f94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b08a      	sub	sp, #40	; 0x28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008fa6:	f7f9 fbc3 	bl	8002730 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008fb6:	f7f9 fbbb 	bl	8002730 <HAL_GetTick>
 8008fba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	330c      	adds	r3, #12
 8008fc2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008fc4:	4b3d      	ldr	r3, [pc, #244]	; (80090bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	00da      	lsls	r2, r3, #3
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	0d1b      	lsrs	r3, r3, #20
 8008fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fd6:	fb02 f303 	mul.w	r3, r2, r3
 8008fda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008fdc:	e060      	b.n	80090a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008fe4:	d107      	bne.n	8008ff6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffc:	d050      	beq.n	80090a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ffe:	f7f9 fb97 	bl	8002730 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800900a:	429a      	cmp	r2, r3
 800900c:	d902      	bls.n	8009014 <SPI_WaitFifoStateUntilTimeout+0x80>
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	2b00      	cmp	r3, #0
 8009012:	d13d      	bne.n	8009090 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009022:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800902c:	d111      	bne.n	8009052 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009036:	d004      	beq.n	8009042 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009040:	d107      	bne.n	8009052 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009050:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800905a:	d10f      	bne.n	800907c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800907a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	e010      	b.n	80090b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009096:	2300      	movs	r3, #0
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	3b01      	subs	r3, #1
 800909e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689a      	ldr	r2, [r3, #8]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	4013      	ands	r3, r2
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d196      	bne.n	8008fde <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3728      	adds	r7, #40	; 0x28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000000 	.word	0x20000000

080090c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b088      	sub	sp, #32
 80090c4:	af02      	add	r7, sp, #8
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090d4:	d111      	bne.n	80090fa <SPI_EndRxTransaction+0x3a>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090de:	d004      	beq.n	80090ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090e8:	d107      	bne.n	80090fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009102:	d112      	bne.n	800912a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2200      	movs	r2, #0
 800910c:	2180      	movs	r1, #128	; 0x80
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f7ff feb8 	bl	8008e84 <SPI_WaitFlagStateUntilTimeout>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d021      	beq.n	800915e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800911e:	f043 0220 	orr.w	r2, r3, #32
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	e03d      	b.n	80091a6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800912a:	4b21      	ldr	r3, [pc, #132]	; (80091b0 <SPI_EndRxTransaction+0xf0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a21      	ldr	r2, [pc, #132]	; (80091b4 <SPI_EndRxTransaction+0xf4>)
 8009130:	fba2 2303 	umull	r2, r3, r2, r3
 8009134:	0d5b      	lsrs	r3, r3, #21
 8009136:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800913a:	fb02 f303 	mul.w	r3, r2, r3
 800913e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	3b01      	subs	r3, #1
 800914a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009156:	2b80      	cmp	r3, #128	; 0x80
 8009158:	d0f2      	beq.n	8009140 <SPI_EndRxTransaction+0x80>
 800915a:	e000      	b.n	800915e <SPI_EndRxTransaction+0x9e>
        break;
 800915c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009166:	d11d      	bne.n	80091a4 <SPI_EndRxTransaction+0xe4>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009170:	d004      	beq.n	800917c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800917a:	d113      	bne.n	80091a4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f7ff ff03 	bl	8008f94 <SPI_WaitFifoStateUntilTimeout>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d007      	beq.n	80091a4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009198:	f043 0220 	orr.w	r2, r3, #32
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e000      	b.n	80091a6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20000000 	.word	0x20000000
 80091b4:	165e9f81 	.word	0x165e9f81

080091b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af02      	add	r7, sp, #8
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f7ff fedf 	bl	8008f94 <SPI_WaitFifoStateUntilTimeout>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d007      	beq.n	80091ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e0:	f043 0220 	orr.w	r2, r3, #32
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e046      	b.n	800927a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80091ec:	4b25      	ldr	r3, [pc, #148]	; (8009284 <SPI_EndRxTxTransaction+0xcc>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a25      	ldr	r2, [pc, #148]	; (8009288 <SPI_EndRxTxTransaction+0xd0>)
 80091f2:	fba2 2303 	umull	r2, r3, r2, r3
 80091f6:	0d5b      	lsrs	r3, r3, #21
 80091f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091fc:	fb02 f303 	mul.w	r3, r2, r3
 8009200:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800920a:	d112      	bne.n	8009232 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2200      	movs	r2, #0
 8009214:	2180      	movs	r1, #128	; 0x80
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f7ff fe34 	bl	8008e84 <SPI_WaitFlagStateUntilTimeout>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d016      	beq.n	8009250 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009226:	f043 0220 	orr.w	r2, r3, #32
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e023      	b.n	800927a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	3b01      	subs	r3, #1
 800923c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009248:	2b80      	cmp	r3, #128	; 0x80
 800924a:	d0f2      	beq.n	8009232 <SPI_EndRxTxTransaction+0x7a>
 800924c:	e000      	b.n	8009250 <SPI_EndRxTxTransaction+0x98>
        break;
 800924e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2200      	movs	r2, #0
 8009258:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f7ff fe99 	bl	8008f94 <SPI_WaitFifoStateUntilTimeout>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d007      	beq.n	8009278 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800926c:	f043 0220 	orr.w	r2, r3, #32
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e000      	b.n	800927a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3718      	adds	r7, #24
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	20000000 	.word	0x20000000
 8009288:	165e9f81 	.word	0x165e9f81

0800928c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d122      	bne.n	80092e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	f003 0302 	and.w	r3, r3, #2
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d11b      	bne.n	80092e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f06f 0202 	mvn.w	r2, #2
 80092b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	f003 0303 	and.w	r3, r3, #3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f90f 	bl	80094f2 <HAL_TIM_IC_CaptureCallback>
 80092d4:	e005      	b.n	80092e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f901 	bl	80094de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f912 	bl	8009506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	f003 0304 	and.w	r3, r3, #4
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d122      	bne.n	800933c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f003 0304 	and.w	r3, r3, #4
 8009300:	2b04      	cmp	r3, #4
 8009302:	d11b      	bne.n	800933c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f06f 0204 	mvn.w	r2, #4
 800930c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2202      	movs	r2, #2
 8009312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f8e5 	bl	80094f2 <HAL_TIM_IC_CaptureCallback>
 8009328:	e005      	b.n	8009336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f8d7 	bl	80094de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f8e8 	bl	8009506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	f003 0308 	and.w	r3, r3, #8
 8009346:	2b08      	cmp	r3, #8
 8009348:	d122      	bne.n	8009390 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f003 0308 	and.w	r3, r3, #8
 8009354:	2b08      	cmp	r3, #8
 8009356:	d11b      	bne.n	8009390 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f06f 0208 	mvn.w	r2, #8
 8009360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2204      	movs	r2, #4
 8009366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	f003 0303 	and.w	r3, r3, #3
 8009372:	2b00      	cmp	r3, #0
 8009374:	d003      	beq.n	800937e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f8bb 	bl	80094f2 <HAL_TIM_IC_CaptureCallback>
 800937c:	e005      	b.n	800938a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f8ad 	bl	80094de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f8be 	bl	8009506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	f003 0310 	and.w	r3, r3, #16
 800939a:	2b10      	cmp	r3, #16
 800939c:	d122      	bne.n	80093e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f003 0310 	and.w	r3, r3, #16
 80093a8:	2b10      	cmp	r3, #16
 80093aa:	d11b      	bne.n	80093e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f06f 0210 	mvn.w	r2, #16
 80093b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2208      	movs	r2, #8
 80093ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f891 	bl	80094f2 <HAL_TIM_IC_CaptureCallback>
 80093d0:	e005      	b.n	80093de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f883 	bl	80094de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f894 	bl	8009506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d10e      	bne.n	8009410 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d107      	bne.n	8009410 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f06f 0201 	mvn.w	r2, #1
 8009408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f85d 	bl	80094ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941a:	2b80      	cmp	r3, #128	; 0x80
 800941c:	d10e      	bne.n	800943c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009428:	2b80      	cmp	r3, #128	; 0x80
 800942a:	d107      	bne.n	800943c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f883 	bl	8009542 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800944a:	d10e      	bne.n	800946a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009456:	2b80      	cmp	r3, #128	; 0x80
 8009458:	d107      	bne.n	800946a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f876 	bl	8009556 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009474:	2b40      	cmp	r3, #64	; 0x40
 8009476:	d10e      	bne.n	8009496 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009482:	2b40      	cmp	r3, #64	; 0x40
 8009484:	d107      	bne.n	8009496 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800948e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f842 	bl	800951a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b20      	cmp	r3, #32
 80094a2:	d10e      	bne.n	80094c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f003 0320 	and.w	r3, r3, #32
 80094ae:	2b20      	cmp	r3, #32
 80094b0:	d107      	bne.n	80094c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f06f 0220 	mvn.w	r2, #32
 80094ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f836 	bl	800952e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094c2:	bf00      	nop
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b083      	sub	sp, #12
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80094d2:	bf00      	nop
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b083      	sub	sp, #12
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094fa:	bf00      	nop
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800950e:	bf00      	nop
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800951a:	b480      	push	{r7}
 800951c:	b083      	sub	sp, #12
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800952e:	b480      	push	{r7}
 8009530:	b083      	sub	sp, #12
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800955e:	bf00      	nop
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e040      	b.n	80095fe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009580:	2b00      	cmp	r3, #0
 8009582:	d106      	bne.n	8009592 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7f8 f971 	bl	8001874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2224      	movs	r2, #36	; 0x24
 8009596:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 0201 	bic.w	r2, r2, #1
 80095a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fd43 	bl	800a034 <UART_SetConfig>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d101      	bne.n	80095b8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e022      	b.n	80095fe <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 ff9b 	bl	800a4fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689a      	ldr	r2, [r3, #8]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f042 0201 	orr.w	r2, r2, #1
 80095f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f001 f822 	bl	800a640 <UART_CheckIdleState>
 80095fc:	4603      	mov	r3, r0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b08a      	sub	sp, #40	; 0x28
 800960a:	af02      	add	r7, sp, #8
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	4613      	mov	r3, r2
 8009614:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800961a:	2b20      	cmp	r3, #32
 800961c:	d171      	bne.n	8009702 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <HAL_UART_Transmit+0x24>
 8009624:	88fb      	ldrh	r3, [r7, #6]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e06a      	b.n	8009704 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2221      	movs	r2, #33	; 0x21
 800963a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800963c:	f7f9 f878 	bl	8002730 <HAL_GetTick>
 8009640:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	88fa      	ldrh	r2, [r7, #6]
 8009646:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	88fa      	ldrh	r2, [r7, #6]
 800964e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800965a:	d108      	bne.n	800966e <HAL_UART_Transmit+0x68>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d104      	bne.n	800966e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009664:	2300      	movs	r3, #0
 8009666:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	61bb      	str	r3, [r7, #24]
 800966c:	e003      	b.n	8009676 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009672:	2300      	movs	r3, #0
 8009674:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009676:	e02c      	b.n	80096d2 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2200      	movs	r2, #0
 8009680:	2180      	movs	r1, #128	; 0x80
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f001 f813 	bl	800a6ae <UART_WaitOnFlagUntilTimeout>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e038      	b.n	8009704 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10b      	bne.n	80096b0 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	461a      	mov	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	3302      	adds	r3, #2
 80096ac:	61bb      	str	r3, [r7, #24]
 80096ae:	e007      	b.n	80096c0 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	781a      	ldrb	r2, [r3, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	3301      	adds	r3, #1
 80096be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	3b01      	subs	r3, #1
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80096d8:	b29b      	uxth	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1cc      	bne.n	8009678 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	9300      	str	r3, [sp, #0]
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2200      	movs	r2, #0
 80096e6:	2140      	movs	r1, #64	; 0x40
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 ffe0 	bl	800a6ae <UART_WaitOnFlagUntilTimeout>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e005      	b.n	8009704 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2220      	movs	r2, #32
 80096fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	e000      	b.n	8009704 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009702:	2302      	movs	r3, #2
  }
}
 8009704:	4618      	mov	r0, r3
 8009706:	3720      	adds	r7, #32
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08a      	sub	sp, #40	; 0x28
 8009710:	af02      	add	r7, sp, #8
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	4613      	mov	r3, r2
 800971a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009722:	2b20      	cmp	r3, #32
 8009724:	f040 80b1 	bne.w	800988a <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <HAL_UART_Receive+0x28>
 800972e:	88fb      	ldrh	r3, [r7, #6]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e0a9      	b.n	800988c <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2222      	movs	r2, #34	; 0x22
 8009744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800974e:	f7f8 ffef 	bl	8002730 <HAL_GetTick>
 8009752:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	88fa      	ldrh	r2, [r7, #6]
 8009758:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	88fa      	ldrh	r2, [r7, #6]
 8009760:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800976c:	d10e      	bne.n	800978c <HAL_UART_Receive+0x80>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d105      	bne.n	8009782 <HAL_UART_Receive+0x76>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f240 12ff 	movw	r2, #511	; 0x1ff
 800977c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009780:	e02d      	b.n	80097de <HAL_UART_Receive+0xd2>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	22ff      	movs	r2, #255	; 0xff
 8009786:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800978a:	e028      	b.n	80097de <HAL_UART_Receive+0xd2>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10d      	bne.n	80097b0 <HAL_UART_Receive+0xa4>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <HAL_UART_Receive+0x9a>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	22ff      	movs	r2, #255	; 0xff
 80097a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097a4:	e01b      	b.n	80097de <HAL_UART_Receive+0xd2>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	227f      	movs	r2, #127	; 0x7f
 80097aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097ae:	e016      	b.n	80097de <HAL_UART_Receive+0xd2>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097b8:	d10d      	bne.n	80097d6 <HAL_UART_Receive+0xca>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d104      	bne.n	80097cc <HAL_UART_Receive+0xc0>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	227f      	movs	r2, #127	; 0x7f
 80097c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097ca:	e008      	b.n	80097de <HAL_UART_Receive+0xd2>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	223f      	movs	r2, #63	; 0x3f
 80097d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097d4:	e003      	b.n	80097de <HAL_UART_Receive+0xd2>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097e4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ee:	d108      	bne.n	8009802 <HAL_UART_Receive+0xf6>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d104      	bne.n	8009802 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80097f8:	2300      	movs	r3, #0
 80097fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	61bb      	str	r3, [r7, #24]
 8009800:	e003      	b.n	800980a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009806:	2300      	movs	r3, #0
 8009808:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800980a:	e032      	b.n	8009872 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2200      	movs	r2, #0
 8009814:	2120      	movs	r1, #32
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 ff49 	bl	800a6ae <UART_WaitOnFlagUntilTimeout>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	e032      	b.n	800988c <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10c      	bne.n	8009846 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	b29a      	uxth	r2, r3
 8009834:	8a7b      	ldrh	r3, [r7, #18]
 8009836:	4013      	ands	r3, r2
 8009838:	b29a      	uxth	r2, r3
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	3302      	adds	r3, #2
 8009842:	61bb      	str	r3, [r7, #24]
 8009844:	e00c      	b.n	8009860 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	b2da      	uxtb	r2, r3
 800984e:	8a7b      	ldrh	r3, [r7, #18]
 8009850:	b2db      	uxtb	r3, r3
 8009852:	4013      	ands	r3, r2
 8009854:	b2da      	uxtb	r2, r3
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	3301      	adds	r3, #1
 800985e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009866:	b29b      	uxth	r3, r3
 8009868:	3b01      	subs	r3, #1
 800986a:	b29a      	uxth	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009878:	b29b      	uxth	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1c6      	bne.n	800980c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2220      	movs	r2, #32
 8009882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	e000      	b.n	800988c <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800988a:	2302      	movs	r3, #2
  }
}
 800988c:	4618      	mov	r0, r3
 800988e:	3720      	adds	r7, #32
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08a      	sub	sp, #40	; 0x28
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098a6:	2b20      	cmp	r3, #32
 80098a8:	d165      	bne.n	8009976 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <HAL_UART_Transmit_DMA+0x22>
 80098b0:	88fb      	ldrh	r3, [r7, #6]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d101      	bne.n	80098ba <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e05e      	b.n	8009978 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	88fa      	ldrh	r2, [r7, #6]
 80098c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	88fa      	ldrh	r2, [r7, #6]
 80098cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2221      	movs	r2, #33	; 0x21
 80098dc:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d027      	beq.n	8009936 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ea:	4a25      	ldr	r2, [pc, #148]	; (8009980 <HAL_UART_Transmit_DMA+0xec>)
 80098ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f2:	4a24      	ldr	r2, [pc, #144]	; (8009984 <HAL_UART_Transmit_DMA+0xf0>)
 80098f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fa:	4a23      	ldr	r2, [pc, #140]	; (8009988 <HAL_UART_Transmit_DMA+0xf4>)
 80098fc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009902:	2200      	movs	r2, #0
 8009904:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800990e:	4619      	mov	r1, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3328      	adds	r3, #40	; 0x28
 8009916:	461a      	mov	r2, r3
 8009918:	88fb      	ldrh	r3, [r7, #6]
 800991a:	f7f9 fda1 	bl	8003460 <HAL_DMA_Start_IT>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d008      	beq.n	8009936 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2210      	movs	r2, #16
 8009928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2220      	movs	r2, #32
 8009930:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e020      	b.n	8009978 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2240      	movs	r2, #64	; 0x40
 800993c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3308      	adds	r3, #8
 8009944:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	613b      	str	r3, [r7, #16]
   return(result);
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009954:	627b      	str	r3, [r7, #36]	; 0x24
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3308      	adds	r3, #8
 800995c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800995e:	623a      	str	r2, [r7, #32]
 8009960:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009962:	69f9      	ldr	r1, [r7, #28]
 8009964:	6a3a      	ldr	r2, [r7, #32]
 8009966:	e841 2300 	strex	r3, r2, [r1]
 800996a:	61bb      	str	r3, [r7, #24]
   return(result);
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1e5      	bne.n	800993e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	e000      	b.n	8009978 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8009976:	2302      	movs	r3, #2
  }
}
 8009978:	4618      	mov	r0, r3
 800997a:	3728      	adds	r7, #40	; 0x28
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	0800aa91 	.word	0x0800aa91
 8009984:	0800ab27 	.word	0x0800ab27
 8009988:	0800aca9 	.word	0x0800aca9

0800998c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b08a      	sub	sp, #40	; 0x28
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	4613      	mov	r3, r2
 8009998:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099a0:	2b20      	cmp	r3, #32
 80099a2:	d132      	bne.n	8009a0a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d002      	beq.n	80099b0 <HAL_UART_Receive_DMA+0x24>
 80099aa:	88fb      	ldrh	r3, [r7, #6]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d101      	bne.n	80099b4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e02b      	b.n	8009a0c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d018      	beq.n	80099fa <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	e853 3f00 	ldrex	r3, [r3]
 80099d4:	613b      	str	r3, [r7, #16]
   return(result);
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	623b      	str	r3, [r7, #32]
 80099e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	69f9      	ldr	r1, [r7, #28]
 80099ec:	6a3a      	ldr	r2, [r7, #32]
 80099ee:	e841 2300 	strex	r3, r2, [r1]
 80099f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1e6      	bne.n	80099c8 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80099fa:	88fb      	ldrh	r3, [r7, #6]
 80099fc:	461a      	mov	r2, r3
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 ff1b 	bl	800a83c <UART_Start_Receive_DMA>
 8009a06:	4603      	mov	r3, r0
 8009a08:	e000      	b.n	8009a0c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009a0a:	2302      	movs	r3, #2
  }
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3728      	adds	r7, #40	; 0x28
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b0ba      	sub	sp, #232	; 0xe8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	69db      	ldr	r3, [r3, #28]
 8009a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009a3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009a42:	4013      	ands	r3, r2
 8009a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d115      	bne.n	8009a7c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a54:	f003 0320 	and.w	r3, r3, #32
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00f      	beq.n	8009a7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a60:	f003 0320 	and.w	r3, r3, #32
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d009      	beq.n	8009a7c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8297 	beq.w	8009fa0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	4798      	blx	r3
      }
      return;
 8009a7a:	e291      	b.n	8009fa0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 8117 	beq.w	8009cb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d106      	bne.n	8009aa0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009a92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009a96:	4b85      	ldr	r3, [pc, #532]	; (8009cac <HAL_UART_IRQHandler+0x298>)
 8009a98:	4013      	ands	r3, r2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 810a 	beq.w	8009cb4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa4:	f003 0301 	and.w	r3, r3, #1
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d011      	beq.n	8009ad0 <HAL_UART_IRQHandler+0xbc>
 8009aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00b      	beq.n	8009ad0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2201      	movs	r2, #1
 8009abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ac6:	f043 0201 	orr.w	r2, r3, #1
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ad4:	f003 0302 	and.w	r3, r3, #2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d011      	beq.n	8009b00 <HAL_UART_IRQHandler+0xec>
 8009adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ae0:	f003 0301 	and.w	r3, r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2202      	movs	r2, #2
 8009aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009af6:	f043 0204 	orr.w	r2, r3, #4
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d011      	beq.n	8009b30 <HAL_UART_IRQHandler+0x11c>
 8009b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00b      	beq.n	8009b30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2204      	movs	r2, #4
 8009b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b26:	f043 0202 	orr.w	r2, r3, #2
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b34:	f003 0308 	and.w	r3, r3, #8
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d017      	beq.n	8009b6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b40:	f003 0320 	and.w	r3, r3, #32
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d105      	bne.n	8009b54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00b      	beq.n	8009b6c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2208      	movs	r2, #8
 8009b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b62:	f043 0208 	orr.w	r2, r3, #8
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d012      	beq.n	8009b9e <HAL_UART_IRQHandler+0x18a>
 8009b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00c      	beq.n	8009b9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b94:	f043 0220 	orr.w	r2, r3, #32
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 81fd 	beq.w	8009fa4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bae:	f003 0320 	and.w	r3, r3, #32
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00d      	beq.n	8009bd2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bba:	f003 0320 	and.w	r3, r3, #32
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d007      	beq.n	8009bd2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009be6:	2b40      	cmp	r3, #64	; 0x40
 8009be8:	d005      	beq.n	8009bf6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009bea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d04f      	beq.n	8009c96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fee6 	bl	800a9c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c06:	2b40      	cmp	r3, #64	; 0x40
 8009c08:	d141      	bne.n	8009c8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3308      	adds	r3, #8
 8009c10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3308      	adds	r3, #8
 8009c32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c46:	e841 2300 	strex	r3, r2, [r1]
 8009c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1d9      	bne.n	8009c0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d013      	beq.n	8009c86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c62:	4a13      	ldr	r2, [pc, #76]	; (8009cb0 <HAL_UART_IRQHandler+0x29c>)
 8009c64:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7f9 fcc8 	bl	8003600 <HAL_DMA_Abort_IT>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d017      	beq.n	8009ca6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009c80:	4610      	mov	r0, r2
 8009c82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c84:	e00f      	b.n	8009ca6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f9be 	bl	800a008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c8c:	e00b      	b.n	8009ca6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f9ba 	bl	800a008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c94:	e007      	b.n	8009ca6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f9b6 	bl	800a008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009ca4:	e17e      	b.n	8009fa4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca6:	bf00      	nop
    return;
 8009ca8:	e17c      	b.n	8009fa4 <HAL_UART_IRQHandler+0x590>
 8009caa:	bf00      	nop
 8009cac:	04000120 	.word	0x04000120
 8009cb0:	0800ad27 	.word	0x0800ad27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	f040 814c 	bne.w	8009f56 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cc2:	f003 0310 	and.w	r3, r3, #16
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 8145 	beq.w	8009f56 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cd0:	f003 0310 	and.w	r3, r3, #16
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 813e 	beq.w	8009f56 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2210      	movs	r2, #16
 8009ce0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cec:	2b40      	cmp	r3, #64	; 0x40
 8009cee:	f040 80b6 	bne.w	8009e5e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009cfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 8150 	beq.w	8009fa8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d12:	429a      	cmp	r2, r3
 8009d14:	f080 8148 	bcs.w	8009fa8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d26:	69db      	ldr	r3, [r3, #28]
 8009d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d2c:	f000 8086 	beq.w	8009e3c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	461a      	mov	r2, r3
 8009d56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1da      	bne.n	8009d30 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	3308      	adds	r3, #8
 8009d80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d84:	e853 3f00 	ldrex	r3, [r3]
 8009d88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d8c:	f023 0301 	bic.w	r3, r3, #1
 8009d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3308      	adds	r3, #8
 8009d9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009da2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009da6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e1      	bne.n	8009d7a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3308      	adds	r3, #8
 8009dbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009dda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009ddc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009de0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009de2:	e841 2300 	strex	r3, r2, [r1]
 8009de6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1e3      	bne.n	8009db6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2220      	movs	r2, #32
 8009df2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e04:	e853 3f00 	ldrex	r3, [r3]
 8009e08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e0c:	f023 0310 	bic.w	r3, r3, #16
 8009e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e26:	e841 2300 	strex	r3, r2, [r1]
 8009e2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e4      	bne.n	8009dfc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7f9 fb72 	bl	8003520 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f8e0 	bl	800a01c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e5c:	e0a4      	b.n	8009fa8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 8096 	beq.w	8009fac <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009e80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 8091 	beq.w	8009fac <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e92:	e853 3f00 	ldrex	r3, [r3]
 8009e96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009eac:	647b      	str	r3, [r7, #68]	; 0x44
 8009eae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009eb4:	e841 2300 	strex	r3, r2, [r1]
 8009eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1e4      	bne.n	8009e8a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	e853 3f00 	ldrex	r3, [r3]
 8009ece:	623b      	str	r3, [r7, #32]
   return(result);
 8009ed0:	6a3b      	ldr	r3, [r7, #32]
 8009ed2:	f023 0301 	bic.w	r3, r3, #1
 8009ed6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3308      	adds	r3, #8
 8009ee0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ee4:	633a      	str	r2, [r7, #48]	; 0x30
 8009ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eec:	e841 2300 	strex	r3, r2, [r1]
 8009ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e3      	bne.n	8009ec0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	e853 3f00 	ldrex	r3, [r3]
 8009f18:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f023 0310 	bic.w	r3, r3, #16
 8009f20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f2e:	61fb      	str	r3, [r7, #28]
 8009f30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f32:	69b9      	ldr	r1, [r7, #24]
 8009f34:	69fa      	ldr	r2, [r7, #28]
 8009f36:	e841 2300 	strex	r3, r2, [r1]
 8009f3a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1e4      	bne.n	8009f0c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2202      	movs	r2, #2
 8009f46:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f864 	bl	800a01c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f54:	e02a      	b.n	8009fac <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00e      	beq.n	8009f80 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d008      	beq.n	8009f80 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d01c      	beq.n	8009fb0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	4798      	blx	r3
    }
    return;
 8009f7e:	e017      	b.n	8009fb0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d012      	beq.n	8009fb2 <HAL_UART_IRQHandler+0x59e>
 8009f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00c      	beq.n	8009fb2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 feda 	bl	800ad52 <UART_EndTransmit_IT>
    return;
 8009f9e:	e008      	b.n	8009fb2 <HAL_UART_IRQHandler+0x59e>
      return;
 8009fa0:	bf00      	nop
 8009fa2:	e006      	b.n	8009fb2 <HAL_UART_IRQHandler+0x59e>
    return;
 8009fa4:	bf00      	nop
 8009fa6:	e004      	b.n	8009fb2 <HAL_UART_IRQHandler+0x59e>
      return;
 8009fa8:	bf00      	nop
 8009faa:	e002      	b.n	8009fb2 <HAL_UART_IRQHandler+0x59e>
      return;
 8009fac:	bf00      	nop
 8009fae:	e000      	b.n	8009fb2 <HAL_UART_IRQHandler+0x59e>
    return;
 8009fb0:	bf00      	nop
  }

}
 8009fb2:	37e8      	adds	r7, #232	; 0xe8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b088      	sub	sp, #32
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a03c:	2300      	movs	r3, #0
 800a03e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	689a      	ldr	r2, [r3, #8]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	431a      	orrs	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	431a      	orrs	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	4313      	orrs	r3, r2
 800a056:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	4ba6      	ldr	r3, [pc, #664]	; (800a2f8 <UART_SetConfig+0x2c4>)
 800a060:	4013      	ands	r3, r2
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	6812      	ldr	r2, [r2, #0]
 800a066:	6979      	ldr	r1, [r7, #20]
 800a068:	430b      	orrs	r3, r1
 800a06a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68da      	ldr	r2, [r3, #12]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	430a      	orrs	r2, r1
 800a080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a1b      	ldr	r3, [r3, #32]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	4313      	orrs	r3, r2
 800a090:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a94      	ldr	r2, [pc, #592]	; (800a2fc <UART_SetConfig+0x2c8>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d120      	bne.n	800a0f2 <UART_SetConfig+0xbe>
 800a0b0:	4b93      	ldr	r3, [pc, #588]	; (800a300 <UART_SetConfig+0x2cc>)
 800a0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0b6:	f003 0303 	and.w	r3, r3, #3
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d816      	bhi.n	800a0ec <UART_SetConfig+0xb8>
 800a0be:	a201      	add	r2, pc, #4	; (adr r2, 800a0c4 <UART_SetConfig+0x90>)
 800a0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c4:	0800a0d5 	.word	0x0800a0d5
 800a0c8:	0800a0e1 	.word	0x0800a0e1
 800a0cc:	0800a0db 	.word	0x0800a0db
 800a0d0:	0800a0e7 	.word	0x0800a0e7
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	77fb      	strb	r3, [r7, #31]
 800a0d8:	e150      	b.n	800a37c <UART_SetConfig+0x348>
 800a0da:	2302      	movs	r3, #2
 800a0dc:	77fb      	strb	r3, [r7, #31]
 800a0de:	e14d      	b.n	800a37c <UART_SetConfig+0x348>
 800a0e0:	2304      	movs	r3, #4
 800a0e2:	77fb      	strb	r3, [r7, #31]
 800a0e4:	e14a      	b.n	800a37c <UART_SetConfig+0x348>
 800a0e6:	2308      	movs	r3, #8
 800a0e8:	77fb      	strb	r3, [r7, #31]
 800a0ea:	e147      	b.n	800a37c <UART_SetConfig+0x348>
 800a0ec:	2310      	movs	r3, #16
 800a0ee:	77fb      	strb	r3, [r7, #31]
 800a0f0:	e144      	b.n	800a37c <UART_SetConfig+0x348>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a83      	ldr	r2, [pc, #524]	; (800a304 <UART_SetConfig+0x2d0>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d132      	bne.n	800a162 <UART_SetConfig+0x12e>
 800a0fc:	4b80      	ldr	r3, [pc, #512]	; (800a300 <UART_SetConfig+0x2cc>)
 800a0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a102:	f003 030c 	and.w	r3, r3, #12
 800a106:	2b0c      	cmp	r3, #12
 800a108:	d828      	bhi.n	800a15c <UART_SetConfig+0x128>
 800a10a:	a201      	add	r2, pc, #4	; (adr r2, 800a110 <UART_SetConfig+0xdc>)
 800a10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a110:	0800a145 	.word	0x0800a145
 800a114:	0800a15d 	.word	0x0800a15d
 800a118:	0800a15d 	.word	0x0800a15d
 800a11c:	0800a15d 	.word	0x0800a15d
 800a120:	0800a151 	.word	0x0800a151
 800a124:	0800a15d 	.word	0x0800a15d
 800a128:	0800a15d 	.word	0x0800a15d
 800a12c:	0800a15d 	.word	0x0800a15d
 800a130:	0800a14b 	.word	0x0800a14b
 800a134:	0800a15d 	.word	0x0800a15d
 800a138:	0800a15d 	.word	0x0800a15d
 800a13c:	0800a15d 	.word	0x0800a15d
 800a140:	0800a157 	.word	0x0800a157
 800a144:	2300      	movs	r3, #0
 800a146:	77fb      	strb	r3, [r7, #31]
 800a148:	e118      	b.n	800a37c <UART_SetConfig+0x348>
 800a14a:	2302      	movs	r3, #2
 800a14c:	77fb      	strb	r3, [r7, #31]
 800a14e:	e115      	b.n	800a37c <UART_SetConfig+0x348>
 800a150:	2304      	movs	r3, #4
 800a152:	77fb      	strb	r3, [r7, #31]
 800a154:	e112      	b.n	800a37c <UART_SetConfig+0x348>
 800a156:	2308      	movs	r3, #8
 800a158:	77fb      	strb	r3, [r7, #31]
 800a15a:	e10f      	b.n	800a37c <UART_SetConfig+0x348>
 800a15c:	2310      	movs	r3, #16
 800a15e:	77fb      	strb	r3, [r7, #31]
 800a160:	e10c      	b.n	800a37c <UART_SetConfig+0x348>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a68      	ldr	r2, [pc, #416]	; (800a308 <UART_SetConfig+0x2d4>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d120      	bne.n	800a1ae <UART_SetConfig+0x17a>
 800a16c:	4b64      	ldr	r3, [pc, #400]	; (800a300 <UART_SetConfig+0x2cc>)
 800a16e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a172:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a176:	2b30      	cmp	r3, #48	; 0x30
 800a178:	d013      	beq.n	800a1a2 <UART_SetConfig+0x16e>
 800a17a:	2b30      	cmp	r3, #48	; 0x30
 800a17c:	d814      	bhi.n	800a1a8 <UART_SetConfig+0x174>
 800a17e:	2b20      	cmp	r3, #32
 800a180:	d009      	beq.n	800a196 <UART_SetConfig+0x162>
 800a182:	2b20      	cmp	r3, #32
 800a184:	d810      	bhi.n	800a1a8 <UART_SetConfig+0x174>
 800a186:	2b00      	cmp	r3, #0
 800a188:	d002      	beq.n	800a190 <UART_SetConfig+0x15c>
 800a18a:	2b10      	cmp	r3, #16
 800a18c:	d006      	beq.n	800a19c <UART_SetConfig+0x168>
 800a18e:	e00b      	b.n	800a1a8 <UART_SetConfig+0x174>
 800a190:	2300      	movs	r3, #0
 800a192:	77fb      	strb	r3, [r7, #31]
 800a194:	e0f2      	b.n	800a37c <UART_SetConfig+0x348>
 800a196:	2302      	movs	r3, #2
 800a198:	77fb      	strb	r3, [r7, #31]
 800a19a:	e0ef      	b.n	800a37c <UART_SetConfig+0x348>
 800a19c:	2304      	movs	r3, #4
 800a19e:	77fb      	strb	r3, [r7, #31]
 800a1a0:	e0ec      	b.n	800a37c <UART_SetConfig+0x348>
 800a1a2:	2308      	movs	r3, #8
 800a1a4:	77fb      	strb	r3, [r7, #31]
 800a1a6:	e0e9      	b.n	800a37c <UART_SetConfig+0x348>
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	77fb      	strb	r3, [r7, #31]
 800a1ac:	e0e6      	b.n	800a37c <UART_SetConfig+0x348>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a56      	ldr	r2, [pc, #344]	; (800a30c <UART_SetConfig+0x2d8>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d120      	bne.n	800a1fa <UART_SetConfig+0x1c6>
 800a1b8:	4b51      	ldr	r3, [pc, #324]	; (800a300 <UART_SetConfig+0x2cc>)
 800a1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a1c2:	2bc0      	cmp	r3, #192	; 0xc0
 800a1c4:	d013      	beq.n	800a1ee <UART_SetConfig+0x1ba>
 800a1c6:	2bc0      	cmp	r3, #192	; 0xc0
 800a1c8:	d814      	bhi.n	800a1f4 <UART_SetConfig+0x1c0>
 800a1ca:	2b80      	cmp	r3, #128	; 0x80
 800a1cc:	d009      	beq.n	800a1e2 <UART_SetConfig+0x1ae>
 800a1ce:	2b80      	cmp	r3, #128	; 0x80
 800a1d0:	d810      	bhi.n	800a1f4 <UART_SetConfig+0x1c0>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d002      	beq.n	800a1dc <UART_SetConfig+0x1a8>
 800a1d6:	2b40      	cmp	r3, #64	; 0x40
 800a1d8:	d006      	beq.n	800a1e8 <UART_SetConfig+0x1b4>
 800a1da:	e00b      	b.n	800a1f4 <UART_SetConfig+0x1c0>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	77fb      	strb	r3, [r7, #31]
 800a1e0:	e0cc      	b.n	800a37c <UART_SetConfig+0x348>
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	77fb      	strb	r3, [r7, #31]
 800a1e6:	e0c9      	b.n	800a37c <UART_SetConfig+0x348>
 800a1e8:	2304      	movs	r3, #4
 800a1ea:	77fb      	strb	r3, [r7, #31]
 800a1ec:	e0c6      	b.n	800a37c <UART_SetConfig+0x348>
 800a1ee:	2308      	movs	r3, #8
 800a1f0:	77fb      	strb	r3, [r7, #31]
 800a1f2:	e0c3      	b.n	800a37c <UART_SetConfig+0x348>
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	77fb      	strb	r3, [r7, #31]
 800a1f8:	e0c0      	b.n	800a37c <UART_SetConfig+0x348>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a44      	ldr	r2, [pc, #272]	; (800a310 <UART_SetConfig+0x2dc>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d125      	bne.n	800a250 <UART_SetConfig+0x21c>
 800a204:	4b3e      	ldr	r3, [pc, #248]	; (800a300 <UART_SetConfig+0x2cc>)
 800a206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a20a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a20e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a212:	d017      	beq.n	800a244 <UART_SetConfig+0x210>
 800a214:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a218:	d817      	bhi.n	800a24a <UART_SetConfig+0x216>
 800a21a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a21e:	d00b      	beq.n	800a238 <UART_SetConfig+0x204>
 800a220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a224:	d811      	bhi.n	800a24a <UART_SetConfig+0x216>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d003      	beq.n	800a232 <UART_SetConfig+0x1fe>
 800a22a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a22e:	d006      	beq.n	800a23e <UART_SetConfig+0x20a>
 800a230:	e00b      	b.n	800a24a <UART_SetConfig+0x216>
 800a232:	2300      	movs	r3, #0
 800a234:	77fb      	strb	r3, [r7, #31]
 800a236:	e0a1      	b.n	800a37c <UART_SetConfig+0x348>
 800a238:	2302      	movs	r3, #2
 800a23a:	77fb      	strb	r3, [r7, #31]
 800a23c:	e09e      	b.n	800a37c <UART_SetConfig+0x348>
 800a23e:	2304      	movs	r3, #4
 800a240:	77fb      	strb	r3, [r7, #31]
 800a242:	e09b      	b.n	800a37c <UART_SetConfig+0x348>
 800a244:	2308      	movs	r3, #8
 800a246:	77fb      	strb	r3, [r7, #31]
 800a248:	e098      	b.n	800a37c <UART_SetConfig+0x348>
 800a24a:	2310      	movs	r3, #16
 800a24c:	77fb      	strb	r3, [r7, #31]
 800a24e:	e095      	b.n	800a37c <UART_SetConfig+0x348>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a2f      	ldr	r2, [pc, #188]	; (800a314 <UART_SetConfig+0x2e0>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d125      	bne.n	800a2a6 <UART_SetConfig+0x272>
 800a25a:	4b29      	ldr	r3, [pc, #164]	; (800a300 <UART_SetConfig+0x2cc>)
 800a25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a264:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a268:	d017      	beq.n	800a29a <UART_SetConfig+0x266>
 800a26a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a26e:	d817      	bhi.n	800a2a0 <UART_SetConfig+0x26c>
 800a270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a274:	d00b      	beq.n	800a28e <UART_SetConfig+0x25a>
 800a276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a27a:	d811      	bhi.n	800a2a0 <UART_SetConfig+0x26c>
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d003      	beq.n	800a288 <UART_SetConfig+0x254>
 800a280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a284:	d006      	beq.n	800a294 <UART_SetConfig+0x260>
 800a286:	e00b      	b.n	800a2a0 <UART_SetConfig+0x26c>
 800a288:	2301      	movs	r3, #1
 800a28a:	77fb      	strb	r3, [r7, #31]
 800a28c:	e076      	b.n	800a37c <UART_SetConfig+0x348>
 800a28e:	2302      	movs	r3, #2
 800a290:	77fb      	strb	r3, [r7, #31]
 800a292:	e073      	b.n	800a37c <UART_SetConfig+0x348>
 800a294:	2304      	movs	r3, #4
 800a296:	77fb      	strb	r3, [r7, #31]
 800a298:	e070      	b.n	800a37c <UART_SetConfig+0x348>
 800a29a:	2308      	movs	r3, #8
 800a29c:	77fb      	strb	r3, [r7, #31]
 800a29e:	e06d      	b.n	800a37c <UART_SetConfig+0x348>
 800a2a0:	2310      	movs	r3, #16
 800a2a2:	77fb      	strb	r3, [r7, #31]
 800a2a4:	e06a      	b.n	800a37c <UART_SetConfig+0x348>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a1b      	ldr	r2, [pc, #108]	; (800a318 <UART_SetConfig+0x2e4>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d138      	bne.n	800a322 <UART_SetConfig+0x2ee>
 800a2b0:	4b13      	ldr	r3, [pc, #76]	; (800a300 <UART_SetConfig+0x2cc>)
 800a2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a2ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2be:	d017      	beq.n	800a2f0 <UART_SetConfig+0x2bc>
 800a2c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2c4:	d82a      	bhi.n	800a31c <UART_SetConfig+0x2e8>
 800a2c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ca:	d00b      	beq.n	800a2e4 <UART_SetConfig+0x2b0>
 800a2cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2d0:	d824      	bhi.n	800a31c <UART_SetConfig+0x2e8>
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <UART_SetConfig+0x2aa>
 800a2d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2da:	d006      	beq.n	800a2ea <UART_SetConfig+0x2b6>
 800a2dc:	e01e      	b.n	800a31c <UART_SetConfig+0x2e8>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	77fb      	strb	r3, [r7, #31]
 800a2e2:	e04b      	b.n	800a37c <UART_SetConfig+0x348>
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	77fb      	strb	r3, [r7, #31]
 800a2e8:	e048      	b.n	800a37c <UART_SetConfig+0x348>
 800a2ea:	2304      	movs	r3, #4
 800a2ec:	77fb      	strb	r3, [r7, #31]
 800a2ee:	e045      	b.n	800a37c <UART_SetConfig+0x348>
 800a2f0:	2308      	movs	r3, #8
 800a2f2:	77fb      	strb	r3, [r7, #31]
 800a2f4:	e042      	b.n	800a37c <UART_SetConfig+0x348>
 800a2f6:	bf00      	nop
 800a2f8:	efff69f3 	.word	0xefff69f3
 800a2fc:	40011000 	.word	0x40011000
 800a300:	40023800 	.word	0x40023800
 800a304:	40004400 	.word	0x40004400
 800a308:	40004800 	.word	0x40004800
 800a30c:	40004c00 	.word	0x40004c00
 800a310:	40005000 	.word	0x40005000
 800a314:	40011400 	.word	0x40011400
 800a318:	40007800 	.word	0x40007800
 800a31c:	2310      	movs	r3, #16
 800a31e:	77fb      	strb	r3, [r7, #31]
 800a320:	e02c      	b.n	800a37c <UART_SetConfig+0x348>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a72      	ldr	r2, [pc, #456]	; (800a4f0 <UART_SetConfig+0x4bc>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d125      	bne.n	800a378 <UART_SetConfig+0x344>
 800a32c:	4b71      	ldr	r3, [pc, #452]	; (800a4f4 <UART_SetConfig+0x4c0>)
 800a32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a332:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a336:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a33a:	d017      	beq.n	800a36c <UART_SetConfig+0x338>
 800a33c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a340:	d817      	bhi.n	800a372 <UART_SetConfig+0x33e>
 800a342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a346:	d00b      	beq.n	800a360 <UART_SetConfig+0x32c>
 800a348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a34c:	d811      	bhi.n	800a372 <UART_SetConfig+0x33e>
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <UART_SetConfig+0x326>
 800a352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a356:	d006      	beq.n	800a366 <UART_SetConfig+0x332>
 800a358:	e00b      	b.n	800a372 <UART_SetConfig+0x33e>
 800a35a:	2300      	movs	r3, #0
 800a35c:	77fb      	strb	r3, [r7, #31]
 800a35e:	e00d      	b.n	800a37c <UART_SetConfig+0x348>
 800a360:	2302      	movs	r3, #2
 800a362:	77fb      	strb	r3, [r7, #31]
 800a364:	e00a      	b.n	800a37c <UART_SetConfig+0x348>
 800a366:	2304      	movs	r3, #4
 800a368:	77fb      	strb	r3, [r7, #31]
 800a36a:	e007      	b.n	800a37c <UART_SetConfig+0x348>
 800a36c:	2308      	movs	r3, #8
 800a36e:	77fb      	strb	r3, [r7, #31]
 800a370:	e004      	b.n	800a37c <UART_SetConfig+0x348>
 800a372:	2310      	movs	r3, #16
 800a374:	77fb      	strb	r3, [r7, #31]
 800a376:	e001      	b.n	800a37c <UART_SetConfig+0x348>
 800a378:	2310      	movs	r3, #16
 800a37a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	69db      	ldr	r3, [r3, #28]
 800a380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a384:	d15b      	bne.n	800a43e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a386:	7ffb      	ldrb	r3, [r7, #31]
 800a388:	2b08      	cmp	r3, #8
 800a38a:	d828      	bhi.n	800a3de <UART_SetConfig+0x3aa>
 800a38c:	a201      	add	r2, pc, #4	; (adr r2, 800a394 <UART_SetConfig+0x360>)
 800a38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a392:	bf00      	nop
 800a394:	0800a3b9 	.word	0x0800a3b9
 800a398:	0800a3c1 	.word	0x0800a3c1
 800a39c:	0800a3c9 	.word	0x0800a3c9
 800a3a0:	0800a3df 	.word	0x0800a3df
 800a3a4:	0800a3cf 	.word	0x0800a3cf
 800a3a8:	0800a3df 	.word	0x0800a3df
 800a3ac:	0800a3df 	.word	0x0800a3df
 800a3b0:	0800a3df 	.word	0x0800a3df
 800a3b4:	0800a3d7 	.word	0x0800a3d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3b8:	f7fd fcf2 	bl	8007da0 <HAL_RCC_GetPCLK1Freq>
 800a3bc:	61b8      	str	r0, [r7, #24]
        break;
 800a3be:	e013      	b.n	800a3e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3c0:	f7fd fd02 	bl	8007dc8 <HAL_RCC_GetPCLK2Freq>
 800a3c4:	61b8      	str	r0, [r7, #24]
        break;
 800a3c6:	e00f      	b.n	800a3e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3c8:	4b4b      	ldr	r3, [pc, #300]	; (800a4f8 <UART_SetConfig+0x4c4>)
 800a3ca:	61bb      	str	r3, [r7, #24]
        break;
 800a3cc:	e00c      	b.n	800a3e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ce:	f7fd fbd5 	bl	8007b7c <HAL_RCC_GetSysClockFreq>
 800a3d2:	61b8      	str	r0, [r7, #24]
        break;
 800a3d4:	e008      	b.n	800a3e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3da:	61bb      	str	r3, [r7, #24]
        break;
 800a3dc:	e004      	b.n	800a3e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	77bb      	strb	r3, [r7, #30]
        break;
 800a3e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d074      	beq.n	800a4d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	005a      	lsls	r2, r3, #1
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	085b      	lsrs	r3, r3, #1
 800a3f8:	441a      	add	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a402:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2b0f      	cmp	r3, #15
 800a408:	d916      	bls.n	800a438 <UART_SetConfig+0x404>
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a410:	d212      	bcs.n	800a438 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	b29b      	uxth	r3, r3
 800a416:	f023 030f 	bic.w	r3, r3, #15
 800a41a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	085b      	lsrs	r3, r3, #1
 800a420:	b29b      	uxth	r3, r3
 800a422:	f003 0307 	and.w	r3, r3, #7
 800a426:	b29a      	uxth	r2, r3
 800a428:	89fb      	ldrh	r3, [r7, #14]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	89fa      	ldrh	r2, [r7, #14]
 800a434:	60da      	str	r2, [r3, #12]
 800a436:	e04f      	b.n	800a4d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	77bb      	strb	r3, [r7, #30]
 800a43c:	e04c      	b.n	800a4d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a43e:	7ffb      	ldrb	r3, [r7, #31]
 800a440:	2b08      	cmp	r3, #8
 800a442:	d828      	bhi.n	800a496 <UART_SetConfig+0x462>
 800a444:	a201      	add	r2, pc, #4	; (adr r2, 800a44c <UART_SetConfig+0x418>)
 800a446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44a:	bf00      	nop
 800a44c:	0800a471 	.word	0x0800a471
 800a450:	0800a479 	.word	0x0800a479
 800a454:	0800a481 	.word	0x0800a481
 800a458:	0800a497 	.word	0x0800a497
 800a45c:	0800a487 	.word	0x0800a487
 800a460:	0800a497 	.word	0x0800a497
 800a464:	0800a497 	.word	0x0800a497
 800a468:	0800a497 	.word	0x0800a497
 800a46c:	0800a48f 	.word	0x0800a48f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a470:	f7fd fc96 	bl	8007da0 <HAL_RCC_GetPCLK1Freq>
 800a474:	61b8      	str	r0, [r7, #24]
        break;
 800a476:	e013      	b.n	800a4a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a478:	f7fd fca6 	bl	8007dc8 <HAL_RCC_GetPCLK2Freq>
 800a47c:	61b8      	str	r0, [r7, #24]
        break;
 800a47e:	e00f      	b.n	800a4a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a480:	4b1d      	ldr	r3, [pc, #116]	; (800a4f8 <UART_SetConfig+0x4c4>)
 800a482:	61bb      	str	r3, [r7, #24]
        break;
 800a484:	e00c      	b.n	800a4a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a486:	f7fd fb79 	bl	8007b7c <HAL_RCC_GetSysClockFreq>
 800a48a:	61b8      	str	r0, [r7, #24]
        break;
 800a48c:	e008      	b.n	800a4a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a48e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a492:	61bb      	str	r3, [r7, #24]
        break;
 800a494:	e004      	b.n	800a4a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	77bb      	strb	r3, [r7, #30]
        break;
 800a49e:	bf00      	nop
    }

    if (pclk != 0U)
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d018      	beq.n	800a4d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	085a      	lsrs	r2, r3, #1
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	441a      	add	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	2b0f      	cmp	r3, #15
 800a4be:	d909      	bls.n	800a4d4 <UART_SetConfig+0x4a0>
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c6:	d205      	bcs.n	800a4d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	60da      	str	r2, [r3, #12]
 800a4d2:	e001      	b.n	800a4d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a4e4:	7fbb      	ldrb	r3, [r7, #30]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3720      	adds	r7, #32
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	40007c00 	.word	0x40007c00
 800a4f4:	40023800 	.word	0x40023800
 800a4f8:	00f42400 	.word	0x00f42400

0800a4fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a508:	f003 0301 	and.w	r3, r3, #1
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00a      	beq.n	800a526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00a      	beq.n	800a548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	430a      	orrs	r2, r1
 800a546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00a      	beq.n	800a56a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56e:	f003 0308 	and.w	r3, r3, #8
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00a      	beq.n	800a58c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	430a      	orrs	r2, r1
 800a58a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	f003 0310 	and.w	r3, r3, #16
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00a      	beq.n	800a5ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	f003 0320 	and.w	r3, r3, #32
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00a      	beq.n	800a5d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d01a      	beq.n	800a612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5fa:	d10a      	bne.n	800a612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	430a      	orrs	r2, r1
 800a610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00a      	beq.n	800a634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	430a      	orrs	r2, r1
 800a632:	605a      	str	r2, [r3, #4]
  }
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af02      	add	r7, sp, #8
 800a646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a650:	f7f8 f86e 	bl	8002730 <HAL_GetTick>
 800a654:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 0308 	and.w	r3, r3, #8
 800a660:	2b08      	cmp	r3, #8
 800a662:	d10e      	bne.n	800a682 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f81b 	bl	800a6ae <UART_WaitOnFlagUntilTimeout>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a67e:	2303      	movs	r3, #3
 800a680:	e011      	b.n	800a6a6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2220      	movs	r2, #32
 800a686:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2220      	movs	r2, #32
 800a68c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b09c      	sub	sp, #112	; 0x70
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	603b      	str	r3, [r7, #0]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6be:	e0a7      	b.n	800a810 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c6:	f000 80a3 	beq.w	800a810 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ca:	f7f8 f831 	bl	8002730 <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d302      	bcc.n	800a6e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a6da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d13f      	bne.n	800a760 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6e8:	e853 3f00 	ldrex	r3, [r3]
 800a6ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a6ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6f4:	667b      	str	r3, [r7, #100]	; 0x64
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a700:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a702:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a704:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a706:	e841 2300 	strex	r3, r2, [r1]
 800a70a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a70c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1e6      	bne.n	800a6e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3308      	adds	r3, #8
 800a718:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a71c:	e853 3f00 	ldrex	r3, [r3]
 800a720:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a724:	f023 0301 	bic.w	r3, r3, #1
 800a728:	663b      	str	r3, [r7, #96]	; 0x60
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	3308      	adds	r3, #8
 800a730:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a732:	64ba      	str	r2, [r7, #72]	; 0x48
 800a734:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a736:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e5      	bne.n	800a712 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2220      	movs	r2, #32
 800a74a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2220      	movs	r2, #32
 800a750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e068      	b.n	800a832 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 0304 	and.w	r3, r3, #4
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d050      	beq.n	800a810 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	69db      	ldr	r3, [r3, #28]
 800a774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a77c:	d148      	bne.n	800a810 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a786:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a790:	e853 3f00 	ldrex	r3, [r3]
 800a794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a798:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a79c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a7a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a7ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7ae:	e841 2300 	strex	r3, r2, [r1]
 800a7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1e6      	bne.n	800a788 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3308      	adds	r3, #8
 800a7c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	e853 3f00 	ldrex	r3, [r3]
 800a7c8:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	f023 0301 	bic.w	r3, r3, #1
 800a7d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7da:	623a      	str	r2, [r7, #32]
 800a7dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7de:	69f9      	ldr	r1, [r7, #28]
 800a7e0:	6a3a      	ldr	r2, [r7, #32]
 800a7e2:	e841 2300 	strex	r3, r2, [r1]
 800a7e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1e5      	bne.n	800a7ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2220      	movs	r2, #32
 800a7f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2220      	movs	r2, #32
 800a800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e010      	b.n	800a832 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	69da      	ldr	r2, [r3, #28]
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	4013      	ands	r3, r2
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	bf0c      	ite	eq
 800a820:	2301      	moveq	r3, #1
 800a822:	2300      	movne	r3, #0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	461a      	mov	r2, r3
 800a828:	79fb      	ldrb	r3, [r7, #7]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	f43f af48 	beq.w	800a6c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3770      	adds	r7, #112	; 0x70
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b096      	sub	sp, #88	; 0x58
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	4613      	mov	r3, r2
 800a848:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	88fa      	ldrh	r2, [r7, #6]
 800a854:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2222      	movs	r2, #34	; 0x22
 800a864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d028      	beq.n	800a8c2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a874:	4a3e      	ldr	r2, [pc, #248]	; (800a970 <UART_Start_Receive_DMA+0x134>)
 800a876:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a87c:	4a3d      	ldr	r2, [pc, #244]	; (800a974 <UART_Start_Receive_DMA+0x138>)
 800a87e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a884:	4a3c      	ldr	r2, [pc, #240]	; (800a978 <UART_Start_Receive_DMA+0x13c>)
 800a886:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a88c:	2200      	movs	r2, #0
 800a88e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3324      	adds	r3, #36	; 0x24
 800a89a:	4619      	mov	r1, r3
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	88fb      	ldrh	r3, [r7, #6]
 800a8a4:	f7f8 fddc 	bl	8003460 <HAL_DMA_Start_IT>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d009      	beq.n	800a8c2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2210      	movs	r2, #16
 800a8b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e051      	b.n	800a966 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d018      	beq.n	800a8fc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8d2:	e853 3f00 	ldrex	r3, [r3]
 800a8d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8de:	657b      	str	r3, [r7, #84]	; 0x54
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8ea:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8f0:	e841 2300 	strex	r3, r2, [r1]
 800a8f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a8f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1e6      	bne.n	800a8ca <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3308      	adds	r3, #8
 800a902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a906:	e853 3f00 	ldrex	r3, [r3]
 800a90a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	f043 0301 	orr.w	r3, r3, #1
 800a912:	653b      	str	r3, [r7, #80]	; 0x50
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3308      	adds	r3, #8
 800a91a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a91c:	637a      	str	r2, [r7, #52]	; 0x34
 800a91e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a920:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a924:	e841 2300 	strex	r3, r2, [r1]
 800a928:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1e5      	bne.n	800a8fc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3308      	adds	r3, #8
 800a936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	e853 3f00 	ldrex	r3, [r3]
 800a93e:	613b      	str	r3, [r7, #16]
   return(result);
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a946:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3308      	adds	r3, #8
 800a94e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a950:	623a      	str	r2, [r7, #32]
 800a952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a954:	69f9      	ldr	r1, [r7, #28]
 800a956:	6a3a      	ldr	r2, [r7, #32]
 800a958:	e841 2300 	strex	r3, r2, [r1]
 800a95c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1e5      	bne.n	800a930 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3758      	adds	r7, #88	; 0x58
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	0800ab43 	.word	0x0800ab43
 800a974:	0800ac6b 	.word	0x0800ac6b
 800a978:	0800aca9 	.word	0x0800aca9

0800a97c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b089      	sub	sp, #36	; 0x24
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	e853 3f00 	ldrex	r3, [r3]
 800a990:	60bb      	str	r3, [r7, #8]
   return(result);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a998:	61fb      	str	r3, [r7, #28]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	61bb      	str	r3, [r7, #24]
 800a9a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a6:	6979      	ldr	r1, [r7, #20]
 800a9a8:	69ba      	ldr	r2, [r7, #24]
 800a9aa:	e841 2300 	strex	r3, r2, [r1]
 800a9ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1e6      	bne.n	800a984 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a9bc:	bf00      	nop
 800a9be:	3724      	adds	r7, #36	; 0x24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b095      	sub	sp, #84	; 0x54
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d8:	e853 3f00 	ldrex	r3, [r3]
 800a9dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ee:	643b      	str	r3, [r7, #64]	; 0x40
 800a9f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9f6:	e841 2300 	strex	r3, r2, [r1]
 800a9fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1e6      	bne.n	800a9d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	3308      	adds	r3, #8
 800aa08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	e853 3f00 	ldrex	r3, [r3]
 800aa10:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	f023 0301 	bic.w	r3, r3, #1
 800aa18:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	3308      	adds	r3, #8
 800aa20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa22:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa2a:	e841 2300 	strex	r3, r2, [r1]
 800aa2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1e5      	bne.n	800aa02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d118      	bne.n	800aa70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	e853 3f00 	ldrex	r3, [r3]
 800aa4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f023 0310 	bic.w	r3, r3, #16
 800aa52:	647b      	str	r3, [r7, #68]	; 0x44
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa5c:	61bb      	str	r3, [r7, #24]
 800aa5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	6979      	ldr	r1, [r7, #20]
 800aa62:	69ba      	ldr	r2, [r7, #24]
 800aa64:	e841 2300 	strex	r3, r2, [r1]
 800aa68:	613b      	str	r3, [r7, #16]
   return(result);
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1e6      	bne.n	800aa3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2220      	movs	r2, #32
 800aa74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	669a      	str	r2, [r3, #104]	; 0x68
}
 800aa84:	bf00      	nop
 800aa86:	3754      	adds	r7, #84	; 0x54
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b090      	sub	sp, #64	; 0x40
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaa6:	d037      	beq.n	800ab18 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800aaa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3308      	adds	r3, #8
 800aab6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaba:	e853 3f00 	ldrex	r3, [r3]
 800aabe:	623b      	str	r3, [r7, #32]
   return(result);
 800aac0:	6a3b      	ldr	r3, [r7, #32]
 800aac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aac6:	63bb      	str	r3, [r7, #56]	; 0x38
 800aac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3308      	adds	r3, #8
 800aace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aad0:	633a      	str	r2, [r7, #48]	; 0x30
 800aad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aad8:	e841 2300 	strex	r3, r2, [r1]
 800aadc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1e5      	bne.n	800aab0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	e853 3f00 	ldrex	r3, [r3]
 800aaf0:	60fb      	str	r3, [r7, #12]
   return(result);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaf8:	637b      	str	r3, [r7, #52]	; 0x34
 800aafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab02:	61fb      	str	r3, [r7, #28]
 800ab04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	69b9      	ldr	r1, [r7, #24]
 800ab08:	69fa      	ldr	r2, [r7, #28]
 800ab0a:	e841 2300 	strex	r3, r2, [r1]
 800ab0e:	617b      	str	r3, [r7, #20]
   return(result);
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e6      	bne.n	800aae4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab16:	e002      	b.n	800ab1e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ab18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ab1a:	f7ff fa4d 	bl	8009fb8 <HAL_UART_TxCpltCallback>
}
 800ab1e:	bf00      	nop
 800ab20:	3740      	adds	r7, #64	; 0x40
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b084      	sub	sp, #16
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f7ff fa49 	bl	8009fcc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab3a:	bf00      	nop
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b09c      	sub	sp, #112	; 0x70
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	69db      	ldr	r3, [r3, #28]
 800ab54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab58:	d071      	beq.n	800ac3e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ab5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab6a:	e853 3f00 	ldrex	r3, [r3]
 800ab6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab76:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab80:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab88:	e841 2300 	strex	r3, r2, [r1]
 800ab8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1e6      	bne.n	800ab62 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3308      	adds	r3, #8
 800ab9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9e:	e853 3f00 	ldrex	r3, [r3]
 800aba2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba6:	f023 0301 	bic.w	r3, r3, #1
 800abaa:	667b      	str	r3, [r7, #100]	; 0x64
 800abac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3308      	adds	r3, #8
 800abb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800abb4:	647a      	str	r2, [r7, #68]	; 0x44
 800abb6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abbc:	e841 2300 	strex	r3, r2, [r1]
 800abc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1e5      	bne.n	800ab94 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3308      	adds	r3, #8
 800abce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	e853 3f00 	ldrex	r3, [r3]
 800abd6:	623b      	str	r3, [r7, #32]
   return(result);
 800abd8:	6a3b      	ldr	r3, [r7, #32]
 800abda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abde:	663b      	str	r3, [r7, #96]	; 0x60
 800abe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3308      	adds	r3, #8
 800abe6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abe8:	633a      	str	r2, [r7, #48]	; 0x30
 800abea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e5      	bne.n	800abc8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800abfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abfe:	2220      	movs	r2, #32
 800ac00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d118      	bne.n	800ac3e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	e853 3f00 	ldrex	r3, [r3]
 800ac18:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f023 0310 	bic.w	r3, r3, #16
 800ac20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac2a:	61fb      	str	r3, [r7, #28]
 800ac2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2e:	69b9      	ldr	r1, [r7, #24]
 800ac30:	69fa      	ldr	r2, [r7, #28]
 800ac32:	e841 2300 	strex	r3, r2, [r1]
 800ac36:	617b      	str	r3, [r7, #20]
   return(result);
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1e6      	bne.n	800ac0c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac40:	2200      	movs	r2, #0
 800ac42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d107      	bne.n	800ac5c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ac52:	4619      	mov	r1, r3
 800ac54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac56:	f7ff f9e1 	bl	800a01c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac5a:	e002      	b.n	800ac62 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ac5c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac5e:	f7ff f9bf 	bl	8009fe0 <HAL_UART_RxCpltCallback>
}
 800ac62:	bf00      	nop
 800ac64:	3770      	adds	r7, #112	; 0x70
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b084      	sub	sp, #16
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac76:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d109      	bne.n	800ac9a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ac8c:	085b      	lsrs	r3, r3, #1
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	4619      	mov	r1, r3
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f7ff f9c2 	bl	800a01c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac98:	e002      	b.n	800aca0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7ff f9aa 	bl	8009ff4 <HAL_UART_RxHalfCpltCallback>
}
 800aca0:	bf00      	nop
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acce:	2b80      	cmp	r3, #128	; 0x80
 800acd0:	d109      	bne.n	800ace6 <UART_DMAError+0x3e>
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2b21      	cmp	r3, #33	; 0x21
 800acd6:	d106      	bne.n	800ace6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	2200      	movs	r2, #0
 800acdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ace0:	6978      	ldr	r0, [r7, #20]
 800ace2:	f7ff fe4b 	bl	800a97c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acf0:	2b40      	cmp	r3, #64	; 0x40
 800acf2:	d109      	bne.n	800ad08 <UART_DMAError+0x60>
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2b22      	cmp	r3, #34	; 0x22
 800acf8:	d106      	bne.n	800ad08 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ad02:	6978      	ldr	r0, [r7, #20]
 800ad04:	f7ff fe60 	bl	800a9c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad0e:	f043 0210 	orr.w	r2, r3, #16
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad18:	6978      	ldr	r0, [r7, #20]
 800ad1a:	f7ff f975 	bl	800a008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad1e:	bf00      	nop
 800ad20:	3718      	adds	r7, #24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7ff f95f 	bl	800a008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b088      	sub	sp, #32
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad6e:	61fb      	str	r3, [r7, #28]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	61bb      	str	r3, [r7, #24]
 800ad7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6979      	ldr	r1, [r7, #20]
 800ad7e:	69ba      	ldr	r2, [r7, #24]
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	613b      	str	r3, [r7, #16]
   return(result);
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e6      	bne.n	800ad5a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2220      	movs	r2, #32
 800ad90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7ff f90d 	bl	8009fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad9e:	bf00      	nop
 800ada0:	3720      	adds	r7, #32
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
	...

0800ada8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ada8:	b084      	sub	sp, #16
 800adaa:	b580      	push	{r7, lr}
 800adac:	b084      	sub	sp, #16
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	f107 001c 	add.w	r0, r7, #28
 800adb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d120      	bne.n	800ae02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	68da      	ldr	r2, [r3, #12]
 800add0:	4b20      	ldr	r3, [pc, #128]	; (800ae54 <USB_CoreInit+0xac>)
 800add2:	4013      	ands	r3, r2
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ade4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d105      	bne.n	800adf6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 fa96 	bl	800b328 <USB_CoreReset>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73fb      	strb	r3, [r7, #15]
 800ae00:	e010      	b.n	800ae24 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fa8a 	bl	800b328 <USB_CoreReset>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800ae24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d10b      	bne.n	800ae42 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	f043 0206 	orr.w	r2, r3, #6
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	f043 0220 	orr.w	r2, r3, #32
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae4e:	b004      	add	sp, #16
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	ffbdffbf 	.word	0xffbdffbf

0800ae58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	f023 0201 	bic.w	r2, r3, #1
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	460b      	mov	r3, r1
 800ae84:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ae96:	78fb      	ldrb	r3, [r7, #3]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d115      	bne.n	800aec8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aea8:	2001      	movs	r0, #1
 800aeaa:	f7f7 fc4d 	bl	8002748 <HAL_Delay>
      ms++;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fa29 	bl	800b30c <USB_GetMode>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d01e      	beq.n	800aefe <USB_SetCurrentMode+0x84>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b31      	cmp	r3, #49	; 0x31
 800aec4:	d9f0      	bls.n	800aea8 <USB_SetCurrentMode+0x2e>
 800aec6:	e01a      	b.n	800aefe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aec8:	78fb      	ldrb	r3, [r7, #3]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d115      	bne.n	800aefa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aeda:	2001      	movs	r0, #1
 800aedc:	f7f7 fc34 	bl	8002748 <HAL_Delay>
      ms++;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	3301      	adds	r3, #1
 800aee4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fa10 	bl	800b30c <USB_GetMode>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d005      	beq.n	800aefe <USB_SetCurrentMode+0x84>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b31      	cmp	r3, #49	; 0x31
 800aef6:	d9f0      	bls.n	800aeda <USB_SetCurrentMode+0x60>
 800aef8:	e001      	b.n	800aefe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	e005      	b.n	800af0a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b32      	cmp	r3, #50	; 0x32
 800af02:	d101      	bne.n	800af08 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e000      	b.n	800af0a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af14:	b084      	sub	sp, #16
 800af16:	b580      	push	{r7, lr}
 800af18:	b086      	sub	sp, #24
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800af22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800af26:	2300      	movs	r3, #0
 800af28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800af2e:	2300      	movs	r3, #0
 800af30:	613b      	str	r3, [r7, #16]
 800af32:	e009      	b.n	800af48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	3340      	adds	r3, #64	; 0x40
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	2200      	movs	r2, #0
 800af40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	3301      	adds	r3, #1
 800af46:	613b      	str	r3, [r7, #16]
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	2b0e      	cmp	r3, #14
 800af4c:	d9f2      	bls.n	800af34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800af4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af50:	2b00      	cmp	r3, #0
 800af52:	d11c      	bne.n	800af8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af62:	f043 0302 	orr.w	r3, r3, #2
 800af66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	e005      	b.n	800af9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afa0:	461a      	mov	r2, r3
 800afa2:	2300      	movs	r3, #0
 800afa4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afac:	4619      	mov	r1, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb4:	461a      	mov	r2, r3
 800afb6:	680b      	ldr	r3, [r1, #0]
 800afb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800afba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d10c      	bne.n	800afda <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800afc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d104      	bne.n	800afd0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800afc6:	2100      	movs	r1, #0
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f965 	bl	800b298 <USB_SetDevSpeed>
 800afce:	e008      	b.n	800afe2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800afd0:	2101      	movs	r1, #1
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f960 	bl	800b298 <USB_SetDevSpeed>
 800afd8:	e003      	b.n	800afe2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800afda:	2103      	movs	r1, #3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f95b 	bl	800b298 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800afe2:	2110      	movs	r1, #16
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f8f3 	bl	800b1d0 <USB_FlushTxFifo>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f91f 	bl	800b238 <USB_FlushRxFifo>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b00a:	461a      	mov	r2, r3
 800b00c:	2300      	movs	r3, #0
 800b00e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b016:	461a      	mov	r2, r3
 800b018:	2300      	movs	r3, #0
 800b01a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b022:	461a      	mov	r2, r3
 800b024:	2300      	movs	r3, #0
 800b026:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b028:	2300      	movs	r3, #0
 800b02a:	613b      	str	r3, [r7, #16]
 800b02c:	e043      	b.n	800b0b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	015a      	lsls	r2, r3, #5
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	4413      	add	r3, r2
 800b036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b044:	d118      	bne.n	800b078 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10a      	bne.n	800b062 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	015a      	lsls	r2, r3, #5
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4413      	add	r3, r2
 800b054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b058:	461a      	mov	r2, r3
 800b05a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	e013      	b.n	800b08a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	015a      	lsls	r2, r3, #5
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	4413      	add	r3, r2
 800b06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b06e:	461a      	mov	r2, r3
 800b070:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	e008      	b.n	800b08a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	015a      	lsls	r2, r3, #5
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	4413      	add	r3, r2
 800b080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b084:	461a      	mov	r2, r3
 800b086:	2300      	movs	r3, #0
 800b088:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	015a      	lsls	r2, r3, #5
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	4413      	add	r3, r2
 800b092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b096:	461a      	mov	r2, r3
 800b098:	2300      	movs	r3, #0
 800b09a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	015a      	lsls	r2, r3, #5
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b0ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	613b      	str	r3, [r7, #16]
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d3b7      	bcc.n	800b02e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0be:	2300      	movs	r3, #0
 800b0c0:	613b      	str	r3, [r7, #16]
 800b0c2:	e043      	b.n	800b14c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	015a      	lsls	r2, r3, #5
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0da:	d118      	bne.n	800b10e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10a      	bne.n	800b0f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	015a      	lsls	r2, r3, #5
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b0f4:	6013      	str	r3, [r2, #0]
 800b0f6:	e013      	b.n	800b120 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	015a      	lsls	r2, r3, #5
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	4413      	add	r3, r2
 800b100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b104:	461a      	mov	r2, r3
 800b106:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	e008      	b.n	800b120 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	015a      	lsls	r2, r3, #5
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	4413      	add	r3, r2
 800b116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b11a:	461a      	mov	r2, r3
 800b11c:	2300      	movs	r3, #0
 800b11e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	4413      	add	r3, r2
 800b128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b12c:	461a      	mov	r2, r3
 800b12e:	2300      	movs	r3, #0
 800b130:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	015a      	lsls	r2, r3, #5
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	4413      	add	r3, r2
 800b13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b13e:	461a      	mov	r2, r3
 800b140:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b144:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	3301      	adds	r3, #1
 800b14a:	613b      	str	r3, [r7, #16]
 800b14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	429a      	cmp	r2, r3
 800b152:	d3b7      	bcc.n	800b0c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b166:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b174:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d105      	bne.n	800b188 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	f043 0210 	orr.w	r2, r3, #16
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	699a      	ldr	r2, [r3, #24]
 800b18c:	4b0e      	ldr	r3, [pc, #56]	; (800b1c8 <USB_DevInit+0x2b4>)
 800b18e:	4313      	orrs	r3, r2
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b196:	2b00      	cmp	r3, #0
 800b198:	d005      	beq.n	800b1a6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	f043 0208 	orr.w	r2, r3, #8
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b1a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d105      	bne.n	800b1b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	699a      	ldr	r2, [r3, #24]
 800b1b0:	4b06      	ldr	r3, [pc, #24]	; (800b1cc <USB_DevInit+0x2b8>)
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b1b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3718      	adds	r7, #24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b1c4:	b004      	add	sp, #16
 800b1c6:	4770      	bx	lr
 800b1c8:	803c3800 	.word	0x803c3800
 800b1cc:	40000004 	.word	0x40000004

0800b1d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	4a13      	ldr	r2, [pc, #76]	; (800b234 <USB_FlushTxFifo+0x64>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d901      	bls.n	800b1f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e01b      	b.n	800b228 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	daf2      	bge.n	800b1de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	019b      	lsls	r3, r3, #6
 800b200:	f043 0220 	orr.w	r2, r3, #32
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3301      	adds	r3, #1
 800b20c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	4a08      	ldr	r2, [pc, #32]	; (800b234 <USB_FlushTxFifo+0x64>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d901      	bls.n	800b21a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e006      	b.n	800b228 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	f003 0320 	and.w	r3, r3, #32
 800b222:	2b20      	cmp	r3, #32
 800b224:	d0f0      	beq.n	800b208 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr
 800b234:	00030d40 	.word	0x00030d40

0800b238 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	3301      	adds	r3, #1
 800b248:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	4a11      	ldr	r2, [pc, #68]	; (800b294 <USB_FlushRxFifo+0x5c>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d901      	bls.n	800b256 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b252:	2303      	movs	r3, #3
 800b254:	e018      	b.n	800b288 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	daf2      	bge.n	800b244 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b25e:	2300      	movs	r3, #0
 800b260:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2210      	movs	r2, #16
 800b266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3301      	adds	r3, #1
 800b26c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	4a08      	ldr	r2, [pc, #32]	; (800b294 <USB_FlushRxFifo+0x5c>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d901      	bls.n	800b27a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b276:	2303      	movs	r3, #3
 800b278:	e006      	b.n	800b288 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	f003 0310 	and.w	r3, r3, #16
 800b282:	2b10      	cmp	r3, #16
 800b284:	d0f0      	beq.n	800b268 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3714      	adds	r7, #20
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	00030d40 	.word	0x00030d40

0800b298 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	78fb      	ldrb	r3, [r7, #3]
 800b2b2:	68f9      	ldr	r1, [r7, #12]
 800b2b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b085      	sub	sp, #20
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b2e4:	f023 0303 	bic.w	r3, r3, #3
 800b2e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2f8:	f043 0302 	orr.w	r3, r3, #2
 800b2fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	f003 0301 	and.w	r3, r3, #1
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b330:	2300      	movs	r3, #0
 800b332:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	3301      	adds	r3, #1
 800b338:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	4a13      	ldr	r2, [pc, #76]	; (800b38c <USB_CoreReset+0x64>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d901      	bls.n	800b346 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b342:	2303      	movs	r3, #3
 800b344:	e01b      	b.n	800b37e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	daf2      	bge.n	800b334 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b34e:	2300      	movs	r3, #0
 800b350:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	f043 0201 	orr.w	r2, r3, #1
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3301      	adds	r3, #1
 800b362:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	4a09      	ldr	r2, [pc, #36]	; (800b38c <USB_CoreReset+0x64>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d901      	bls.n	800b370 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b36c:	2303      	movs	r3, #3
 800b36e:	e006      	b.n	800b37e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	f003 0301 	and.w	r3, r3, #1
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d0f0      	beq.n	800b35e <USB_CoreReset+0x36>

  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	00030d40 	.word	0x00030d40

0800b390 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b396:	4b8d      	ldr	r3, [pc, #564]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b398:	22c0      	movs	r2, #192	; 0xc0
 800b39a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b39c:	4b8b      	ldr	r3, [pc, #556]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b39e:	22a8      	movs	r2, #168	; 0xa8
 800b3a0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b3a2:	4b8a      	ldr	r3, [pc, #552]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 59;
 800b3a8:	4b88      	ldr	r3, [pc, #544]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b3aa:	223b      	movs	r2, #59	; 0x3b
 800b3ac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b3ae:	4b88      	ldr	r3, [pc, #544]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b3b0:	22ff      	movs	r2, #255	; 0xff
 800b3b2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b3b4:	4b86      	ldr	r3, [pc, #536]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b3b6:	22ff      	movs	r2, #255	; 0xff
 800b3b8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b3ba:	4b85      	ldr	r3, [pc, #532]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b3bc:	22ff      	movs	r2, #255	; 0xff
 800b3be:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b3c0:	4b83      	ldr	r3, [pc, #524]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b3c6:	4b83      	ldr	r3, [pc, #524]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b3c8:	22c0      	movs	r2, #192	; 0xc0
 800b3ca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b3cc:	4b81      	ldr	r3, [pc, #516]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b3ce:	22a8      	movs	r2, #168	; 0xa8
 800b3d0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b3d2:	4b80      	ldr	r3, [pc, #512]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 66;
 800b3d8:	4b7e      	ldr	r3, [pc, #504]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b3da:	2242      	movs	r2, #66	; 0x42
 800b3dc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800b3de:	f000 fd1d 	bl	800be1c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b3e2:	4b7a      	ldr	r3, [pc, #488]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	061a      	lsls	r2, r3, #24
 800b3e8:	4b78      	ldr	r3, [pc, #480]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b3ea:	785b      	ldrb	r3, [r3, #1]
 800b3ec:	041b      	lsls	r3, r3, #16
 800b3ee:	431a      	orrs	r2, r3
 800b3f0:	4b76      	ldr	r3, [pc, #472]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b3f2:	789b      	ldrb	r3, [r3, #2]
 800b3f4:	021b      	lsls	r3, r3, #8
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	4a74      	ldr	r2, [pc, #464]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b3fa:	78d2      	ldrb	r2, [r2, #3]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	061a      	lsls	r2, r3, #24
 800b400:	4b72      	ldr	r3, [pc, #456]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	0619      	lsls	r1, r3, #24
 800b406:	4b71      	ldr	r3, [pc, #452]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b408:	785b      	ldrb	r3, [r3, #1]
 800b40a:	041b      	lsls	r3, r3, #16
 800b40c:	4319      	orrs	r1, r3
 800b40e:	4b6f      	ldr	r3, [pc, #444]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b410:	789b      	ldrb	r3, [r3, #2]
 800b412:	021b      	lsls	r3, r3, #8
 800b414:	430b      	orrs	r3, r1
 800b416:	496d      	ldr	r1, [pc, #436]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b418:	78c9      	ldrb	r1, [r1, #3]
 800b41a:	430b      	orrs	r3, r1
 800b41c:	021b      	lsls	r3, r3, #8
 800b41e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b422:	431a      	orrs	r2, r3
 800b424:	4b69      	ldr	r3, [pc, #420]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	0619      	lsls	r1, r3, #24
 800b42a:	4b68      	ldr	r3, [pc, #416]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b42c:	785b      	ldrb	r3, [r3, #1]
 800b42e:	041b      	lsls	r3, r3, #16
 800b430:	4319      	orrs	r1, r3
 800b432:	4b66      	ldr	r3, [pc, #408]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b434:	789b      	ldrb	r3, [r3, #2]
 800b436:	021b      	lsls	r3, r3, #8
 800b438:	430b      	orrs	r3, r1
 800b43a:	4964      	ldr	r1, [pc, #400]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b43c:	78c9      	ldrb	r1, [r1, #3]
 800b43e:	430b      	orrs	r3, r1
 800b440:	0a1b      	lsrs	r3, r3, #8
 800b442:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b446:	431a      	orrs	r2, r3
 800b448:	4b60      	ldr	r3, [pc, #384]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	0619      	lsls	r1, r3, #24
 800b44e:	4b5f      	ldr	r3, [pc, #380]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b450:	785b      	ldrb	r3, [r3, #1]
 800b452:	041b      	lsls	r3, r3, #16
 800b454:	4319      	orrs	r1, r3
 800b456:	4b5d      	ldr	r3, [pc, #372]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b458:	789b      	ldrb	r3, [r3, #2]
 800b45a:	021b      	lsls	r3, r3, #8
 800b45c:	430b      	orrs	r3, r1
 800b45e:	495b      	ldr	r1, [pc, #364]	; (800b5cc <MX_LWIP_Init+0x23c>)
 800b460:	78c9      	ldrb	r1, [r1, #3]
 800b462:	430b      	orrs	r3, r1
 800b464:	0e1b      	lsrs	r3, r3, #24
 800b466:	4313      	orrs	r3, r2
 800b468:	4a5b      	ldr	r2, [pc, #364]	; (800b5d8 <MX_LWIP_Init+0x248>)
 800b46a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b46c:	4b58      	ldr	r3, [pc, #352]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	061a      	lsls	r2, r3, #24
 800b472:	4b57      	ldr	r3, [pc, #348]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b474:	785b      	ldrb	r3, [r3, #1]
 800b476:	041b      	lsls	r3, r3, #16
 800b478:	431a      	orrs	r2, r3
 800b47a:	4b55      	ldr	r3, [pc, #340]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b47c:	789b      	ldrb	r3, [r3, #2]
 800b47e:	021b      	lsls	r3, r3, #8
 800b480:	4313      	orrs	r3, r2
 800b482:	4a53      	ldr	r2, [pc, #332]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b484:	78d2      	ldrb	r2, [r2, #3]
 800b486:	4313      	orrs	r3, r2
 800b488:	061a      	lsls	r2, r3, #24
 800b48a:	4b51      	ldr	r3, [pc, #324]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	0619      	lsls	r1, r3, #24
 800b490:	4b4f      	ldr	r3, [pc, #316]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b492:	785b      	ldrb	r3, [r3, #1]
 800b494:	041b      	lsls	r3, r3, #16
 800b496:	4319      	orrs	r1, r3
 800b498:	4b4d      	ldr	r3, [pc, #308]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b49a:	789b      	ldrb	r3, [r3, #2]
 800b49c:	021b      	lsls	r3, r3, #8
 800b49e:	430b      	orrs	r3, r1
 800b4a0:	494b      	ldr	r1, [pc, #300]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b4a2:	78c9      	ldrb	r1, [r1, #3]
 800b4a4:	430b      	orrs	r3, r1
 800b4a6:	021b      	lsls	r3, r3, #8
 800b4a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	4b48      	ldr	r3, [pc, #288]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	0619      	lsls	r1, r3, #24
 800b4b4:	4b46      	ldr	r3, [pc, #280]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b4b6:	785b      	ldrb	r3, [r3, #1]
 800b4b8:	041b      	lsls	r3, r3, #16
 800b4ba:	4319      	orrs	r1, r3
 800b4bc:	4b44      	ldr	r3, [pc, #272]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b4be:	789b      	ldrb	r3, [r3, #2]
 800b4c0:	021b      	lsls	r3, r3, #8
 800b4c2:	430b      	orrs	r3, r1
 800b4c4:	4942      	ldr	r1, [pc, #264]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b4c6:	78c9      	ldrb	r1, [r1, #3]
 800b4c8:	430b      	orrs	r3, r1
 800b4ca:	0a1b      	lsrs	r3, r3, #8
 800b4cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b4d0:	431a      	orrs	r2, r3
 800b4d2:	4b3f      	ldr	r3, [pc, #252]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	0619      	lsls	r1, r3, #24
 800b4d8:	4b3d      	ldr	r3, [pc, #244]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b4da:	785b      	ldrb	r3, [r3, #1]
 800b4dc:	041b      	lsls	r3, r3, #16
 800b4de:	4319      	orrs	r1, r3
 800b4e0:	4b3b      	ldr	r3, [pc, #236]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b4e2:	789b      	ldrb	r3, [r3, #2]
 800b4e4:	021b      	lsls	r3, r3, #8
 800b4e6:	430b      	orrs	r3, r1
 800b4e8:	4939      	ldr	r1, [pc, #228]	; (800b5d0 <MX_LWIP_Init+0x240>)
 800b4ea:	78c9      	ldrb	r1, [r1, #3]
 800b4ec:	430b      	orrs	r3, r1
 800b4ee:	0e1b      	lsrs	r3, r3, #24
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	4a3a      	ldr	r2, [pc, #232]	; (800b5dc <MX_LWIP_Init+0x24c>)
 800b4f4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b4f6:	4b37      	ldr	r3, [pc, #220]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	061a      	lsls	r2, r3, #24
 800b4fc:	4b35      	ldr	r3, [pc, #212]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b4fe:	785b      	ldrb	r3, [r3, #1]
 800b500:	041b      	lsls	r3, r3, #16
 800b502:	431a      	orrs	r2, r3
 800b504:	4b33      	ldr	r3, [pc, #204]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b506:	789b      	ldrb	r3, [r3, #2]
 800b508:	021b      	lsls	r3, r3, #8
 800b50a:	4313      	orrs	r3, r2
 800b50c:	4a31      	ldr	r2, [pc, #196]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b50e:	78d2      	ldrb	r2, [r2, #3]
 800b510:	4313      	orrs	r3, r2
 800b512:	061a      	lsls	r2, r3, #24
 800b514:	4b2f      	ldr	r3, [pc, #188]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	0619      	lsls	r1, r3, #24
 800b51a:	4b2e      	ldr	r3, [pc, #184]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b51c:	785b      	ldrb	r3, [r3, #1]
 800b51e:	041b      	lsls	r3, r3, #16
 800b520:	4319      	orrs	r1, r3
 800b522:	4b2c      	ldr	r3, [pc, #176]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b524:	789b      	ldrb	r3, [r3, #2]
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	430b      	orrs	r3, r1
 800b52a:	492a      	ldr	r1, [pc, #168]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b52c:	78c9      	ldrb	r1, [r1, #3]
 800b52e:	430b      	orrs	r3, r1
 800b530:	021b      	lsls	r3, r3, #8
 800b532:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b536:	431a      	orrs	r2, r3
 800b538:	4b26      	ldr	r3, [pc, #152]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	0619      	lsls	r1, r3, #24
 800b53e:	4b25      	ldr	r3, [pc, #148]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b540:	785b      	ldrb	r3, [r3, #1]
 800b542:	041b      	lsls	r3, r3, #16
 800b544:	4319      	orrs	r1, r3
 800b546:	4b23      	ldr	r3, [pc, #140]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b548:	789b      	ldrb	r3, [r3, #2]
 800b54a:	021b      	lsls	r3, r3, #8
 800b54c:	430b      	orrs	r3, r1
 800b54e:	4921      	ldr	r1, [pc, #132]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b550:	78c9      	ldrb	r1, [r1, #3]
 800b552:	430b      	orrs	r3, r1
 800b554:	0a1b      	lsrs	r3, r3, #8
 800b556:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b55a:	431a      	orrs	r2, r3
 800b55c:	4b1d      	ldr	r3, [pc, #116]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	0619      	lsls	r1, r3, #24
 800b562:	4b1c      	ldr	r3, [pc, #112]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b564:	785b      	ldrb	r3, [r3, #1]
 800b566:	041b      	lsls	r3, r3, #16
 800b568:	4319      	orrs	r1, r3
 800b56a:	4b1a      	ldr	r3, [pc, #104]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b56c:	789b      	ldrb	r3, [r3, #2]
 800b56e:	021b      	lsls	r3, r3, #8
 800b570:	430b      	orrs	r3, r1
 800b572:	4918      	ldr	r1, [pc, #96]	; (800b5d4 <MX_LWIP_Init+0x244>)
 800b574:	78c9      	ldrb	r1, [r1, #3]
 800b576:	430b      	orrs	r3, r1
 800b578:	0e1b      	lsrs	r3, r3, #24
 800b57a:	4313      	orrs	r3, r2
 800b57c:	4a18      	ldr	r2, [pc, #96]	; (800b5e0 <MX_LWIP_Init+0x250>)
 800b57e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800b580:	4b18      	ldr	r3, [pc, #96]	; (800b5e4 <MX_LWIP_Init+0x254>)
 800b582:	9302      	str	r3, [sp, #8]
 800b584:	4b18      	ldr	r3, [pc, #96]	; (800b5e8 <MX_LWIP_Init+0x258>)
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	2300      	movs	r3, #0
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	4b14      	ldr	r3, [pc, #80]	; (800b5e0 <MX_LWIP_Init+0x250>)
 800b58e:	4a13      	ldr	r2, [pc, #76]	; (800b5dc <MX_LWIP_Init+0x24c>)
 800b590:	4911      	ldr	r1, [pc, #68]	; (800b5d8 <MX_LWIP_Init+0x248>)
 800b592:	4816      	ldr	r0, [pc, #88]	; (800b5ec <MX_LWIP_Init+0x25c>)
 800b594:	f001 f92e 	bl	800c7f4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b598:	4814      	ldr	r0, [pc, #80]	; (800b5ec <MX_LWIP_Init+0x25c>)
 800b59a:	f001 fadd 	bl	800cb58 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b59e:	4b13      	ldr	r3, [pc, #76]	; (800b5ec <MX_LWIP_Init+0x25c>)
 800b5a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5a4:	089b      	lsrs	r3, r3, #2
 800b5a6:	f003 0301 	and.w	r3, r3, #1
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b5b0:	480e      	ldr	r0, [pc, #56]	; (800b5ec <MX_LWIP_Init+0x25c>)
 800b5b2:	f001 fae1 	bl	800cb78 <netif_set_up>
 800b5b6:	e002      	b.n	800b5be <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b5b8:	480c      	ldr	r0, [pc, #48]	; (800b5ec <MX_LWIP_Init+0x25c>)
 800b5ba:	f001 fb49 	bl	800cc50 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b5be:	490c      	ldr	r1, [pc, #48]	; (800b5f0 <MX_LWIP_Init+0x260>)
 800b5c0:	480a      	ldr	r0, [pc, #40]	; (800b5ec <MX_LWIP_Init+0x25c>)
 800b5c2:	f001 fbdb 	bl	800cd7c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b5c6:	bf00      	nop
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	200016e0 	.word	0x200016e0
 800b5d0:	200016e4 	.word	0x200016e4
 800b5d4:	200016e8 	.word	0x200016e8
 800b5d8:	200016d4 	.word	0x200016d4
 800b5dc:	200016d8 	.word	0x200016d8
 800b5e0:	200016dc 	.word	0x200016dc
 800b5e4:	08015ef1 	.word	0x08015ef1
 800b5e8:	0800b909 	.word	0x0800b909
 800b5ec:	200016a0 	.word	0x200016a0
 800b5f0:	0800b5f5 	.word	0x0800b5f5

0800b5f4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <SCB_InvalidateDCache_by_Addr>:
{
 800b608:	b480      	push	{r7}
 800b60a:	b087      	sub	sp, #28
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800b61a:	2320      	movs	r3, #32
 800b61c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b61e:	f3bf 8f4f 	dsb	sy
}
 800b622:	bf00      	nop
    while (op_size > 0) {
 800b624:	e00b      	b.n	800b63e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800b626:	4a0d      	ldr	r2, [pc, #52]	; (800b65c <SCB_InvalidateDCache_by_Addr+0x54>)
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	4413      	add	r3, r2
 800b634:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2b00      	cmp	r3, #0
 800b642:	dcf0      	bgt.n	800b626 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800b644:	f3bf 8f4f 	dsb	sy
}
 800b648:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b64a:	f3bf 8f6f 	isb	sy
}
 800b64e:	bf00      	nop
}
 800b650:	bf00      	nop
 800b652:	371c      	adds	r7, #28
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	e000ed00 	.word	0xe000ed00

0800b660 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b66c:	4b40      	ldr	r3, [pc, #256]	; (800b770 <low_level_init+0x110>)
 800b66e:	4a41      	ldr	r2, [pc, #260]	; (800b774 <low_level_init+0x114>)
 800b670:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b672:	2300      	movs	r3, #0
 800b674:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b676:	2380      	movs	r3, #128	; 0x80
 800b678:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b67a:	23e1      	movs	r3, #225	; 0xe1
 800b67c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b67e:	2300      	movs	r3, #0
 800b680:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b682:	2300      	movs	r3, #0
 800b684:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b686:	2300      	movs	r3, #0
 800b688:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b68a:	4a39      	ldr	r2, [pc, #228]	; (800b770 <low_level_init+0x110>)
 800b68c:	f107 0308 	add.w	r3, r7, #8
 800b690:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b692:	4b37      	ldr	r3, [pc, #220]	; (800b770 <low_level_init+0x110>)
 800b694:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b698:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b69a:	4b35      	ldr	r3, [pc, #212]	; (800b770 <low_level_init+0x110>)
 800b69c:	4a36      	ldr	r2, [pc, #216]	; (800b778 <low_level_init+0x118>)
 800b69e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b6a0:	4b33      	ldr	r3, [pc, #204]	; (800b770 <low_level_init+0x110>)
 800b6a2:	4a36      	ldr	r2, [pc, #216]	; (800b77c <low_level_init+0x11c>)
 800b6a4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b6a6:	4b32      	ldr	r3, [pc, #200]	; (800b770 <low_level_init+0x110>)
 800b6a8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b6ac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b6ae:	4830      	ldr	r0, [pc, #192]	; (800b770 <low_level_init+0x110>)
 800b6b0:	f7f8 fa4c 	bl	8003b4c <HAL_ETH_Init>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b6b8:	2238      	movs	r2, #56	; 0x38
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	4830      	ldr	r0, [pc, #192]	; (800b780 <low_level_init+0x120>)
 800b6be:	f00a fd2f 	bl	8016120 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b6c2:	4b2f      	ldr	r3, [pc, #188]	; (800b780 <low_level_init+0x120>)
 800b6c4:	2221      	movs	r2, #33	; 0x21
 800b6c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b6c8:	4b2d      	ldr	r3, [pc, #180]	; (800b780 <low_level_init+0x120>)
 800b6ca:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800b6ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b6d0:	4b2b      	ldr	r3, [pc, #172]	; (800b780 <low_level_init+0x120>)
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b6d6:	482b      	ldr	r0, [pc, #172]	; (800b784 <low_level_init+0x124>)
 800b6d8:	f000 ff54 	bl	800c584 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2206      	movs	r2, #6
 800b6e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b6e4:	4b22      	ldr	r3, [pc, #136]	; (800b770 <low_level_init+0x110>)
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	781a      	ldrb	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b6f0:	4b1f      	ldr	r3, [pc, #124]	; (800b770 <low_level_init+0x110>)
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	785a      	ldrb	r2, [r3, #1]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b6fc:	4b1c      	ldr	r3, [pc, #112]	; (800b770 <low_level_init+0x110>)
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	789a      	ldrb	r2, [r3, #2]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b708:	4b19      	ldr	r3, [pc, #100]	; (800b770 <low_level_init+0x110>)
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	78da      	ldrb	r2, [r3, #3]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b714:	4b16      	ldr	r3, [pc, #88]	; (800b770 <low_level_init+0x110>)
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	791a      	ldrb	r2, [r3, #4]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b720:	4b13      	ldr	r3, [pc, #76]	; (800b770 <low_level_init+0x110>)
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	795a      	ldrb	r2, [r3, #5]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b732:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b73a:	f043 030a 	orr.w	r3, r3, #10
 800b73e:	b2da      	uxtb	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b746:	4910      	ldr	r1, [pc, #64]	; (800b788 <low_level_init+0x128>)
 800b748:	4810      	ldr	r0, [pc, #64]	; (800b78c <low_level_init+0x12c>)
 800b74a:	f7f6 fe3f 	bl	80023cc <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b74e:	480f      	ldr	r0, [pc, #60]	; (800b78c <low_level_init+0x12c>)
 800b750:	f7f6 fe6e 	bl	8002430 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b754:	7bfb      	ldrb	r3, [r7, #15]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d103      	bne.n	800b762 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fa32 	bl	800bbc4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b760:	e001      	b.n	800b766 <low_level_init+0x106>
    Error_Handler();
 800b762:	f7f5 fc19 	bl	8000f98 <Error_Handler>
}
 800b766:	bf00      	nop
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	20006078 	.word	0x20006078
 800b774:	40028000 	.word	0x40028000
 800b778:	20000130 	.word	0x20000130
 800b77c:	20000090 	.word	0x20000090
 800b780:	20006128 	.word	0x20006128
 800b784:	08019e54 	.word	0x08019e54
 800b788:	2000000c 	.word	0x2000000c
 800b78c:	20006160 	.word	0x20006160

0800b790 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b092      	sub	sp, #72	; 0x48
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b79a:	2300      	movs	r3, #0
 800b79c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b7a8:	f107 030c 	add.w	r3, r7, #12
 800b7ac:	2230      	movs	r2, #48	; 0x30
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f00a fcb5 	bl	8016120 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b7b6:	f107 030c 	add.w	r3, r7, #12
 800b7ba:	2230      	movs	r2, #48	; 0x30
 800b7bc:	2100      	movs	r1, #0
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f00a fcae 	bl	8016120 <memset>

  for(q = p; q != NULL; q = q->next)
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	643b      	str	r3, [r7, #64]	; 0x40
 800b7c8:	e045      	b.n	800b856 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b7ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	d902      	bls.n	800b7d6 <low_level_output+0x46>
      return ERR_IF;
 800b7d0:	f06f 030b 	mvn.w	r3, #11
 800b7d4:	e055      	b.n	800b882 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800b7d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7d8:	6859      	ldr	r1, [r3, #4]
 800b7da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7dc:	4613      	mov	r3, r2
 800b7de:	005b      	lsls	r3, r3, #1
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	3348      	adds	r3, #72	; 0x48
 800b7e6:	443b      	add	r3, r7
 800b7e8:	3b3c      	subs	r3, #60	; 0x3c
 800b7ea:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ee:	895b      	ldrh	r3, [r3, #10]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	005b      	lsls	r3, r3, #1
 800b7f8:	4413      	add	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	3348      	adds	r3, #72	; 0x48
 800b7fe:	443b      	add	r3, r7
 800b800:	3b38      	subs	r3, #56	; 0x38
 800b802:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b806:	2b00      	cmp	r3, #0
 800b808:	d011      	beq.n	800b82e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b80a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b80c:	1e5a      	subs	r2, r3, #1
 800b80e:	f107 000c 	add.w	r0, r7, #12
 800b812:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b814:	460b      	mov	r3, r1
 800b816:	005b      	lsls	r3, r3, #1
 800b818:	440b      	add	r3, r1
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	18c1      	adds	r1, r0, r3
 800b81e:	4613      	mov	r3, r2
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	4413      	add	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	3348      	adds	r3, #72	; 0x48
 800b828:	443b      	add	r3, r7
 800b82a:	3b34      	subs	r3, #52	; 0x34
 800b82c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b82e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d109      	bne.n	800b84a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b838:	4613      	mov	r3, r2
 800b83a:	005b      	lsls	r3, r3, #1
 800b83c:	4413      	add	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	3348      	adds	r3, #72	; 0x48
 800b842:	443b      	add	r3, r7
 800b844:	3b34      	subs	r3, #52	; 0x34
 800b846:	2200      	movs	r2, #0
 800b848:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b84c:	3301      	adds	r3, #1
 800b84e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	643b      	str	r3, [r7, #64]	; 0x40
 800b856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1b6      	bne.n	800b7ca <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	891b      	ldrh	r3, [r3, #8]
 800b860:	461a      	mov	r2, r3
 800b862:	4b0a      	ldr	r3, [pc, #40]	; (800b88c <low_level_output+0xfc>)
 800b864:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b866:	4a09      	ldr	r2, [pc, #36]	; (800b88c <low_level_output+0xfc>)
 800b868:	f107 030c 	add.w	r3, r7, #12
 800b86c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b86e:	4a07      	ldr	r2, [pc, #28]	; (800b88c <low_level_output+0xfc>)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b874:	2214      	movs	r2, #20
 800b876:	4905      	ldr	r1, [pc, #20]	; (800b88c <low_level_output+0xfc>)
 800b878:	4805      	ldr	r0, [pc, #20]	; (800b890 <low_level_output+0x100>)
 800b87a:	f7f8 fa9b 	bl	8003db4 <HAL_ETH_Transmit>

  return errval;
 800b87e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b882:	4618      	mov	r0, r3
 800b884:	3748      	adds	r7, #72	; 0x48
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	20006128 	.word	0x20006128
 800b890:	20006078 	.word	0x20006078

0800b894 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b89c:	2300      	movs	r3, #0
 800b89e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b8a0:	4b07      	ldr	r3, [pc, #28]	; (800b8c0 <low_level_input+0x2c>)
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d105      	bne.n	800b8b4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b8a8:	f107 030c 	add.w	r3, r7, #12
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4805      	ldr	r0, [pc, #20]	; (800b8c4 <low_level_input+0x30>)
 800b8b0:	f7f8 fb14 	bl	8003edc <HAL_ETH_ReadData>
  }

  return p;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	20006074 	.word	0x20006074
 800b8c4:	20006078 	.word	0x20006078

0800b8c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7ff ffdd 	bl	800b894 <low_level_input>
 800b8da:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00a      	beq.n	800b8f8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	6879      	ldr	r1, [r7, #4]
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	4798      	blx	r3
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f001 fdc2 	bl	800d47c <pbuf_free>
      }
    }
  } while(p!=NULL);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1ea      	bne.n	800b8d4 <ethernetif_input+0xc>
}
 800b8fe:	bf00      	nop
 800b900:	bf00      	nop
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d106      	bne.n	800b924 <ethernetif_init+0x1c>
 800b916:	4b0e      	ldr	r3, [pc, #56]	; (800b950 <ethernetif_init+0x48>)
 800b918:	f240 127b 	movw	r2, #379	; 0x17b
 800b91c:	490d      	ldr	r1, [pc, #52]	; (800b954 <ethernetif_init+0x4c>)
 800b91e:	480e      	ldr	r0, [pc, #56]	; (800b958 <ethernetif_init+0x50>)
 800b920:	f00a fc06 	bl	8016130 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2273      	movs	r2, #115	; 0x73
 800b928:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2274      	movs	r2, #116	; 0x74
 800b930:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a09      	ldr	r2, [pc, #36]	; (800b95c <ethernetif_init+0x54>)
 800b938:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a08      	ldr	r2, [pc, #32]	; (800b960 <ethernetif_init+0x58>)
 800b93e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7ff fe8d 	bl	800b660 <low_level_init>

  return ERR_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	08017454 	.word	0x08017454
 800b954:	08017470 	.word	0x08017470
 800b958:	08017480 	.word	0x08017480
 800b95c:	080143a9 	.word	0x080143a9
 800b960:	0800b791 	.word	0x0800b791

0800b964 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b970:	68f9      	ldr	r1, [r7, #12]
 800b972:	4807      	ldr	r0, [pc, #28]	; (800b990 <pbuf_free_custom+0x2c>)
 800b974:	f000 fee8 	bl	800c748 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b978:	4b06      	ldr	r3, [pc, #24]	; (800b994 <pbuf_free_custom+0x30>)
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d102      	bne.n	800b986 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b980:	4b04      	ldr	r3, [pc, #16]	; (800b994 <pbuf_free_custom+0x30>)
 800b982:	2200      	movs	r2, #0
 800b984:	701a      	strb	r2, [r3, #0]
  }
}
 800b986:	bf00      	nop
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	08019e54 	.word	0x08019e54
 800b994:	20006074 	.word	0x20006074

0800b998 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b99c:	f7f6 fec8 	bl	8002730 <HAL_GetTick>
 800b9a0:	4603      	mov	r3, r0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	bd80      	pop	{r7, pc}
	...

0800b9a8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08e      	sub	sp, #56	; 0x38
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	601a      	str	r2, [r3, #0]
 800b9b8:	605a      	str	r2, [r3, #4]
 800b9ba:	609a      	str	r2, [r3, #8]
 800b9bc:	60da      	str	r2, [r3, #12]
 800b9be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a52      	ldr	r2, [pc, #328]	; (800bb10 <HAL_ETH_MspInit+0x168>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	f040 809e 	bne.w	800bb08 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b9cc:	4b51      	ldr	r3, [pc, #324]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800b9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d0:	4a50      	ldr	r2, [pc, #320]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800b9d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b9d6:	6313      	str	r3, [r2, #48]	; 0x30
 800b9d8:	4b4e      	ldr	r3, [pc, #312]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800b9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9e0:	623b      	str	r3, [r7, #32]
 800b9e2:	6a3b      	ldr	r3, [r7, #32]
 800b9e4:	4b4b      	ldr	r3, [pc, #300]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800b9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e8:	4a4a      	ldr	r2, [pc, #296]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800b9ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b9ee:	6313      	str	r3, [r2, #48]	; 0x30
 800b9f0:	4b48      	ldr	r3, [pc, #288]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800b9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b9f8:	61fb      	str	r3, [r7, #28]
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	4b45      	ldr	r3, [pc, #276]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800b9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba00:	4a44      	ldr	r2, [pc, #272]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ba06:	6313      	str	r3, [r2, #48]	; 0x30
 800ba08:	4b42      	ldr	r3, [pc, #264]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba10:	61bb      	str	r3, [r7, #24]
 800ba12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba14:	4b3f      	ldr	r3, [pc, #252]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba18:	4a3e      	ldr	r2, [pc, #248]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba1a:	f043 0304 	orr.w	r3, r3, #4
 800ba1e:	6313      	str	r3, [r2, #48]	; 0x30
 800ba20:	4b3c      	ldr	r3, [pc, #240]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba24:	f003 0304 	and.w	r3, r3, #4
 800ba28:	617b      	str	r3, [r7, #20]
 800ba2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba2c:	4b39      	ldr	r3, [pc, #228]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba30:	4a38      	ldr	r2, [pc, #224]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba32:	f043 0301 	orr.w	r3, r3, #1
 800ba36:	6313      	str	r3, [r2, #48]	; 0x30
 800ba38:	4b36      	ldr	r3, [pc, #216]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	613b      	str	r3, [r7, #16]
 800ba42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba44:	4b33      	ldr	r3, [pc, #204]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba48:	4a32      	ldr	r2, [pc, #200]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba4a:	f043 0302 	orr.w	r3, r3, #2
 800ba4e:	6313      	str	r3, [r2, #48]	; 0x30
 800ba50:	4b30      	ldr	r3, [pc, #192]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba54:	f003 0302 	and.w	r3, r3, #2
 800ba58:	60fb      	str	r3, [r7, #12]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ba5c:	4b2d      	ldr	r3, [pc, #180]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba60:	4a2c      	ldr	r2, [pc, #176]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba66:	6313      	str	r3, [r2, #48]	; 0x30
 800ba68:	4b2a      	ldr	r3, [pc, #168]	; (800bb14 <HAL_ETH_MspInit+0x16c>)
 800ba6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba70:	60bb      	str	r3, [r7, #8]
 800ba72:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ba74:	2332      	movs	r3, #50	; 0x32
 800ba76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba78:	2302      	movs	r3, #2
 800ba7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba80:	2303      	movs	r3, #3
 800ba82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba84:	230b      	movs	r3, #11
 800ba86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	4822      	ldr	r0, [pc, #136]	; (800bb18 <HAL_ETH_MspInit+0x170>)
 800ba90:	f7f9 fa42 	bl	8004f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800ba94:	2386      	movs	r3, #134	; 0x86
 800ba96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba98:	2302      	movs	r3, #2
 800ba9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800baa0:	2303      	movs	r3, #3
 800baa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800baa4:	230b      	movs	r3, #11
 800baa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800baa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baac:	4619      	mov	r1, r3
 800baae:	481b      	ldr	r0, [pc, #108]	; (800bb1c <HAL_ETH_MspInit+0x174>)
 800bab0:	f7f9 fa32 	bl	8004f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800bab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800baba:	2302      	movs	r3, #2
 800babc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800babe:	2300      	movs	r3, #0
 800bac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bac2:	2303      	movs	r3, #3
 800bac4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bac6:	230b      	movs	r3, #11
 800bac8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800baca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bace:	4619      	mov	r1, r3
 800bad0:	4813      	ldr	r0, [pc, #76]	; (800bb20 <HAL_ETH_MspInit+0x178>)
 800bad2:	f7f9 fa21 	bl	8004f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800bad6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800badc:	2302      	movs	r3, #2
 800bade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bae0:	2300      	movs	r3, #0
 800bae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bae4:	2303      	movs	r3, #3
 800bae6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bae8:	230b      	movs	r3, #11
 800baea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800baec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baf0:	4619      	mov	r1, r3
 800baf2:	480c      	ldr	r0, [pc, #48]	; (800bb24 <HAL_ETH_MspInit+0x17c>)
 800baf4:	f7f9 fa10 	bl	8004f18 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800baf8:	2200      	movs	r2, #0
 800bafa:	2100      	movs	r1, #0
 800bafc:	203d      	movs	r0, #61	; 0x3d
 800bafe:	f7f7 fbca 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bb02:	203d      	movs	r0, #61	; 0x3d
 800bb04:	f7f7 fbe3 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bb08:	bf00      	nop
 800bb0a:	3738      	adds	r7, #56	; 0x38
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	40028000 	.word	0x40028000
 800bb14:	40023800 	.word	0x40023800
 800bb18:	40020800 	.word	0x40020800
 800bb1c:	40020000 	.word	0x40020000
 800bb20:	40020400 	.word	0x40020400
 800bb24:	40021800 	.word	0x40021800

0800bb28 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800bb2c:	4802      	ldr	r0, [pc, #8]	; (800bb38 <ETH_PHY_IO_Init+0x10>)
 800bb2e:	f7f8 fd99 	bl	8004664 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	20006078 	.word	0x20006078

0800bb3c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	af00      	add	r7, sp, #0
  return 0;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	68f9      	ldr	r1, [r7, #12]
 800bb5e:	4807      	ldr	r0, [pc, #28]	; (800bb7c <ETH_PHY_IO_ReadReg+0x30>)
 800bb60:	f7f8 fbe8 	bl	8004334 <HAL_ETH_ReadPHYRegister>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800bb6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb6e:	e000      	b.n	800bb72 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	20006078 	.word	0x20006078

0800bb80 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	68f9      	ldr	r1, [r7, #12]
 800bb92:	4807      	ldr	r0, [pc, #28]	; (800bbb0 <ETH_PHY_IO_WriteReg+0x30>)
 800bb94:	f7f8 fc19 	bl	80043ca <HAL_ETH_WritePHYRegister>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d002      	beq.n	800bba4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800bb9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bba2:	e000      	b.n	800bba6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20006078 	.word	0x20006078

0800bbb4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bbb8:	f7f6 fdba 	bl	8002730 <HAL_GetTick>
 800bbbc:	4603      	mov	r3, r0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	bd80      	pop	{r7, pc}
	...

0800bbc4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b0a0      	sub	sp, #128	; 0x80
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800bbcc:	f107 030c 	add.w	r3, r7, #12
 800bbd0:	2264      	movs	r2, #100	; 0x64
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f00a faa3 	bl	8016120 <memset>
  int32_t PHYLinkState = 0;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bbea:	483a      	ldr	r0, [pc, #232]	; (800bcd4 <ethernet_link_check_state+0x110>)
 800bbec:	f7f6 fcc8 	bl	8002580 <LAN8742_GetLinkState>
 800bbf0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bbf8:	089b      	lsrs	r3, r3, #2
 800bbfa:	f003 0301 	and.w	r3, r3, #1
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00c      	beq.n	800bc1e <ethernet_link_check_state+0x5a>
 800bc04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	dc09      	bgt.n	800bc1e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800bc0a:	4833      	ldr	r0, [pc, #204]	; (800bcd8 <ethernet_link_check_state+0x114>)
 800bc0c:	f7f8 f879 	bl	8003d02 <HAL_ETH_Stop>
    netif_set_down(netif);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f001 f81d 	bl	800cc50 <netif_set_down>
    netif_set_link_down(netif);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f001 f880 	bl	800cd1c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800bc1c:	e055      	b.n	800bcca <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bc24:	f003 0304 	and.w	r3, r3, #4
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d14e      	bne.n	800bcca <ethernet_link_check_state+0x106>
 800bc2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	dd4b      	ble.n	800bcca <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800bc32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc34:	3b02      	subs	r3, #2
 800bc36:	2b03      	cmp	r3, #3
 800bc38:	d82a      	bhi.n	800bc90 <ethernet_link_check_state+0xcc>
 800bc3a:	a201      	add	r2, pc, #4	; (adr r2, 800bc40 <ethernet_link_check_state+0x7c>)
 800bc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc40:	0800bc51 	.word	0x0800bc51
 800bc44:	0800bc63 	.word	0x0800bc63
 800bc48:	0800bc73 	.word	0x0800bc73
 800bc4c:	0800bc83 	.word	0x0800bc83
      duplex = ETH_FULLDUPLEX_MODE;
 800bc50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc54:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800bc56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bc5a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800bc60:	e017      	b.n	800bc92 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800bc62:	2300      	movs	r3, #0
 800bc64:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800bc66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bc6a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800bc70:	e00f      	b.n	800bc92 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800bc72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc76:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800bc80:	e007      	b.n	800bc92 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800bc82:	2300      	movs	r3, #0
 800bc84:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800bc86:	2300      	movs	r3, #0
 800bc88:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800bc8e:	e000      	b.n	800bc92 <ethernet_link_check_state+0xce>
      break;
 800bc90:	bf00      	nop
    if(linkchanged)
 800bc92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d018      	beq.n	800bcca <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bc98:	f107 030c 	add.w	r3, r7, #12
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	480e      	ldr	r0, [pc, #56]	; (800bcd8 <ethernet_link_check_state+0x114>)
 800bca0:	f7f8 fbdc 	bl	800445c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800bca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bca6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800bca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcaa:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bcac:	f107 030c 	add.w	r3, r7, #12
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	4809      	ldr	r0, [pc, #36]	; (800bcd8 <ethernet_link_check_state+0x114>)
 800bcb4:	f7f8 fcbc 	bl	8004630 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800bcb8:	4807      	ldr	r0, [pc, #28]	; (800bcd8 <ethernet_link_check_state+0x114>)
 800bcba:	f7f7 ffc3 	bl	8003c44 <HAL_ETH_Start>
      netif_set_up(netif);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 ff5a 	bl	800cb78 <netif_set_up>
      netif_set_link_up(netif);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 fff5 	bl	800ccb4 <netif_set_link_up>
}
 800bcca:	bf00      	nop
 800bccc:	3780      	adds	r7, #128	; 0x80
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20006160 	.word	0x20006160
 800bcd8:	20006078 	.word	0x20006078

0800bcdc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af02      	add	r7, sp, #8
 800bce2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800bce4:	4812      	ldr	r0, [pc, #72]	; (800bd30 <HAL_ETH_RxAllocateCallback+0x54>)
 800bce6:	f000 fcc1 	bl	800c66c <memp_malloc_pool>
 800bcea:	60f8      	str	r0, [r7, #12]
  if (p)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d014      	beq.n	800bd1c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f103 0220 	add.w	r2, r3, #32
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	4a0d      	ldr	r2, [pc, #52]	; (800bd34 <HAL_ETH_RxAllocateCallback+0x58>)
 800bd00:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bd0a:	9201      	str	r2, [sp, #4]
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2241      	movs	r2, #65	; 0x41
 800bd12:	2100      	movs	r1, #0
 800bd14:	2000      	movs	r0, #0
 800bd16:	f001 f9f7 	bl	800d108 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800bd1a:	e005      	b.n	800bd28 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800bd1c:	4b06      	ldr	r3, [pc, #24]	; (800bd38 <HAL_ETH_RxAllocateCallback+0x5c>)
 800bd1e:	2201      	movs	r2, #1
 800bd20:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]
}
 800bd28:	bf00      	nop
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	08019e54 	.word	0x08019e54
 800bd34:	0800b965 	.word	0x0800b965
 800bd38:	20006074 	.word	0x20006074

0800bd3c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b088      	sub	sp, #32
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
 800bd48:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bd52:	2300      	movs	r3, #0
 800bd54:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	3b20      	subs	r3, #32
 800bd5a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	2200      	movs	r2, #0
 800bd66:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	887a      	ldrh	r2, [r7, #2]
 800bd6c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d103      	bne.n	800bd7e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	69fa      	ldr	r2, [r7, #28]
 800bd7a:	601a      	str	r2, [r3, #0]
 800bd7c:	e003      	b.n	800bd86 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	69fa      	ldr	r2, [r7, #28]
 800bd84:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	69fa      	ldr	r2, [r7, #28]
 800bd8a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	61fb      	str	r3, [r7, #28]
 800bd92:	e009      	b.n	800bda8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	891a      	ldrh	r2, [r3, #8]
 800bd98:	887b      	ldrh	r3, [r7, #2]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	61fb      	str	r3, [r7, #28]
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1f2      	bne.n	800bd94 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800bdae:	887b      	ldrh	r3, [r7, #2]
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7ff fc28 	bl	800b608 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800bdb8:	bf00      	nop
 800bdba:	3720      	adds	r7, #32
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bdca:	88fb      	ldrh	r3, [r7, #6]
 800bdcc:	021b      	lsls	r3, r3, #8
 800bdce:	b21a      	sxth	r2, r3
 800bdd0:	88fb      	ldrh	r3, [r7, #6]
 800bdd2:	0a1b      	lsrs	r3, r3, #8
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	b21b      	sxth	r3, r3
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	b21b      	sxth	r3, r3
 800bddc:	b29b      	uxth	r3, r3
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	370c      	adds	r7, #12
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bdea:	b480      	push	{r7}
 800bdec:	b083      	sub	sp, #12
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	061a      	lsls	r2, r3, #24
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	021b      	lsls	r3, r3, #8
 800bdfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bdfe:	431a      	orrs	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	0a1b      	lsrs	r3, r3, #8
 800be04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800be08:	431a      	orrs	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	0e1b      	lsrs	r3, r3, #24
 800be0e:	4313      	orrs	r3, r2
}
 800be10:	4618      	mov	r0, r3
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800be26:	f000 f8d5 	bl	800bfd4 <mem_init>
  memp_init();
 800be2a:	f000 fbdb 	bl	800c5e4 <memp_init>
  pbuf_init();
  netif_init();
 800be2e:	f000 fcd9 	bl	800c7e4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800be32:	f007 f8f9 	bl	8013028 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800be36:	f001 fe51 	bl	800dadc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800be3a:	f007 f86b 	bl	8012f14 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800be3e:	bf00      	nop
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
	...

0800be48 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	4603      	mov	r3, r0
 800be50:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800be52:	4b05      	ldr	r3, [pc, #20]	; (800be68 <ptr_to_mem+0x20>)
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	88fb      	ldrh	r3, [r7, #6]
 800be58:	4413      	add	r3, r2
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	370c      	adds	r7, #12
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	200067ec 	.word	0x200067ec

0800be6c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800be74:	4b05      	ldr	r3, [pc, #20]	; (800be8c <mem_to_ptr+0x20>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	b29b      	uxth	r3, r3
}
 800be7e:	4618      	mov	r0, r3
 800be80:	370c      	adds	r7, #12
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	200067ec 	.word	0x200067ec

0800be90 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800be90:	b590      	push	{r4, r7, lr}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800be98:	4b45      	ldr	r3, [pc, #276]	; (800bfb0 <plug_holes+0x120>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d206      	bcs.n	800beb0 <plug_holes+0x20>
 800bea2:	4b44      	ldr	r3, [pc, #272]	; (800bfb4 <plug_holes+0x124>)
 800bea4:	f240 12df 	movw	r2, #479	; 0x1df
 800bea8:	4943      	ldr	r1, [pc, #268]	; (800bfb8 <plug_holes+0x128>)
 800beaa:	4844      	ldr	r0, [pc, #272]	; (800bfbc <plug_holes+0x12c>)
 800beac:	f00a f940 	bl	8016130 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800beb0:	4b43      	ldr	r3, [pc, #268]	; (800bfc0 <plug_holes+0x130>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d306      	bcc.n	800bec8 <plug_holes+0x38>
 800beba:	4b3e      	ldr	r3, [pc, #248]	; (800bfb4 <plug_holes+0x124>)
 800bebc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bec0:	4940      	ldr	r1, [pc, #256]	; (800bfc4 <plug_holes+0x134>)
 800bec2:	483e      	ldr	r0, [pc, #248]	; (800bfbc <plug_holes+0x12c>)
 800bec4:	f00a f934 	bl	8016130 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	791b      	ldrb	r3, [r3, #4]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d006      	beq.n	800bede <plug_holes+0x4e>
 800bed0:	4b38      	ldr	r3, [pc, #224]	; (800bfb4 <plug_holes+0x124>)
 800bed2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bed6:	493c      	ldr	r1, [pc, #240]	; (800bfc8 <plug_holes+0x138>)
 800bed8:	4838      	ldr	r0, [pc, #224]	; (800bfbc <plug_holes+0x12c>)
 800beda:	f00a f929 	bl	8016130 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	881b      	ldrh	r3, [r3, #0]
 800bee2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bee6:	d906      	bls.n	800bef6 <plug_holes+0x66>
 800bee8:	4b32      	ldr	r3, [pc, #200]	; (800bfb4 <plug_holes+0x124>)
 800beea:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800beee:	4937      	ldr	r1, [pc, #220]	; (800bfcc <plug_holes+0x13c>)
 800bef0:	4832      	ldr	r0, [pc, #200]	; (800bfbc <plug_holes+0x12c>)
 800bef2:	f00a f91d 	bl	8016130 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	881b      	ldrh	r3, [r3, #0]
 800befa:	4618      	mov	r0, r3
 800befc:	f7ff ffa4 	bl	800be48 <ptr_to_mem>
 800bf00:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d024      	beq.n	800bf54 <plug_holes+0xc4>
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	791b      	ldrb	r3, [r3, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d120      	bne.n	800bf54 <plug_holes+0xc4>
 800bf12:	4b2b      	ldr	r3, [pc, #172]	; (800bfc0 <plug_holes+0x130>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d01b      	beq.n	800bf54 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bf1c:	4b2c      	ldr	r3, [pc, #176]	; (800bfd0 <plug_holes+0x140>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d102      	bne.n	800bf2c <plug_holes+0x9c>
      lfree = mem;
 800bf26:	4a2a      	ldr	r2, [pc, #168]	; (800bfd0 <plug_holes+0x140>)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	881a      	ldrh	r2, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	881b      	ldrh	r3, [r3, #0]
 800bf38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf3c:	d00a      	beq.n	800bf54 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7ff ff80 	bl	800be48 <ptr_to_mem>
 800bf48:	4604      	mov	r4, r0
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff ff8e 	bl	800be6c <mem_to_ptr>
 800bf50:	4603      	mov	r3, r0
 800bf52:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	885b      	ldrh	r3, [r3, #2]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7ff ff75 	bl	800be48 <ptr_to_mem>
 800bf5e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d01f      	beq.n	800bfa8 <plug_holes+0x118>
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	791b      	ldrb	r3, [r3, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d11b      	bne.n	800bfa8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bf70:	4b17      	ldr	r3, [pc, #92]	; (800bfd0 <plug_holes+0x140>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d102      	bne.n	800bf80 <plug_holes+0xf0>
      lfree = pmem;
 800bf7a:	4a15      	ldr	r2, [pc, #84]	; (800bfd0 <plug_holes+0x140>)
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	881a      	ldrh	r2, [r3, #0]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf90:	d00a      	beq.n	800bfa8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7ff ff56 	bl	800be48 <ptr_to_mem>
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	68b8      	ldr	r0, [r7, #8]
 800bfa0:	f7ff ff64 	bl	800be6c <mem_to_ptr>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bfa8:	bf00      	nop
 800bfaa:	3714      	adds	r7, #20
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd90      	pop	{r4, r7, pc}
 800bfb0:	200067ec 	.word	0x200067ec
 800bfb4:	080174a8 	.word	0x080174a8
 800bfb8:	080174d8 	.word	0x080174d8
 800bfbc:	080174f0 	.word	0x080174f0
 800bfc0:	200067f0 	.word	0x200067f0
 800bfc4:	08017518 	.word	0x08017518
 800bfc8:	08017534 	.word	0x08017534
 800bfcc:	08017550 	.word	0x08017550
 800bfd0:	200067f4 	.word	0x200067f4

0800bfd4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bfda:	4b18      	ldr	r3, [pc, #96]	; (800c03c <mem_init+0x68>)
 800bfdc:	3303      	adds	r3, #3
 800bfde:	f023 0303 	bic.w	r3, r3, #3
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	4b16      	ldr	r3, [pc, #88]	; (800c040 <mem_init+0x6c>)
 800bfe6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bfe8:	4b15      	ldr	r3, [pc, #84]	; (800c040 <mem_init+0x6c>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bff4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c002:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c006:	f7ff ff1f 	bl	800be48 <ptr_to_mem>
 800c00a:	4603      	mov	r3, r0
 800c00c:	4a0d      	ldr	r2, [pc, #52]	; (800c044 <mem_init+0x70>)
 800c00e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c010:	4b0c      	ldr	r3, [pc, #48]	; (800c044 <mem_init+0x70>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2201      	movs	r2, #1
 800c016:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c018:	4b0a      	ldr	r3, [pc, #40]	; (800c044 <mem_init+0x70>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c020:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c022:	4b08      	ldr	r3, [pc, #32]	; (800c044 <mem_init+0x70>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c02a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c02c:	4b04      	ldr	r3, [pc, #16]	; (800c040 <mem_init+0x6c>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a05      	ldr	r2, [pc, #20]	; (800c048 <mem_init+0x74>)
 800c032:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	20006198 	.word	0x20006198
 800c040:	200067ec 	.word	0x200067ec
 800c044:	200067f0 	.word	0x200067f0
 800c048:	200067f4 	.word	0x200067f4

0800c04c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b086      	sub	sp, #24
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7ff ff09 	bl	800be6c <mem_to_ptr>
 800c05a:	4603      	mov	r3, r0
 800c05c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	4618      	mov	r0, r3
 800c064:	f7ff fef0 	bl	800be48 <ptr_to_mem>
 800c068:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	885b      	ldrh	r3, [r3, #2]
 800c06e:	4618      	mov	r0, r3
 800c070:	f7ff feea 	bl	800be48 <ptr_to_mem>
 800c074:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	881b      	ldrh	r3, [r3, #0]
 800c07a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c07e:	d818      	bhi.n	800c0b2 <mem_link_valid+0x66>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	885b      	ldrh	r3, [r3, #2]
 800c084:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c088:	d813      	bhi.n	800c0b2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c08e:	8afa      	ldrh	r2, [r7, #22]
 800c090:	429a      	cmp	r2, r3
 800c092:	d004      	beq.n	800c09e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	881b      	ldrh	r3, [r3, #0]
 800c098:	8afa      	ldrh	r2, [r7, #22]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d109      	bne.n	800c0b2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c09e:	4b08      	ldr	r3, [pc, #32]	; (800c0c0 <mem_link_valid+0x74>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d006      	beq.n	800c0b6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	885b      	ldrh	r3, [r3, #2]
 800c0ac:	8afa      	ldrh	r2, [r7, #22]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d001      	beq.n	800c0b6 <mem_link_valid+0x6a>
    return 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e000      	b.n	800c0b8 <mem_link_valid+0x6c>
  }
  return 1;
 800c0b6:	2301      	movs	r3, #1
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3718      	adds	r7, #24
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	200067f0 	.word	0x200067f0

0800c0c4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d04c      	beq.n	800c16c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f003 0303 	and.w	r3, r3, #3
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d007      	beq.n	800c0ec <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c0dc:	4b25      	ldr	r3, [pc, #148]	; (800c174 <mem_free+0xb0>)
 800c0de:	f240 2273 	movw	r2, #627	; 0x273
 800c0e2:	4925      	ldr	r1, [pc, #148]	; (800c178 <mem_free+0xb4>)
 800c0e4:	4825      	ldr	r0, [pc, #148]	; (800c17c <mem_free+0xb8>)
 800c0e6:	f00a f823 	bl	8016130 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c0ea:	e040      	b.n	800c16e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	3b08      	subs	r3, #8
 800c0f0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c0f2:	4b23      	ldr	r3, [pc, #140]	; (800c180 <mem_free+0xbc>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d306      	bcc.n	800c10a <mem_free+0x46>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f103 020c 	add.w	r2, r3, #12
 800c102:	4b20      	ldr	r3, [pc, #128]	; (800c184 <mem_free+0xc0>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	429a      	cmp	r2, r3
 800c108:	d907      	bls.n	800c11a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c10a:	4b1a      	ldr	r3, [pc, #104]	; (800c174 <mem_free+0xb0>)
 800c10c:	f240 227f 	movw	r2, #639	; 0x27f
 800c110:	491d      	ldr	r1, [pc, #116]	; (800c188 <mem_free+0xc4>)
 800c112:	481a      	ldr	r0, [pc, #104]	; (800c17c <mem_free+0xb8>)
 800c114:	f00a f80c 	bl	8016130 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c118:	e029      	b.n	800c16e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	791b      	ldrb	r3, [r3, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d107      	bne.n	800c132 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c122:	4b14      	ldr	r3, [pc, #80]	; (800c174 <mem_free+0xb0>)
 800c124:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c128:	4918      	ldr	r1, [pc, #96]	; (800c18c <mem_free+0xc8>)
 800c12a:	4814      	ldr	r0, [pc, #80]	; (800c17c <mem_free+0xb8>)
 800c12c:	f00a f800 	bl	8016130 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c130:	e01d      	b.n	800c16e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f7ff ff8a 	bl	800c04c <mem_link_valid>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d107      	bne.n	800c14e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c13e:	4b0d      	ldr	r3, [pc, #52]	; (800c174 <mem_free+0xb0>)
 800c140:	f240 2295 	movw	r2, #661	; 0x295
 800c144:	4912      	ldr	r1, [pc, #72]	; (800c190 <mem_free+0xcc>)
 800c146:	480d      	ldr	r0, [pc, #52]	; (800c17c <mem_free+0xb8>)
 800c148:	f009 fff2 	bl	8016130 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c14c:	e00f      	b.n	800c16e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c154:	4b0f      	ldr	r3, [pc, #60]	; (800c194 <mem_free+0xd0>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d202      	bcs.n	800c164 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c15e:	4a0d      	ldr	r2, [pc, #52]	; (800c194 <mem_free+0xd0>)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f7ff fe93 	bl	800be90 <plug_holes>
 800c16a:	e000      	b.n	800c16e <mem_free+0xaa>
    return;
 800c16c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	080174a8 	.word	0x080174a8
 800c178:	0801757c 	.word	0x0801757c
 800c17c:	080174f0 	.word	0x080174f0
 800c180:	200067ec 	.word	0x200067ec
 800c184:	200067f0 	.word	0x200067f0
 800c188:	080175a0 	.word	0x080175a0
 800c18c:	080175bc 	.word	0x080175bc
 800c190:	080175e4 	.word	0x080175e4
 800c194:	200067f4 	.word	0x200067f4

0800c198 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b088      	sub	sp, #32
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c1a4:	887b      	ldrh	r3, [r7, #2]
 800c1a6:	3303      	adds	r3, #3
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	f023 0303 	bic.w	r3, r3, #3
 800c1ae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c1b0:	8bfb      	ldrh	r3, [r7, #30]
 800c1b2:	2b0b      	cmp	r3, #11
 800c1b4:	d801      	bhi.n	800c1ba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c1b6:	230c      	movs	r3, #12
 800c1b8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c1ba:	8bfb      	ldrh	r3, [r7, #30]
 800c1bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1c0:	d803      	bhi.n	800c1ca <mem_trim+0x32>
 800c1c2:	8bfa      	ldrh	r2, [r7, #30]
 800c1c4:	887b      	ldrh	r3, [r7, #2]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d201      	bcs.n	800c1ce <mem_trim+0x36>
    return NULL;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	e0cc      	b.n	800c368 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c1ce:	4b68      	ldr	r3, [pc, #416]	; (800c370 <mem_trim+0x1d8>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d304      	bcc.n	800c1e2 <mem_trim+0x4a>
 800c1d8:	4b66      	ldr	r3, [pc, #408]	; (800c374 <mem_trim+0x1dc>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d306      	bcc.n	800c1f0 <mem_trim+0x58>
 800c1e2:	4b65      	ldr	r3, [pc, #404]	; (800c378 <mem_trim+0x1e0>)
 800c1e4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c1e8:	4964      	ldr	r1, [pc, #400]	; (800c37c <mem_trim+0x1e4>)
 800c1ea:	4865      	ldr	r0, [pc, #404]	; (800c380 <mem_trim+0x1e8>)
 800c1ec:	f009 ffa0 	bl	8016130 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c1f0:	4b5f      	ldr	r3, [pc, #380]	; (800c370 <mem_trim+0x1d8>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d304      	bcc.n	800c204 <mem_trim+0x6c>
 800c1fa:	4b5e      	ldr	r3, [pc, #376]	; (800c374 <mem_trim+0x1dc>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	429a      	cmp	r2, r3
 800c202:	d301      	bcc.n	800c208 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	e0af      	b.n	800c368 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	3b08      	subs	r3, #8
 800c20c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c20e:	69b8      	ldr	r0, [r7, #24]
 800c210:	f7ff fe2c 	bl	800be6c <mem_to_ptr>
 800c214:	4603      	mov	r3, r0
 800c216:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	881a      	ldrh	r2, [r3, #0]
 800c21c:	8afb      	ldrh	r3, [r7, #22]
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	b29b      	uxth	r3, r3
 800c222:	3b08      	subs	r3, #8
 800c224:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c226:	8bfa      	ldrh	r2, [r7, #30]
 800c228:	8abb      	ldrh	r3, [r7, #20]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d906      	bls.n	800c23c <mem_trim+0xa4>
 800c22e:	4b52      	ldr	r3, [pc, #328]	; (800c378 <mem_trim+0x1e0>)
 800c230:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c234:	4953      	ldr	r1, [pc, #332]	; (800c384 <mem_trim+0x1ec>)
 800c236:	4852      	ldr	r0, [pc, #328]	; (800c380 <mem_trim+0x1e8>)
 800c238:	f009 ff7a 	bl	8016130 <iprintf>
  if (newsize > size) {
 800c23c:	8bfa      	ldrh	r2, [r7, #30]
 800c23e:	8abb      	ldrh	r3, [r7, #20]
 800c240:	429a      	cmp	r2, r3
 800c242:	d901      	bls.n	800c248 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c244:	2300      	movs	r3, #0
 800c246:	e08f      	b.n	800c368 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c248:	8bfa      	ldrh	r2, [r7, #30]
 800c24a:	8abb      	ldrh	r3, [r7, #20]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d101      	bne.n	800c254 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	e089      	b.n	800c368 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	881b      	ldrh	r3, [r3, #0]
 800c258:	4618      	mov	r0, r3
 800c25a:	f7ff fdf5 	bl	800be48 <ptr_to_mem>
 800c25e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	791b      	ldrb	r3, [r3, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d13f      	bne.n	800c2e8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	881b      	ldrh	r3, [r3, #0]
 800c26c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c270:	d106      	bne.n	800c280 <mem_trim+0xe8>
 800c272:	4b41      	ldr	r3, [pc, #260]	; (800c378 <mem_trim+0x1e0>)
 800c274:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c278:	4943      	ldr	r1, [pc, #268]	; (800c388 <mem_trim+0x1f0>)
 800c27a:	4841      	ldr	r0, [pc, #260]	; (800c380 <mem_trim+0x1e8>)
 800c27c:	f009 ff58 	bl	8016130 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	881b      	ldrh	r3, [r3, #0]
 800c284:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c286:	8afa      	ldrh	r2, [r7, #22]
 800c288:	8bfb      	ldrh	r3, [r7, #30]
 800c28a:	4413      	add	r3, r2
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	3308      	adds	r3, #8
 800c290:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c292:	4b3e      	ldr	r3, [pc, #248]	; (800c38c <mem_trim+0x1f4>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	693a      	ldr	r2, [r7, #16]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d106      	bne.n	800c2aa <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c29c:	89fb      	ldrh	r3, [r7, #14]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7ff fdd2 	bl	800be48 <ptr_to_mem>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	4a39      	ldr	r2, [pc, #228]	; (800c38c <mem_trim+0x1f4>)
 800c2a8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c2aa:	89fb      	ldrh	r3, [r7, #14]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7ff fdcb 	bl	800be48 <ptr_to_mem>
 800c2b2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	89ba      	ldrh	r2, [r7, #12]
 800c2be:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	8afa      	ldrh	r2, [r7, #22]
 800c2c4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	89fa      	ldrh	r2, [r7, #14]
 800c2ca:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	881b      	ldrh	r3, [r3, #0]
 800c2d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2d4:	d047      	beq.n	800c366 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7ff fdb4 	bl	800be48 <ptr_to_mem>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	89fb      	ldrh	r3, [r7, #14]
 800c2e4:	8053      	strh	r3, [r2, #2]
 800c2e6:	e03e      	b.n	800c366 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c2e8:	8bfb      	ldrh	r3, [r7, #30]
 800c2ea:	f103 0214 	add.w	r2, r3, #20
 800c2ee:	8abb      	ldrh	r3, [r7, #20]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d838      	bhi.n	800c366 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c2f4:	8afa      	ldrh	r2, [r7, #22]
 800c2f6:	8bfb      	ldrh	r3, [r7, #30]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	3308      	adds	r3, #8
 800c2fe:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	881b      	ldrh	r3, [r3, #0]
 800c304:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c308:	d106      	bne.n	800c318 <mem_trim+0x180>
 800c30a:	4b1b      	ldr	r3, [pc, #108]	; (800c378 <mem_trim+0x1e0>)
 800c30c:	f240 3216 	movw	r2, #790	; 0x316
 800c310:	491d      	ldr	r1, [pc, #116]	; (800c388 <mem_trim+0x1f0>)
 800c312:	481b      	ldr	r0, [pc, #108]	; (800c380 <mem_trim+0x1e8>)
 800c314:	f009 ff0c 	bl	8016130 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c318:	89fb      	ldrh	r3, [r7, #14]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7ff fd94 	bl	800be48 <ptr_to_mem>
 800c320:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c322:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <mem_trim+0x1f4>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d202      	bcs.n	800c332 <mem_trim+0x19a>
      lfree = mem2;
 800c32c:	4a17      	ldr	r2, [pc, #92]	; (800c38c <mem_trim+0x1f4>)
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	2200      	movs	r2, #0
 800c336:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	881a      	ldrh	r2, [r3, #0]
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	8afa      	ldrh	r2, [r7, #22]
 800c344:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	89fa      	ldrh	r2, [r7, #14]
 800c34a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c354:	d007      	beq.n	800c366 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	881b      	ldrh	r3, [r3, #0]
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7ff fd74 	bl	800be48 <ptr_to_mem>
 800c360:	4602      	mov	r2, r0
 800c362:	89fb      	ldrh	r3, [r7, #14]
 800c364:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c366:	687b      	ldr	r3, [r7, #4]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3720      	adds	r7, #32
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	200067ec 	.word	0x200067ec
 800c374:	200067f0 	.word	0x200067f0
 800c378:	080174a8 	.word	0x080174a8
 800c37c:	08017618 	.word	0x08017618
 800c380:	080174f0 	.word	0x080174f0
 800c384:	08017630 	.word	0x08017630
 800c388:	08017650 	.word	0x08017650
 800c38c:	200067f4 	.word	0x200067f4

0800c390 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af00      	add	r7, sp, #0
 800c396:	4603      	mov	r3, r0
 800c398:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c39a:	88fb      	ldrh	r3, [r7, #6]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <mem_malloc+0x14>
    return NULL;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	e0d9      	b.n	800c558 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c3a4:	88fb      	ldrh	r3, [r7, #6]
 800c3a6:	3303      	adds	r3, #3
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	f023 0303 	bic.w	r3, r3, #3
 800c3ae:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c3b0:	8bbb      	ldrh	r3, [r7, #28]
 800c3b2:	2b0b      	cmp	r3, #11
 800c3b4:	d801      	bhi.n	800c3ba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c3b6:	230c      	movs	r3, #12
 800c3b8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c3ba:	8bbb      	ldrh	r3, [r7, #28]
 800c3bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3c0:	d803      	bhi.n	800c3ca <mem_malloc+0x3a>
 800c3c2:	8bba      	ldrh	r2, [r7, #28]
 800c3c4:	88fb      	ldrh	r3, [r7, #6]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d201      	bcs.n	800c3ce <mem_malloc+0x3e>
    return NULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e0c4      	b.n	800c558 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c3ce:	4b64      	ldr	r3, [pc, #400]	; (800c560 <mem_malloc+0x1d0>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7ff fd4a 	bl	800be6c <mem_to_ptr>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	83fb      	strh	r3, [r7, #30]
 800c3dc:	e0b4      	b.n	800c548 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c3de:	8bfb      	ldrh	r3, [r7, #30]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7ff fd31 	bl	800be48 <ptr_to_mem>
 800c3e6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	791b      	ldrb	r3, [r3, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f040 80a4 	bne.w	800c53a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	881b      	ldrh	r3, [r3, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	8bfb      	ldrh	r3, [r7, #30]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	f1a3 0208 	sub.w	r2, r3, #8
 800c400:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c402:	429a      	cmp	r2, r3
 800c404:	f0c0 8099 	bcc.w	800c53a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	881b      	ldrh	r3, [r3, #0]
 800c40c:	461a      	mov	r2, r3
 800c40e:	8bfb      	ldrh	r3, [r7, #30]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	f1a3 0208 	sub.w	r2, r3, #8
 800c416:	8bbb      	ldrh	r3, [r7, #28]
 800c418:	3314      	adds	r3, #20
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d333      	bcc.n	800c486 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c41e:	8bfa      	ldrh	r2, [r7, #30]
 800c420:	8bbb      	ldrh	r3, [r7, #28]
 800c422:	4413      	add	r3, r2
 800c424:	b29b      	uxth	r3, r3
 800c426:	3308      	adds	r3, #8
 800c428:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c42a:	8a7b      	ldrh	r3, [r7, #18]
 800c42c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c430:	d106      	bne.n	800c440 <mem_malloc+0xb0>
 800c432:	4b4c      	ldr	r3, [pc, #304]	; (800c564 <mem_malloc+0x1d4>)
 800c434:	f240 3287 	movw	r2, #903	; 0x387
 800c438:	494b      	ldr	r1, [pc, #300]	; (800c568 <mem_malloc+0x1d8>)
 800c43a:	484c      	ldr	r0, [pc, #304]	; (800c56c <mem_malloc+0x1dc>)
 800c43c:	f009 fe78 	bl	8016130 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c440:	8a7b      	ldrh	r3, [r7, #18]
 800c442:	4618      	mov	r0, r3
 800c444:	f7ff fd00 	bl	800be48 <ptr_to_mem>
 800c448:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	881a      	ldrh	r2, [r3, #0]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	8bfa      	ldrh	r2, [r7, #30]
 800c45c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	8a7a      	ldrh	r2, [r7, #18]
 800c462:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	2201      	movs	r2, #1
 800c468:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	881b      	ldrh	r3, [r3, #0]
 800c46e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c472:	d00b      	beq.n	800c48c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	881b      	ldrh	r3, [r3, #0]
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff fce5 	bl	800be48 <ptr_to_mem>
 800c47e:	4602      	mov	r2, r0
 800c480:	8a7b      	ldrh	r3, [r7, #18]
 800c482:	8053      	strh	r3, [r2, #2]
 800c484:	e002      	b.n	800c48c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2201      	movs	r2, #1
 800c48a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c48c:	4b34      	ldr	r3, [pc, #208]	; (800c560 <mem_malloc+0x1d0>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	697a      	ldr	r2, [r7, #20]
 800c492:	429a      	cmp	r2, r3
 800c494:	d127      	bne.n	800c4e6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c496:	4b32      	ldr	r3, [pc, #200]	; (800c560 <mem_malloc+0x1d0>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c49c:	e005      	b.n	800c4aa <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	881b      	ldrh	r3, [r3, #0]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7ff fcd0 	bl	800be48 <ptr_to_mem>
 800c4a8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	791b      	ldrb	r3, [r3, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d004      	beq.n	800c4bc <mem_malloc+0x12c>
 800c4b2:	4b2f      	ldr	r3, [pc, #188]	; (800c570 <mem_malloc+0x1e0>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	69ba      	ldr	r2, [r7, #24]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d1f0      	bne.n	800c49e <mem_malloc+0x10e>
          }
          lfree = cur;
 800c4bc:	4a28      	ldr	r2, [pc, #160]	; (800c560 <mem_malloc+0x1d0>)
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c4c2:	4b27      	ldr	r3, [pc, #156]	; (800c560 <mem_malloc+0x1d0>)
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	4b2a      	ldr	r3, [pc, #168]	; (800c570 <mem_malloc+0x1e0>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d00b      	beq.n	800c4e6 <mem_malloc+0x156>
 800c4ce:	4b24      	ldr	r3, [pc, #144]	; (800c560 <mem_malloc+0x1d0>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	791b      	ldrb	r3, [r3, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d006      	beq.n	800c4e6 <mem_malloc+0x156>
 800c4d8:	4b22      	ldr	r3, [pc, #136]	; (800c564 <mem_malloc+0x1d4>)
 800c4da:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c4de:	4925      	ldr	r1, [pc, #148]	; (800c574 <mem_malloc+0x1e4>)
 800c4e0:	4822      	ldr	r0, [pc, #136]	; (800c56c <mem_malloc+0x1dc>)
 800c4e2:	f009 fe25 	bl	8016130 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c4e6:	8bba      	ldrh	r2, [r7, #28]
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	4a20      	ldr	r2, [pc, #128]	; (800c570 <mem_malloc+0x1e0>)
 800c4f0:	6812      	ldr	r2, [r2, #0]
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d906      	bls.n	800c504 <mem_malloc+0x174>
 800c4f6:	4b1b      	ldr	r3, [pc, #108]	; (800c564 <mem_malloc+0x1d4>)
 800c4f8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c4fc:	491e      	ldr	r1, [pc, #120]	; (800c578 <mem_malloc+0x1e8>)
 800c4fe:	481b      	ldr	r0, [pc, #108]	; (800c56c <mem_malloc+0x1dc>)
 800c500:	f009 fe16 	bl	8016130 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	f003 0303 	and.w	r3, r3, #3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d006      	beq.n	800c51c <mem_malloc+0x18c>
 800c50e:	4b15      	ldr	r3, [pc, #84]	; (800c564 <mem_malloc+0x1d4>)
 800c510:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c514:	4919      	ldr	r1, [pc, #100]	; (800c57c <mem_malloc+0x1ec>)
 800c516:	4815      	ldr	r0, [pc, #84]	; (800c56c <mem_malloc+0x1dc>)
 800c518:	f009 fe0a 	bl	8016130 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	f003 0303 	and.w	r3, r3, #3
 800c522:	2b00      	cmp	r3, #0
 800c524:	d006      	beq.n	800c534 <mem_malloc+0x1a4>
 800c526:	4b0f      	ldr	r3, [pc, #60]	; (800c564 <mem_malloc+0x1d4>)
 800c528:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c52c:	4914      	ldr	r1, [pc, #80]	; (800c580 <mem_malloc+0x1f0>)
 800c52e:	480f      	ldr	r0, [pc, #60]	; (800c56c <mem_malloc+0x1dc>)
 800c530:	f009 fdfe 	bl	8016130 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	3308      	adds	r3, #8
 800c538:	e00e      	b.n	800c558 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800c53a:	8bfb      	ldrh	r3, [r7, #30]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7ff fc83 	bl	800be48 <ptr_to_mem>
 800c542:	4603      	mov	r3, r0
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c548:	8bfa      	ldrh	r2, [r7, #30]
 800c54a:	8bbb      	ldrh	r3, [r7, #28]
 800c54c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c550:	429a      	cmp	r2, r3
 800c552:	f4ff af44 	bcc.w	800c3de <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c556:	2300      	movs	r3, #0
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3720      	adds	r7, #32
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	200067f4 	.word	0x200067f4
 800c564:	080174a8 	.word	0x080174a8
 800c568:	08017650 	.word	0x08017650
 800c56c:	080174f0 	.word	0x080174f0
 800c570:	200067f0 	.word	0x200067f0
 800c574:	08017664 	.word	0x08017664
 800c578:	08017680 	.word	0x08017680
 800c57c:	080176b0 	.word	0x080176b0
 800c580:	080176e0 	.word	0x080176e0

0800c584 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	2200      	movs	r2, #0
 800c592:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	3303      	adds	r3, #3
 800c59a:	f023 0303 	bic.w	r3, r3, #3
 800c59e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60fb      	str	r3, [r7, #12]
 800c5a4:	e011      	b.n	800c5ca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	881b      	ldrh	r3, [r3, #0]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	60fb      	str	r3, [r7, #12]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	885b      	ldrh	r3, [r3, #2]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	dbe7      	blt.n	800c5a6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c5d6:	bf00      	nop
 800c5d8:	bf00      	nop
 800c5da:	3714      	adds	r7, #20
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	80fb      	strh	r3, [r7, #6]
 800c5ee:	e009      	b.n	800c604 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c5f0:	88fb      	ldrh	r3, [r7, #6]
 800c5f2:	4a08      	ldr	r2, [pc, #32]	; (800c614 <memp_init+0x30>)
 800c5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7ff ffc3 	bl	800c584 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c5fe:	88fb      	ldrh	r3, [r7, #6]
 800c600:	3301      	adds	r3, #1
 800c602:	80fb      	strh	r3, [r7, #6]
 800c604:	88fb      	ldrh	r3, [r7, #6]
 800c606:	2b08      	cmp	r3, #8
 800c608:	d9f2      	bls.n	800c5f0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c60a:	bf00      	nop
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	08019ecc 	.word	0x08019ecc

0800c618 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d012      	beq.n	800c654 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	6812      	ldr	r2, [r2, #0]
 800c636:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f003 0303 	and.w	r3, r3, #3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d006      	beq.n	800c650 <do_memp_malloc_pool+0x38>
 800c642:	4b07      	ldr	r3, [pc, #28]	; (800c660 <do_memp_malloc_pool+0x48>)
 800c644:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c648:	4906      	ldr	r1, [pc, #24]	; (800c664 <do_memp_malloc_pool+0x4c>)
 800c64a:	4807      	ldr	r0, [pc, #28]	; (800c668 <do_memp_malloc_pool+0x50>)
 800c64c:	f009 fd70 	bl	8016130 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	e000      	b.n	800c656 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	08017704 	.word	0x08017704
 800c664:	08017734 	.word	0x08017734
 800c668:	08017758 	.word	0x08017758

0800c66c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d106      	bne.n	800c688 <memp_malloc_pool+0x1c>
 800c67a:	4b0a      	ldr	r3, [pc, #40]	; (800c6a4 <memp_malloc_pool+0x38>)
 800c67c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c680:	4909      	ldr	r1, [pc, #36]	; (800c6a8 <memp_malloc_pool+0x3c>)
 800c682:	480a      	ldr	r0, [pc, #40]	; (800c6ac <memp_malloc_pool+0x40>)
 800c684:	f009 fd54 	bl	8016130 <iprintf>
  if (desc == NULL) {
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <memp_malloc_pool+0x26>
    return NULL;
 800c68e:	2300      	movs	r3, #0
 800c690:	e003      	b.n	800c69a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7ff ffc0 	bl	800c618 <do_memp_malloc_pool>
 800c698:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	08017704 	.word	0x08017704
 800c6a8:	08017780 	.word	0x08017780
 800c6ac:	08017758 	.word	0x08017758

0800c6b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c6ba:	79fb      	ldrb	r3, [r7, #7]
 800c6bc:	2b08      	cmp	r3, #8
 800c6be:	d908      	bls.n	800c6d2 <memp_malloc+0x22>
 800c6c0:	4b0a      	ldr	r3, [pc, #40]	; (800c6ec <memp_malloc+0x3c>)
 800c6c2:	f240 1257 	movw	r2, #343	; 0x157
 800c6c6:	490a      	ldr	r1, [pc, #40]	; (800c6f0 <memp_malloc+0x40>)
 800c6c8:	480a      	ldr	r0, [pc, #40]	; (800c6f4 <memp_malloc+0x44>)
 800c6ca:	f009 fd31 	bl	8016130 <iprintf>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e008      	b.n	800c6e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c6d2:	79fb      	ldrb	r3, [r7, #7]
 800c6d4:	4a08      	ldr	r2, [pc, #32]	; (800c6f8 <memp_malloc+0x48>)
 800c6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7ff ff9c 	bl	800c618 <do_memp_malloc_pool>
 800c6e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	08017704 	.word	0x08017704
 800c6f0:	08017794 	.word	0x08017794
 800c6f4:	08017758 	.word	0x08017758
 800c6f8:	08019ecc 	.word	0x08019ecc

0800c6fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	f003 0303 	and.w	r3, r3, #3
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d006      	beq.n	800c71e <do_memp_free_pool+0x22>
 800c710:	4b0a      	ldr	r3, [pc, #40]	; (800c73c <do_memp_free_pool+0x40>)
 800c712:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c716:	490a      	ldr	r1, [pc, #40]	; (800c740 <do_memp_free_pool+0x44>)
 800c718:	480a      	ldr	r0, [pc, #40]	; (800c744 <do_memp_free_pool+0x48>)
 800c71a:	f009 fd09 	bl	8016130 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c734:	bf00      	nop
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	08017704 	.word	0x08017704
 800c740:	080177b4 	.word	0x080177b4
 800c744:	08017758 	.word	0x08017758

0800c748 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d106      	bne.n	800c766 <memp_free_pool+0x1e>
 800c758:	4b0a      	ldr	r3, [pc, #40]	; (800c784 <memp_free_pool+0x3c>)
 800c75a:	f240 1295 	movw	r2, #405	; 0x195
 800c75e:	490a      	ldr	r1, [pc, #40]	; (800c788 <memp_free_pool+0x40>)
 800c760:	480a      	ldr	r0, [pc, #40]	; (800c78c <memp_free_pool+0x44>)
 800c762:	f009 fce5 	bl	8016130 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d007      	beq.n	800c77c <memp_free_pool+0x34>
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d004      	beq.n	800c77c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f7ff ffc1 	bl	800c6fc <do_memp_free_pool>
 800c77a:	e000      	b.n	800c77e <memp_free_pool+0x36>
    return;
 800c77c:	bf00      	nop
}
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	08017704 	.word	0x08017704
 800c788:	08017780 	.word	0x08017780
 800c78c:	08017758 	.word	0x08017758

0800c790 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	4603      	mov	r3, r0
 800c798:	6039      	str	r1, [r7, #0]
 800c79a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c79c:	79fb      	ldrb	r3, [r7, #7]
 800c79e:	2b08      	cmp	r3, #8
 800c7a0:	d907      	bls.n	800c7b2 <memp_free+0x22>
 800c7a2:	4b0c      	ldr	r3, [pc, #48]	; (800c7d4 <memp_free+0x44>)
 800c7a4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c7a8:	490b      	ldr	r1, [pc, #44]	; (800c7d8 <memp_free+0x48>)
 800c7aa:	480c      	ldr	r0, [pc, #48]	; (800c7dc <memp_free+0x4c>)
 800c7ac:	f009 fcc0 	bl	8016130 <iprintf>
 800c7b0:	e00c      	b.n	800c7cc <memp_free+0x3c>

  if (mem == NULL) {
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d008      	beq.n	800c7ca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c7b8:	79fb      	ldrb	r3, [r7, #7]
 800c7ba:	4a09      	ldr	r2, [pc, #36]	; (800c7e0 <memp_free+0x50>)
 800c7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7c0:	6839      	ldr	r1, [r7, #0]
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7ff ff9a 	bl	800c6fc <do_memp_free_pool>
 800c7c8:	e000      	b.n	800c7cc <memp_free+0x3c>
    return;
 800c7ca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	08017704 	.word	0x08017704
 800c7d8:	080177d4 	.word	0x080177d4
 800c7dc:	08017758 	.word	0x08017758
 800c7e0:	08019ecc 	.word	0x08019ecc

0800c7e4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c7e8:	bf00      	nop
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
	...

0800c7f4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
 800c800:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d108      	bne.n	800c81a <netif_add+0x26>
 800c808:	4b57      	ldr	r3, [pc, #348]	; (800c968 <netif_add+0x174>)
 800c80a:	f240 1227 	movw	r2, #295	; 0x127
 800c80e:	4957      	ldr	r1, [pc, #348]	; (800c96c <netif_add+0x178>)
 800c810:	4857      	ldr	r0, [pc, #348]	; (800c970 <netif_add+0x17c>)
 800c812:	f009 fc8d 	bl	8016130 <iprintf>
 800c816:	2300      	movs	r3, #0
 800c818:	e0a2      	b.n	800c960 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d108      	bne.n	800c832 <netif_add+0x3e>
 800c820:	4b51      	ldr	r3, [pc, #324]	; (800c968 <netif_add+0x174>)
 800c822:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c826:	4953      	ldr	r1, [pc, #332]	; (800c974 <netif_add+0x180>)
 800c828:	4851      	ldr	r0, [pc, #324]	; (800c970 <netif_add+0x17c>)
 800c82a:	f009 fc81 	bl	8016130 <iprintf>
 800c82e:	2300      	movs	r3, #0
 800c830:	e096      	b.n	800c960 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d101      	bne.n	800c83c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c838:	4b4f      	ldr	r3, [pc, #316]	; (800c978 <netif_add+0x184>)
 800c83a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d101      	bne.n	800c846 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c842:	4b4d      	ldr	r3, [pc, #308]	; (800c978 <netif_add+0x184>)
 800c844:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d101      	bne.n	800c850 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c84c:	4b4a      	ldr	r3, [pc, #296]	; (800c978 <netif_add+0x184>)
 800c84e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2200      	movs	r2, #0
 800c85a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2200      	movs	r2, #0
 800c860:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	4a45      	ldr	r2, [pc, #276]	; (800c97c <netif_add+0x188>)
 800c866:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2200      	movs	r2, #0
 800c87a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6a3a      	ldr	r2, [r7, #32]
 800c880:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c882:	4b3f      	ldr	r3, [pc, #252]	; (800c980 <netif_add+0x18c>)
 800c884:	781a      	ldrb	r2, [r3, #0]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c890:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	68b9      	ldr	r1, [r7, #8]
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f000 f913 	bl	800cac4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	4798      	blx	r3
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d001      	beq.n	800c8ae <netif_add+0xba>
    return NULL;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e058      	b.n	800c960 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8b4:	2bff      	cmp	r3, #255	; 0xff
 800c8b6:	d103      	bne.n	800c8c0 <netif_add+0xcc>
        netif->num = 0;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c8c4:	4b2f      	ldr	r3, [pc, #188]	; (800c984 <netif_add+0x190>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	617b      	str	r3, [r7, #20]
 800c8ca:	e02b      	b.n	800c924 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c8cc:	697a      	ldr	r2, [r7, #20]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d106      	bne.n	800c8e2 <netif_add+0xee>
 800c8d4:	4b24      	ldr	r3, [pc, #144]	; (800c968 <netif_add+0x174>)
 800c8d6:	f240 128b 	movw	r2, #395	; 0x18b
 800c8da:	492b      	ldr	r1, [pc, #172]	; (800c988 <netif_add+0x194>)
 800c8dc:	4824      	ldr	r0, [pc, #144]	; (800c970 <netif_add+0x17c>)
 800c8de:	f009 fc27 	bl	8016130 <iprintf>
        num_netifs++;
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	2bff      	cmp	r3, #255	; 0xff
 800c8ec:	dd06      	ble.n	800c8fc <netif_add+0x108>
 800c8ee:	4b1e      	ldr	r3, [pc, #120]	; (800c968 <netif_add+0x174>)
 800c8f0:	f240 128d 	movw	r2, #397	; 0x18d
 800c8f4:	4925      	ldr	r1, [pc, #148]	; (800c98c <netif_add+0x198>)
 800c8f6:	481e      	ldr	r0, [pc, #120]	; (800c970 <netif_add+0x17c>)
 800c8f8:	f009 fc1a 	bl	8016130 <iprintf>
        if (netif2->num == netif->num) {
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c908:	429a      	cmp	r2, r3
 800c90a:	d108      	bne.n	800c91e <netif_add+0x12a>
          netif->num++;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c912:	3301      	adds	r3, #1
 800c914:	b2da      	uxtb	r2, r3
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c91c:	e005      	b.n	800c92a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	617b      	str	r3, [r7, #20]
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1d0      	bne.n	800c8cc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1be      	bne.n	800c8ae <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c936:	2bfe      	cmp	r3, #254	; 0xfe
 800c938:	d103      	bne.n	800c942 <netif_add+0x14e>
    netif_num = 0;
 800c93a:	4b11      	ldr	r3, [pc, #68]	; (800c980 <netif_add+0x18c>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	701a      	strb	r2, [r3, #0]
 800c940:	e006      	b.n	800c950 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c948:	3301      	adds	r3, #1
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	4b0c      	ldr	r3, [pc, #48]	; (800c980 <netif_add+0x18c>)
 800c94e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c950:	4b0c      	ldr	r3, [pc, #48]	; (800c984 <netif_add+0x190>)
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c958:	4a0a      	ldr	r2, [pc, #40]	; (800c984 <netif_add+0x190>)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c95e:	68fb      	ldr	r3, [r7, #12]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3718      	adds	r7, #24
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	080177f0 	.word	0x080177f0
 800c96c:	08017884 	.word	0x08017884
 800c970:	08017840 	.word	0x08017840
 800c974:	080178a0 	.word	0x080178a0
 800c978:	08019f30 	.word	0x08019f30
 800c97c:	0800cd9f 	.word	0x0800cd9f
 800c980:	200096ec 	.word	0x200096ec
 800c984:	200096e4 	.word	0x200096e4
 800c988:	080178c4 	.word	0x080178c4
 800c98c:	080178d8 	.word	0x080178d8

0800c990 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c99a:	6839      	ldr	r1, [r7, #0]
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f002 fbe5 	bl	800f16c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c9a2:	6839      	ldr	r1, [r7, #0]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f007 f883 	bl	8013ab0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c9aa:	bf00      	nop
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
	...

0800c9b4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d106      	bne.n	800c9d4 <netif_do_set_ipaddr+0x20>
 800c9c6:	4b1d      	ldr	r3, [pc, #116]	; (800ca3c <netif_do_set_ipaddr+0x88>)
 800c9c8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c9cc:	491c      	ldr	r1, [pc, #112]	; (800ca40 <netif_do_set_ipaddr+0x8c>)
 800c9ce:	481d      	ldr	r0, [pc, #116]	; (800ca44 <netif_do_set_ipaddr+0x90>)
 800c9d0:	f009 fbae 	bl	8016130 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d106      	bne.n	800c9e8 <netif_do_set_ipaddr+0x34>
 800c9da:	4b18      	ldr	r3, [pc, #96]	; (800ca3c <netif_do_set_ipaddr+0x88>)
 800c9dc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c9e0:	4917      	ldr	r1, [pc, #92]	; (800ca40 <netif_do_set_ipaddr+0x8c>)
 800c9e2:	4818      	ldr	r0, [pc, #96]	; (800ca44 <netif_do_set_ipaddr+0x90>)
 800c9e4:	f009 fba4 	bl	8016130 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d01c      	beq.n	800ca30 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	3304      	adds	r3, #4
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ca06:	f107 0314 	add.w	r3, r7, #20
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f7ff ffbf 	bl	800c990 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d002      	beq.n	800ca1e <netif_do_set_ipaddr+0x6a>
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	e000      	b.n	800ca20 <netif_do_set_ipaddr+0x6c>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ca24:	2101      	movs	r1, #1
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f000 f8d2 	bl	800cbd0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e000      	b.n	800ca32 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3718      	adds	r7, #24
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	080177f0 	.word	0x080177f0
 800ca40:	08017908 	.word	0x08017908
 800ca44:	08017840 	.word	0x08017840

0800ca48 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	3308      	adds	r3, #8
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d00a      	beq.n	800ca78 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <netif_do_set_netmask+0x26>
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	e000      	b.n	800ca70 <netif_do_set_netmask+0x28>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ca74:	2301      	movs	r3, #1
 800ca76:	e000      	b.n	800ca7a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3714      	adds	r7, #20
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr

0800ca86 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ca86:	b480      	push	{r7}
 800ca88:	b085      	sub	sp, #20
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	60f8      	str	r0, [r7, #12]
 800ca8e:	60b9      	str	r1, [r7, #8]
 800ca90:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	330c      	adds	r3, #12
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d00a      	beq.n	800cab6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d002      	beq.n	800caac <netif_do_set_gw+0x26>
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	e000      	b.n	800caae <netif_do_set_gw+0x28>
 800caac:	2300      	movs	r3, #0
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cab2:	2301      	movs	r3, #1
 800cab4:	e000      	b.n	800cab8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cab6:	2300      	movs	r3, #0
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3714      	adds	r7, #20
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b088      	sub	sp, #32
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	607a      	str	r2, [r7, #4]
 800cad0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cad2:	2300      	movs	r3, #0
 800cad4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cad6:	2300      	movs	r3, #0
 800cad8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d101      	bne.n	800cae4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cae0:	4b1c      	ldr	r3, [pc, #112]	; (800cb54 <netif_set_addr+0x90>)
 800cae2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d101      	bne.n	800caee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800caea:	4b1a      	ldr	r3, [pc, #104]	; (800cb54 <netif_set_addr+0x90>)
 800caec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d101      	bne.n	800caf8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800caf4:	4b17      	ldr	r3, [pc, #92]	; (800cb54 <netif_set_addr+0x90>)
 800caf6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d003      	beq.n	800cb06 <netif_set_addr+0x42>
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d101      	bne.n	800cb0a <netif_set_addr+0x46>
 800cb06:	2301      	movs	r3, #1
 800cb08:	e000      	b.n	800cb0c <netif_set_addr+0x48>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d006      	beq.n	800cb22 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cb14:	f107 0310 	add.w	r3, r7, #16
 800cb18:	461a      	mov	r2, r3
 800cb1a:	68b9      	ldr	r1, [r7, #8]
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f7ff ff49 	bl	800c9b4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cb22:	69fa      	ldr	r2, [r7, #28]
 800cb24:	6879      	ldr	r1, [r7, #4]
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f7ff ff8e 	bl	800ca48 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cb2c:	69ba      	ldr	r2, [r7, #24]
 800cb2e:	6839      	ldr	r1, [r7, #0]
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f7ff ffa8 	bl	800ca86 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d106      	bne.n	800cb4a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cb3c:	f107 0310 	add.w	r3, r7, #16
 800cb40:	461a      	mov	r2, r3
 800cb42:	68b9      	ldr	r1, [r7, #8]
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	f7ff ff35 	bl	800c9b4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cb4a:	bf00      	nop
 800cb4c:	3720      	adds	r7, #32
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	08019f30 	.word	0x08019f30

0800cb58 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cb60:	4a04      	ldr	r2, [pc, #16]	; (800cb74 <netif_set_default+0x1c>)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cb66:	bf00      	nop
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	200096e8 	.word	0x200096e8

0800cb78 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d107      	bne.n	800cb96 <netif_set_up+0x1e>
 800cb86:	4b0f      	ldr	r3, [pc, #60]	; (800cbc4 <netif_set_up+0x4c>)
 800cb88:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cb8c:	490e      	ldr	r1, [pc, #56]	; (800cbc8 <netif_set_up+0x50>)
 800cb8e:	480f      	ldr	r0, [pc, #60]	; (800cbcc <netif_set_up+0x54>)
 800cb90:	f009 face 	bl	8016130 <iprintf>
 800cb94:	e013      	b.n	800cbbe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb9c:	f003 0301 	and.w	r3, r3, #1
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d10c      	bne.n	800cbbe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cbaa:	f043 0301 	orr.w	r3, r3, #1
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cbb6:	2103      	movs	r1, #3
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 f809 	bl	800cbd0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	080177f0 	.word	0x080177f0
 800cbc8:	08017978 	.word	0x08017978
 800cbcc:	08017840 	.word	0x08017840

0800cbd0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d106      	bne.n	800cbf0 <netif_issue_reports+0x20>
 800cbe2:	4b18      	ldr	r3, [pc, #96]	; (800cc44 <netif_issue_reports+0x74>)
 800cbe4:	f240 326d 	movw	r2, #877	; 0x36d
 800cbe8:	4917      	ldr	r1, [pc, #92]	; (800cc48 <netif_issue_reports+0x78>)
 800cbea:	4818      	ldr	r0, [pc, #96]	; (800cc4c <netif_issue_reports+0x7c>)
 800cbec:	f009 faa0 	bl	8016130 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cbf6:	f003 0304 	and.w	r3, r3, #4
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d01e      	beq.n	800cc3c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc04:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d017      	beq.n	800cc3c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cc0c:	78fb      	ldrb	r3, [r7, #3]
 800cc0e:	f003 0301 	and.w	r3, r3, #1
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d013      	beq.n	800cc3e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	3304      	adds	r3, #4
 800cc1a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00e      	beq.n	800cc3e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc26:	f003 0308 	and.w	r3, r3, #8
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d007      	beq.n	800cc3e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	3304      	adds	r3, #4
 800cc32:	4619      	mov	r1, r3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f007 fea5 	bl	8014984 <etharp_request>
 800cc3a:	e000      	b.n	800cc3e <netif_issue_reports+0x6e>
    return;
 800cc3c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	080177f0 	.word	0x080177f0
 800cc48:	08017994 	.word	0x08017994
 800cc4c:	08017840 	.word	0x08017840

0800cc50 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d107      	bne.n	800cc6e <netif_set_down+0x1e>
 800cc5e:	4b12      	ldr	r3, [pc, #72]	; (800cca8 <netif_set_down+0x58>)
 800cc60:	f240 329b 	movw	r2, #923	; 0x39b
 800cc64:	4911      	ldr	r1, [pc, #68]	; (800ccac <netif_set_down+0x5c>)
 800cc66:	4812      	ldr	r0, [pc, #72]	; (800ccb0 <netif_set_down+0x60>)
 800cc68:	f009 fa62 	bl	8016130 <iprintf>
 800cc6c:	e019      	b.n	800cca2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc74:	f003 0301 	and.w	r3, r3, #1
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d012      	beq.n	800cca2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc82:	f023 0301 	bic.w	r3, r3, #1
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc94:	f003 0308 	and.w	r3, r3, #8
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d002      	beq.n	800cca2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f007 fa2f 	bl	8014100 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	080177f0 	.word	0x080177f0
 800ccac:	080179b8 	.word	0x080179b8
 800ccb0:	08017840 	.word	0x08017840

0800ccb4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d107      	bne.n	800ccd2 <netif_set_link_up+0x1e>
 800ccc2:	4b13      	ldr	r3, [pc, #76]	; (800cd10 <netif_set_link_up+0x5c>)
 800ccc4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ccc8:	4912      	ldr	r1, [pc, #72]	; (800cd14 <netif_set_link_up+0x60>)
 800ccca:	4813      	ldr	r0, [pc, #76]	; (800cd18 <netif_set_link_up+0x64>)
 800cccc:	f009 fa30 	bl	8016130 <iprintf>
 800ccd0:	e01b      	b.n	800cd0a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ccd8:	f003 0304 	and.w	r3, r3, #4
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d114      	bne.n	800cd0a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cce6:	f043 0304 	orr.w	r3, r3, #4
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ccf2:	2103      	movs	r1, #3
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7ff ff6b 	bl	800cbd0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	69db      	ldr	r3, [r3, #28]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d003      	beq.n	800cd0a <netif_set_link_up+0x56>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	69db      	ldr	r3, [r3, #28]
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	080177f0 	.word	0x080177f0
 800cd14:	080179d8 	.word	0x080179d8
 800cd18:	08017840 	.word	0x08017840

0800cd1c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d107      	bne.n	800cd3a <netif_set_link_down+0x1e>
 800cd2a:	4b11      	ldr	r3, [pc, #68]	; (800cd70 <netif_set_link_down+0x54>)
 800cd2c:	f240 4206 	movw	r2, #1030	; 0x406
 800cd30:	4910      	ldr	r1, [pc, #64]	; (800cd74 <netif_set_link_down+0x58>)
 800cd32:	4811      	ldr	r0, [pc, #68]	; (800cd78 <netif_set_link_down+0x5c>)
 800cd34:	f009 f9fc 	bl	8016130 <iprintf>
 800cd38:	e017      	b.n	800cd6a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd40:	f003 0304 	and.w	r3, r3, #4
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d010      	beq.n	800cd6a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd4e:	f023 0304 	bic.w	r3, r3, #4
 800cd52:	b2da      	uxtb	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	69db      	ldr	r3, [r3, #28]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d003      	beq.n	800cd6a <netif_set_link_down+0x4e>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	69db      	ldr	r3, [r3, #28]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	080177f0 	.word	0x080177f0
 800cd74:	080179fc 	.word	0x080179fc
 800cd78:	08017840 	.word	0x08017840

0800cd7c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d002      	beq.n	800cd92 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	61da      	str	r2, [r3, #28]
  }
}
 800cd92:	bf00      	nop
 800cd94:	370c      	adds	r7, #12
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr

0800cd9e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cd9e:	b480      	push	{r7}
 800cda0:	b085      	sub	sp, #20
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	60f8      	str	r0, [r7, #12]
 800cda6:	60b9      	str	r1, [r7, #8]
 800cda8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cdaa:	f06f 030b 	mvn.w	r3, #11
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3714      	adds	r7, #20
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr
	...

0800cdbc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cdc6:	79fb      	ldrb	r3, [r7, #7]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d013      	beq.n	800cdf4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cdcc:	4b0d      	ldr	r3, [pc, #52]	; (800ce04 <netif_get_by_index+0x48>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	60fb      	str	r3, [r7, #12]
 800cdd2:	e00c      	b.n	800cdee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdda:	3301      	adds	r3, #1
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	79fa      	ldrb	r2, [r7, #7]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d101      	bne.n	800cde8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	e006      	b.n	800cdf6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	60fb      	str	r3, [r7, #12]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1ef      	bne.n	800cdd4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	200096e4 	.word	0x200096e4

0800ce08 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ce0e:	4b0c      	ldr	r3, [pc, #48]	; (800ce40 <pbuf_free_ooseq+0x38>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ce14:	4b0b      	ldr	r3, [pc, #44]	; (800ce44 <pbuf_free_ooseq+0x3c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	607b      	str	r3, [r7, #4]
 800ce1a:	e00a      	b.n	800ce32 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d003      	beq.n	800ce2c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f002 f9df 	bl	800f1e8 <tcp_free_ooseq>
      return;
 800ce2a:	e005      	b.n	800ce38 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	607b      	str	r3, [r7, #4]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1f1      	bne.n	800ce1c <pbuf_free_ooseq+0x14>
    }
  }
}
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	200096ed 	.word	0x200096ed
 800ce44:	200096fc 	.word	0x200096fc

0800ce48 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800ce4c:	4b03      	ldr	r3, [pc, #12]	; (800ce5c <pbuf_pool_is_empty+0x14>)
 800ce4e:	2201      	movs	r2, #1
 800ce50:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ce52:	bf00      	nop
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	200096ed 	.word	0x200096ed

0800ce60 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	460b      	mov	r3, r1
 800ce70:	80fb      	strh	r3, [r7, #6]
 800ce72:	4613      	mov	r3, r2
 800ce74:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	68ba      	ldr	r2, [r7, #8]
 800ce80:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	88fa      	ldrh	r2, [r7, #6]
 800ce86:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	88ba      	ldrh	r2, [r7, #4]
 800ce8c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ce8e:	8b3b      	ldrh	r3, [r7, #24]
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	7f3a      	ldrb	r2, [r7, #28]
 800ce9a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	73da      	strb	r2, [r3, #15]
}
 800cea8:	bf00      	nop
 800ceaa:	3714      	adds	r7, #20
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b08c      	sub	sp, #48	; 0x30
 800ceb8:	af02      	add	r7, sp, #8
 800ceba:	4603      	mov	r3, r0
 800cebc:	71fb      	strb	r3, [r7, #7]
 800cebe:	460b      	mov	r3, r1
 800cec0:	80bb      	strh	r3, [r7, #4]
 800cec2:	4613      	mov	r3, r2
 800cec4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cec6:	79fb      	ldrb	r3, [r7, #7]
 800cec8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ceca:	887b      	ldrh	r3, [r7, #2]
 800cecc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ced0:	d07f      	beq.n	800cfd2 <pbuf_alloc+0x11e>
 800ced2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ced6:	f300 80c8 	bgt.w	800d06a <pbuf_alloc+0x1b6>
 800ceda:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cede:	d010      	beq.n	800cf02 <pbuf_alloc+0x4e>
 800cee0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cee4:	f300 80c1 	bgt.w	800d06a <pbuf_alloc+0x1b6>
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d002      	beq.n	800cef2 <pbuf_alloc+0x3e>
 800ceec:	2b41      	cmp	r3, #65	; 0x41
 800ceee:	f040 80bc 	bne.w	800d06a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cef2:	887a      	ldrh	r2, [r7, #2]
 800cef4:	88bb      	ldrh	r3, [r7, #4]
 800cef6:	4619      	mov	r1, r3
 800cef8:	2000      	movs	r0, #0
 800cefa:	f000 f8d1 	bl	800d0a0 <pbuf_alloc_reference>
 800cefe:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cf00:	e0bd      	b.n	800d07e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cf02:	2300      	movs	r3, #0
 800cf04:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cf06:	2300      	movs	r3, #0
 800cf08:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cf0a:	88bb      	ldrh	r3, [r7, #4]
 800cf0c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cf0e:	2008      	movs	r0, #8
 800cf10:	f7ff fbce 	bl	800c6b0 <memp_malloc>
 800cf14:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d109      	bne.n	800cf30 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cf1c:	f7ff ff94 	bl	800ce48 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d002      	beq.n	800cf2c <pbuf_alloc+0x78>
            pbuf_free(p);
 800cf26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf28:	f000 faa8 	bl	800d47c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	e0a7      	b.n	800d080 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cf30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf32:	3303      	adds	r3, #3
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	f023 0303 	bic.w	r3, r3, #3
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	8b7a      	ldrh	r2, [r7, #26]
 800cf44:	4293      	cmp	r3, r2
 800cf46:	bf28      	it	cs
 800cf48:	4613      	movcs	r3, r2
 800cf4a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cf4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf4e:	3310      	adds	r3, #16
 800cf50:	693a      	ldr	r2, [r7, #16]
 800cf52:	4413      	add	r3, r2
 800cf54:	3303      	adds	r3, #3
 800cf56:	f023 0303 	bic.w	r3, r3, #3
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	89f9      	ldrh	r1, [r7, #14]
 800cf5e:	8b7a      	ldrh	r2, [r7, #26]
 800cf60:	2300      	movs	r3, #0
 800cf62:	9301      	str	r3, [sp, #4]
 800cf64:	887b      	ldrh	r3, [r7, #2]
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	460b      	mov	r3, r1
 800cf6a:	4601      	mov	r1, r0
 800cf6c:	6938      	ldr	r0, [r7, #16]
 800cf6e:	f7ff ff77 	bl	800ce60 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	f003 0303 	and.w	r3, r3, #3
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d006      	beq.n	800cf8c <pbuf_alloc+0xd8>
 800cf7e:	4b42      	ldr	r3, [pc, #264]	; (800d088 <pbuf_alloc+0x1d4>)
 800cf80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf84:	4941      	ldr	r1, [pc, #260]	; (800d08c <pbuf_alloc+0x1d8>)
 800cf86:	4842      	ldr	r0, [pc, #264]	; (800d090 <pbuf_alloc+0x1dc>)
 800cf88:	f009 f8d2 	bl	8016130 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cf8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf8e:	3303      	adds	r3, #3
 800cf90:	f023 0303 	bic.w	r3, r3, #3
 800cf94:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cf98:	d106      	bne.n	800cfa8 <pbuf_alloc+0xf4>
 800cf9a:	4b3b      	ldr	r3, [pc, #236]	; (800d088 <pbuf_alloc+0x1d4>)
 800cf9c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cfa0:	493c      	ldr	r1, [pc, #240]	; (800d094 <pbuf_alloc+0x1e0>)
 800cfa2:	483b      	ldr	r0, [pc, #236]	; (800d090 <pbuf_alloc+0x1dc>)
 800cfa4:	f009 f8c4 	bl	8016130 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d102      	bne.n	800cfb4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	627b      	str	r3, [r7, #36]	; 0x24
 800cfb2:	e002      	b.n	800cfba <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	693a      	ldr	r2, [r7, #16]
 800cfb8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cfbe:	8b7a      	ldrh	r2, [r7, #26]
 800cfc0:	89fb      	ldrh	r3, [r7, #14]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cfca:	8b7b      	ldrh	r3, [r7, #26]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d19e      	bne.n	800cf0e <pbuf_alloc+0x5a>
      break;
 800cfd0:	e055      	b.n	800d07e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cfd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cfd4:	3303      	adds	r3, #3
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	f023 0303 	bic.w	r3, r3, #3
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	88bb      	ldrh	r3, [r7, #4]
 800cfe0:	3303      	adds	r3, #3
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	f023 0303 	bic.w	r3, r3, #3
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	4413      	add	r3, r2
 800cfec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cfee:	8b3b      	ldrh	r3, [r7, #24]
 800cff0:	3310      	adds	r3, #16
 800cff2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cff4:	8b3a      	ldrh	r2, [r7, #24]
 800cff6:	88bb      	ldrh	r3, [r7, #4]
 800cff8:	3303      	adds	r3, #3
 800cffa:	f023 0303 	bic.w	r3, r3, #3
 800cffe:	429a      	cmp	r2, r3
 800d000:	d306      	bcc.n	800d010 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d002:	8afa      	ldrh	r2, [r7, #22]
 800d004:	88bb      	ldrh	r3, [r7, #4]
 800d006:	3303      	adds	r3, #3
 800d008:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d201      	bcs.n	800d014 <pbuf_alloc+0x160>
        return NULL;
 800d010:	2300      	movs	r3, #0
 800d012:	e035      	b.n	800d080 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d014:	8afb      	ldrh	r3, [r7, #22]
 800d016:	4618      	mov	r0, r3
 800d018:	f7ff f9ba 	bl	800c390 <mem_malloc>
 800d01c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d020:	2b00      	cmp	r3, #0
 800d022:	d101      	bne.n	800d028 <pbuf_alloc+0x174>
        return NULL;
 800d024:	2300      	movs	r3, #0
 800d026:	e02b      	b.n	800d080 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d028:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d02a:	3310      	adds	r3, #16
 800d02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d02e:	4413      	add	r3, r2
 800d030:	3303      	adds	r3, #3
 800d032:	f023 0303 	bic.w	r3, r3, #3
 800d036:	4618      	mov	r0, r3
 800d038:	88b9      	ldrh	r1, [r7, #4]
 800d03a:	88ba      	ldrh	r2, [r7, #4]
 800d03c:	2300      	movs	r3, #0
 800d03e:	9301      	str	r3, [sp, #4]
 800d040:	887b      	ldrh	r3, [r7, #2]
 800d042:	9300      	str	r3, [sp, #0]
 800d044:	460b      	mov	r3, r1
 800d046:	4601      	mov	r1, r0
 800d048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d04a:	f7ff ff09 	bl	800ce60 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	f003 0303 	and.w	r3, r3, #3
 800d056:	2b00      	cmp	r3, #0
 800d058:	d010      	beq.n	800d07c <pbuf_alloc+0x1c8>
 800d05a:	4b0b      	ldr	r3, [pc, #44]	; (800d088 <pbuf_alloc+0x1d4>)
 800d05c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d060:	490d      	ldr	r1, [pc, #52]	; (800d098 <pbuf_alloc+0x1e4>)
 800d062:	480b      	ldr	r0, [pc, #44]	; (800d090 <pbuf_alloc+0x1dc>)
 800d064:	f009 f864 	bl	8016130 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d068:	e008      	b.n	800d07c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d06a:	4b07      	ldr	r3, [pc, #28]	; (800d088 <pbuf_alloc+0x1d4>)
 800d06c:	f240 1227 	movw	r2, #295	; 0x127
 800d070:	490a      	ldr	r1, [pc, #40]	; (800d09c <pbuf_alloc+0x1e8>)
 800d072:	4807      	ldr	r0, [pc, #28]	; (800d090 <pbuf_alloc+0x1dc>)
 800d074:	f009 f85c 	bl	8016130 <iprintf>
      return NULL;
 800d078:	2300      	movs	r3, #0
 800d07a:	e001      	b.n	800d080 <pbuf_alloc+0x1cc>
      break;
 800d07c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d080:	4618      	mov	r0, r3
 800d082:	3728      	adds	r7, #40	; 0x28
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	08017a20 	.word	0x08017a20
 800d08c:	08017a50 	.word	0x08017a50
 800d090:	08017a80 	.word	0x08017a80
 800d094:	08017aa8 	.word	0x08017aa8
 800d098:	08017adc 	.word	0x08017adc
 800d09c:	08017b08 	.word	0x08017b08

0800d0a0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af02      	add	r7, sp, #8
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	807b      	strh	r3, [r7, #2]
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d0b0:	883b      	ldrh	r3, [r7, #0]
 800d0b2:	2b41      	cmp	r3, #65	; 0x41
 800d0b4:	d009      	beq.n	800d0ca <pbuf_alloc_reference+0x2a>
 800d0b6:	883b      	ldrh	r3, [r7, #0]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d006      	beq.n	800d0ca <pbuf_alloc_reference+0x2a>
 800d0bc:	4b0f      	ldr	r3, [pc, #60]	; (800d0fc <pbuf_alloc_reference+0x5c>)
 800d0be:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d0c2:	490f      	ldr	r1, [pc, #60]	; (800d100 <pbuf_alloc_reference+0x60>)
 800d0c4:	480f      	ldr	r0, [pc, #60]	; (800d104 <pbuf_alloc_reference+0x64>)
 800d0c6:	f009 f833 	bl	8016130 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d0ca:	2007      	movs	r0, #7
 800d0cc:	f7ff faf0 	bl	800c6b0 <memp_malloc>
 800d0d0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d101      	bne.n	800d0dc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	e00b      	b.n	800d0f4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d0dc:	8879      	ldrh	r1, [r7, #2]
 800d0de:	887a      	ldrh	r2, [r7, #2]
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	9301      	str	r3, [sp, #4]
 800d0e4:	883b      	ldrh	r3, [r7, #0]
 800d0e6:	9300      	str	r3, [sp, #0]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	6879      	ldr	r1, [r7, #4]
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f7ff feb7 	bl	800ce60 <pbuf_init_alloced_pbuf>
  return p;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	08017a20 	.word	0x08017a20
 800d100:	08017b24 	.word	0x08017b24
 800d104:	08017a80 	.word	0x08017a80

0800d108 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b088      	sub	sp, #32
 800d10c:	af02      	add	r7, sp, #8
 800d10e:	607b      	str	r3, [r7, #4]
 800d110:	4603      	mov	r3, r0
 800d112:	73fb      	strb	r3, [r7, #15]
 800d114:	460b      	mov	r3, r1
 800d116:	81bb      	strh	r3, [r7, #12]
 800d118:	4613      	mov	r3, r2
 800d11a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d120:	8a7b      	ldrh	r3, [r7, #18]
 800d122:	3303      	adds	r3, #3
 800d124:	f023 0203 	bic.w	r2, r3, #3
 800d128:	89bb      	ldrh	r3, [r7, #12]
 800d12a:	441a      	add	r2, r3
 800d12c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d12e:	429a      	cmp	r2, r3
 800d130:	d901      	bls.n	800d136 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d132:	2300      	movs	r3, #0
 800d134:	e018      	b.n	800d168 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d136:	6a3b      	ldr	r3, [r7, #32]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d007      	beq.n	800d14c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d13c:	8a7b      	ldrh	r3, [r7, #18]
 800d13e:	3303      	adds	r3, #3
 800d140:	f023 0303 	bic.w	r3, r3, #3
 800d144:	6a3a      	ldr	r2, [r7, #32]
 800d146:	4413      	add	r3, r2
 800d148:	617b      	str	r3, [r7, #20]
 800d14a:	e001      	b.n	800d150 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d14c:	2300      	movs	r3, #0
 800d14e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	89b9      	ldrh	r1, [r7, #12]
 800d154:	89ba      	ldrh	r2, [r7, #12]
 800d156:	2302      	movs	r3, #2
 800d158:	9301      	str	r3, [sp, #4]
 800d15a:	897b      	ldrh	r3, [r7, #10]
 800d15c:	9300      	str	r3, [sp, #0]
 800d15e:	460b      	mov	r3, r1
 800d160:	6979      	ldr	r1, [r7, #20]
 800d162:	f7ff fe7d 	bl	800ce60 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d166:	687b      	ldr	r3, [r7, #4]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3718      	adds	r7, #24
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d106      	bne.n	800d190 <pbuf_realloc+0x20>
 800d182:	4b3a      	ldr	r3, [pc, #232]	; (800d26c <pbuf_realloc+0xfc>)
 800d184:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d188:	4939      	ldr	r1, [pc, #228]	; (800d270 <pbuf_realloc+0x100>)
 800d18a:	483a      	ldr	r0, [pc, #232]	; (800d274 <pbuf_realloc+0x104>)
 800d18c:	f008 ffd0 	bl	8016130 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	891b      	ldrh	r3, [r3, #8]
 800d194:	887a      	ldrh	r2, [r7, #2]
 800d196:	429a      	cmp	r2, r3
 800d198:	d263      	bcs.n	800d262 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	891a      	ldrh	r2, [r3, #8]
 800d19e:	887b      	ldrh	r3, [r7, #2]
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d1a4:	887b      	ldrh	r3, [r7, #2]
 800d1a6:	817b      	strh	r3, [r7, #10]
  q = p;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d1ac:	e018      	b.n	800d1e0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	895b      	ldrh	r3, [r3, #10]
 800d1b2:	897a      	ldrh	r2, [r7, #10]
 800d1b4:	1ad3      	subs	r3, r2, r3
 800d1b6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	891a      	ldrh	r2, [r3, #8]
 800d1bc:	893b      	ldrh	r3, [r7, #8]
 800d1be:	1ad3      	subs	r3, r2, r3
 800d1c0:	b29a      	uxth	r2, r3
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d106      	bne.n	800d1e0 <pbuf_realloc+0x70>
 800d1d2:	4b26      	ldr	r3, [pc, #152]	; (800d26c <pbuf_realloc+0xfc>)
 800d1d4:	f240 12af 	movw	r2, #431	; 0x1af
 800d1d8:	4927      	ldr	r1, [pc, #156]	; (800d278 <pbuf_realloc+0x108>)
 800d1da:	4826      	ldr	r0, [pc, #152]	; (800d274 <pbuf_realloc+0x104>)
 800d1dc:	f008 ffa8 	bl	8016130 <iprintf>
  while (rem_len > q->len) {
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	895b      	ldrh	r3, [r3, #10]
 800d1e4:	897a      	ldrh	r2, [r7, #10]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d8e1      	bhi.n	800d1ae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	7b1b      	ldrb	r3, [r3, #12]
 800d1ee:	f003 030f 	and.w	r3, r3, #15
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d121      	bne.n	800d23a <pbuf_realloc+0xca>
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	895b      	ldrh	r3, [r3, #10]
 800d1fa:	897a      	ldrh	r2, [r7, #10]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d01c      	beq.n	800d23a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	7b5b      	ldrb	r3, [r3, #13]
 800d204:	f003 0302 	and.w	r3, r3, #2
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d116      	bne.n	800d23a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	685a      	ldr	r2, [r3, #4]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	1ad3      	subs	r3, r2, r3
 800d214:	b29a      	uxth	r2, r3
 800d216:	897b      	ldrh	r3, [r7, #10]
 800d218:	4413      	add	r3, r2
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	4619      	mov	r1, r3
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f7fe ffba 	bl	800c198 <mem_trim>
 800d224:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d106      	bne.n	800d23a <pbuf_realloc+0xca>
 800d22c:	4b0f      	ldr	r3, [pc, #60]	; (800d26c <pbuf_realloc+0xfc>)
 800d22e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d232:	4912      	ldr	r1, [pc, #72]	; (800d27c <pbuf_realloc+0x10c>)
 800d234:	480f      	ldr	r0, [pc, #60]	; (800d274 <pbuf_realloc+0x104>)
 800d236:	f008 ff7b 	bl	8016130 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	897a      	ldrh	r2, [r7, #10]
 800d23e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	895a      	ldrh	r2, [r3, #10]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d004      	beq.n	800d25a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4618      	mov	r0, r3
 800d256:	f000 f911 	bl	800d47c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2200      	movs	r2, #0
 800d25e:	601a      	str	r2, [r3, #0]
 800d260:	e000      	b.n	800d264 <pbuf_realloc+0xf4>
    return;
 800d262:	bf00      	nop

}
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	08017a20 	.word	0x08017a20
 800d270:	08017b38 	.word	0x08017b38
 800d274:	08017a80 	.word	0x08017a80
 800d278:	08017b50 	.word	0x08017b50
 800d27c:	08017b68 	.word	0x08017b68

0800d280 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b086      	sub	sp, #24
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	4613      	mov	r3, r2
 800d28c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d106      	bne.n	800d2a2 <pbuf_add_header_impl+0x22>
 800d294:	4b2b      	ldr	r3, [pc, #172]	; (800d344 <pbuf_add_header_impl+0xc4>)
 800d296:	f240 12df 	movw	r2, #479	; 0x1df
 800d29a:	492b      	ldr	r1, [pc, #172]	; (800d348 <pbuf_add_header_impl+0xc8>)
 800d29c:	482b      	ldr	r0, [pc, #172]	; (800d34c <pbuf_add_header_impl+0xcc>)
 800d29e:	f008 ff47 	bl	8016130 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d003      	beq.n	800d2b0 <pbuf_add_header_impl+0x30>
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2ae:	d301      	bcc.n	800d2b4 <pbuf_add_header_impl+0x34>
    return 1;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e043      	b.n	800d33c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <pbuf_add_header_impl+0x3e>
    return 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	e03e      	b.n	800d33c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	891a      	ldrh	r2, [r3, #8]
 800d2c6:	8a7b      	ldrh	r3, [r7, #18]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	8a7a      	ldrh	r2, [r7, #18]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d901      	bls.n	800d2d6 <pbuf_add_header_impl+0x56>
    return 1;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e032      	b.n	800d33c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	7b1b      	ldrb	r3, [r3, #12]
 800d2da:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d2dc:	8a3b      	ldrh	r3, [r7, #16]
 800d2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00c      	beq.n	800d300 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	685a      	ldr	r2, [r3, #4]
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	425b      	negs	r3, r3
 800d2ee:	4413      	add	r3, r2
 800d2f0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	3310      	adds	r3, #16
 800d2f6:	697a      	ldr	r2, [r7, #20]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d20d      	bcs.n	800d318 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e01d      	b.n	800d33c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d300:	79fb      	ldrb	r3, [r7, #7]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d006      	beq.n	800d314 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	685a      	ldr	r2, [r3, #4]
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	425b      	negs	r3, r3
 800d30e:	4413      	add	r3, r2
 800d310:	617b      	str	r3, [r7, #20]
 800d312:	e001      	b.n	800d318 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d314:	2301      	movs	r3, #1
 800d316:	e011      	b.n	800d33c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	697a      	ldr	r2, [r7, #20]
 800d31c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	895a      	ldrh	r2, [r3, #10]
 800d322:	8a7b      	ldrh	r3, [r7, #18]
 800d324:	4413      	add	r3, r2
 800d326:	b29a      	uxth	r2, r3
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	891a      	ldrh	r2, [r3, #8]
 800d330:	8a7b      	ldrh	r3, [r7, #18]
 800d332:	4413      	add	r3, r2
 800d334:	b29a      	uxth	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	811a      	strh	r2, [r3, #8]


  return 0;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3718      	adds	r7, #24
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	08017a20 	.word	0x08017a20
 800d348:	08017b84 	.word	0x08017b84
 800d34c:	08017a80 	.word	0x08017a80

0800d350 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d35a:	2200      	movs	r2, #0
 800d35c:	6839      	ldr	r1, [r7, #0]
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7ff ff8e 	bl	800d280 <pbuf_add_header_impl>
 800d364:	4603      	mov	r3, r0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
	...

0800d370 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d106      	bne.n	800d38e <pbuf_remove_header+0x1e>
 800d380:	4b20      	ldr	r3, [pc, #128]	; (800d404 <pbuf_remove_header+0x94>)
 800d382:	f240 224b 	movw	r2, #587	; 0x24b
 800d386:	4920      	ldr	r1, [pc, #128]	; (800d408 <pbuf_remove_header+0x98>)
 800d388:	4820      	ldr	r0, [pc, #128]	; (800d40c <pbuf_remove_header+0x9c>)
 800d38a:	f008 fed1 	bl	8016130 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d003      	beq.n	800d39c <pbuf_remove_header+0x2c>
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d39a:	d301      	bcc.n	800d3a0 <pbuf_remove_header+0x30>
    return 1;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e02c      	b.n	800d3fa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d101      	bne.n	800d3aa <pbuf_remove_header+0x3a>
    return 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	e027      	b.n	800d3fa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	895b      	ldrh	r3, [r3, #10]
 800d3b2:	89fa      	ldrh	r2, [r7, #14]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d908      	bls.n	800d3ca <pbuf_remove_header+0x5a>
 800d3b8:	4b12      	ldr	r3, [pc, #72]	; (800d404 <pbuf_remove_header+0x94>)
 800d3ba:	f240 2255 	movw	r2, #597	; 0x255
 800d3be:	4914      	ldr	r1, [pc, #80]	; (800d410 <pbuf_remove_header+0xa0>)
 800d3c0:	4812      	ldr	r0, [pc, #72]	; (800d40c <pbuf_remove_header+0x9c>)
 800d3c2:	f008 feb5 	bl	8016130 <iprintf>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e017      	b.n	800d3fa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	441a      	add	r2, r3
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	895a      	ldrh	r2, [r3, #10]
 800d3e0:	89fb      	ldrh	r3, [r7, #14]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	b29a      	uxth	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	891a      	ldrh	r2, [r3, #8]
 800d3ee:	89fb      	ldrh	r3, [r7, #14]
 800d3f0:	1ad3      	subs	r3, r2, r3
 800d3f2:	b29a      	uxth	r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d3f8:	2300      	movs	r3, #0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	08017a20 	.word	0x08017a20
 800d408:	08017b84 	.word	0x08017b84
 800d40c:	08017a80 	.word	0x08017a80
 800d410:	08017b90 	.word	0x08017b90

0800d414 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	460b      	mov	r3, r1
 800d41e:	807b      	strh	r3, [r7, #2]
 800d420:	4613      	mov	r3, r2
 800d422:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d424:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	da08      	bge.n	800d43e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d42c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d430:	425b      	negs	r3, r3
 800d432:	4619      	mov	r1, r3
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f7ff ff9b 	bl	800d370 <pbuf_remove_header>
 800d43a:	4603      	mov	r3, r0
 800d43c:	e007      	b.n	800d44e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d43e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d442:	787a      	ldrb	r2, [r7, #1]
 800d444:	4619      	mov	r1, r3
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7ff ff1a 	bl	800d280 <pbuf_add_header_impl>
 800d44c:	4603      	mov	r3, r0
  }
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b082      	sub	sp, #8
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
 800d45e:	460b      	mov	r3, r1
 800d460:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d462:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d466:	2201      	movs	r2, #1
 800d468:	4619      	mov	r1, r3
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f7ff ffd2 	bl	800d414 <pbuf_header_impl>
 800d470:	4603      	mov	r3, r0
}
 800d472:	4618      	mov	r0, r3
 800d474:	3708      	adds	r7, #8
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
	...

0800d47c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b086      	sub	sp, #24
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d10b      	bne.n	800d4a2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d106      	bne.n	800d49e <pbuf_free+0x22>
 800d490:	4b38      	ldr	r3, [pc, #224]	; (800d574 <pbuf_free+0xf8>)
 800d492:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d496:	4938      	ldr	r1, [pc, #224]	; (800d578 <pbuf_free+0xfc>)
 800d498:	4838      	ldr	r0, [pc, #224]	; (800d57c <pbuf_free+0x100>)
 800d49a:	f008 fe49 	bl	8016130 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	e063      	b.n	800d56a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d4a6:	e05c      	b.n	800d562 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	7b9b      	ldrb	r3, [r3, #14]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d106      	bne.n	800d4be <pbuf_free+0x42>
 800d4b0:	4b30      	ldr	r3, [pc, #192]	; (800d574 <pbuf_free+0xf8>)
 800d4b2:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d4b6:	4932      	ldr	r1, [pc, #200]	; (800d580 <pbuf_free+0x104>)
 800d4b8:	4830      	ldr	r0, [pc, #192]	; (800d57c <pbuf_free+0x100>)
 800d4ba:	f008 fe39 	bl	8016130 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	7b9b      	ldrb	r3, [r3, #14]
 800d4c2:	3b01      	subs	r3, #1
 800d4c4:	b2da      	uxtb	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	739a      	strb	r2, [r3, #14]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	7b9b      	ldrb	r3, [r3, #14]
 800d4ce:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d4d0:	7dbb      	ldrb	r3, [r7, #22]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d143      	bne.n	800d55e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	7b1b      	ldrb	r3, [r3, #12]
 800d4e0:	f003 030f 	and.w	r3, r3, #15
 800d4e4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	7b5b      	ldrb	r3, [r3, #13]
 800d4ea:	f003 0302 	and.w	r3, r3, #2
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d011      	beq.n	800d516 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d106      	bne.n	800d50c <pbuf_free+0x90>
 800d4fe:	4b1d      	ldr	r3, [pc, #116]	; (800d574 <pbuf_free+0xf8>)
 800d500:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d504:	491f      	ldr	r1, [pc, #124]	; (800d584 <pbuf_free+0x108>)
 800d506:	481d      	ldr	r0, [pc, #116]	; (800d57c <pbuf_free+0x100>)
 800d508:	f008 fe12 	bl	8016130 <iprintf>
        pc->custom_free_function(p);
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	691b      	ldr	r3, [r3, #16]
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	4798      	blx	r3
 800d514:	e01d      	b.n	800d552 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d516:	7bfb      	ldrb	r3, [r7, #15]
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d104      	bne.n	800d526 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d51c:	6879      	ldr	r1, [r7, #4]
 800d51e:	2008      	movs	r0, #8
 800d520:	f7ff f936 	bl	800c790 <memp_free>
 800d524:	e015      	b.n	800d552 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d526:	7bfb      	ldrb	r3, [r7, #15]
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d104      	bne.n	800d536 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	2007      	movs	r0, #7
 800d530:	f7ff f92e 	bl	800c790 <memp_free>
 800d534:	e00d      	b.n	800d552 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d536:	7bfb      	ldrb	r3, [r7, #15]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d103      	bne.n	800d544 <pbuf_free+0xc8>
          mem_free(p);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7fe fdc1 	bl	800c0c4 <mem_free>
 800d542:	e006      	b.n	800d552 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d544:	4b0b      	ldr	r3, [pc, #44]	; (800d574 <pbuf_free+0xf8>)
 800d546:	f240 320f 	movw	r2, #783	; 0x30f
 800d54a:	490f      	ldr	r1, [pc, #60]	; (800d588 <pbuf_free+0x10c>)
 800d54c:	480b      	ldr	r0, [pc, #44]	; (800d57c <pbuf_free+0x100>)
 800d54e:	f008 fdef 	bl	8016130 <iprintf>
        }
      }
      count++;
 800d552:	7dfb      	ldrb	r3, [r7, #23]
 800d554:	3301      	adds	r3, #1
 800d556:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	607b      	str	r3, [r7, #4]
 800d55c:	e001      	b.n	800d562 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d55e:	2300      	movs	r3, #0
 800d560:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d19f      	bne.n	800d4a8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d568:	7dfb      	ldrb	r3, [r7, #23]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3718      	adds	r7, #24
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	08017a20 	.word	0x08017a20
 800d578:	08017b84 	.word	0x08017b84
 800d57c:	08017a80 	.word	0x08017a80
 800d580:	08017bb0 	.word	0x08017bb0
 800d584:	08017bc8 	.word	0x08017bc8
 800d588:	08017bec 	.word	0x08017bec

0800d58c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d598:	e005      	b.n	800d5a6 <pbuf_clen+0x1a>
    ++len;
 800d59a:	89fb      	ldrh	r3, [r7, #14]
 800d59c:	3301      	adds	r3, #1
 800d59e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1f6      	bne.n	800d59a <pbuf_clen+0xe>
  }
  return len;
 800d5ac:	89fb      	ldrh	r3, [r7, #14]
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3714      	adds	r7, #20
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr
	...

0800d5bc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d010      	beq.n	800d5ec <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	7b9b      	ldrb	r3, [r3, #14]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	b2da      	uxtb	r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	7b9b      	ldrb	r3, [r3, #14]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d106      	bne.n	800d5ec <pbuf_ref+0x30>
 800d5de:	4b05      	ldr	r3, [pc, #20]	; (800d5f4 <pbuf_ref+0x38>)
 800d5e0:	f240 3242 	movw	r2, #834	; 0x342
 800d5e4:	4904      	ldr	r1, [pc, #16]	; (800d5f8 <pbuf_ref+0x3c>)
 800d5e6:	4805      	ldr	r0, [pc, #20]	; (800d5fc <pbuf_ref+0x40>)
 800d5e8:	f008 fda2 	bl	8016130 <iprintf>
  }
}
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	08017a20 	.word	0x08017a20
 800d5f8:	08017c00 	.word	0x08017c00
 800d5fc:	08017a80 	.word	0x08017a80

0800d600 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d002      	beq.n	800d616 <pbuf_cat+0x16>
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d107      	bne.n	800d626 <pbuf_cat+0x26>
 800d616:	4b20      	ldr	r3, [pc, #128]	; (800d698 <pbuf_cat+0x98>)
 800d618:	f240 3259 	movw	r2, #857	; 0x359
 800d61c:	491f      	ldr	r1, [pc, #124]	; (800d69c <pbuf_cat+0x9c>)
 800d61e:	4820      	ldr	r0, [pc, #128]	; (800d6a0 <pbuf_cat+0xa0>)
 800d620:	f008 fd86 	bl	8016130 <iprintf>
 800d624:	e034      	b.n	800d690 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	60fb      	str	r3, [r7, #12]
 800d62a:	e00a      	b.n	800d642 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	891a      	ldrh	r2, [r3, #8]
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	891b      	ldrh	r3, [r3, #8]
 800d634:	4413      	add	r3, r2
 800d636:	b29a      	uxth	r2, r3
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	60fb      	str	r3, [r7, #12]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d1f0      	bne.n	800d62c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	891a      	ldrh	r2, [r3, #8]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	895b      	ldrh	r3, [r3, #10]
 800d652:	429a      	cmp	r2, r3
 800d654:	d006      	beq.n	800d664 <pbuf_cat+0x64>
 800d656:	4b10      	ldr	r3, [pc, #64]	; (800d698 <pbuf_cat+0x98>)
 800d658:	f240 3262 	movw	r2, #866	; 0x362
 800d65c:	4911      	ldr	r1, [pc, #68]	; (800d6a4 <pbuf_cat+0xa4>)
 800d65e:	4810      	ldr	r0, [pc, #64]	; (800d6a0 <pbuf_cat+0xa0>)
 800d660:	f008 fd66 	bl	8016130 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d006      	beq.n	800d67a <pbuf_cat+0x7a>
 800d66c:	4b0a      	ldr	r3, [pc, #40]	; (800d698 <pbuf_cat+0x98>)
 800d66e:	f240 3263 	movw	r2, #867	; 0x363
 800d672:	490d      	ldr	r1, [pc, #52]	; (800d6a8 <pbuf_cat+0xa8>)
 800d674:	480a      	ldr	r0, [pc, #40]	; (800d6a0 <pbuf_cat+0xa0>)
 800d676:	f008 fd5b 	bl	8016130 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	891a      	ldrh	r2, [r3, #8]
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	891b      	ldrh	r3, [r3, #8]
 800d682:	4413      	add	r3, r2
 800d684:	b29a      	uxth	r2, r3
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	683a      	ldr	r2, [r7, #0]
 800d68e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	08017a20 	.word	0x08017a20
 800d69c:	08017c14 	.word	0x08017c14
 800d6a0:	08017a80 	.word	0x08017a80
 800d6a4:	08017c4c 	.word	0x08017c4c
 800d6a8:	08017c7c 	.word	0x08017c7c

0800d6ac <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d6b6:	6839      	ldr	r1, [r7, #0]
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f7ff ffa1 	bl	800d600 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d6be:	6838      	ldr	r0, [r7, #0]
 800d6c0:	f7ff ff7c 	bl	800d5bc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d6c4:	bf00      	nop
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b086      	sub	sp, #24
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	617b      	str	r3, [r7, #20]
 800d6da:	2300      	movs	r3, #0
 800d6dc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d008      	beq.n	800d6f6 <pbuf_copy+0x2a>
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d005      	beq.n	800d6f6 <pbuf_copy+0x2a>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	891a      	ldrh	r2, [r3, #8]
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	891b      	ldrh	r3, [r3, #8]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d209      	bcs.n	800d70a <pbuf_copy+0x3e>
 800d6f6:	4b57      	ldr	r3, [pc, #348]	; (800d854 <pbuf_copy+0x188>)
 800d6f8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d6fc:	4956      	ldr	r1, [pc, #344]	; (800d858 <pbuf_copy+0x18c>)
 800d6fe:	4857      	ldr	r0, [pc, #348]	; (800d85c <pbuf_copy+0x190>)
 800d700:	f008 fd16 	bl	8016130 <iprintf>
 800d704:	f06f 030f 	mvn.w	r3, #15
 800d708:	e09f      	b.n	800d84a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	895b      	ldrh	r3, [r3, #10]
 800d70e:	461a      	mov	r2, r3
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	1ad2      	subs	r2, r2, r3
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	895b      	ldrh	r3, [r3, #10]
 800d718:	4619      	mov	r1, r3
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	1acb      	subs	r3, r1, r3
 800d71e:	429a      	cmp	r2, r3
 800d720:	d306      	bcc.n	800d730 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	895b      	ldrh	r3, [r3, #10]
 800d726:	461a      	mov	r2, r3
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	1ad3      	subs	r3, r2, r3
 800d72c:	60fb      	str	r3, [r7, #12]
 800d72e:	e005      	b.n	800d73c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	895b      	ldrh	r3, [r3, #10]
 800d734:	461a      	mov	r2, r3
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	685a      	ldr	r2, [r3, #4]
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	18d0      	adds	r0, r2, r3
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	685a      	ldr	r2, [r3, #4]
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	4413      	add	r3, r2
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	4619      	mov	r1, r3
 800d750:	f008 fcd8 	bl	8016104 <memcpy>
    offset_to += len;
 800d754:	697a      	ldr	r2, [r7, #20]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	4413      	add	r3, r2
 800d75a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d75c:	693a      	ldr	r2, [r7, #16]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	4413      	add	r3, r2
 800d762:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	895b      	ldrh	r3, [r3, #10]
 800d768:	461a      	mov	r2, r3
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d906      	bls.n	800d77e <pbuf_copy+0xb2>
 800d770:	4b38      	ldr	r3, [pc, #224]	; (800d854 <pbuf_copy+0x188>)
 800d772:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d776:	493a      	ldr	r1, [pc, #232]	; (800d860 <pbuf_copy+0x194>)
 800d778:	4838      	ldr	r0, [pc, #224]	; (800d85c <pbuf_copy+0x190>)
 800d77a:	f008 fcd9 	bl	8016130 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	895b      	ldrh	r3, [r3, #10]
 800d782:	461a      	mov	r2, r3
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	4293      	cmp	r3, r2
 800d788:	d906      	bls.n	800d798 <pbuf_copy+0xcc>
 800d78a:	4b32      	ldr	r3, [pc, #200]	; (800d854 <pbuf_copy+0x188>)
 800d78c:	f240 32da 	movw	r2, #986	; 0x3da
 800d790:	4934      	ldr	r1, [pc, #208]	; (800d864 <pbuf_copy+0x198>)
 800d792:	4832      	ldr	r0, [pc, #200]	; (800d85c <pbuf_copy+0x190>)
 800d794:	f008 fccc 	bl	8016130 <iprintf>
    if (offset_from >= p_from->len) {
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	895b      	ldrh	r3, [r3, #10]
 800d79c:	461a      	mov	r2, r3
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d304      	bcc.n	800d7ae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	895b      	ldrh	r3, [r3, #10]
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d114      	bne.n	800d7e4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d10c      	bne.n	800d7e4 <pbuf_copy+0x118>
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d009      	beq.n	800d7e4 <pbuf_copy+0x118>
 800d7d0:	4b20      	ldr	r3, [pc, #128]	; (800d854 <pbuf_copy+0x188>)
 800d7d2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d7d6:	4924      	ldr	r1, [pc, #144]	; (800d868 <pbuf_copy+0x19c>)
 800d7d8:	4820      	ldr	r0, [pc, #128]	; (800d85c <pbuf_copy+0x190>)
 800d7da:	f008 fca9 	bl	8016130 <iprintf>
 800d7de:	f06f 030f 	mvn.w	r3, #15
 800d7e2:	e032      	b.n	800d84a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d013      	beq.n	800d812 <pbuf_copy+0x146>
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	895a      	ldrh	r2, [r3, #10]
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	891b      	ldrh	r3, [r3, #8]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d10d      	bne.n	800d812 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d009      	beq.n	800d812 <pbuf_copy+0x146>
 800d7fe:	4b15      	ldr	r3, [pc, #84]	; (800d854 <pbuf_copy+0x188>)
 800d800:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d804:	4919      	ldr	r1, [pc, #100]	; (800d86c <pbuf_copy+0x1a0>)
 800d806:	4815      	ldr	r0, [pc, #84]	; (800d85c <pbuf_copy+0x190>)
 800d808:	f008 fc92 	bl	8016130 <iprintf>
 800d80c:	f06f 0305 	mvn.w	r3, #5
 800d810:	e01b      	b.n	800d84a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d013      	beq.n	800d840 <pbuf_copy+0x174>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	895a      	ldrh	r2, [r3, #10]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	891b      	ldrh	r3, [r3, #8]
 800d820:	429a      	cmp	r2, r3
 800d822:	d10d      	bne.n	800d840 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d009      	beq.n	800d840 <pbuf_copy+0x174>
 800d82c:	4b09      	ldr	r3, [pc, #36]	; (800d854 <pbuf_copy+0x188>)
 800d82e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d832:	490e      	ldr	r1, [pc, #56]	; (800d86c <pbuf_copy+0x1a0>)
 800d834:	4809      	ldr	r0, [pc, #36]	; (800d85c <pbuf_copy+0x190>)
 800d836:	f008 fc7b 	bl	8016130 <iprintf>
 800d83a:	f06f 0305 	mvn.w	r3, #5
 800d83e:	e004      	b.n	800d84a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	f47f af61 	bne.w	800d70a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d848:	2300      	movs	r3, #0
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3718      	adds	r7, #24
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	08017a20 	.word	0x08017a20
 800d858:	08017cc8 	.word	0x08017cc8
 800d85c:	08017a80 	.word	0x08017a80
 800d860:	08017cf8 	.word	0x08017cf8
 800d864:	08017d10 	.word	0x08017d10
 800d868:	08017d2c 	.word	0x08017d2c
 800d86c:	08017d3c 	.word	0x08017d3c

0800d870 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b088      	sub	sp, #32
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	4611      	mov	r1, r2
 800d87c:	461a      	mov	r2, r3
 800d87e:	460b      	mov	r3, r1
 800d880:	80fb      	strh	r3, [r7, #6]
 800d882:	4613      	mov	r3, r2
 800d884:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d886:	2300      	movs	r3, #0
 800d888:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d88a:	2300      	movs	r3, #0
 800d88c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d108      	bne.n	800d8a6 <pbuf_copy_partial+0x36>
 800d894:	4b2b      	ldr	r3, [pc, #172]	; (800d944 <pbuf_copy_partial+0xd4>)
 800d896:	f240 420a 	movw	r2, #1034	; 0x40a
 800d89a:	492b      	ldr	r1, [pc, #172]	; (800d948 <pbuf_copy_partial+0xd8>)
 800d89c:	482b      	ldr	r0, [pc, #172]	; (800d94c <pbuf_copy_partial+0xdc>)
 800d89e:	f008 fc47 	bl	8016130 <iprintf>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	e04a      	b.n	800d93c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d108      	bne.n	800d8be <pbuf_copy_partial+0x4e>
 800d8ac:	4b25      	ldr	r3, [pc, #148]	; (800d944 <pbuf_copy_partial+0xd4>)
 800d8ae:	f240 420b 	movw	r2, #1035	; 0x40b
 800d8b2:	4927      	ldr	r1, [pc, #156]	; (800d950 <pbuf_copy_partial+0xe0>)
 800d8b4:	4825      	ldr	r0, [pc, #148]	; (800d94c <pbuf_copy_partial+0xdc>)
 800d8b6:	f008 fc3b 	bl	8016130 <iprintf>
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	e03e      	b.n	800d93c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	61fb      	str	r3, [r7, #28]
 800d8c2:	e034      	b.n	800d92e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d8c4:	88bb      	ldrh	r3, [r7, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00a      	beq.n	800d8e0 <pbuf_copy_partial+0x70>
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	895b      	ldrh	r3, [r3, #10]
 800d8ce:	88ba      	ldrh	r2, [r7, #4]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d305      	bcc.n	800d8e0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	895b      	ldrh	r3, [r3, #10]
 800d8d8:	88ba      	ldrh	r2, [r7, #4]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	80bb      	strh	r3, [r7, #4]
 800d8de:	e023      	b.n	800d928 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	895a      	ldrh	r2, [r3, #10]
 800d8e4:	88bb      	ldrh	r3, [r7, #4]
 800d8e6:	1ad3      	subs	r3, r2, r3
 800d8e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d8ea:	8b3a      	ldrh	r2, [r7, #24]
 800d8ec:	88fb      	ldrh	r3, [r7, #6]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d901      	bls.n	800d8f6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d8f2:	88fb      	ldrh	r3, [r7, #6]
 800d8f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d8f6:	8b7b      	ldrh	r3, [r7, #26]
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	18d0      	adds	r0, r2, r3
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	685a      	ldr	r2, [r3, #4]
 800d900:	88bb      	ldrh	r3, [r7, #4]
 800d902:	4413      	add	r3, r2
 800d904:	8b3a      	ldrh	r2, [r7, #24]
 800d906:	4619      	mov	r1, r3
 800d908:	f008 fbfc 	bl	8016104 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d90c:	8afa      	ldrh	r2, [r7, #22]
 800d90e:	8b3b      	ldrh	r3, [r7, #24]
 800d910:	4413      	add	r3, r2
 800d912:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d914:	8b7a      	ldrh	r2, [r7, #26]
 800d916:	8b3b      	ldrh	r3, [r7, #24]
 800d918:	4413      	add	r3, r2
 800d91a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d91c:	88fa      	ldrh	r2, [r7, #6]
 800d91e:	8b3b      	ldrh	r3, [r7, #24]
 800d920:	1ad3      	subs	r3, r2, r3
 800d922:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d924:	2300      	movs	r3, #0
 800d926:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	61fb      	str	r3, [r7, #28]
 800d92e:	88fb      	ldrh	r3, [r7, #6]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d002      	beq.n	800d93a <pbuf_copy_partial+0xca>
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1c4      	bne.n	800d8c4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d93a:	8afb      	ldrh	r3, [r7, #22]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3720      	adds	r7, #32
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	08017a20 	.word	0x08017a20
 800d948:	08017d68 	.word	0x08017d68
 800d94c:	08017a80 	.word	0x08017a80
 800d950:	08017d88 	.word	0x08017d88

0800d954 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b088      	sub	sp, #32
 800d958:	af00      	add	r7, sp, #0
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	4613      	mov	r3, r2
 800d960:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800d962:	88fb      	ldrh	r3, [r7, #6]
 800d964:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800d966:	2300      	movs	r3, #0
 800d968:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d109      	bne.n	800d984 <pbuf_take+0x30>
 800d970:	4b3a      	ldr	r3, [pc, #232]	; (800da5c <pbuf_take+0x108>)
 800d972:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800d976:	493a      	ldr	r1, [pc, #232]	; (800da60 <pbuf_take+0x10c>)
 800d978:	483a      	ldr	r0, [pc, #232]	; (800da64 <pbuf_take+0x110>)
 800d97a:	f008 fbd9 	bl	8016130 <iprintf>
 800d97e:	f06f 030f 	mvn.w	r3, #15
 800d982:	e067      	b.n	800da54 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d109      	bne.n	800d99e <pbuf_take+0x4a>
 800d98a:	4b34      	ldr	r3, [pc, #208]	; (800da5c <pbuf_take+0x108>)
 800d98c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800d990:	4935      	ldr	r1, [pc, #212]	; (800da68 <pbuf_take+0x114>)
 800d992:	4834      	ldr	r0, [pc, #208]	; (800da64 <pbuf_take+0x110>)
 800d994:	f008 fbcc 	bl	8016130 <iprintf>
 800d998:	f06f 030f 	mvn.w	r3, #15
 800d99c:	e05a      	b.n	800da54 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	891b      	ldrh	r3, [r3, #8]
 800d9a2:	88fa      	ldrh	r2, [r7, #6]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d909      	bls.n	800d9bc <pbuf_take+0x68>
 800d9a8:	4b2c      	ldr	r3, [pc, #176]	; (800da5c <pbuf_take+0x108>)
 800d9aa:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800d9ae:	492f      	ldr	r1, [pc, #188]	; (800da6c <pbuf_take+0x118>)
 800d9b0:	482c      	ldr	r0, [pc, #176]	; (800da64 <pbuf_take+0x110>)
 800d9b2:	f008 fbbd 	bl	8016130 <iprintf>
 800d9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ba:	e04b      	b.n	800da54 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d007      	beq.n	800d9d2 <pbuf_take+0x7e>
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d004      	beq.n	800d9d2 <pbuf_take+0x7e>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	891b      	ldrh	r3, [r3, #8]
 800d9cc:	88fa      	ldrh	r2, [r7, #6]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d902      	bls.n	800d9d8 <pbuf_take+0x84>
    return ERR_ARG;
 800d9d2:	f06f 030f 	mvn.w	r3, #15
 800d9d6:	e03d      	b.n	800da54 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	61fb      	str	r3, [r7, #28]
 800d9dc:	e028      	b.n	800da30 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d106      	bne.n	800d9f2 <pbuf_take+0x9e>
 800d9e4:	4b1d      	ldr	r3, [pc, #116]	; (800da5c <pbuf_take+0x108>)
 800d9e6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d9ea:	4921      	ldr	r1, [pc, #132]	; (800da70 <pbuf_take+0x11c>)
 800d9ec:	481d      	ldr	r0, [pc, #116]	; (800da64 <pbuf_take+0x110>)
 800d9ee:	f008 fb9f 	bl	8016130 <iprintf>
    buf_copy_len = total_copy_len;
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	895b      	ldrh	r3, [r3, #10]
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d902      	bls.n	800da08 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	895b      	ldrh	r3, [r3, #10]
 800da06:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	6858      	ldr	r0, [r3, #4]
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	4413      	add	r3, r2
 800da12:	69ba      	ldr	r2, [r7, #24]
 800da14:	4619      	mov	r1, r3
 800da16:	f008 fb75 	bl	8016104 <memcpy>
    total_copy_len -= buf_copy_len;
 800da1a:	697a      	ldr	r2, [r7, #20]
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800da22:	693a      	ldr	r2, [r7, #16]
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	4413      	add	r3, r2
 800da28:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	61fb      	str	r3, [r7, #28]
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d1d3      	bne.n	800d9de <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d103      	bne.n	800da44 <pbuf_take+0xf0>
 800da3c:	88fb      	ldrh	r3, [r7, #6]
 800da3e:	693a      	ldr	r2, [r7, #16]
 800da40:	429a      	cmp	r2, r3
 800da42:	d006      	beq.n	800da52 <pbuf_take+0xfe>
 800da44:	4b05      	ldr	r3, [pc, #20]	; (800da5c <pbuf_take+0x108>)
 800da46:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800da4a:	490a      	ldr	r1, [pc, #40]	; (800da74 <pbuf_take+0x120>)
 800da4c:	4805      	ldr	r0, [pc, #20]	; (800da64 <pbuf_take+0x110>)
 800da4e:	f008 fb6f 	bl	8016130 <iprintf>
  return ERR_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3720      	adds	r7, #32
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	08017a20 	.word	0x08017a20
 800da60:	08017df8 	.word	0x08017df8
 800da64:	08017a80 	.word	0x08017a80
 800da68:	08017e10 	.word	0x08017e10
 800da6c:	08017e2c 	.word	0x08017e2c
 800da70:	08017e4c 	.word	0x08017e4c
 800da74:	08017e64 	.word	0x08017e64

0800da78 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	4603      	mov	r3, r0
 800da80:	603a      	str	r2, [r7, #0]
 800da82:	71fb      	strb	r3, [r7, #7]
 800da84:	460b      	mov	r3, r1
 800da86:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	8919      	ldrh	r1, [r3, #8]
 800da8c:	88ba      	ldrh	r2, [r7, #4]
 800da8e:	79fb      	ldrb	r3, [r7, #7]
 800da90:	4618      	mov	r0, r3
 800da92:	f7ff fa0f 	bl	800ceb4 <pbuf_alloc>
 800da96:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d101      	bne.n	800daa2 <pbuf_clone+0x2a>
    return NULL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	e011      	b.n	800dac6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800daa2:	6839      	ldr	r1, [r7, #0]
 800daa4:	68f8      	ldr	r0, [r7, #12]
 800daa6:	f7ff fe11 	bl	800d6cc <pbuf_copy>
 800daaa:	4603      	mov	r3, r0
 800daac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800daae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d006      	beq.n	800dac4 <pbuf_clone+0x4c>
 800dab6:	4b06      	ldr	r3, [pc, #24]	; (800dad0 <pbuf_clone+0x58>)
 800dab8:	f240 5224 	movw	r2, #1316	; 0x524
 800dabc:	4905      	ldr	r1, [pc, #20]	; (800dad4 <pbuf_clone+0x5c>)
 800dabe:	4806      	ldr	r0, [pc, #24]	; (800dad8 <pbuf_clone+0x60>)
 800dac0:	f008 fb36 	bl	8016130 <iprintf>
  return q;
 800dac4:	68fb      	ldr	r3, [r7, #12]
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	08017a20 	.word	0x08017a20
 800dad4:	08017e94 	.word	0x08017e94
 800dad8:	08017a80 	.word	0x08017a80

0800dadc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dae0:	f008 fbb4 	bl	801624c <rand>
 800dae4:	4603      	mov	r3, r0
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800daec:	b29b      	uxth	r3, r3
 800daee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800daf2:	b29a      	uxth	r2, r3
 800daf4:	4b01      	ldr	r3, [pc, #4]	; (800dafc <tcp_init+0x20>)
 800daf6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800daf8:	bf00      	nop
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	20000020 	.word	0x20000020

0800db00 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	7d1b      	ldrb	r3, [r3, #20]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d105      	bne.n	800db1c <tcp_free+0x1c>
 800db10:	4b06      	ldr	r3, [pc, #24]	; (800db2c <tcp_free+0x2c>)
 800db12:	22d4      	movs	r2, #212	; 0xd4
 800db14:	4906      	ldr	r1, [pc, #24]	; (800db30 <tcp_free+0x30>)
 800db16:	4807      	ldr	r0, [pc, #28]	; (800db34 <tcp_free+0x34>)
 800db18:	f008 fb0a 	bl	8016130 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800db1c:	6879      	ldr	r1, [r7, #4]
 800db1e:	2001      	movs	r0, #1
 800db20:	f7fe fe36 	bl	800c790 <memp_free>
}
 800db24:	bf00      	nop
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	08017f20 	.word	0x08017f20
 800db30:	08017f50 	.word	0x08017f50
 800db34:	08017f64 	.word	0x08017f64

0800db38 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	7d1b      	ldrb	r3, [r3, #20]
 800db44:	2b01      	cmp	r3, #1
 800db46:	d105      	bne.n	800db54 <tcp_free_listen+0x1c>
 800db48:	4b06      	ldr	r3, [pc, #24]	; (800db64 <tcp_free_listen+0x2c>)
 800db4a:	22df      	movs	r2, #223	; 0xdf
 800db4c:	4906      	ldr	r1, [pc, #24]	; (800db68 <tcp_free_listen+0x30>)
 800db4e:	4807      	ldr	r0, [pc, #28]	; (800db6c <tcp_free_listen+0x34>)
 800db50:	f008 faee 	bl	8016130 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800db54:	6879      	ldr	r1, [r7, #4]
 800db56:	2002      	movs	r0, #2
 800db58:	f7fe fe1a 	bl	800c790 <memp_free>
}
 800db5c:	bf00      	nop
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	08017f20 	.word	0x08017f20
 800db68:	08017f8c 	.word	0x08017f8c
 800db6c:	08017f64 	.word	0x08017f64

0800db70 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800db74:	f000 fea2 	bl	800e8bc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800db78:	4b07      	ldr	r3, [pc, #28]	; (800db98 <tcp_tmr+0x28>)
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	3301      	adds	r3, #1
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	4b05      	ldr	r3, [pc, #20]	; (800db98 <tcp_tmr+0x28>)
 800db82:	701a      	strb	r2, [r3, #0]
 800db84:	4b04      	ldr	r3, [pc, #16]	; (800db98 <tcp_tmr+0x28>)
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	f003 0301 	and.w	r3, r3, #1
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d001      	beq.n	800db94 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800db90:	f000 fb54 	bl	800e23c <tcp_slowtmr>
  }
}
 800db94:	bf00      	nop
 800db96:	bd80      	pop	{r7, pc}
 800db98:	20009705 	.word	0x20009705

0800db9c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d105      	bne.n	800dbb8 <tcp_remove_listener+0x1c>
 800dbac:	4b0d      	ldr	r3, [pc, #52]	; (800dbe4 <tcp_remove_listener+0x48>)
 800dbae:	22ff      	movs	r2, #255	; 0xff
 800dbb0:	490d      	ldr	r1, [pc, #52]	; (800dbe8 <tcp_remove_listener+0x4c>)
 800dbb2:	480e      	ldr	r0, [pc, #56]	; (800dbec <tcp_remove_listener+0x50>)
 800dbb4:	f008 fabc 	bl	8016130 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	60fb      	str	r3, [r7, #12]
 800dbbc:	e00a      	b.n	800dbd4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbc2:	683a      	ldr	r2, [r7, #0]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d102      	bne.n	800dbce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	60fb      	str	r3, [r7, #12]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1f1      	bne.n	800dbbe <tcp_remove_listener+0x22>
    }
  }
}
 800dbda:	bf00      	nop
 800dbdc:	bf00      	nop
 800dbde:	3710      	adds	r7, #16
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	08017f20 	.word	0x08017f20
 800dbe8:	08017fa8 	.word	0x08017fa8
 800dbec:	08017f64 	.word	0x08017f64

0800dbf0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d106      	bne.n	800dc0c <tcp_listen_closed+0x1c>
 800dbfe:	4b14      	ldr	r3, [pc, #80]	; (800dc50 <tcp_listen_closed+0x60>)
 800dc00:	f240 1211 	movw	r2, #273	; 0x111
 800dc04:	4913      	ldr	r1, [pc, #76]	; (800dc54 <tcp_listen_closed+0x64>)
 800dc06:	4814      	ldr	r0, [pc, #80]	; (800dc58 <tcp_listen_closed+0x68>)
 800dc08:	f008 fa92 	bl	8016130 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	7d1b      	ldrb	r3, [r3, #20]
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d006      	beq.n	800dc22 <tcp_listen_closed+0x32>
 800dc14:	4b0e      	ldr	r3, [pc, #56]	; (800dc50 <tcp_listen_closed+0x60>)
 800dc16:	f44f 7289 	mov.w	r2, #274	; 0x112
 800dc1a:	4910      	ldr	r1, [pc, #64]	; (800dc5c <tcp_listen_closed+0x6c>)
 800dc1c:	480e      	ldr	r0, [pc, #56]	; (800dc58 <tcp_listen_closed+0x68>)
 800dc1e:	f008 fa87 	bl	8016130 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dc22:	2301      	movs	r3, #1
 800dc24:	60fb      	str	r3, [r7, #12]
 800dc26:	e00b      	b.n	800dc40 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dc28:	4a0d      	ldr	r2, [pc, #52]	; (800dc60 <tcp_listen_closed+0x70>)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	6879      	ldr	r1, [r7, #4]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7ff ffb1 	bl	800db9c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	60fb      	str	r3, [r7, #12]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2b03      	cmp	r3, #3
 800dc44:	d9f0      	bls.n	800dc28 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dc46:	bf00      	nop
 800dc48:	bf00      	nop
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	08017f20 	.word	0x08017f20
 800dc54:	08017fd0 	.word	0x08017fd0
 800dc58:	08017f64 	.word	0x08017f64
 800dc5c:	08017fdc 	.word	0x08017fdc
 800dc60:	08019f08 	.word	0x08019f08

0800dc64 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dc64:	b5b0      	push	{r4, r5, r7, lr}
 800dc66:	b088      	sub	sp, #32
 800dc68:	af04      	add	r7, sp, #16
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d106      	bne.n	800dc84 <tcp_close_shutdown+0x20>
 800dc76:	4b63      	ldr	r3, [pc, #396]	; (800de04 <tcp_close_shutdown+0x1a0>)
 800dc78:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800dc7c:	4962      	ldr	r1, [pc, #392]	; (800de08 <tcp_close_shutdown+0x1a4>)
 800dc7e:	4863      	ldr	r0, [pc, #396]	; (800de0c <tcp_close_shutdown+0x1a8>)
 800dc80:	f008 fa56 	bl	8016130 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dc84:	78fb      	ldrb	r3, [r7, #3]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d066      	beq.n	800dd58 <tcp_close_shutdown+0xf4>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	7d1b      	ldrb	r3, [r3, #20]
 800dc8e:	2b04      	cmp	r3, #4
 800dc90:	d003      	beq.n	800dc9a <tcp_close_shutdown+0x36>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	7d1b      	ldrb	r3, [r3, #20]
 800dc96:	2b07      	cmp	r3, #7
 800dc98:	d15e      	bne.n	800dd58 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d104      	bne.n	800dcac <tcp_close_shutdown+0x48>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dca6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dcaa:	d055      	beq.n	800dd58 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	8b5b      	ldrh	r3, [r3, #26]
 800dcb0:	f003 0310 	and.w	r3, r3, #16
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d106      	bne.n	800dcc6 <tcp_close_shutdown+0x62>
 800dcb8:	4b52      	ldr	r3, [pc, #328]	; (800de04 <tcp_close_shutdown+0x1a0>)
 800dcba:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800dcbe:	4954      	ldr	r1, [pc, #336]	; (800de10 <tcp_close_shutdown+0x1ac>)
 800dcc0:	4852      	ldr	r0, [pc, #328]	; (800de0c <tcp_close_shutdown+0x1a8>)
 800dcc2:	f008 fa35 	bl	8016130 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dcce:	687d      	ldr	r5, [r7, #4]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	8ad2      	ldrh	r2, [r2, #22]
 800dcd8:	6879      	ldr	r1, [r7, #4]
 800dcda:	8b09      	ldrh	r1, [r1, #24]
 800dcdc:	9102      	str	r1, [sp, #8]
 800dcde:	9201      	str	r2, [sp, #4]
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	462b      	mov	r3, r5
 800dce4:	4622      	mov	r2, r4
 800dce6:	4601      	mov	r1, r0
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f004 fe91 	bl	8012a10 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f001 f8c6 	bl	800ee80 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dcf4:	4b47      	ldr	r3, [pc, #284]	; (800de14 <tcp_close_shutdown+0x1b0>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d105      	bne.n	800dd0a <tcp_close_shutdown+0xa6>
 800dcfe:	4b45      	ldr	r3, [pc, #276]	; (800de14 <tcp_close_shutdown+0x1b0>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	4a43      	ldr	r2, [pc, #268]	; (800de14 <tcp_close_shutdown+0x1b0>)
 800dd06:	6013      	str	r3, [r2, #0]
 800dd08:	e013      	b.n	800dd32 <tcp_close_shutdown+0xce>
 800dd0a:	4b42      	ldr	r3, [pc, #264]	; (800de14 <tcp_close_shutdown+0x1b0>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	60fb      	str	r3, [r7, #12]
 800dd10:	e00c      	b.n	800dd2c <tcp_close_shutdown+0xc8>
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d104      	bne.n	800dd26 <tcp_close_shutdown+0xc2>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	68da      	ldr	r2, [r3, #12]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	60da      	str	r2, [r3, #12]
 800dd24:	e005      	b.n	800dd32 <tcp_close_shutdown+0xce>
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	68db      	ldr	r3, [r3, #12]
 800dd2a:	60fb      	str	r3, [r7, #12]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1ef      	bne.n	800dd12 <tcp_close_shutdown+0xae>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2200      	movs	r2, #0
 800dd36:	60da      	str	r2, [r3, #12]
 800dd38:	4b37      	ldr	r3, [pc, #220]	; (800de18 <tcp_close_shutdown+0x1b4>)
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dd3e:	4b37      	ldr	r3, [pc, #220]	; (800de1c <tcp_close_shutdown+0x1b8>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d102      	bne.n	800dd4e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dd48:	f003 fd5e 	bl	8011808 <tcp_trigger_input_pcb_close>
 800dd4c:	e002      	b.n	800dd54 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7ff fed6 	bl	800db00 <tcp_free>
      }
      return ERR_OK;
 800dd54:	2300      	movs	r3, #0
 800dd56:	e050      	b.n	800ddfa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	7d1b      	ldrb	r3, [r3, #20]
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d03b      	beq.n	800ddd8 <tcp_close_shutdown+0x174>
 800dd60:	2b02      	cmp	r3, #2
 800dd62:	dc44      	bgt.n	800ddee <tcp_close_shutdown+0x18a>
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d002      	beq.n	800dd6e <tcp_close_shutdown+0x10a>
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d02a      	beq.n	800ddc2 <tcp_close_shutdown+0x15e>
 800dd6c:	e03f      	b.n	800ddee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	8adb      	ldrh	r3, [r3, #22]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d021      	beq.n	800ddba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd76:	4b2a      	ldr	r3, [pc, #168]	; (800de20 <tcp_close_shutdown+0x1bc>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d105      	bne.n	800dd8c <tcp_close_shutdown+0x128>
 800dd80:	4b27      	ldr	r3, [pc, #156]	; (800de20 <tcp_close_shutdown+0x1bc>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	4a26      	ldr	r2, [pc, #152]	; (800de20 <tcp_close_shutdown+0x1bc>)
 800dd88:	6013      	str	r3, [r2, #0]
 800dd8a:	e013      	b.n	800ddb4 <tcp_close_shutdown+0x150>
 800dd8c:	4b24      	ldr	r3, [pc, #144]	; (800de20 <tcp_close_shutdown+0x1bc>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	60bb      	str	r3, [r7, #8]
 800dd92:	e00c      	b.n	800ddae <tcp_close_shutdown+0x14a>
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d104      	bne.n	800dda8 <tcp_close_shutdown+0x144>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	68da      	ldr	r2, [r3, #12]
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	60da      	str	r2, [r3, #12]
 800dda6:	e005      	b.n	800ddb4 <tcp_close_shutdown+0x150>
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	60bb      	str	r3, [r7, #8]
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1ef      	bne.n	800dd94 <tcp_close_shutdown+0x130>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7ff fea0 	bl	800db00 <tcp_free>
      break;
 800ddc0:	e01a      	b.n	800ddf8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f7ff ff14 	bl	800dbf0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ddc8:	6879      	ldr	r1, [r7, #4]
 800ddca:	4816      	ldr	r0, [pc, #88]	; (800de24 <tcp_close_shutdown+0x1c0>)
 800ddcc:	f001 f8a8 	bl	800ef20 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f7ff feb1 	bl	800db38 <tcp_free_listen>
      break;
 800ddd6:	e00f      	b.n	800ddf8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ddd8:	6879      	ldr	r1, [r7, #4]
 800ddda:	480e      	ldr	r0, [pc, #56]	; (800de14 <tcp_close_shutdown+0x1b0>)
 800dddc:	f001 f8a0 	bl	800ef20 <tcp_pcb_remove>
 800dde0:	4b0d      	ldr	r3, [pc, #52]	; (800de18 <tcp_close_shutdown+0x1b4>)
 800dde2:	2201      	movs	r2, #1
 800dde4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7ff fe8a 	bl	800db00 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ddec:	e004      	b.n	800ddf8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 f81a 	bl	800de28 <tcp_close_shutdown_fin>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	e000      	b.n	800ddfa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3710      	adds	r7, #16
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bdb0      	pop	{r4, r5, r7, pc}
 800de02:	bf00      	nop
 800de04:	08017f20 	.word	0x08017f20
 800de08:	08017ff4 	.word	0x08017ff4
 800de0c:	08017f64 	.word	0x08017f64
 800de10:	08018014 	.word	0x08018014
 800de14:	200096fc 	.word	0x200096fc
 800de18:	20009704 	.word	0x20009704
 800de1c:	2000973c 	.word	0x2000973c
 800de20:	200096f4 	.word	0x200096f4
 800de24:	200096f8 	.word	0x200096f8

0800de28 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d106      	bne.n	800de44 <tcp_close_shutdown_fin+0x1c>
 800de36:	4b2e      	ldr	r3, [pc, #184]	; (800def0 <tcp_close_shutdown_fin+0xc8>)
 800de38:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800de3c:	492d      	ldr	r1, [pc, #180]	; (800def4 <tcp_close_shutdown_fin+0xcc>)
 800de3e:	482e      	ldr	r0, [pc, #184]	; (800def8 <tcp_close_shutdown_fin+0xd0>)
 800de40:	f008 f976 	bl	8016130 <iprintf>

  switch (pcb->state) {
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	7d1b      	ldrb	r3, [r3, #20]
 800de48:	2b07      	cmp	r3, #7
 800de4a:	d020      	beq.n	800de8e <tcp_close_shutdown_fin+0x66>
 800de4c:	2b07      	cmp	r3, #7
 800de4e:	dc2b      	bgt.n	800dea8 <tcp_close_shutdown_fin+0x80>
 800de50:	2b03      	cmp	r3, #3
 800de52:	d002      	beq.n	800de5a <tcp_close_shutdown_fin+0x32>
 800de54:	2b04      	cmp	r3, #4
 800de56:	d00d      	beq.n	800de74 <tcp_close_shutdown_fin+0x4c>
 800de58:	e026      	b.n	800dea8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f003 fee6 	bl	8011c2c <tcp_send_fin>
 800de60:	4603      	mov	r3, r0
 800de62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800de64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d11f      	bne.n	800deac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2205      	movs	r2, #5
 800de70:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de72:	e01b      	b.n	800deac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f003 fed9 	bl	8011c2c <tcp_send_fin>
 800de7a:	4603      	mov	r3, r0
 800de7c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800de7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d114      	bne.n	800deb0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2205      	movs	r2, #5
 800de8a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de8c:	e010      	b.n	800deb0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f003 fecc 	bl	8011c2c <tcp_send_fin>
 800de94:	4603      	mov	r3, r0
 800de96:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800de98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d109      	bne.n	800deb4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2209      	movs	r2, #9
 800dea4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dea6:	e005      	b.n	800deb4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dea8:	2300      	movs	r3, #0
 800deaa:	e01c      	b.n	800dee6 <tcp_close_shutdown_fin+0xbe>
      break;
 800deac:	bf00      	nop
 800deae:	e002      	b.n	800deb6 <tcp_close_shutdown_fin+0x8e>
      break;
 800deb0:	bf00      	nop
 800deb2:	e000      	b.n	800deb6 <tcp_close_shutdown_fin+0x8e>
      break;
 800deb4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800deb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d103      	bne.n	800dec6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f003 fff2 	bl	8011ea8 <tcp_output>
 800dec4:	e00d      	b.n	800dee2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dece:	d108      	bne.n	800dee2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	8b5b      	ldrh	r3, [r3, #26]
 800ded4:	f043 0308 	orr.w	r3, r3, #8
 800ded8:	b29a      	uxth	r2, r3
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dede:	2300      	movs	r3, #0
 800dee0:	e001      	b.n	800dee6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	08017f20 	.word	0x08017f20
 800def4:	08017fd0 	.word	0x08017fd0
 800def8:	08017f64 	.word	0x08017f64

0800defc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d109      	bne.n	800df1e <tcp_close+0x22>
 800df0a:	4b0f      	ldr	r3, [pc, #60]	; (800df48 <tcp_close+0x4c>)
 800df0c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800df10:	490e      	ldr	r1, [pc, #56]	; (800df4c <tcp_close+0x50>)
 800df12:	480f      	ldr	r0, [pc, #60]	; (800df50 <tcp_close+0x54>)
 800df14:	f008 f90c 	bl	8016130 <iprintf>
 800df18:	f06f 030f 	mvn.w	r3, #15
 800df1c:	e00f      	b.n	800df3e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	7d1b      	ldrb	r3, [r3, #20]
 800df22:	2b01      	cmp	r3, #1
 800df24:	d006      	beq.n	800df34 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	8b5b      	ldrh	r3, [r3, #26]
 800df2a:	f043 0310 	orr.w	r3, r3, #16
 800df2e:	b29a      	uxth	r2, r3
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800df34:	2101      	movs	r1, #1
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7ff fe94 	bl	800dc64 <tcp_close_shutdown>
 800df3c:	4603      	mov	r3, r0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3708      	adds	r7, #8
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	08017f20 	.word	0x08017f20
 800df4c:	08018030 	.word	0x08018030
 800df50:	08017f64 	.word	0x08017f64

0800df54 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b08e      	sub	sp, #56	; 0x38
 800df58:	af04      	add	r7, sp, #16
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d107      	bne.n	800df74 <tcp_abandon+0x20>
 800df64:	4b52      	ldr	r3, [pc, #328]	; (800e0b0 <tcp_abandon+0x15c>)
 800df66:	f240 223d 	movw	r2, #573	; 0x23d
 800df6a:	4952      	ldr	r1, [pc, #328]	; (800e0b4 <tcp_abandon+0x160>)
 800df6c:	4852      	ldr	r0, [pc, #328]	; (800e0b8 <tcp_abandon+0x164>)
 800df6e:	f008 f8df 	bl	8016130 <iprintf>
 800df72:	e099      	b.n	800e0a8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	7d1b      	ldrb	r3, [r3, #20]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d106      	bne.n	800df8a <tcp_abandon+0x36>
 800df7c:	4b4c      	ldr	r3, [pc, #304]	; (800e0b0 <tcp_abandon+0x15c>)
 800df7e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800df82:	494e      	ldr	r1, [pc, #312]	; (800e0bc <tcp_abandon+0x168>)
 800df84:	484c      	ldr	r0, [pc, #304]	; (800e0b8 <tcp_abandon+0x164>)
 800df86:	f008 f8d3 	bl	8016130 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	7d1b      	ldrb	r3, [r3, #20]
 800df8e:	2b0a      	cmp	r3, #10
 800df90:	d107      	bne.n	800dfa2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800df92:	6879      	ldr	r1, [r7, #4]
 800df94:	484a      	ldr	r0, [pc, #296]	; (800e0c0 <tcp_abandon+0x16c>)
 800df96:	f000 ffc3 	bl	800ef20 <tcp_pcb_remove>
    tcp_free(pcb);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7ff fdb0 	bl	800db00 <tcp_free>
 800dfa0:	e082      	b.n	800e0a8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfbc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	7d1b      	ldrb	r3, [r3, #20]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d126      	bne.n	800e01a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	8adb      	ldrh	r3, [r3, #22]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d02e      	beq.n	800e032 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dfd4:	4b3b      	ldr	r3, [pc, #236]	; (800e0c4 <tcp_abandon+0x170>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d105      	bne.n	800dfea <tcp_abandon+0x96>
 800dfde:	4b39      	ldr	r3, [pc, #228]	; (800e0c4 <tcp_abandon+0x170>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	4a37      	ldr	r2, [pc, #220]	; (800e0c4 <tcp_abandon+0x170>)
 800dfe6:	6013      	str	r3, [r2, #0]
 800dfe8:	e013      	b.n	800e012 <tcp_abandon+0xbe>
 800dfea:	4b36      	ldr	r3, [pc, #216]	; (800e0c4 <tcp_abandon+0x170>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	61fb      	str	r3, [r7, #28]
 800dff0:	e00c      	b.n	800e00c <tcp_abandon+0xb8>
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d104      	bne.n	800e006 <tcp_abandon+0xb2>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	68da      	ldr	r2, [r3, #12]
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	60da      	str	r2, [r3, #12]
 800e004:	e005      	b.n	800e012 <tcp_abandon+0xbe>
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	61fb      	str	r3, [r7, #28]
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d1ef      	bne.n	800dff2 <tcp_abandon+0x9e>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	60da      	str	r2, [r3, #12]
 800e018:	e00b      	b.n	800e032 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	8adb      	ldrh	r3, [r3, #22]
 800e022:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e024:	6879      	ldr	r1, [r7, #4]
 800e026:	4828      	ldr	r0, [pc, #160]	; (800e0c8 <tcp_abandon+0x174>)
 800e028:	f000 ff7a 	bl	800ef20 <tcp_pcb_remove>
 800e02c:	4b27      	ldr	r3, [pc, #156]	; (800e0cc <tcp_abandon+0x178>)
 800e02e:	2201      	movs	r2, #1
 800e030:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e036:	2b00      	cmp	r3, #0
 800e038:	d004      	beq.n	800e044 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e03e:	4618      	mov	r0, r3
 800e040:	f000 fd1c 	bl	800ea7c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d004      	beq.n	800e056 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e050:	4618      	mov	r0, r3
 800e052:	f000 fd13 	bl	800ea7c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d004      	beq.n	800e068 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e062:	4618      	mov	r0, r3
 800e064:	f000 fd0a 	bl	800ea7c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00e      	beq.n	800e08c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	3304      	adds	r3, #4
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	8b12      	ldrh	r2, [r2, #24]
 800e078:	9202      	str	r2, [sp, #8]
 800e07a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e07c:	9201      	str	r2, [sp, #4]
 800e07e:	9300      	str	r3, [sp, #0]
 800e080:	460b      	mov	r3, r1
 800e082:	697a      	ldr	r2, [r7, #20]
 800e084:	69b9      	ldr	r1, [r7, #24]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f004 fcc2 	bl	8012a10 <tcp_rst>
    }
    last_state = pcb->state;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	7d1b      	ldrb	r3, [r3, #20]
 800e090:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f7ff fd34 	bl	800db00 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d004      	beq.n	800e0a8 <tcp_abandon+0x154>
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	f06f 010c 	mvn.w	r1, #12
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	4798      	blx	r3
  }
}
 800e0a8:	3728      	adds	r7, #40	; 0x28
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	08017f20 	.word	0x08017f20
 800e0b4:	08018064 	.word	0x08018064
 800e0b8:	08017f64 	.word	0x08017f64
 800e0bc:	08018080 	.word	0x08018080
 800e0c0:	20009700 	.word	0x20009700
 800e0c4:	200096f4 	.word	0x200096f4
 800e0c8:	200096fc 	.word	0x200096fc
 800e0cc:	20009704 	.word	0x20009704

0800e0d0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e0d8:	2101      	movs	r1, #1
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7ff ff3a 	bl	800df54 <tcp_abandon>
}
 800e0e0:	bf00      	nop
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d106      	bne.n	800e104 <tcp_update_rcv_ann_wnd+0x1c>
 800e0f6:	4b25      	ldr	r3, [pc, #148]	; (800e18c <tcp_update_rcv_ann_wnd+0xa4>)
 800e0f8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e0fc:	4924      	ldr	r1, [pc, #144]	; (800e190 <tcp_update_rcv_ann_wnd+0xa8>)
 800e0fe:	4825      	ldr	r0, [pc, #148]	; (800e194 <tcp_update_rcv_ann_wnd+0xac>)
 800e100:	f008 f816 	bl	8016130 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e10c:	4413      	add	r3, r2
 800e10e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e118:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e11c:	bf28      	it	cs
 800e11e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e122:	b292      	uxth	r2, r2
 800e124:	4413      	add	r3, r2
 800e126:	68fa      	ldr	r2, [r7, #12]
 800e128:	1ad3      	subs	r3, r2, r3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	db08      	blt.n	800e140 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	e020      	b.n	800e182 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	dd03      	ble.n	800e156 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e154:	e014      	b.n	800e180 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e168:	d306      	bcc.n	800e178 <tcp_update_rcv_ann_wnd+0x90>
 800e16a:	4b08      	ldr	r3, [pc, #32]	; (800e18c <tcp_update_rcv_ann_wnd+0xa4>)
 800e16c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e170:	4909      	ldr	r1, [pc, #36]	; (800e198 <tcp_update_rcv_ann_wnd+0xb0>)
 800e172:	4808      	ldr	r0, [pc, #32]	; (800e194 <tcp_update_rcv_ann_wnd+0xac>)
 800e174:	f007 ffdc 	bl	8016130 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	b29a      	uxth	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e180:	2300      	movs	r3, #0
  }
}
 800e182:	4618      	mov	r0, r3
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	08017f20 	.word	0x08017f20
 800e190:	0801817c 	.word	0x0801817c
 800e194:	08017f64 	.word	0x08017f64
 800e198:	080181a0 	.word	0x080181a0

0800e19c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d107      	bne.n	800e1be <tcp_recved+0x22>
 800e1ae:	4b1f      	ldr	r3, [pc, #124]	; (800e22c <tcp_recved+0x90>)
 800e1b0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e1b4:	491e      	ldr	r1, [pc, #120]	; (800e230 <tcp_recved+0x94>)
 800e1b6:	481f      	ldr	r0, [pc, #124]	; (800e234 <tcp_recved+0x98>)
 800e1b8:	f007 ffba 	bl	8016130 <iprintf>
 800e1bc:	e032      	b.n	800e224 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	7d1b      	ldrb	r3, [r3, #20]
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d106      	bne.n	800e1d4 <tcp_recved+0x38>
 800e1c6:	4b19      	ldr	r3, [pc, #100]	; (800e22c <tcp_recved+0x90>)
 800e1c8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e1cc:	491a      	ldr	r1, [pc, #104]	; (800e238 <tcp_recved+0x9c>)
 800e1ce:	4819      	ldr	r0, [pc, #100]	; (800e234 <tcp_recved+0x98>)
 800e1d0:	f007 ffae 	bl	8016130 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e1d8:	887b      	ldrh	r3, [r7, #2]
 800e1da:	4413      	add	r3, r2
 800e1dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e1de:	89fb      	ldrh	r3, [r7, #14]
 800e1e0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e1e4:	d804      	bhi.n	800e1f0 <tcp_recved+0x54>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1ea:	89fa      	ldrh	r2, [r7, #14]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d204      	bcs.n	800e1fa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e1f6:	851a      	strh	r2, [r3, #40]	; 0x28
 800e1f8:	e002      	b.n	800e200 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	89fa      	ldrh	r2, [r7, #14]
 800e1fe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f7ff ff71 	bl	800e0e8 <tcp_update_rcv_ann_wnd>
 800e206:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e20e:	d309      	bcc.n	800e224 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	8b5b      	ldrh	r3, [r3, #26]
 800e214:	f043 0302 	orr.w	r3, r3, #2
 800e218:	b29a      	uxth	r2, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f003 fe42 	bl	8011ea8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	08017f20 	.word	0x08017f20
 800e230:	080181bc 	.word	0x080181bc
 800e234:	08017f64 	.word	0x08017f64
 800e238:	080181d4 	.word	0x080181d4

0800e23c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e23c:	b5b0      	push	{r4, r5, r7, lr}
 800e23e:	b090      	sub	sp, #64	; 0x40
 800e240:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e242:	2300      	movs	r3, #0
 800e244:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e248:	4b94      	ldr	r3, [pc, #592]	; (800e49c <tcp_slowtmr+0x260>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3301      	adds	r3, #1
 800e24e:	4a93      	ldr	r2, [pc, #588]	; (800e49c <tcp_slowtmr+0x260>)
 800e250:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e252:	4b93      	ldr	r3, [pc, #588]	; (800e4a0 <tcp_slowtmr+0x264>)
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	3301      	adds	r3, #1
 800e258:	b2da      	uxtb	r2, r3
 800e25a:	4b91      	ldr	r3, [pc, #580]	; (800e4a0 <tcp_slowtmr+0x264>)
 800e25c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e25e:	2300      	movs	r3, #0
 800e260:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e262:	4b90      	ldr	r3, [pc, #576]	; (800e4a4 <tcp_slowtmr+0x268>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e268:	e29d      	b.n	800e7a6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	7d1b      	ldrb	r3, [r3, #20]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d106      	bne.n	800e280 <tcp_slowtmr+0x44>
 800e272:	4b8d      	ldr	r3, [pc, #564]	; (800e4a8 <tcp_slowtmr+0x26c>)
 800e274:	f240 42be 	movw	r2, #1214	; 0x4be
 800e278:	498c      	ldr	r1, [pc, #560]	; (800e4ac <tcp_slowtmr+0x270>)
 800e27a:	488d      	ldr	r0, [pc, #564]	; (800e4b0 <tcp_slowtmr+0x274>)
 800e27c:	f007 ff58 	bl	8016130 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e282:	7d1b      	ldrb	r3, [r3, #20]
 800e284:	2b01      	cmp	r3, #1
 800e286:	d106      	bne.n	800e296 <tcp_slowtmr+0x5a>
 800e288:	4b87      	ldr	r3, [pc, #540]	; (800e4a8 <tcp_slowtmr+0x26c>)
 800e28a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e28e:	4989      	ldr	r1, [pc, #548]	; (800e4b4 <tcp_slowtmr+0x278>)
 800e290:	4887      	ldr	r0, [pc, #540]	; (800e4b0 <tcp_slowtmr+0x274>)
 800e292:	f007 ff4d 	bl	8016130 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e298:	7d1b      	ldrb	r3, [r3, #20]
 800e29a:	2b0a      	cmp	r3, #10
 800e29c:	d106      	bne.n	800e2ac <tcp_slowtmr+0x70>
 800e29e:	4b82      	ldr	r3, [pc, #520]	; (800e4a8 <tcp_slowtmr+0x26c>)
 800e2a0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e2a4:	4984      	ldr	r1, [pc, #528]	; (800e4b8 <tcp_slowtmr+0x27c>)
 800e2a6:	4882      	ldr	r0, [pc, #520]	; (800e4b0 <tcp_slowtmr+0x274>)
 800e2a8:	f007 ff42 	bl	8016130 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ae:	7f9a      	ldrb	r2, [r3, #30]
 800e2b0:	4b7b      	ldr	r3, [pc, #492]	; (800e4a0 <tcp_slowtmr+0x264>)
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d105      	bne.n	800e2c4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e2c2:	e270      	b.n	800e7a6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e2c4:	4b76      	ldr	r3, [pc, #472]	; (800e4a0 <tcp_slowtmr+0x264>)
 800e2c6:	781a      	ldrb	r2, [r3, #0]
 800e2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ca:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2da:	7d1b      	ldrb	r3, [r3, #20]
 800e2dc:	2b02      	cmp	r3, #2
 800e2de:	d10a      	bne.n	800e2f6 <tcp_slowtmr+0xba>
 800e2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e2e6:	2b05      	cmp	r3, #5
 800e2e8:	d905      	bls.n	800e2f6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2ee:	3301      	adds	r3, #1
 800e2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2f4:	e11e      	b.n	800e534 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e2fc:	2b0b      	cmp	r3, #11
 800e2fe:	d905      	bls.n	800e30c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e304:	3301      	adds	r3, #1
 800e306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e30a:	e113      	b.n	800e534 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e312:	2b00      	cmp	r3, #0
 800e314:	d075      	beq.n	800e402 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d006      	beq.n	800e32c <tcp_slowtmr+0xf0>
 800e31e:	4b62      	ldr	r3, [pc, #392]	; (800e4a8 <tcp_slowtmr+0x26c>)
 800e320:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e324:	4965      	ldr	r1, [pc, #404]	; (800e4bc <tcp_slowtmr+0x280>)
 800e326:	4862      	ldr	r0, [pc, #392]	; (800e4b0 <tcp_slowtmr+0x274>)
 800e328:	f007 ff02 	bl	8016130 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e330:	2b00      	cmp	r3, #0
 800e332:	d106      	bne.n	800e342 <tcp_slowtmr+0x106>
 800e334:	4b5c      	ldr	r3, [pc, #368]	; (800e4a8 <tcp_slowtmr+0x26c>)
 800e336:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e33a:	4961      	ldr	r1, [pc, #388]	; (800e4c0 <tcp_slowtmr+0x284>)
 800e33c:	485c      	ldr	r0, [pc, #368]	; (800e4b0 <tcp_slowtmr+0x274>)
 800e33e:	f007 fef7 	bl	8016130 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e344:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e348:	2b0b      	cmp	r3, #11
 800e34a:	d905      	bls.n	800e358 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e350:	3301      	adds	r3, #1
 800e352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e356:	e0ed      	b.n	800e534 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e35e:	3b01      	subs	r3, #1
 800e360:	4a58      	ldr	r2, [pc, #352]	; (800e4c4 <tcp_slowtmr+0x288>)
 800e362:	5cd3      	ldrb	r3, [r2, r3]
 800e364:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e368:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e36c:	7c7a      	ldrb	r2, [r7, #17]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d907      	bls.n	800e382 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e374:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e378:	3301      	adds	r3, #1
 800e37a:	b2da      	uxtb	r2, r3
 800e37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e384:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e388:	7c7a      	ldrb	r2, [r7, #17]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	f200 80d2 	bhi.w	800e534 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e390:	2301      	movs	r3, #1
 800e392:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d108      	bne.n	800e3b0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e39e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3a0:	f004 fc2a 	bl	8012bf8 <tcp_zero_window_probe>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d014      	beq.n	800e3d4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	623b      	str	r3, [r7, #32]
 800e3ae:	e011      	b.n	800e3d4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3ba:	f003 faef 	bl	801199c <tcp_split_unsent_seg>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d107      	bne.n	800e3d4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e3c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3c6:	f003 fd6f 	bl	8011ea8 <tcp_output>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d101      	bne.n	800e3d4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e3d4:	6a3b      	ldr	r3, [r7, #32]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	f000 80ac 	beq.w	800e534 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e3ea:	2b06      	cmp	r3, #6
 800e3ec:	f200 80a2 	bhi.w	800e534 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e400:	e098      	b.n	800e534 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e404:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e408:	2b00      	cmp	r3, #0
 800e40a:	db0f      	blt.n	800e42c <tcp_slowtmr+0x1f0>
 800e40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e412:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e416:	4293      	cmp	r3, r2
 800e418:	d008      	beq.n	800e42c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e420:	b29b      	uxth	r3, r3
 800e422:	3301      	adds	r3, #1
 800e424:	b29b      	uxth	r3, r3
 800e426:	b21a      	sxth	r2, r3
 800e428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e434:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e438:	429a      	cmp	r2, r3
 800e43a:	db7b      	blt.n	800e534 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e43c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e43e:	f004 f825 	bl	801248c <tcp_rexmit_rto_prepare>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d007      	beq.n	800e458 <tcp_slowtmr+0x21c>
 800e448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d171      	bne.n	800e534 <tcp_slowtmr+0x2f8>
 800e450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e454:	2b00      	cmp	r3, #0
 800e456:	d06d      	beq.n	800e534 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45a:	7d1b      	ldrb	r3, [r3, #20]
 800e45c:	2b02      	cmp	r3, #2
 800e45e:	d03a      	beq.n	800e4d6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e462:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e466:	2b0c      	cmp	r3, #12
 800e468:	bf28      	it	cs
 800e46a:	230c      	movcs	r3, #12
 800e46c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e470:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e474:	10db      	asrs	r3, r3, #3
 800e476:	b21b      	sxth	r3, r3
 800e478:	461a      	mov	r2, r3
 800e47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e480:	4413      	add	r3, r2
 800e482:	7efa      	ldrb	r2, [r7, #27]
 800e484:	4910      	ldr	r1, [pc, #64]	; (800e4c8 <tcp_slowtmr+0x28c>)
 800e486:	5c8a      	ldrb	r2, [r1, r2]
 800e488:	4093      	lsls	r3, r2
 800e48a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e492:	4293      	cmp	r3, r2
 800e494:	dc1a      	bgt.n	800e4cc <tcp_slowtmr+0x290>
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	b21a      	sxth	r2, r3
 800e49a:	e019      	b.n	800e4d0 <tcp_slowtmr+0x294>
 800e49c:	200096f0 	.word	0x200096f0
 800e4a0:	20009706 	.word	0x20009706
 800e4a4:	200096fc 	.word	0x200096fc
 800e4a8:	08017f20 	.word	0x08017f20
 800e4ac:	08018264 	.word	0x08018264
 800e4b0:	08017f64 	.word	0x08017f64
 800e4b4:	08018290 	.word	0x08018290
 800e4b8:	080182bc 	.word	0x080182bc
 800e4bc:	080182ec 	.word	0x080182ec
 800e4c0:	08018320 	.word	0x08018320
 800e4c4:	08019f00 	.word	0x08019f00
 800e4c8:	08019ef0 	.word	0x08019ef0
 800e4cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	2200      	movs	r2, #0
 800e4da:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	bf28      	it	cs
 800e4ec:	4613      	movcs	r3, r2
 800e4ee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e4f0:	8a7b      	ldrh	r3, [r7, #18]
 800e4f2:	085b      	lsrs	r3, r3, #1
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e504:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e506:	005b      	lsls	r3, r3, #1
 800e508:	b29b      	uxth	r3, r3
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d206      	bcs.n	800e51c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e512:	005b      	lsls	r3, r3, #1
 800e514:	b29a      	uxth	r2, r3
 800e516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e518:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e528:	2200      	movs	r2, #0
 800e52a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e52e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e530:	f004 f81c 	bl	801256c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e536:	7d1b      	ldrb	r3, [r3, #20]
 800e538:	2b06      	cmp	r3, #6
 800e53a:	d111      	bne.n	800e560 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53e:	8b5b      	ldrh	r3, [r3, #26]
 800e540:	f003 0310 	and.w	r3, r3, #16
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00b      	beq.n	800e560 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e548:	4b9c      	ldr	r3, [pc, #624]	; (800e7bc <tcp_slowtmr+0x580>)
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54e:	6a1b      	ldr	r3, [r3, #32]
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	2b28      	cmp	r3, #40	; 0x28
 800e554:	d904      	bls.n	800e560 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e55a:	3301      	adds	r3, #1
 800e55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e562:	7a5b      	ldrb	r3, [r3, #9]
 800e564:	f003 0308 	and.w	r3, r3, #8
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d04a      	beq.n	800e602 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e570:	2b04      	cmp	r3, #4
 800e572:	d003      	beq.n	800e57c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e576:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e578:	2b07      	cmp	r3, #7
 800e57a:	d142      	bne.n	800e602 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e57c:	4b8f      	ldr	r3, [pc, #572]	; (800e7bc <tcp_slowtmr+0x580>)
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e582:	6a1b      	ldr	r3, [r3, #32]
 800e584:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e588:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e58c:	4b8c      	ldr	r3, [pc, #560]	; (800e7c0 <tcp_slowtmr+0x584>)
 800e58e:	440b      	add	r3, r1
 800e590:	498c      	ldr	r1, [pc, #560]	; (800e7c4 <tcp_slowtmr+0x588>)
 800e592:	fba1 1303 	umull	r1, r3, r1, r3
 800e596:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e598:	429a      	cmp	r2, r3
 800e59a:	d90a      	bls.n	800e5b2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e59c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e5a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e5b0:	e027      	b.n	800e602 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5b2:	4b82      	ldr	r3, [pc, #520]	; (800e7bc <tcp_slowtmr+0x580>)
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b8:	6a1b      	ldr	r3, [r3, #32]
 800e5ba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5be:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	4b7f      	ldr	r3, [pc, #508]	; (800e7c8 <tcp_slowtmr+0x58c>)
 800e5cc:	fb00 f303 	mul.w	r3, r0, r3
 800e5d0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e5d2:	497c      	ldr	r1, [pc, #496]	; (800e7c4 <tcp_slowtmr+0x588>)
 800e5d4:	fba1 1303 	umull	r1, r3, r1, r3
 800e5d8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d911      	bls.n	800e602 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e5de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5e0:	f004 faca 	bl	8012b78 <tcp_keepalive>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e5ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d107      	bne.n	800e602 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	b2da      	uxtb	r2, r3
 800e5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e606:	2b00      	cmp	r3, #0
 800e608:	d011      	beq.n	800e62e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e60a:	4b6c      	ldr	r3, [pc, #432]	; (800e7bc <tcp_slowtmr+0x580>)
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e610:	6a1b      	ldr	r3, [r3, #32]
 800e612:	1ad2      	subs	r2, r2, r3
 800e614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e616:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e61a:	4619      	mov	r1, r3
 800e61c:	460b      	mov	r3, r1
 800e61e:	005b      	lsls	r3, r3, #1
 800e620:	440b      	add	r3, r1
 800e622:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e624:	429a      	cmp	r2, r3
 800e626:	d302      	bcc.n	800e62e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e62a:	f000 fddd 	bl	800f1e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e630:	7d1b      	ldrb	r3, [r3, #20]
 800e632:	2b03      	cmp	r3, #3
 800e634:	d10b      	bne.n	800e64e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e636:	4b61      	ldr	r3, [pc, #388]	; (800e7bc <tcp_slowtmr+0x580>)
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63c:	6a1b      	ldr	r3, [r3, #32]
 800e63e:	1ad3      	subs	r3, r2, r3
 800e640:	2b28      	cmp	r3, #40	; 0x28
 800e642:	d904      	bls.n	800e64e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e648:	3301      	adds	r3, #1
 800e64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e650:	7d1b      	ldrb	r3, [r3, #20]
 800e652:	2b09      	cmp	r3, #9
 800e654:	d10b      	bne.n	800e66e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e656:	4b59      	ldr	r3, [pc, #356]	; (800e7bc <tcp_slowtmr+0x580>)
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65c:	6a1b      	ldr	r3, [r3, #32]
 800e65e:	1ad3      	subs	r3, r2, r3
 800e660:	2bf0      	cmp	r3, #240	; 0xf0
 800e662:	d904      	bls.n	800e66e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e668:	3301      	adds	r3, #1
 800e66a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e66e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e672:	2b00      	cmp	r3, #0
 800e674:	d060      	beq.n	800e738 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e67c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e67e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e680:	f000 fbfe 	bl	800ee80 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e686:	2b00      	cmp	r3, #0
 800e688:	d010      	beq.n	800e6ac <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e68a:	4b50      	ldr	r3, [pc, #320]	; (800e7cc <tcp_slowtmr+0x590>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e690:	429a      	cmp	r2, r3
 800e692:	d106      	bne.n	800e6a2 <tcp_slowtmr+0x466>
 800e694:	4b4e      	ldr	r3, [pc, #312]	; (800e7d0 <tcp_slowtmr+0x594>)
 800e696:	f240 526d 	movw	r2, #1389	; 0x56d
 800e69a:	494e      	ldr	r1, [pc, #312]	; (800e7d4 <tcp_slowtmr+0x598>)
 800e69c:	484e      	ldr	r0, [pc, #312]	; (800e7d8 <tcp_slowtmr+0x59c>)
 800e69e:	f007 fd47 	bl	8016130 <iprintf>
        prev->next = pcb->next;
 800e6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a4:	68da      	ldr	r2, [r3, #12]
 800e6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a8:	60da      	str	r2, [r3, #12]
 800e6aa:	e00f      	b.n	800e6cc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e6ac:	4b47      	ldr	r3, [pc, #284]	; (800e7cc <tcp_slowtmr+0x590>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d006      	beq.n	800e6c4 <tcp_slowtmr+0x488>
 800e6b6:	4b46      	ldr	r3, [pc, #280]	; (800e7d0 <tcp_slowtmr+0x594>)
 800e6b8:	f240 5271 	movw	r2, #1393	; 0x571
 800e6bc:	4947      	ldr	r1, [pc, #284]	; (800e7dc <tcp_slowtmr+0x5a0>)
 800e6be:	4846      	ldr	r0, [pc, #280]	; (800e7d8 <tcp_slowtmr+0x59c>)
 800e6c0:	f007 fd36 	bl	8016130 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	4a40      	ldr	r2, [pc, #256]	; (800e7cc <tcp_slowtmr+0x590>)
 800e6ca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e6cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d013      	beq.n	800e6fc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e6dc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e0:	3304      	adds	r3, #4
 800e6e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6e4:	8ad2      	ldrh	r2, [r2, #22]
 800e6e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6e8:	8b09      	ldrh	r1, [r1, #24]
 800e6ea:	9102      	str	r1, [sp, #8]
 800e6ec:	9201      	str	r2, [sp, #4]
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	462b      	mov	r3, r5
 800e6f2:	4622      	mov	r2, r4
 800e6f4:	4601      	mov	r1, r0
 800e6f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6f8:	f004 f98a 	bl	8012a10 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fe:	691b      	ldr	r3, [r3, #16]
 800e700:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e704:	7d1b      	ldrb	r3, [r3, #20]
 800e706:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e712:	6838      	ldr	r0, [r7, #0]
 800e714:	f7ff f9f4 	bl	800db00 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e718:	4b31      	ldr	r3, [pc, #196]	; (800e7e0 <tcp_slowtmr+0x5a4>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d004      	beq.n	800e72e <tcp_slowtmr+0x4f2>
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f06f 010c 	mvn.w	r1, #12
 800e72a:	68b8      	ldr	r0, [r7, #8]
 800e72c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e72e:	4b2c      	ldr	r3, [pc, #176]	; (800e7e0 <tcp_slowtmr+0x5a4>)
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d037      	beq.n	800e7a6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e736:	e592      	b.n	800e25e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e744:	7f1b      	ldrb	r3, [r3, #28]
 800e746:	3301      	adds	r3, #1
 800e748:	b2da      	uxtb	r2, r3
 800e74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e750:	7f1a      	ldrb	r2, [r3, #28]
 800e752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e754:	7f5b      	ldrb	r3, [r3, #29]
 800e756:	429a      	cmp	r2, r3
 800e758:	d325      	bcc.n	800e7a6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75c:	2200      	movs	r2, #0
 800e75e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e760:	4b1f      	ldr	r3, [pc, #124]	; (800e7e0 <tcp_slowtmr+0x5a4>)
 800e762:	2200      	movs	r2, #0
 800e764:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00b      	beq.n	800e788 <tcp_slowtmr+0x54c>
 800e770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e778:	6912      	ldr	r2, [r2, #16]
 800e77a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e77c:	4610      	mov	r0, r2
 800e77e:	4798      	blx	r3
 800e780:	4603      	mov	r3, r0
 800e782:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e786:	e002      	b.n	800e78e <tcp_slowtmr+0x552>
 800e788:	2300      	movs	r3, #0
 800e78a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e78e:	4b14      	ldr	r3, [pc, #80]	; (800e7e0 <tcp_slowtmr+0x5a4>)
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d000      	beq.n	800e798 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e796:	e562      	b.n	800e25e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e798:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d102      	bne.n	800e7a6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7a2:	f003 fb81 	bl	8011ea8 <tcp_output>
  while (pcb != NULL) {
 800e7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f47f ad5e 	bne.w	800e26a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e7b2:	4b0c      	ldr	r3, [pc, #48]	; (800e7e4 <tcp_slowtmr+0x5a8>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e7b8:	e069      	b.n	800e88e <tcp_slowtmr+0x652>
 800e7ba:	bf00      	nop
 800e7bc:	200096f0 	.word	0x200096f0
 800e7c0:	000a4cb8 	.word	0x000a4cb8
 800e7c4:	10624dd3 	.word	0x10624dd3
 800e7c8:	000124f8 	.word	0x000124f8
 800e7cc:	200096fc 	.word	0x200096fc
 800e7d0:	08017f20 	.word	0x08017f20
 800e7d4:	08018358 	.word	0x08018358
 800e7d8:	08017f64 	.word	0x08017f64
 800e7dc:	08018384 	.word	0x08018384
 800e7e0:	20009704 	.word	0x20009704
 800e7e4:	20009700 	.word	0x20009700
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ea:	7d1b      	ldrb	r3, [r3, #20]
 800e7ec:	2b0a      	cmp	r3, #10
 800e7ee:	d006      	beq.n	800e7fe <tcp_slowtmr+0x5c2>
 800e7f0:	4b2b      	ldr	r3, [pc, #172]	; (800e8a0 <tcp_slowtmr+0x664>)
 800e7f2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e7f6:	492b      	ldr	r1, [pc, #172]	; (800e8a4 <tcp_slowtmr+0x668>)
 800e7f8:	482b      	ldr	r0, [pc, #172]	; (800e8a8 <tcp_slowtmr+0x66c>)
 800e7fa:	f007 fc99 	bl	8016130 <iprintf>
    pcb_remove = 0;
 800e7fe:	2300      	movs	r3, #0
 800e800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e804:	4b29      	ldr	r3, [pc, #164]	; (800e8ac <tcp_slowtmr+0x670>)
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80a:	6a1b      	ldr	r3, [r3, #32]
 800e80c:	1ad3      	subs	r3, r2, r3
 800e80e:	2bf0      	cmp	r3, #240	; 0xf0
 800e810:	d904      	bls.n	800e81c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e816:	3301      	adds	r3, #1
 800e818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e81c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e820:	2b00      	cmp	r3, #0
 800e822:	d02f      	beq.n	800e884 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e824:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e826:	f000 fb2b 	bl	800ee80 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d010      	beq.n	800e852 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e830:	4b1f      	ldr	r3, [pc, #124]	; (800e8b0 <tcp_slowtmr+0x674>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e836:	429a      	cmp	r2, r3
 800e838:	d106      	bne.n	800e848 <tcp_slowtmr+0x60c>
 800e83a:	4b19      	ldr	r3, [pc, #100]	; (800e8a0 <tcp_slowtmr+0x664>)
 800e83c:	f240 52af 	movw	r2, #1455	; 0x5af
 800e840:	491c      	ldr	r1, [pc, #112]	; (800e8b4 <tcp_slowtmr+0x678>)
 800e842:	4819      	ldr	r0, [pc, #100]	; (800e8a8 <tcp_slowtmr+0x66c>)
 800e844:	f007 fc74 	bl	8016130 <iprintf>
        prev->next = pcb->next;
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84a:	68da      	ldr	r2, [r3, #12]
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	60da      	str	r2, [r3, #12]
 800e850:	e00f      	b.n	800e872 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e852:	4b17      	ldr	r3, [pc, #92]	; (800e8b0 <tcp_slowtmr+0x674>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e858:	429a      	cmp	r2, r3
 800e85a:	d006      	beq.n	800e86a <tcp_slowtmr+0x62e>
 800e85c:	4b10      	ldr	r3, [pc, #64]	; (800e8a0 <tcp_slowtmr+0x664>)
 800e85e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e862:	4915      	ldr	r1, [pc, #84]	; (800e8b8 <tcp_slowtmr+0x67c>)
 800e864:	4810      	ldr	r0, [pc, #64]	; (800e8a8 <tcp_slowtmr+0x66c>)
 800e866:	f007 fc63 	bl	8016130 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	4a10      	ldr	r2, [pc, #64]	; (800e8b0 <tcp_slowtmr+0x674>)
 800e870:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e874:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e87c:	69f8      	ldr	r0, [r7, #28]
 800e87e:	f7ff f93f 	bl	800db00 <tcp_free>
 800e882:	e004      	b.n	800e88e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e886:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1a9      	bne.n	800e7e8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e894:	bf00      	nop
 800e896:	bf00      	nop
 800e898:	3730      	adds	r7, #48	; 0x30
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bdb0      	pop	{r4, r5, r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	08017f20 	.word	0x08017f20
 800e8a4:	080183b0 	.word	0x080183b0
 800e8a8:	08017f64 	.word	0x08017f64
 800e8ac:	200096f0 	.word	0x200096f0
 800e8b0:	20009700 	.word	0x20009700
 800e8b4:	080183e0 	.word	0x080183e0
 800e8b8:	08018408 	.word	0x08018408

0800e8bc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e8c2:	4b2d      	ldr	r3, [pc, #180]	; (800e978 <tcp_fasttmr+0xbc>)
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	4b2b      	ldr	r3, [pc, #172]	; (800e978 <tcp_fasttmr+0xbc>)
 800e8cc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e8ce:	4b2b      	ldr	r3, [pc, #172]	; (800e97c <tcp_fasttmr+0xc0>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e8d4:	e048      	b.n	800e968 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	7f9a      	ldrb	r2, [r3, #30]
 800e8da:	4b27      	ldr	r3, [pc, #156]	; (800e978 <tcp_fasttmr+0xbc>)
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d03f      	beq.n	800e962 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e8e2:	4b25      	ldr	r3, [pc, #148]	; (800e978 <tcp_fasttmr+0xbc>)
 800e8e4:	781a      	ldrb	r2, [r3, #0]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	8b5b      	ldrh	r3, [r3, #26]
 800e8ee:	f003 0301 	and.w	r3, r3, #1
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d010      	beq.n	800e918 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	8b5b      	ldrh	r3, [r3, #26]
 800e8fa:	f043 0302 	orr.w	r3, r3, #2
 800e8fe:	b29a      	uxth	r2, r3
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f003 facf 	bl	8011ea8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	8b5b      	ldrh	r3, [r3, #26]
 800e90e:	f023 0303 	bic.w	r3, r3, #3
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	8b5b      	ldrh	r3, [r3, #26]
 800e91c:	f003 0308 	and.w	r3, r3, #8
 800e920:	2b00      	cmp	r3, #0
 800e922:	d009      	beq.n	800e938 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	8b5b      	ldrh	r3, [r3, #26]
 800e928:	f023 0308 	bic.w	r3, r3, #8
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff fa78 	bl	800de28 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e942:	2b00      	cmp	r3, #0
 800e944:	d00a      	beq.n	800e95c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e946:	4b0e      	ldr	r3, [pc, #56]	; (800e980 <tcp_fasttmr+0xc4>)
 800e948:	2200      	movs	r2, #0
 800e94a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 f819 	bl	800e984 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e952:	4b0b      	ldr	r3, [pc, #44]	; (800e980 <tcp_fasttmr+0xc4>)
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d000      	beq.n	800e95c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e95a:	e7b8      	b.n	800e8ce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	607b      	str	r3, [r7, #4]
 800e960:	e002      	b.n	800e968 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1b3      	bne.n	800e8d6 <tcp_fasttmr+0x1a>
    }
  }
}
 800e96e:	bf00      	nop
 800e970:	bf00      	nop
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	20009706 	.word	0x20009706
 800e97c:	200096fc 	.word	0x200096fc
 800e980:	20009704 	.word	0x20009704

0800e984 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e984:	b590      	push	{r4, r7, lr}
 800e986:	b085      	sub	sp, #20
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d109      	bne.n	800e9a6 <tcp_process_refused_data+0x22>
 800e992:	4b37      	ldr	r3, [pc, #220]	; (800ea70 <tcp_process_refused_data+0xec>)
 800e994:	f240 6209 	movw	r2, #1545	; 0x609
 800e998:	4936      	ldr	r1, [pc, #216]	; (800ea74 <tcp_process_refused_data+0xf0>)
 800e99a:	4837      	ldr	r0, [pc, #220]	; (800ea78 <tcp_process_refused_data+0xf4>)
 800e99c:	f007 fbc8 	bl	8016130 <iprintf>
 800e9a0:	f06f 030f 	mvn.w	r3, #15
 800e9a4:	e060      	b.n	800ea68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9aa:	7b5b      	ldrb	r3, [r3, #13]
 800e9ac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9b2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d00b      	beq.n	800e9dc <tcp_process_refused_data+0x58>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6918      	ldr	r0, [r3, #16]
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	68ba      	ldr	r2, [r7, #8]
 800e9d2:	6879      	ldr	r1, [r7, #4]
 800e9d4:	47a0      	blx	r4
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	73fb      	strb	r3, [r7, #15]
 800e9da:	e007      	b.n	800e9ec <tcp_process_refused_data+0x68>
 800e9dc:	2300      	movs	r3, #0
 800e9de:	68ba      	ldr	r2, [r7, #8]
 800e9e0:	6879      	ldr	r1, [r7, #4]
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	f000 f8a4 	bl	800eb30 <tcp_recv_null>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e9ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d12a      	bne.n	800ea4a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e9f4:	7bbb      	ldrb	r3, [r7, #14]
 800e9f6:	f003 0320 	and.w	r3, r3, #32
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d033      	beq.n	800ea66 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ea06:	d005      	beq.n	800ea14 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00b      	beq.n	800ea36 <tcp_process_refused_data+0xb2>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6918      	ldr	r0, [r3, #16]
 800ea28:	2300      	movs	r3, #0
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	6879      	ldr	r1, [r7, #4]
 800ea2e:	47a0      	blx	r4
 800ea30:	4603      	mov	r3, r0
 800ea32:	73fb      	strb	r3, [r7, #15]
 800ea34:	e001      	b.n	800ea3a <tcp_process_refused_data+0xb6>
 800ea36:	2300      	movs	r3, #0
 800ea38:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ea3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea3e:	f113 0f0d 	cmn.w	r3, #13
 800ea42:	d110      	bne.n	800ea66 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ea44:	f06f 030c 	mvn.w	r3, #12
 800ea48:	e00e      	b.n	800ea68 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ea4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea4e:	f113 0f0d 	cmn.w	r3, #13
 800ea52:	d102      	bne.n	800ea5a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ea54:	f06f 030c 	mvn.w	r3, #12
 800ea58:	e006      	b.n	800ea68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	68ba      	ldr	r2, [r7, #8]
 800ea5e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ea60:	f06f 0304 	mvn.w	r3, #4
 800ea64:	e000      	b.n	800ea68 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ea66:	2300      	movs	r3, #0
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3714      	adds	r7, #20
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd90      	pop	{r4, r7, pc}
 800ea70:	08017f20 	.word	0x08017f20
 800ea74:	08018430 	.word	0x08018430
 800ea78:	08017f64 	.word	0x08017f64

0800ea7c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ea84:	e007      	b.n	800ea96 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 f80a 	bl	800eaa6 <tcp_seg_free>
    seg = next;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1f4      	bne.n	800ea86 <tcp_segs_free+0xa>
  }
}
 800ea9c:	bf00      	nop
 800ea9e:	bf00      	nop
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b082      	sub	sp, #8
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d00c      	beq.n	800eace <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d004      	beq.n	800eac6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7fe fcdb 	bl	800d47c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800eac6:	6879      	ldr	r1, [r7, #4]
 800eac8:	2003      	movs	r0, #3
 800eaca:	f7fd fe61 	bl	800c790 <memp_free>
  }
}
 800eace:	bf00      	nop
 800ead0:	3708      	adds	r7, #8
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
	...

0800ead8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d106      	bne.n	800eaf4 <tcp_seg_copy+0x1c>
 800eae6:	4b0f      	ldr	r3, [pc, #60]	; (800eb24 <tcp_seg_copy+0x4c>)
 800eae8:	f240 6282 	movw	r2, #1666	; 0x682
 800eaec:	490e      	ldr	r1, [pc, #56]	; (800eb28 <tcp_seg_copy+0x50>)
 800eaee:	480f      	ldr	r0, [pc, #60]	; (800eb2c <tcp_seg_copy+0x54>)
 800eaf0:	f007 fb1e 	bl	8016130 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800eaf4:	2003      	movs	r0, #3
 800eaf6:	f7fd fddb 	bl	800c6b0 <memp_malloc>
 800eafa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d101      	bne.n	800eb06 <tcp_seg_copy+0x2e>
    return NULL;
 800eb02:	2300      	movs	r3, #0
 800eb04:	e00a      	b.n	800eb1c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800eb06:	2210      	movs	r2, #16
 800eb08:	6879      	ldr	r1, [r7, #4]
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f007 fafa 	bl	8016104 <memcpy>
  pbuf_ref(cseg->p);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fe fd51 	bl	800d5bc <pbuf_ref>
  return cseg;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	08017f20 	.word	0x08017f20
 800eb28:	08018474 	.word	0x08018474
 800eb2c:	08017f64 	.word	0x08017f64

0800eb30 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	607a      	str	r2, [r7, #4]
 800eb3c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d109      	bne.n	800eb58 <tcp_recv_null+0x28>
 800eb44:	4b12      	ldr	r3, [pc, #72]	; (800eb90 <tcp_recv_null+0x60>)
 800eb46:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800eb4a:	4912      	ldr	r1, [pc, #72]	; (800eb94 <tcp_recv_null+0x64>)
 800eb4c:	4812      	ldr	r0, [pc, #72]	; (800eb98 <tcp_recv_null+0x68>)
 800eb4e:	f007 faef 	bl	8016130 <iprintf>
 800eb52:	f06f 030f 	mvn.w	r3, #15
 800eb56:	e016      	b.n	800eb86 <tcp_recv_null+0x56>

  if (p != NULL) {
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d009      	beq.n	800eb72 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	891b      	ldrh	r3, [r3, #8]
 800eb62:	4619      	mov	r1, r3
 800eb64:	68b8      	ldr	r0, [r7, #8]
 800eb66:	f7ff fb19 	bl	800e19c <tcp_recved>
    pbuf_free(p);
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f7fe fc86 	bl	800d47c <pbuf_free>
 800eb70:	e008      	b.n	800eb84 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800eb72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d104      	bne.n	800eb84 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800eb7a:	68b8      	ldr	r0, [r7, #8]
 800eb7c:	f7ff f9be 	bl	800defc <tcp_close>
 800eb80:	4603      	mov	r3, r0
 800eb82:	e000      	b.n	800eb86 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3710      	adds	r7, #16
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	08017f20 	.word	0x08017f20
 800eb94:	08018490 	.word	0x08018490
 800eb98:	08017f64 	.word	0x08017f64

0800eb9c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b086      	sub	sp, #24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	4603      	mov	r3, r0
 800eba4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	db01      	blt.n	800ebb2 <tcp_kill_prio+0x16>
 800ebae:	79fb      	ldrb	r3, [r7, #7]
 800ebb0:	e000      	b.n	800ebb4 <tcp_kill_prio+0x18>
 800ebb2:	237f      	movs	r3, #127	; 0x7f
 800ebb4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ebb6:	7afb      	ldrb	r3, [r7, #11]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d034      	beq.n	800ec26 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ebbc:	7afb      	ldrb	r3, [r7, #11]
 800ebbe:	3b01      	subs	r3, #1
 800ebc0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebca:	4b19      	ldr	r3, [pc, #100]	; (800ec30 <tcp_kill_prio+0x94>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	617b      	str	r3, [r7, #20]
 800ebd0:	e01f      	b.n	800ec12 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	7d5b      	ldrb	r3, [r3, #21]
 800ebd6:	7afa      	ldrb	r2, [r7, #11]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d80c      	bhi.n	800ebf6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ebe0:	7afa      	ldrb	r2, [r7, #11]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d112      	bne.n	800ec0c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ebe6:	4b13      	ldr	r3, [pc, #76]	; (800ec34 <tcp_kill_prio+0x98>)
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	6a1b      	ldr	r3, [r3, #32]
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	68fa      	ldr	r2, [r7, #12]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d80a      	bhi.n	800ec0c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ebf6:	4b0f      	ldr	r3, [pc, #60]	; (800ec34 <tcp_kill_prio+0x98>)
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	6a1b      	ldr	r3, [r3, #32]
 800ebfe:	1ad3      	subs	r3, r2, r3
 800ec00:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	7d5b      	ldrb	r3, [r3, #21]
 800ec0a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	617b      	str	r3, [r7, #20]
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d1dc      	bne.n	800ebd2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d004      	beq.n	800ec28 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec1e:	6938      	ldr	r0, [r7, #16]
 800ec20:	f7ff fa56 	bl	800e0d0 <tcp_abort>
 800ec24:	e000      	b.n	800ec28 <tcp_kill_prio+0x8c>
    return;
 800ec26:	bf00      	nop
  }
}
 800ec28:	3718      	adds	r7, #24
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	200096fc 	.word	0x200096fc
 800ec34:	200096f0 	.word	0x200096f0

0800ec38 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b086      	sub	sp, #24
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	4603      	mov	r3, r0
 800ec40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ec42:	79fb      	ldrb	r3, [r7, #7]
 800ec44:	2b08      	cmp	r3, #8
 800ec46:	d009      	beq.n	800ec5c <tcp_kill_state+0x24>
 800ec48:	79fb      	ldrb	r3, [r7, #7]
 800ec4a:	2b09      	cmp	r3, #9
 800ec4c:	d006      	beq.n	800ec5c <tcp_kill_state+0x24>
 800ec4e:	4b1a      	ldr	r3, [pc, #104]	; (800ecb8 <tcp_kill_state+0x80>)
 800ec50:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ec54:	4919      	ldr	r1, [pc, #100]	; (800ecbc <tcp_kill_state+0x84>)
 800ec56:	481a      	ldr	r0, [pc, #104]	; (800ecc0 <tcp_kill_state+0x88>)
 800ec58:	f007 fa6a 	bl	8016130 <iprintf>

  inactivity = 0;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ec60:	2300      	movs	r3, #0
 800ec62:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec64:	4b17      	ldr	r3, [pc, #92]	; (800ecc4 <tcp_kill_state+0x8c>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	617b      	str	r3, [r7, #20]
 800ec6a:	e017      	b.n	800ec9c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	7d1b      	ldrb	r3, [r3, #20]
 800ec70:	79fa      	ldrb	r2, [r7, #7]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d10f      	bne.n	800ec96 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ec76:	4b14      	ldr	r3, [pc, #80]	; (800ecc8 <tcp_kill_state+0x90>)
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	6a1b      	ldr	r3, [r3, #32]
 800ec7e:	1ad3      	subs	r3, r2, r3
 800ec80:	68fa      	ldr	r2, [r7, #12]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d807      	bhi.n	800ec96 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ec86:	4b10      	ldr	r3, [pc, #64]	; (800ecc8 <tcp_kill_state+0x90>)
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	6a1b      	ldr	r3, [r3, #32]
 800ec8e:	1ad3      	subs	r3, r2, r3
 800ec90:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	617b      	str	r3, [r7, #20]
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1e4      	bne.n	800ec6c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d003      	beq.n	800ecb0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eca8:	2100      	movs	r1, #0
 800ecaa:	6938      	ldr	r0, [r7, #16]
 800ecac:	f7ff f952 	bl	800df54 <tcp_abandon>
  }
}
 800ecb0:	bf00      	nop
 800ecb2:	3718      	adds	r7, #24
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	08017f20 	.word	0x08017f20
 800ecbc:	080184ac 	.word	0x080184ac
 800ecc0:	08017f64 	.word	0x08017f64
 800ecc4:	200096fc 	.word	0x200096fc
 800ecc8:	200096f0 	.word	0x200096f0

0800eccc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecda:	4b12      	ldr	r3, [pc, #72]	; (800ed24 <tcp_kill_timewait+0x58>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	60fb      	str	r3, [r7, #12]
 800ece0:	e012      	b.n	800ed08 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ece2:	4b11      	ldr	r3, [pc, #68]	; (800ed28 <tcp_kill_timewait+0x5c>)
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	6a1b      	ldr	r3, [r3, #32]
 800ecea:	1ad3      	subs	r3, r2, r3
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d807      	bhi.n	800ed02 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ecf2:	4b0d      	ldr	r3, [pc, #52]	; (800ed28 <tcp_kill_timewait+0x5c>)
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6a1b      	ldr	r3, [r3, #32]
 800ecfa:	1ad3      	subs	r3, r2, r3
 800ecfc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	68db      	ldr	r3, [r3, #12]
 800ed06:	60fb      	str	r3, [r7, #12]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d1e9      	bne.n	800ece2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d002      	beq.n	800ed1a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed14:	68b8      	ldr	r0, [r7, #8]
 800ed16:	f7ff f9db 	bl	800e0d0 <tcp_abort>
  }
}
 800ed1a:	bf00      	nop
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	20009700 	.word	0x20009700
 800ed28:	200096f0 	.word	0x200096f0

0800ed2c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ed32:	4b10      	ldr	r3, [pc, #64]	; (800ed74 <tcp_handle_closepend+0x48>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed38:	e014      	b.n	800ed64 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	68db      	ldr	r3, [r3, #12]
 800ed3e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	8b5b      	ldrh	r3, [r3, #26]
 800ed44:	f003 0308 	and.w	r3, r3, #8
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d009      	beq.n	800ed60 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	8b5b      	ldrh	r3, [r3, #26]
 800ed50:	f023 0308 	bic.w	r3, r3, #8
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f7ff f864 	bl	800de28 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1e7      	bne.n	800ed3a <tcp_handle_closepend+0xe>
  }
}
 800ed6a:	bf00      	nop
 800ed6c:	bf00      	nop
 800ed6e:	3708      	adds	r7, #8
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	200096fc 	.word	0x200096fc

0800ed78 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	4603      	mov	r3, r0
 800ed80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed82:	2001      	movs	r0, #1
 800ed84:	f7fd fc94 	bl	800c6b0 <memp_malloc>
 800ed88:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d126      	bne.n	800edde <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ed90:	f7ff ffcc 	bl	800ed2c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ed94:	f7ff ff9a 	bl	800eccc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed98:	2001      	movs	r0, #1
 800ed9a:	f7fd fc89 	bl	800c6b0 <memp_malloc>
 800ed9e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d11b      	bne.n	800edde <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800eda6:	2009      	movs	r0, #9
 800eda8:	f7ff ff46 	bl	800ec38 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edac:	2001      	movs	r0, #1
 800edae:	f7fd fc7f 	bl	800c6b0 <memp_malloc>
 800edb2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d111      	bne.n	800edde <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800edba:	2008      	movs	r0, #8
 800edbc:	f7ff ff3c 	bl	800ec38 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edc0:	2001      	movs	r0, #1
 800edc2:	f7fd fc75 	bl	800c6b0 <memp_malloc>
 800edc6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d107      	bne.n	800edde <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800edce:	79fb      	ldrb	r3, [r7, #7]
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7ff fee3 	bl	800eb9c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edd6:	2001      	movs	r0, #1
 800edd8:	f7fd fc6a 	bl	800c6b0 <memp_malloc>
 800eddc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d03f      	beq.n	800ee64 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ede4:	229c      	movs	r2, #156	; 0x9c
 800ede6:	2100      	movs	r1, #0
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f007 f999 	bl	8016120 <memset>
    pcb->prio = prio;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	79fa      	ldrb	r2, [r7, #7]
 800edf2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800edfa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ee04:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	22ff      	movs	r2, #255	; 0xff
 800ee12:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ee1a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2206      	movs	r2, #6
 800ee20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2206      	movs	r2, #6
 800ee28:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee30:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2201      	movs	r2, #1
 800ee36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ee3a:	4b0d      	ldr	r3, [pc, #52]	; (800ee70 <tcp_alloc+0xf8>)
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ee42:	4b0c      	ldr	r3, [pc, #48]	; (800ee74 <tcp_alloc+0xfc>)
 800ee44:	781a      	ldrb	r2, [r3, #0]
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ee50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	4a08      	ldr	r2, [pc, #32]	; (800ee78 <tcp_alloc+0x100>)
 800ee58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	4a07      	ldr	r2, [pc, #28]	; (800ee7c <tcp_alloc+0x104>)
 800ee60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ee64:	68fb      	ldr	r3, [r7, #12]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	200096f0 	.word	0x200096f0
 800ee74:	20009706 	.word	0x20009706
 800ee78:	0800eb31 	.word	0x0800eb31
 800ee7c:	006ddd00 	.word	0x006ddd00

0800ee80 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d107      	bne.n	800ee9e <tcp_pcb_purge+0x1e>
 800ee8e:	4b21      	ldr	r3, [pc, #132]	; (800ef14 <tcp_pcb_purge+0x94>)
 800ee90:	f640 0251 	movw	r2, #2129	; 0x851
 800ee94:	4920      	ldr	r1, [pc, #128]	; (800ef18 <tcp_pcb_purge+0x98>)
 800ee96:	4821      	ldr	r0, [pc, #132]	; (800ef1c <tcp_pcb_purge+0x9c>)
 800ee98:	f007 f94a 	bl	8016130 <iprintf>
 800ee9c:	e037      	b.n	800ef0e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	7d1b      	ldrb	r3, [r3, #20]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d033      	beq.n	800ef0e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800eeaa:	2b0a      	cmp	r3, #10
 800eeac:	d02f      	beq.n	800ef0e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d02b      	beq.n	800ef0e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d007      	beq.n	800eece <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fe fada 	bl	800d47c <pbuf_free>
      pcb->refused_data = NULL;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2200      	movs	r2, #0
 800eecc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d002      	beq.n	800eedc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f000 f986 	bl	800f1e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eee2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7ff fdc7 	bl	800ea7c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7ff fdc2 	bl	800ea7c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	66da      	str	r2, [r3, #108]	; 0x6c
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	08017f20 	.word	0x08017f20
 800ef18:	0801856c 	.word	0x0801856c
 800ef1c:	08017f64 	.word	0x08017f64

0800ef20 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d106      	bne.n	800ef3e <tcp_pcb_remove+0x1e>
 800ef30:	4b3e      	ldr	r3, [pc, #248]	; (800f02c <tcp_pcb_remove+0x10c>)
 800ef32:	f640 0283 	movw	r2, #2179	; 0x883
 800ef36:	493e      	ldr	r1, [pc, #248]	; (800f030 <tcp_pcb_remove+0x110>)
 800ef38:	483e      	ldr	r0, [pc, #248]	; (800f034 <tcp_pcb_remove+0x114>)
 800ef3a:	f007 f8f9 	bl	8016130 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d106      	bne.n	800ef52 <tcp_pcb_remove+0x32>
 800ef44:	4b39      	ldr	r3, [pc, #228]	; (800f02c <tcp_pcb_remove+0x10c>)
 800ef46:	f640 0284 	movw	r2, #2180	; 0x884
 800ef4a:	493b      	ldr	r1, [pc, #236]	; (800f038 <tcp_pcb_remove+0x118>)
 800ef4c:	4839      	ldr	r0, [pc, #228]	; (800f034 <tcp_pcb_remove+0x114>)
 800ef4e:	f007 f8ef 	bl	8016130 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	683a      	ldr	r2, [r7, #0]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d105      	bne.n	800ef68 <tcp_pcb_remove+0x48>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	68da      	ldr	r2, [r3, #12]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	601a      	str	r2, [r3, #0]
 800ef66:	e013      	b.n	800ef90 <tcp_pcb_remove+0x70>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	60fb      	str	r3, [r7, #12]
 800ef6e:	e00c      	b.n	800ef8a <tcp_pcb_remove+0x6a>
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	683a      	ldr	r2, [r7, #0]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d104      	bne.n	800ef84 <tcp_pcb_remove+0x64>
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	68da      	ldr	r2, [r3, #12]
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	60da      	str	r2, [r3, #12]
 800ef82:	e005      	b.n	800ef90 <tcp_pcb_remove+0x70>
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	60fb      	str	r3, [r7, #12]
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d1ef      	bne.n	800ef70 <tcp_pcb_remove+0x50>
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	2200      	movs	r2, #0
 800ef94:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ef96:	6838      	ldr	r0, [r7, #0]
 800ef98:	f7ff ff72 	bl	800ee80 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	7d1b      	ldrb	r3, [r3, #20]
 800efa0:	2b0a      	cmp	r3, #10
 800efa2:	d013      	beq.n	800efcc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d00f      	beq.n	800efcc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	8b5b      	ldrh	r3, [r3, #26]
 800efb0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d009      	beq.n	800efcc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	8b5b      	ldrh	r3, [r3, #26]
 800efbc:	f043 0302 	orr.w	r3, r3, #2
 800efc0:	b29a      	uxth	r2, r3
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800efc6:	6838      	ldr	r0, [r7, #0]
 800efc8:	f002 ff6e 	bl	8011ea8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	7d1b      	ldrb	r3, [r3, #20]
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d020      	beq.n	800f016 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d006      	beq.n	800efea <tcp_pcb_remove+0xca>
 800efdc:	4b13      	ldr	r3, [pc, #76]	; (800f02c <tcp_pcb_remove+0x10c>)
 800efde:	f640 0293 	movw	r2, #2195	; 0x893
 800efe2:	4916      	ldr	r1, [pc, #88]	; (800f03c <tcp_pcb_remove+0x11c>)
 800efe4:	4813      	ldr	r0, [pc, #76]	; (800f034 <tcp_pcb_remove+0x114>)
 800efe6:	f007 f8a3 	bl	8016130 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d006      	beq.n	800f000 <tcp_pcb_remove+0xe0>
 800eff2:	4b0e      	ldr	r3, [pc, #56]	; (800f02c <tcp_pcb_remove+0x10c>)
 800eff4:	f640 0294 	movw	r2, #2196	; 0x894
 800eff8:	4911      	ldr	r1, [pc, #68]	; (800f040 <tcp_pcb_remove+0x120>)
 800effa:	480e      	ldr	r0, [pc, #56]	; (800f034 <tcp_pcb_remove+0x114>)
 800effc:	f007 f898 	bl	8016130 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f004:	2b00      	cmp	r3, #0
 800f006:	d006      	beq.n	800f016 <tcp_pcb_remove+0xf6>
 800f008:	4b08      	ldr	r3, [pc, #32]	; (800f02c <tcp_pcb_remove+0x10c>)
 800f00a:	f640 0296 	movw	r2, #2198	; 0x896
 800f00e:	490d      	ldr	r1, [pc, #52]	; (800f044 <tcp_pcb_remove+0x124>)
 800f010:	4808      	ldr	r0, [pc, #32]	; (800f034 <tcp_pcb_remove+0x114>)
 800f012:	f007 f88d 	bl	8016130 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	2200      	movs	r2, #0
 800f01a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	2200      	movs	r2, #0
 800f020:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f022:	bf00      	nop
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	08017f20 	.word	0x08017f20
 800f030:	08018588 	.word	0x08018588
 800f034:	08017f64 	.word	0x08017f64
 800f038:	080185a4 	.word	0x080185a4
 800f03c:	080185c4 	.word	0x080185c4
 800f040:	080185dc 	.word	0x080185dc
 800f044:	080185f8 	.word	0x080185f8

0800f048 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d106      	bne.n	800f064 <tcp_next_iss+0x1c>
 800f056:	4b0a      	ldr	r3, [pc, #40]	; (800f080 <tcp_next_iss+0x38>)
 800f058:	f640 02af 	movw	r2, #2223	; 0x8af
 800f05c:	4909      	ldr	r1, [pc, #36]	; (800f084 <tcp_next_iss+0x3c>)
 800f05e:	480a      	ldr	r0, [pc, #40]	; (800f088 <tcp_next_iss+0x40>)
 800f060:	f007 f866 	bl	8016130 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f064:	4b09      	ldr	r3, [pc, #36]	; (800f08c <tcp_next_iss+0x44>)
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	4b09      	ldr	r3, [pc, #36]	; (800f090 <tcp_next_iss+0x48>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4413      	add	r3, r2
 800f06e:	4a07      	ldr	r2, [pc, #28]	; (800f08c <tcp_next_iss+0x44>)
 800f070:	6013      	str	r3, [r2, #0]
  return iss;
 800f072:	4b06      	ldr	r3, [pc, #24]	; (800f08c <tcp_next_iss+0x44>)
 800f074:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f076:	4618      	mov	r0, r3
 800f078:	3708      	adds	r7, #8
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	08017f20 	.word	0x08017f20
 800f084:	08018610 	.word	0x08018610
 800f088:	08017f64 	.word	0x08017f64
 800f08c:	20000024 	.word	0x20000024
 800f090:	200096f0 	.word	0x200096f0

0800f094 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b086      	sub	sp, #24
 800f098:	af00      	add	r7, sp, #0
 800f09a:	4603      	mov	r3, r0
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	607a      	str	r2, [r7, #4]
 800f0a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d106      	bne.n	800f0b6 <tcp_eff_send_mss_netif+0x22>
 800f0a8:	4b14      	ldr	r3, [pc, #80]	; (800f0fc <tcp_eff_send_mss_netif+0x68>)
 800f0aa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f0ae:	4914      	ldr	r1, [pc, #80]	; (800f100 <tcp_eff_send_mss_netif+0x6c>)
 800f0b0:	4814      	ldr	r0, [pc, #80]	; (800f104 <tcp_eff_send_mss_netif+0x70>)
 800f0b2:	f007 f83d 	bl	8016130 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d101      	bne.n	800f0c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f0bc:	89fb      	ldrh	r3, [r7, #14]
 800f0be:	e019      	b.n	800f0f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f0c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f0c6:	8afb      	ldrh	r3, [r7, #22]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d012      	beq.n	800f0f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f0cc:	2328      	movs	r3, #40	; 0x28
 800f0ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f0d0:	8afa      	ldrh	r2, [r7, #22]
 800f0d2:	8abb      	ldrh	r3, [r7, #20]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d904      	bls.n	800f0e2 <tcp_eff_send_mss_netif+0x4e>
 800f0d8:	8afa      	ldrh	r2, [r7, #22]
 800f0da:	8abb      	ldrh	r3, [r7, #20]
 800f0dc:	1ad3      	subs	r3, r2, r3
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	e000      	b.n	800f0e4 <tcp_eff_send_mss_netif+0x50>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f0e6:	8a7a      	ldrh	r2, [r7, #18]
 800f0e8:	89fb      	ldrh	r3, [r7, #14]
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	bf28      	it	cs
 800f0ee:	4613      	movcs	r3, r2
 800f0f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f0f2:	89fb      	ldrh	r3, [r7, #14]
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3718      	adds	r7, #24
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	08017f20 	.word	0x08017f20
 800f100:	0801862c 	.word	0x0801862c
 800f104:	08017f64 	.word	0x08017f64

0800f108 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d119      	bne.n	800f150 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f11c:	4b10      	ldr	r3, [pc, #64]	; (800f160 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f11e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f122:	4910      	ldr	r1, [pc, #64]	; (800f164 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f124:	4810      	ldr	r0, [pc, #64]	; (800f168 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f126:	f007 f803 	bl	8016130 <iprintf>

  while (pcb != NULL) {
 800f12a:	e011      	b.n	800f150 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	429a      	cmp	r2, r3
 800f136:	d108      	bne.n	800f14a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f7fe ffc6 	bl	800e0d0 <tcp_abort>
      pcb = next;
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	60fb      	str	r3, [r7, #12]
 800f148:	e002      	b.n	800f150 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d1ea      	bne.n	800f12c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f156:	bf00      	nop
 800f158:	bf00      	nop
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	08017f20 	.word	0x08017f20
 800f164:	08018654 	.word	0x08018654
 800f168:	08017f64 	.word	0x08017f64

0800f16c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d02a      	beq.n	800f1d2 <tcp_netif_ip_addr_changed+0x66>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d026      	beq.n	800f1d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f184:	4b15      	ldr	r3, [pc, #84]	; (800f1dc <tcp_netif_ip_addr_changed+0x70>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4619      	mov	r1, r3
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7ff ffbc 	bl	800f108 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f190:	4b13      	ldr	r3, [pc, #76]	; (800f1e0 <tcp_netif_ip_addr_changed+0x74>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4619      	mov	r1, r3
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f7ff ffb6 	bl	800f108 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d017      	beq.n	800f1d2 <tcp_netif_ip_addr_changed+0x66>
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d013      	beq.n	800f1d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f1aa:	4b0e      	ldr	r3, [pc, #56]	; (800f1e4 <tcp_netif_ip_addr_changed+0x78>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	60fb      	str	r3, [r7, #12]
 800f1b0:	e00c      	b.n	800f1cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d103      	bne.n	800f1c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	60fb      	str	r3, [r7, #12]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1ef      	bne.n	800f1b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f1d2:	bf00      	nop
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	200096fc 	.word	0x200096fc
 800f1e0:	200096f4 	.word	0x200096f4
 800f1e4:	200096f8 	.word	0x200096f8

0800f1e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b082      	sub	sp, #8
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d007      	beq.n	800f208 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7ff fc3d 	bl	800ea7c <tcp_segs_free>
    pcb->ooseq = NULL;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2200      	movs	r2, #0
 800f206:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f208:	bf00      	nop
 800f20a:	3708      	adds	r7, #8
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f210:	b590      	push	{r4, r7, lr}
 800f212:	b08d      	sub	sp, #52	; 0x34
 800f214:	af04      	add	r7, sp, #16
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d105      	bne.n	800f22c <tcp_input+0x1c>
 800f220:	4b9b      	ldr	r3, [pc, #620]	; (800f490 <tcp_input+0x280>)
 800f222:	2283      	movs	r2, #131	; 0x83
 800f224:	499b      	ldr	r1, [pc, #620]	; (800f494 <tcp_input+0x284>)
 800f226:	489c      	ldr	r0, [pc, #624]	; (800f498 <tcp_input+0x288>)
 800f228:	f006 ff82 	bl	8016130 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	4a9a      	ldr	r2, [pc, #616]	; (800f49c <tcp_input+0x28c>)
 800f232:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	895b      	ldrh	r3, [r3, #10]
 800f238:	2b13      	cmp	r3, #19
 800f23a:	f240 83d1 	bls.w	800f9e0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f23e:	4b98      	ldr	r3, [pc, #608]	; (800f4a0 <tcp_input+0x290>)
 800f240:	695b      	ldr	r3, [r3, #20]
 800f242:	4a97      	ldr	r2, [pc, #604]	; (800f4a0 <tcp_input+0x290>)
 800f244:	6812      	ldr	r2, [r2, #0]
 800f246:	4611      	mov	r1, r2
 800f248:	4618      	mov	r0, r3
 800f24a:	f005 ffd1 	bl	80151f0 <ip4_addr_isbroadcast_u32>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	f040 83c7 	bne.w	800f9e4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f256:	4b92      	ldr	r3, [pc, #584]	; (800f4a0 <tcp_input+0x290>)
 800f258:	695b      	ldr	r3, [r3, #20]
 800f25a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f25e:	2be0      	cmp	r3, #224	; 0xe0
 800f260:	f000 83c0 	beq.w	800f9e4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f264:	4b8d      	ldr	r3, [pc, #564]	; (800f49c <tcp_input+0x28c>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	899b      	ldrh	r3, [r3, #12]
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7fc fda7 	bl	800bdc0 <lwip_htons>
 800f272:	4603      	mov	r3, r0
 800f274:	0b1b      	lsrs	r3, r3, #12
 800f276:	b29b      	uxth	r3, r3
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	009b      	lsls	r3, r3, #2
 800f27c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f27e:	7cbb      	ldrb	r3, [r7, #18]
 800f280:	2b13      	cmp	r3, #19
 800f282:	f240 83b1 	bls.w	800f9e8 <tcp_input+0x7d8>
 800f286:	7cbb      	ldrb	r3, [r7, #18]
 800f288:	b29a      	uxth	r2, r3
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	891b      	ldrh	r3, [r3, #8]
 800f28e:	429a      	cmp	r2, r3
 800f290:	f200 83aa 	bhi.w	800f9e8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f294:	7cbb      	ldrb	r3, [r7, #18]
 800f296:	b29b      	uxth	r3, r3
 800f298:	3b14      	subs	r3, #20
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	4b81      	ldr	r3, [pc, #516]	; (800f4a4 <tcp_input+0x294>)
 800f29e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f2a0:	4b81      	ldr	r3, [pc, #516]	; (800f4a8 <tcp_input+0x298>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	895a      	ldrh	r2, [r3, #10]
 800f2aa:	7cbb      	ldrb	r3, [r7, #18]
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d309      	bcc.n	800f2c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f2b2:	4b7c      	ldr	r3, [pc, #496]	; (800f4a4 <tcp_input+0x294>)
 800f2b4:	881a      	ldrh	r2, [r3, #0]
 800f2b6:	4b7d      	ldr	r3, [pc, #500]	; (800f4ac <tcp_input+0x29c>)
 800f2b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f2ba:	7cbb      	ldrb	r3, [r7, #18]
 800f2bc:	4619      	mov	r1, r3
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f7fe f856 	bl	800d370 <pbuf_remove_header>
 800f2c4:	e04e      	b.n	800f364 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d105      	bne.n	800f2da <tcp_input+0xca>
 800f2ce:	4b70      	ldr	r3, [pc, #448]	; (800f490 <tcp_input+0x280>)
 800f2d0:	22c2      	movs	r2, #194	; 0xc2
 800f2d2:	4977      	ldr	r1, [pc, #476]	; (800f4b0 <tcp_input+0x2a0>)
 800f2d4:	4870      	ldr	r0, [pc, #448]	; (800f498 <tcp_input+0x288>)
 800f2d6:	f006 ff2b 	bl	8016130 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f2da:	2114      	movs	r1, #20
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f7fe f847 	bl	800d370 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	895a      	ldrh	r2, [r3, #10]
 800f2e6:	4b71      	ldr	r3, [pc, #452]	; (800f4ac <tcp_input+0x29c>)
 800f2e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f2ea:	4b6e      	ldr	r3, [pc, #440]	; (800f4a4 <tcp_input+0x294>)
 800f2ec:	881a      	ldrh	r2, [r3, #0]
 800f2ee:	4b6f      	ldr	r3, [pc, #444]	; (800f4ac <tcp_input+0x29c>)
 800f2f0:	881b      	ldrh	r3, [r3, #0]
 800f2f2:	1ad3      	subs	r3, r2, r3
 800f2f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f2f6:	4b6d      	ldr	r3, [pc, #436]	; (800f4ac <tcp_input+0x29c>)
 800f2f8:	881b      	ldrh	r3, [r3, #0]
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7fe f837 	bl	800d370 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	895b      	ldrh	r3, [r3, #10]
 800f308:	8a3a      	ldrh	r2, [r7, #16]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	f200 836e 	bhi.w	800f9ec <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	4a64      	ldr	r2, [pc, #400]	; (800f4a8 <tcp_input+0x298>)
 800f318:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	8a3a      	ldrh	r2, [r7, #16]
 800f320:	4611      	mov	r1, r2
 800f322:	4618      	mov	r0, r3
 800f324:	f7fe f824 	bl	800d370 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	891a      	ldrh	r2, [r3, #8]
 800f32c:	8a3b      	ldrh	r3, [r7, #16]
 800f32e:	1ad3      	subs	r3, r2, r3
 800f330:	b29a      	uxth	r2, r3
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	895b      	ldrh	r3, [r3, #10]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d005      	beq.n	800f34a <tcp_input+0x13a>
 800f33e:	4b54      	ldr	r3, [pc, #336]	; (800f490 <tcp_input+0x280>)
 800f340:	22df      	movs	r2, #223	; 0xdf
 800f342:	495c      	ldr	r1, [pc, #368]	; (800f4b4 <tcp_input+0x2a4>)
 800f344:	4854      	ldr	r0, [pc, #336]	; (800f498 <tcp_input+0x288>)
 800f346:	f006 fef3 	bl	8016130 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	891a      	ldrh	r2, [r3, #8]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	891b      	ldrh	r3, [r3, #8]
 800f354:	429a      	cmp	r2, r3
 800f356:	d005      	beq.n	800f364 <tcp_input+0x154>
 800f358:	4b4d      	ldr	r3, [pc, #308]	; (800f490 <tcp_input+0x280>)
 800f35a:	22e0      	movs	r2, #224	; 0xe0
 800f35c:	4956      	ldr	r1, [pc, #344]	; (800f4b8 <tcp_input+0x2a8>)
 800f35e:	484e      	ldr	r0, [pc, #312]	; (800f498 <tcp_input+0x288>)
 800f360:	f006 fee6 	bl	8016130 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f364:	4b4d      	ldr	r3, [pc, #308]	; (800f49c <tcp_input+0x28c>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	881b      	ldrh	r3, [r3, #0]
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	4a4b      	ldr	r2, [pc, #300]	; (800f49c <tcp_input+0x28c>)
 800f36e:	6814      	ldr	r4, [r2, #0]
 800f370:	4618      	mov	r0, r3
 800f372:	f7fc fd25 	bl	800bdc0 <lwip_htons>
 800f376:	4603      	mov	r3, r0
 800f378:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f37a:	4b48      	ldr	r3, [pc, #288]	; (800f49c <tcp_input+0x28c>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	885b      	ldrh	r3, [r3, #2]
 800f380:	b29b      	uxth	r3, r3
 800f382:	4a46      	ldr	r2, [pc, #280]	; (800f49c <tcp_input+0x28c>)
 800f384:	6814      	ldr	r4, [r2, #0]
 800f386:	4618      	mov	r0, r3
 800f388:	f7fc fd1a 	bl	800bdc0 <lwip_htons>
 800f38c:	4603      	mov	r3, r0
 800f38e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f390:	4b42      	ldr	r3, [pc, #264]	; (800f49c <tcp_input+0x28c>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	4a41      	ldr	r2, [pc, #260]	; (800f49c <tcp_input+0x28c>)
 800f398:	6814      	ldr	r4, [r2, #0]
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fc fd25 	bl	800bdea <lwip_htonl>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	6063      	str	r3, [r4, #4]
 800f3a4:	6863      	ldr	r3, [r4, #4]
 800f3a6:	4a45      	ldr	r2, [pc, #276]	; (800f4bc <tcp_input+0x2ac>)
 800f3a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f3aa:	4b3c      	ldr	r3, [pc, #240]	; (800f49c <tcp_input+0x28c>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	4a3a      	ldr	r2, [pc, #232]	; (800f49c <tcp_input+0x28c>)
 800f3b2:	6814      	ldr	r4, [r2, #0]
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7fc fd18 	bl	800bdea <lwip_htonl>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	60a3      	str	r3, [r4, #8]
 800f3be:	68a3      	ldr	r3, [r4, #8]
 800f3c0:	4a3f      	ldr	r2, [pc, #252]	; (800f4c0 <tcp_input+0x2b0>)
 800f3c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f3c4:	4b35      	ldr	r3, [pc, #212]	; (800f49c <tcp_input+0x28c>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	89db      	ldrh	r3, [r3, #14]
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	4a33      	ldr	r2, [pc, #204]	; (800f49c <tcp_input+0x28c>)
 800f3ce:	6814      	ldr	r4, [r2, #0]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fc fcf5 	bl	800bdc0 <lwip_htons>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f3da:	4b30      	ldr	r3, [pc, #192]	; (800f49c <tcp_input+0x28c>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	899b      	ldrh	r3, [r3, #12]
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fc fcec 	bl	800bdc0 <lwip_htons>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3f0:	b2da      	uxtb	r2, r3
 800f3f2:	4b34      	ldr	r3, [pc, #208]	; (800f4c4 <tcp_input+0x2b4>)
 800f3f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	891a      	ldrh	r2, [r3, #8]
 800f3fa:	4b33      	ldr	r3, [pc, #204]	; (800f4c8 <tcp_input+0x2b8>)
 800f3fc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f3fe:	4b31      	ldr	r3, [pc, #196]	; (800f4c4 <tcp_input+0x2b4>)
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	f003 0303 	and.w	r3, r3, #3
 800f406:	2b00      	cmp	r3, #0
 800f408:	d00c      	beq.n	800f424 <tcp_input+0x214>
    tcplen++;
 800f40a:	4b2f      	ldr	r3, [pc, #188]	; (800f4c8 <tcp_input+0x2b8>)
 800f40c:	881b      	ldrh	r3, [r3, #0]
 800f40e:	3301      	adds	r3, #1
 800f410:	b29a      	uxth	r2, r3
 800f412:	4b2d      	ldr	r3, [pc, #180]	; (800f4c8 <tcp_input+0x2b8>)
 800f414:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	891a      	ldrh	r2, [r3, #8]
 800f41a:	4b2b      	ldr	r3, [pc, #172]	; (800f4c8 <tcp_input+0x2b8>)
 800f41c:	881b      	ldrh	r3, [r3, #0]
 800f41e:	429a      	cmp	r2, r3
 800f420:	f200 82e6 	bhi.w	800f9f0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f424:	2300      	movs	r3, #0
 800f426:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f428:	4b28      	ldr	r3, [pc, #160]	; (800f4cc <tcp_input+0x2bc>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	61fb      	str	r3, [r7, #28]
 800f42e:	e09d      	b.n	800f56c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	7d1b      	ldrb	r3, [r3, #20]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d105      	bne.n	800f444 <tcp_input+0x234>
 800f438:	4b15      	ldr	r3, [pc, #84]	; (800f490 <tcp_input+0x280>)
 800f43a:	22fb      	movs	r2, #251	; 0xfb
 800f43c:	4924      	ldr	r1, [pc, #144]	; (800f4d0 <tcp_input+0x2c0>)
 800f43e:	4816      	ldr	r0, [pc, #88]	; (800f498 <tcp_input+0x288>)
 800f440:	f006 fe76 	bl	8016130 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	7d1b      	ldrb	r3, [r3, #20]
 800f448:	2b0a      	cmp	r3, #10
 800f44a:	d105      	bne.n	800f458 <tcp_input+0x248>
 800f44c:	4b10      	ldr	r3, [pc, #64]	; (800f490 <tcp_input+0x280>)
 800f44e:	22fc      	movs	r2, #252	; 0xfc
 800f450:	4920      	ldr	r1, [pc, #128]	; (800f4d4 <tcp_input+0x2c4>)
 800f452:	4811      	ldr	r0, [pc, #68]	; (800f498 <tcp_input+0x288>)
 800f454:	f006 fe6c 	bl	8016130 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	7d1b      	ldrb	r3, [r3, #20]
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d105      	bne.n	800f46c <tcp_input+0x25c>
 800f460:	4b0b      	ldr	r3, [pc, #44]	; (800f490 <tcp_input+0x280>)
 800f462:	22fd      	movs	r2, #253	; 0xfd
 800f464:	491c      	ldr	r1, [pc, #112]	; (800f4d8 <tcp_input+0x2c8>)
 800f466:	480c      	ldr	r0, [pc, #48]	; (800f498 <tcp_input+0x288>)
 800f468:	f006 fe62 	bl	8016130 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	7a1b      	ldrb	r3, [r3, #8]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d033      	beq.n	800f4dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f474:	69fb      	ldr	r3, [r7, #28]
 800f476:	7a1a      	ldrb	r2, [r3, #8]
 800f478:	4b09      	ldr	r3, [pc, #36]	; (800f4a0 <tcp_input+0x290>)
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f480:	3301      	adds	r3, #1
 800f482:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f484:	429a      	cmp	r2, r3
 800f486:	d029      	beq.n	800f4dc <tcp_input+0x2cc>
      prev = pcb;
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	61bb      	str	r3, [r7, #24]
      continue;
 800f48c:	e06b      	b.n	800f566 <tcp_input+0x356>
 800f48e:	bf00      	nop
 800f490:	08018688 	.word	0x08018688
 800f494:	080186bc 	.word	0x080186bc
 800f498:	080186d4 	.word	0x080186d4
 800f49c:	20009718 	.word	0x20009718
 800f4a0:	20006180 	.word	0x20006180
 800f4a4:	2000971c 	.word	0x2000971c
 800f4a8:	20009720 	.word	0x20009720
 800f4ac:	2000971e 	.word	0x2000971e
 800f4b0:	080186fc 	.word	0x080186fc
 800f4b4:	0801870c 	.word	0x0801870c
 800f4b8:	08018718 	.word	0x08018718
 800f4bc:	20009728 	.word	0x20009728
 800f4c0:	2000972c 	.word	0x2000972c
 800f4c4:	20009734 	.word	0x20009734
 800f4c8:	20009732 	.word	0x20009732
 800f4cc:	200096fc 	.word	0x200096fc
 800f4d0:	08018738 	.word	0x08018738
 800f4d4:	08018760 	.word	0x08018760
 800f4d8:	0801878c 	.word	0x0801878c
    }

    if (pcb->remote_port == tcphdr->src &&
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	8b1a      	ldrh	r2, [r3, #24]
 800f4e0:	4b72      	ldr	r3, [pc, #456]	; (800f6ac <tcp_input+0x49c>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	881b      	ldrh	r3, [r3, #0]
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d13a      	bne.n	800f562 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	8ada      	ldrh	r2, [r3, #22]
 800f4f0:	4b6e      	ldr	r3, [pc, #440]	; (800f6ac <tcp_input+0x49c>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	885b      	ldrh	r3, [r3, #2]
 800f4f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d132      	bne.n	800f562 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	685a      	ldr	r2, [r3, #4]
 800f500:	4b6b      	ldr	r3, [pc, #428]	; (800f6b0 <tcp_input+0x4a0>)
 800f502:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f504:	429a      	cmp	r2, r3
 800f506:	d12c      	bne.n	800f562 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	4b68      	ldr	r3, [pc, #416]	; (800f6b0 <tcp_input+0x4a0>)
 800f50e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f510:	429a      	cmp	r2, r3
 800f512:	d126      	bne.n	800f562 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	69fa      	ldr	r2, [r7, #28]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d106      	bne.n	800f52c <tcp_input+0x31c>
 800f51e:	4b65      	ldr	r3, [pc, #404]	; (800f6b4 <tcp_input+0x4a4>)
 800f520:	f240 120d 	movw	r2, #269	; 0x10d
 800f524:	4964      	ldr	r1, [pc, #400]	; (800f6b8 <tcp_input+0x4a8>)
 800f526:	4865      	ldr	r0, [pc, #404]	; (800f6bc <tcp_input+0x4ac>)
 800f528:	f006 fe02 	bl	8016130 <iprintf>
      if (prev != NULL) {
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d00a      	beq.n	800f548 <tcp_input+0x338>
        prev->next = pcb->next;
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	68da      	ldr	r2, [r3, #12]
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f53a:	4b61      	ldr	r3, [pc, #388]	; (800f6c0 <tcp_input+0x4b0>)
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	69fb      	ldr	r3, [r7, #28]
 800f540:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f542:	4a5f      	ldr	r2, [pc, #380]	; (800f6c0 <tcp_input+0x4b0>)
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	68db      	ldr	r3, [r3, #12]
 800f54c:	69fa      	ldr	r2, [r7, #28]
 800f54e:	429a      	cmp	r2, r3
 800f550:	d111      	bne.n	800f576 <tcp_input+0x366>
 800f552:	4b58      	ldr	r3, [pc, #352]	; (800f6b4 <tcp_input+0x4a4>)
 800f554:	f240 1215 	movw	r2, #277	; 0x115
 800f558:	495a      	ldr	r1, [pc, #360]	; (800f6c4 <tcp_input+0x4b4>)
 800f55a:	4858      	ldr	r0, [pc, #352]	; (800f6bc <tcp_input+0x4ac>)
 800f55c:	f006 fde8 	bl	8016130 <iprintf>
      break;
 800f560:	e009      	b.n	800f576 <tcp_input+0x366>
    }
    prev = pcb;
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	68db      	ldr	r3, [r3, #12]
 800f56a:	61fb      	str	r3, [r7, #28]
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	f47f af5e 	bne.w	800f430 <tcp_input+0x220>
 800f574:	e000      	b.n	800f578 <tcp_input+0x368>
      break;
 800f576:	bf00      	nop
  }

  if (pcb == NULL) {
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f040 80aa 	bne.w	800f6d4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f580:	4b51      	ldr	r3, [pc, #324]	; (800f6c8 <tcp_input+0x4b8>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	61fb      	str	r3, [r7, #28]
 800f586:	e03f      	b.n	800f608 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f588:	69fb      	ldr	r3, [r7, #28]
 800f58a:	7d1b      	ldrb	r3, [r3, #20]
 800f58c:	2b0a      	cmp	r3, #10
 800f58e:	d006      	beq.n	800f59e <tcp_input+0x38e>
 800f590:	4b48      	ldr	r3, [pc, #288]	; (800f6b4 <tcp_input+0x4a4>)
 800f592:	f240 121f 	movw	r2, #287	; 0x11f
 800f596:	494d      	ldr	r1, [pc, #308]	; (800f6cc <tcp_input+0x4bc>)
 800f598:	4848      	ldr	r0, [pc, #288]	; (800f6bc <tcp_input+0x4ac>)
 800f59a:	f006 fdc9 	bl	8016130 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	7a1b      	ldrb	r3, [r3, #8]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d009      	beq.n	800f5ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	7a1a      	ldrb	r2, [r3, #8]
 800f5aa:	4b41      	ldr	r3, [pc, #260]	; (800f6b0 <tcp_input+0x4a0>)
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d122      	bne.n	800f600 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	8b1a      	ldrh	r2, [r3, #24]
 800f5be:	4b3b      	ldr	r3, [pc, #236]	; (800f6ac <tcp_input+0x49c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	881b      	ldrh	r3, [r3, #0]
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d11b      	bne.n	800f602 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f5ca:	69fb      	ldr	r3, [r7, #28]
 800f5cc:	8ada      	ldrh	r2, [r3, #22]
 800f5ce:	4b37      	ldr	r3, [pc, #220]	; (800f6ac <tcp_input+0x49c>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	885b      	ldrh	r3, [r3, #2]
 800f5d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d113      	bne.n	800f602 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	685a      	ldr	r2, [r3, #4]
 800f5de:	4b34      	ldr	r3, [pc, #208]	; (800f6b0 <tcp_input+0x4a0>)
 800f5e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d10d      	bne.n	800f602 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	4b31      	ldr	r3, [pc, #196]	; (800f6b0 <tcp_input+0x4a0>)
 800f5ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d107      	bne.n	800f602 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f5f2:	69f8      	ldr	r0, [r7, #28]
 800f5f4:	f000 fb56 	bl	800fca4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f7fd ff3f 	bl	800d47c <pbuf_free>
        return;
 800f5fe:	e1fd      	b.n	800f9fc <tcp_input+0x7ec>
        continue;
 800f600:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	61fb      	str	r3, [r7, #28]
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d1bc      	bne.n	800f588 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f60e:	2300      	movs	r3, #0
 800f610:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f612:	4b2f      	ldr	r3, [pc, #188]	; (800f6d0 <tcp_input+0x4c0>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	617b      	str	r3, [r7, #20]
 800f618:	e02a      	b.n	800f670 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	7a1b      	ldrb	r3, [r3, #8]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00c      	beq.n	800f63c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	7a1a      	ldrb	r2, [r3, #8]
 800f626:	4b22      	ldr	r3, [pc, #136]	; (800f6b0 <tcp_input+0x4a0>)
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f62e:	3301      	adds	r3, #1
 800f630:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f632:	429a      	cmp	r2, r3
 800f634:	d002      	beq.n	800f63c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	61bb      	str	r3, [r7, #24]
        continue;
 800f63a:	e016      	b.n	800f66a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	8ada      	ldrh	r2, [r3, #22]
 800f640:	4b1a      	ldr	r3, [pc, #104]	; (800f6ac <tcp_input+0x49c>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	885b      	ldrh	r3, [r3, #2]
 800f646:	b29b      	uxth	r3, r3
 800f648:	429a      	cmp	r2, r3
 800f64a:	d10c      	bne.n	800f666 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	4b17      	ldr	r3, [pc, #92]	; (800f6b0 <tcp_input+0x4a0>)
 800f652:	695b      	ldr	r3, [r3, #20]
 800f654:	429a      	cmp	r2, r3
 800f656:	d00f      	beq.n	800f678 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00d      	beq.n	800f67a <tcp_input+0x46a>
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d009      	beq.n	800f67a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	617b      	str	r3, [r7, #20]
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1d1      	bne.n	800f61a <tcp_input+0x40a>
 800f676:	e000      	b.n	800f67a <tcp_input+0x46a>
            break;
 800f678:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d029      	beq.n	800f6d4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d00a      	beq.n	800f69c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	68da      	ldr	r2, [r3, #12]
 800f68a:	69bb      	ldr	r3, [r7, #24]
 800f68c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f68e:	4b10      	ldr	r3, [pc, #64]	; (800f6d0 <tcp_input+0x4c0>)
 800f690:	681a      	ldr	r2, [r3, #0]
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f696:	4a0e      	ldr	r2, [pc, #56]	; (800f6d0 <tcp_input+0x4c0>)
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f69c:	6978      	ldr	r0, [r7, #20]
 800f69e:	f000 fa03 	bl	800faa8 <tcp_listen_input>
      }
      pbuf_free(p);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f7fd feea 	bl	800d47c <pbuf_free>
      return;
 800f6a8:	e1a8      	b.n	800f9fc <tcp_input+0x7ec>
 800f6aa:	bf00      	nop
 800f6ac:	20009718 	.word	0x20009718
 800f6b0:	20006180 	.word	0x20006180
 800f6b4:	08018688 	.word	0x08018688
 800f6b8:	080187b4 	.word	0x080187b4
 800f6bc:	080186d4 	.word	0x080186d4
 800f6c0:	200096fc 	.word	0x200096fc
 800f6c4:	080187e0 	.word	0x080187e0
 800f6c8:	20009700 	.word	0x20009700
 800f6cc:	0801880c 	.word	0x0801880c
 800f6d0:	200096f8 	.word	0x200096f8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	f000 8158 	beq.w	800f98c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f6dc:	4b95      	ldr	r3, [pc, #596]	; (800f934 <tcp_input+0x724>)
 800f6de:	2200      	movs	r2, #0
 800f6e0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	891a      	ldrh	r2, [r3, #8]
 800f6e6:	4b93      	ldr	r3, [pc, #588]	; (800f934 <tcp_input+0x724>)
 800f6e8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f6ea:	4a92      	ldr	r2, [pc, #584]	; (800f934 <tcp_input+0x724>)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f6f0:	4b91      	ldr	r3, [pc, #580]	; (800f938 <tcp_input+0x728>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a8f      	ldr	r2, [pc, #572]	; (800f934 <tcp_input+0x724>)
 800f6f6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f6f8:	4b90      	ldr	r3, [pc, #576]	; (800f93c <tcp_input+0x72c>)
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f6fe:	4b90      	ldr	r3, [pc, #576]	; (800f940 <tcp_input+0x730>)
 800f700:	2200      	movs	r2, #0
 800f702:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f704:	4b8f      	ldr	r3, [pc, #572]	; (800f944 <tcp_input+0x734>)
 800f706:	2200      	movs	r2, #0
 800f708:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f70a:	4b8f      	ldr	r3, [pc, #572]	; (800f948 <tcp_input+0x738>)
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	f003 0308 	and.w	r3, r3, #8
 800f712:	2b00      	cmp	r3, #0
 800f714:	d006      	beq.n	800f724 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	7b5b      	ldrb	r3, [r3, #13]
 800f71a:	f043 0301 	orr.w	r3, r3, #1
 800f71e:	b2da      	uxtb	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f724:	69fb      	ldr	r3, [r7, #28]
 800f726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d017      	beq.n	800f75c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f72c:	69f8      	ldr	r0, [r7, #28]
 800f72e:	f7ff f929 	bl	800e984 <tcp_process_refused_data>
 800f732:	4603      	mov	r3, r0
 800f734:	f113 0f0d 	cmn.w	r3, #13
 800f738:	d007      	beq.n	800f74a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00c      	beq.n	800f75c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f742:	4b82      	ldr	r3, [pc, #520]	; (800f94c <tcp_input+0x73c>)
 800f744:	881b      	ldrh	r3, [r3, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d008      	beq.n	800f75c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f040 80e3 	bne.w	800f91a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f754:	69f8      	ldr	r0, [r7, #28]
 800f756:	f003 f9ad 	bl	8012ab4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f75a:	e0de      	b.n	800f91a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f75c:	4a7c      	ldr	r2, [pc, #496]	; (800f950 <tcp_input+0x740>)
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f762:	69f8      	ldr	r0, [r7, #28]
 800f764:	f000 fb18 	bl	800fd98 <tcp_process>
 800f768:	4603      	mov	r3, r0
 800f76a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f76c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f770:	f113 0f0d 	cmn.w	r3, #13
 800f774:	f000 80d3 	beq.w	800f91e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f778:	4b71      	ldr	r3, [pc, #452]	; (800f940 <tcp_input+0x730>)
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	f003 0308 	and.w	r3, r3, #8
 800f780:	2b00      	cmp	r3, #0
 800f782:	d015      	beq.n	800f7b0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d008      	beq.n	800f7a0 <tcp_input+0x590>
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f794:	69fa      	ldr	r2, [r7, #28]
 800f796:	6912      	ldr	r2, [r2, #16]
 800f798:	f06f 010d 	mvn.w	r1, #13
 800f79c:	4610      	mov	r0, r2
 800f79e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f7a0:	69f9      	ldr	r1, [r7, #28]
 800f7a2:	486c      	ldr	r0, [pc, #432]	; (800f954 <tcp_input+0x744>)
 800f7a4:	f7ff fbbc 	bl	800ef20 <tcp_pcb_remove>
        tcp_free(pcb);
 800f7a8:	69f8      	ldr	r0, [r7, #28]
 800f7aa:	f7fe f9a9 	bl	800db00 <tcp_free>
 800f7ae:	e0da      	b.n	800f966 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f7b4:	4b63      	ldr	r3, [pc, #396]	; (800f944 <tcp_input+0x734>)
 800f7b6:	881b      	ldrh	r3, [r3, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d01d      	beq.n	800f7f8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f7bc:	4b61      	ldr	r3, [pc, #388]	; (800f944 <tcp_input+0x734>)
 800f7be:	881b      	ldrh	r3, [r3, #0]
 800f7c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d00a      	beq.n	800f7e2 <tcp_input+0x5d2>
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7d2:	69fa      	ldr	r2, [r7, #28]
 800f7d4:	6910      	ldr	r0, [r2, #16]
 800f7d6:	89fa      	ldrh	r2, [r7, #14]
 800f7d8:	69f9      	ldr	r1, [r7, #28]
 800f7da:	4798      	blx	r3
 800f7dc:	4603      	mov	r3, r0
 800f7de:	74fb      	strb	r3, [r7, #19]
 800f7e0:	e001      	b.n	800f7e6 <tcp_input+0x5d6>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f7e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7ea:	f113 0f0d 	cmn.w	r3, #13
 800f7ee:	f000 8098 	beq.w	800f922 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f7f2:	4b54      	ldr	r3, [pc, #336]	; (800f944 <tcp_input+0x734>)
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f7f8:	69f8      	ldr	r0, [r7, #28]
 800f7fa:	f000 f915 	bl	800fa28 <tcp_input_delayed_close>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	f040 8090 	bne.w	800f926 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f806:	4b4d      	ldr	r3, [pc, #308]	; (800f93c <tcp_input+0x72c>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d041      	beq.n	800f892 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f812:	2b00      	cmp	r3, #0
 800f814:	d006      	beq.n	800f824 <tcp_input+0x614>
 800f816:	4b50      	ldr	r3, [pc, #320]	; (800f958 <tcp_input+0x748>)
 800f818:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f81c:	494f      	ldr	r1, [pc, #316]	; (800f95c <tcp_input+0x74c>)
 800f81e:	4850      	ldr	r0, [pc, #320]	; (800f960 <tcp_input+0x750>)
 800f820:	f006 fc86 	bl	8016130 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	8b5b      	ldrh	r3, [r3, #26]
 800f828:	f003 0310 	and.w	r3, r3, #16
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d008      	beq.n	800f842 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f830:	4b42      	ldr	r3, [pc, #264]	; (800f93c <tcp_input+0x72c>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	4618      	mov	r0, r3
 800f836:	f7fd fe21 	bl	800d47c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f83a:	69f8      	ldr	r0, [r7, #28]
 800f83c:	f7fe fc48 	bl	800e0d0 <tcp_abort>
            goto aborted;
 800f840:	e091      	b.n	800f966 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00c      	beq.n	800f866 <tcp_input+0x656>
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	6918      	ldr	r0, [r3, #16]
 800f856:	4b39      	ldr	r3, [pc, #228]	; (800f93c <tcp_input+0x72c>)
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	2300      	movs	r3, #0
 800f85c:	69f9      	ldr	r1, [r7, #28]
 800f85e:	47a0      	blx	r4
 800f860:	4603      	mov	r3, r0
 800f862:	74fb      	strb	r3, [r7, #19]
 800f864:	e008      	b.n	800f878 <tcp_input+0x668>
 800f866:	4b35      	ldr	r3, [pc, #212]	; (800f93c <tcp_input+0x72c>)
 800f868:	681a      	ldr	r2, [r3, #0]
 800f86a:	2300      	movs	r3, #0
 800f86c:	69f9      	ldr	r1, [r7, #28]
 800f86e:	2000      	movs	r0, #0
 800f870:	f7ff f95e 	bl	800eb30 <tcp_recv_null>
 800f874:	4603      	mov	r3, r0
 800f876:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f878:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f87c:	f113 0f0d 	cmn.w	r3, #13
 800f880:	d053      	beq.n	800f92a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f882:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d003      	beq.n	800f892 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f88a:	4b2c      	ldr	r3, [pc, #176]	; (800f93c <tcp_input+0x72c>)
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f892:	4b2b      	ldr	r3, [pc, #172]	; (800f940 <tcp_input+0x730>)
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	f003 0320 	and.w	r3, r3, #32
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d030      	beq.n	800f900 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f89e:	69fb      	ldr	r3, [r7, #28]
 800f8a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d009      	beq.n	800f8ba <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8aa:	7b5a      	ldrb	r2, [r3, #13]
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8b0:	f042 0220 	orr.w	r2, r2, #32
 800f8b4:	b2d2      	uxtb	r2, r2
 800f8b6:	735a      	strb	r2, [r3, #13]
 800f8b8:	e022      	b.n	800f900 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f8c2:	d005      	beq.n	800f8d0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	b29a      	uxth	r2, r3
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d00b      	beq.n	800f8f2 <tcp_input+0x6e2>
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f8e0:	69fb      	ldr	r3, [r7, #28]
 800f8e2:	6918      	ldr	r0, [r3, #16]
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	69f9      	ldr	r1, [r7, #28]
 800f8ea:	47a0      	blx	r4
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	74fb      	strb	r3, [r7, #19]
 800f8f0:	e001      	b.n	800f8f6 <tcp_input+0x6e6>
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f8f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8fa:	f113 0f0d 	cmn.w	r3, #13
 800f8fe:	d016      	beq.n	800f92e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f900:	4b13      	ldr	r3, [pc, #76]	; (800f950 <tcp_input+0x740>)
 800f902:	2200      	movs	r2, #0
 800f904:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f906:	69f8      	ldr	r0, [r7, #28]
 800f908:	f000 f88e 	bl	800fa28 <tcp_input_delayed_close>
 800f90c:	4603      	mov	r3, r0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d128      	bne.n	800f964 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f912:	69f8      	ldr	r0, [r7, #28]
 800f914:	f002 fac8 	bl	8011ea8 <tcp_output>
 800f918:	e025      	b.n	800f966 <tcp_input+0x756>
        goto aborted;
 800f91a:	bf00      	nop
 800f91c:	e023      	b.n	800f966 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f91e:	bf00      	nop
 800f920:	e021      	b.n	800f966 <tcp_input+0x756>
              goto aborted;
 800f922:	bf00      	nop
 800f924:	e01f      	b.n	800f966 <tcp_input+0x756>
          goto aborted;
 800f926:	bf00      	nop
 800f928:	e01d      	b.n	800f966 <tcp_input+0x756>
            goto aborted;
 800f92a:	bf00      	nop
 800f92c:	e01b      	b.n	800f966 <tcp_input+0x756>
              goto aborted;
 800f92e:	bf00      	nop
 800f930:	e019      	b.n	800f966 <tcp_input+0x756>
 800f932:	bf00      	nop
 800f934:	20009708 	.word	0x20009708
 800f938:	20009718 	.word	0x20009718
 800f93c:	20009738 	.word	0x20009738
 800f940:	20009735 	.word	0x20009735
 800f944:	20009730 	.word	0x20009730
 800f948:	20009734 	.word	0x20009734
 800f94c:	20009732 	.word	0x20009732
 800f950:	2000973c 	.word	0x2000973c
 800f954:	200096fc 	.word	0x200096fc
 800f958:	08018688 	.word	0x08018688
 800f95c:	0801883c 	.word	0x0801883c
 800f960:	080186d4 	.word	0x080186d4
          goto aborted;
 800f964:	bf00      	nop
    tcp_input_pcb = NULL;
 800f966:	4b27      	ldr	r3, [pc, #156]	; (800fa04 <tcp_input+0x7f4>)
 800f968:	2200      	movs	r2, #0
 800f96a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f96c:	4b26      	ldr	r3, [pc, #152]	; (800fa08 <tcp_input+0x7f8>)
 800f96e:	2200      	movs	r2, #0
 800f970:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f972:	4b26      	ldr	r3, [pc, #152]	; (800fa0c <tcp_input+0x7fc>)
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d03f      	beq.n	800f9fa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f97a:	4b24      	ldr	r3, [pc, #144]	; (800fa0c <tcp_input+0x7fc>)
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fd fd7c 	bl	800d47c <pbuf_free>
      inseg.p = NULL;
 800f984:	4b21      	ldr	r3, [pc, #132]	; (800fa0c <tcp_input+0x7fc>)
 800f986:	2200      	movs	r2, #0
 800f988:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f98a:	e036      	b.n	800f9fa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f98c:	4b20      	ldr	r3, [pc, #128]	; (800fa10 <tcp_input+0x800>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	899b      	ldrh	r3, [r3, #12]
 800f992:	b29b      	uxth	r3, r3
 800f994:	4618      	mov	r0, r3
 800f996:	f7fc fa13 	bl	800bdc0 <lwip_htons>
 800f99a:	4603      	mov	r3, r0
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	f003 0304 	and.w	r3, r3, #4
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d118      	bne.n	800f9d8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9a6:	4b1b      	ldr	r3, [pc, #108]	; (800fa14 <tcp_input+0x804>)
 800f9a8:	6819      	ldr	r1, [r3, #0]
 800f9aa:	4b1b      	ldr	r3, [pc, #108]	; (800fa18 <tcp_input+0x808>)
 800f9ac:	881b      	ldrh	r3, [r3, #0]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	4b1a      	ldr	r3, [pc, #104]	; (800fa1c <tcp_input+0x80c>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9b6:	4b16      	ldr	r3, [pc, #88]	; (800fa10 <tcp_input+0x800>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9ba:	885b      	ldrh	r3, [r3, #2]
 800f9bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9be:	4a14      	ldr	r2, [pc, #80]	; (800fa10 <tcp_input+0x800>)
 800f9c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9c2:	8812      	ldrh	r2, [r2, #0]
 800f9c4:	b292      	uxth	r2, r2
 800f9c6:	9202      	str	r2, [sp, #8]
 800f9c8:	9301      	str	r3, [sp, #4]
 800f9ca:	4b15      	ldr	r3, [pc, #84]	; (800fa20 <tcp_input+0x810>)
 800f9cc:	9300      	str	r3, [sp, #0]
 800f9ce:	4b15      	ldr	r3, [pc, #84]	; (800fa24 <tcp_input+0x814>)
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	f003 f81c 	bl	8012a10 <tcp_rst>
    pbuf_free(p);
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7fd fd4f 	bl	800d47c <pbuf_free>
  return;
 800f9de:	e00c      	b.n	800f9fa <tcp_input+0x7ea>
    goto dropped;
 800f9e0:	bf00      	nop
 800f9e2:	e006      	b.n	800f9f2 <tcp_input+0x7e2>
    goto dropped;
 800f9e4:	bf00      	nop
 800f9e6:	e004      	b.n	800f9f2 <tcp_input+0x7e2>
    goto dropped;
 800f9e8:	bf00      	nop
 800f9ea:	e002      	b.n	800f9f2 <tcp_input+0x7e2>
      goto dropped;
 800f9ec:	bf00      	nop
 800f9ee:	e000      	b.n	800f9f2 <tcp_input+0x7e2>
      goto dropped;
 800f9f0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f7fd fd42 	bl	800d47c <pbuf_free>
 800f9f8:	e000      	b.n	800f9fc <tcp_input+0x7ec>
  return;
 800f9fa:	bf00      	nop
}
 800f9fc:	3724      	adds	r7, #36	; 0x24
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd90      	pop	{r4, r7, pc}
 800fa02:	bf00      	nop
 800fa04:	2000973c 	.word	0x2000973c
 800fa08:	20009738 	.word	0x20009738
 800fa0c:	20009708 	.word	0x20009708
 800fa10:	20009718 	.word	0x20009718
 800fa14:	2000972c 	.word	0x2000972c
 800fa18:	20009732 	.word	0x20009732
 800fa1c:	20009728 	.word	0x20009728
 800fa20:	20006190 	.word	0x20006190
 800fa24:	20006194 	.word	0x20006194

0800fa28 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d106      	bne.n	800fa44 <tcp_input_delayed_close+0x1c>
 800fa36:	4b17      	ldr	r3, [pc, #92]	; (800fa94 <tcp_input_delayed_close+0x6c>)
 800fa38:	f240 225a 	movw	r2, #602	; 0x25a
 800fa3c:	4916      	ldr	r1, [pc, #88]	; (800fa98 <tcp_input_delayed_close+0x70>)
 800fa3e:	4817      	ldr	r0, [pc, #92]	; (800fa9c <tcp_input_delayed_close+0x74>)
 800fa40:	f006 fb76 	bl	8016130 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fa44:	4b16      	ldr	r3, [pc, #88]	; (800faa0 <tcp_input_delayed_close+0x78>)
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	f003 0310 	and.w	r3, r3, #16
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d01c      	beq.n	800fa8a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	8b5b      	ldrh	r3, [r3, #26]
 800fa54:	f003 0310 	and.w	r3, r3, #16
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d10d      	bne.n	800fa78 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d008      	beq.n	800fa78 <tcp_input_delayed_close+0x50>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	6912      	ldr	r2, [r2, #16]
 800fa70:	f06f 010e 	mvn.w	r1, #14
 800fa74:	4610      	mov	r0, r2
 800fa76:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fa78:	6879      	ldr	r1, [r7, #4]
 800fa7a:	480a      	ldr	r0, [pc, #40]	; (800faa4 <tcp_input_delayed_close+0x7c>)
 800fa7c:	f7ff fa50 	bl	800ef20 <tcp_pcb_remove>
    tcp_free(pcb);
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f7fe f83d 	bl	800db00 <tcp_free>
    return 1;
 800fa86:	2301      	movs	r3, #1
 800fa88:	e000      	b.n	800fa8c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fa8a:	2300      	movs	r3, #0
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	08018688 	.word	0x08018688
 800fa98:	08018858 	.word	0x08018858
 800fa9c:	080186d4 	.word	0x080186d4
 800faa0:	20009735 	.word	0x20009735
 800faa4:	200096fc 	.word	0x200096fc

0800faa8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800faa8:	b590      	push	{r4, r7, lr}
 800faaa:	b08b      	sub	sp, #44	; 0x2c
 800faac:	af04      	add	r7, sp, #16
 800faae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fab0:	4b6f      	ldr	r3, [pc, #444]	; (800fc70 <tcp_listen_input+0x1c8>)
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	f003 0304 	and.w	r3, r3, #4
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f040 80d2 	bne.w	800fc62 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d106      	bne.n	800fad2 <tcp_listen_input+0x2a>
 800fac4:	4b6b      	ldr	r3, [pc, #428]	; (800fc74 <tcp_listen_input+0x1cc>)
 800fac6:	f240 2281 	movw	r2, #641	; 0x281
 800faca:	496b      	ldr	r1, [pc, #428]	; (800fc78 <tcp_listen_input+0x1d0>)
 800facc:	486b      	ldr	r0, [pc, #428]	; (800fc7c <tcp_listen_input+0x1d4>)
 800face:	f006 fb2f 	bl	8016130 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fad2:	4b67      	ldr	r3, [pc, #412]	; (800fc70 <tcp_listen_input+0x1c8>)
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	f003 0310 	and.w	r3, r3, #16
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d019      	beq.n	800fb12 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fade:	4b68      	ldr	r3, [pc, #416]	; (800fc80 <tcp_listen_input+0x1d8>)
 800fae0:	6819      	ldr	r1, [r3, #0]
 800fae2:	4b68      	ldr	r3, [pc, #416]	; (800fc84 <tcp_listen_input+0x1dc>)
 800fae4:	881b      	ldrh	r3, [r3, #0]
 800fae6:	461a      	mov	r2, r3
 800fae8:	4b67      	ldr	r3, [pc, #412]	; (800fc88 <tcp_listen_input+0x1e0>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800faee:	4b67      	ldr	r3, [pc, #412]	; (800fc8c <tcp_listen_input+0x1e4>)
 800faf0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faf2:	885b      	ldrh	r3, [r3, #2]
 800faf4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800faf6:	4a65      	ldr	r2, [pc, #404]	; (800fc8c <tcp_listen_input+0x1e4>)
 800faf8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fafa:	8812      	ldrh	r2, [r2, #0]
 800fafc:	b292      	uxth	r2, r2
 800fafe:	9202      	str	r2, [sp, #8]
 800fb00:	9301      	str	r3, [sp, #4]
 800fb02:	4b63      	ldr	r3, [pc, #396]	; (800fc90 <tcp_listen_input+0x1e8>)
 800fb04:	9300      	str	r3, [sp, #0]
 800fb06:	4b63      	ldr	r3, [pc, #396]	; (800fc94 <tcp_listen_input+0x1ec>)
 800fb08:	4602      	mov	r2, r0
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f002 ff80 	bl	8012a10 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fb10:	e0a9      	b.n	800fc66 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fb12:	4b57      	ldr	r3, [pc, #348]	; (800fc70 <tcp_listen_input+0x1c8>)
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	f003 0302 	and.w	r3, r3, #2
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	f000 80a3 	beq.w	800fc66 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	7d5b      	ldrb	r3, [r3, #21]
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7ff f927 	bl	800ed78 <tcp_alloc>
 800fb2a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d111      	bne.n	800fb56 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	699b      	ldr	r3, [r3, #24]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d00a      	beq.n	800fb50 <tcp_listen_input+0xa8>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	699b      	ldr	r3, [r3, #24]
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	6910      	ldr	r0, [r2, #16]
 800fb42:	f04f 32ff 	mov.w	r2, #4294967295
 800fb46:	2100      	movs	r1, #0
 800fb48:	4798      	blx	r3
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	73bb      	strb	r3, [r7, #14]
      return;
 800fb4e:	e08b      	b.n	800fc68 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb50:	23f0      	movs	r3, #240	; 0xf0
 800fb52:	73bb      	strb	r3, [r7, #14]
      return;
 800fb54:	e088      	b.n	800fc68 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fb56:	4b50      	ldr	r3, [pc, #320]	; (800fc98 <tcp_listen_input+0x1f0>)
 800fb58:	695a      	ldr	r2, [r3, #20]
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fb5e:	4b4e      	ldr	r3, [pc, #312]	; (800fc98 <tcp_listen_input+0x1f0>)
 800fb60:	691a      	ldr	r2, [r3, #16]
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	8ada      	ldrh	r2, [r3, #22]
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fb6e:	4b47      	ldr	r3, [pc, #284]	; (800fc8c <tcp_listen_input+0x1e4>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	881b      	ldrh	r3, [r3, #0]
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	2203      	movs	r2, #3
 800fb7e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fb80:	4b41      	ldr	r3, [pc, #260]	; (800fc88 <tcp_listen_input+0x1e0>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	1c5a      	adds	r2, r3, #1
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fb92:	6978      	ldr	r0, [r7, #20]
 800fb94:	f7ff fa58 	bl	800f048 <tcp_next_iss>
 800fb98:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	693a      	ldr	r2, [r7, #16]
 800fb9e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	693a      	ldr	r2, [r7, #16]
 800fba4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	693a      	ldr	r2, [r7, #16]
 800fbaa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	693a      	ldr	r2, [r7, #16]
 800fbb0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fbb2:	4b35      	ldr	r3, [pc, #212]	; (800fc88 <tcp_listen_input+0x1e0>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	1e5a      	subs	r2, r3, #1
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	691a      	ldr	r2, [r3, #16]
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	687a      	ldr	r2, [r7, #4]
 800fbc8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	7a5b      	ldrb	r3, [r3, #9]
 800fbce:	f003 030c 	and.w	r3, r3, #12
 800fbd2:	b2da      	uxtb	r2, r3
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	7a1a      	ldrb	r2, [r3, #8]
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fbe0:	4b2e      	ldr	r3, [pc, #184]	; (800fc9c <tcp_listen_input+0x1f4>)
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	60da      	str	r2, [r3, #12]
 800fbe8:	4a2c      	ldr	r2, [pc, #176]	; (800fc9c <tcp_listen_input+0x1f4>)
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	6013      	str	r3, [r2, #0]
 800fbee:	f003 f8d1 	bl	8012d94 <tcp_timer_needed>
 800fbf2:	4b2b      	ldr	r3, [pc, #172]	; (800fca0 <tcp_listen_input+0x1f8>)
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fbf8:	6978      	ldr	r0, [r7, #20]
 800fbfa:	f001 fd8f 	bl	801171c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fbfe:	4b23      	ldr	r3, [pc, #140]	; (800fc8c <tcp_listen_input+0x1e4>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	89db      	ldrh	r3, [r3, #14]
 800fc04:	b29a      	uxth	r2, r3
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	3304      	adds	r3, #4
 800fc20:	4618      	mov	r0, r3
 800fc22:	f005 f84f 	bl	8014cc4 <ip4_route>
 800fc26:	4601      	mov	r1, r0
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	3304      	adds	r3, #4
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f7ff fa30 	bl	800f094 <tcp_eff_send_mss_netif>
 800fc34:	4603      	mov	r3, r0
 800fc36:	461a      	mov	r2, r3
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fc3c:	2112      	movs	r1, #18
 800fc3e:	6978      	ldr	r0, [r7, #20]
 800fc40:	f002 f844 	bl	8011ccc <tcp_enqueue_flags>
 800fc44:	4603      	mov	r3, r0
 800fc46:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fc48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d004      	beq.n	800fc5a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fc50:	2100      	movs	r1, #0
 800fc52:	6978      	ldr	r0, [r7, #20]
 800fc54:	f7fe f97e 	bl	800df54 <tcp_abandon>
      return;
 800fc58:	e006      	b.n	800fc68 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fc5a:	6978      	ldr	r0, [r7, #20]
 800fc5c:	f002 f924 	bl	8011ea8 <tcp_output>
  return;
 800fc60:	e001      	b.n	800fc66 <tcp_listen_input+0x1be>
    return;
 800fc62:	bf00      	nop
 800fc64:	e000      	b.n	800fc68 <tcp_listen_input+0x1c0>
  return;
 800fc66:	bf00      	nop
}
 800fc68:	371c      	adds	r7, #28
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd90      	pop	{r4, r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	20009734 	.word	0x20009734
 800fc74:	08018688 	.word	0x08018688
 800fc78:	08018880 	.word	0x08018880
 800fc7c:	080186d4 	.word	0x080186d4
 800fc80:	2000972c 	.word	0x2000972c
 800fc84:	20009732 	.word	0x20009732
 800fc88:	20009728 	.word	0x20009728
 800fc8c:	20009718 	.word	0x20009718
 800fc90:	20006190 	.word	0x20006190
 800fc94:	20006194 	.word	0x20006194
 800fc98:	20006180 	.word	0x20006180
 800fc9c:	200096fc 	.word	0x200096fc
 800fca0:	20009704 	.word	0x20009704

0800fca4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b086      	sub	sp, #24
 800fca8:	af04      	add	r7, sp, #16
 800fcaa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fcac:	4b2f      	ldr	r3, [pc, #188]	; (800fd6c <tcp_timewait_input+0xc8>)
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	f003 0304 	and.w	r3, r3, #4
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d153      	bne.n	800fd60 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d106      	bne.n	800fccc <tcp_timewait_input+0x28>
 800fcbe:	4b2c      	ldr	r3, [pc, #176]	; (800fd70 <tcp_timewait_input+0xcc>)
 800fcc0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fcc4:	492b      	ldr	r1, [pc, #172]	; (800fd74 <tcp_timewait_input+0xd0>)
 800fcc6:	482c      	ldr	r0, [pc, #176]	; (800fd78 <tcp_timewait_input+0xd4>)
 800fcc8:	f006 fa32 	bl	8016130 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fccc:	4b27      	ldr	r3, [pc, #156]	; (800fd6c <tcp_timewait_input+0xc8>)
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	f003 0302 	and.w	r3, r3, #2
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d02a      	beq.n	800fd2e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fcd8:	4b28      	ldr	r3, [pc, #160]	; (800fd7c <tcp_timewait_input+0xd8>)
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce0:	1ad3      	subs	r3, r2, r3
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	db2d      	blt.n	800fd42 <tcp_timewait_input+0x9e>
 800fce6:	4b25      	ldr	r3, [pc, #148]	; (800fd7c <tcp_timewait_input+0xd8>)
 800fce8:	681a      	ldr	r2, [r3, #0]
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcee:	6879      	ldr	r1, [r7, #4]
 800fcf0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fcf2:	440b      	add	r3, r1
 800fcf4:	1ad3      	subs	r3, r2, r3
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	dc23      	bgt.n	800fd42 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcfa:	4b21      	ldr	r3, [pc, #132]	; (800fd80 <tcp_timewait_input+0xdc>)
 800fcfc:	6819      	ldr	r1, [r3, #0]
 800fcfe:	4b21      	ldr	r3, [pc, #132]	; (800fd84 <tcp_timewait_input+0xe0>)
 800fd00:	881b      	ldrh	r3, [r3, #0]
 800fd02:	461a      	mov	r2, r3
 800fd04:	4b1d      	ldr	r3, [pc, #116]	; (800fd7c <tcp_timewait_input+0xd8>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd0a:	4b1f      	ldr	r3, [pc, #124]	; (800fd88 <tcp_timewait_input+0xe4>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd0e:	885b      	ldrh	r3, [r3, #2]
 800fd10:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd12:	4a1d      	ldr	r2, [pc, #116]	; (800fd88 <tcp_timewait_input+0xe4>)
 800fd14:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd16:	8812      	ldrh	r2, [r2, #0]
 800fd18:	b292      	uxth	r2, r2
 800fd1a:	9202      	str	r2, [sp, #8]
 800fd1c:	9301      	str	r3, [sp, #4]
 800fd1e:	4b1b      	ldr	r3, [pc, #108]	; (800fd8c <tcp_timewait_input+0xe8>)
 800fd20:	9300      	str	r3, [sp, #0]
 800fd22:	4b1b      	ldr	r3, [pc, #108]	; (800fd90 <tcp_timewait_input+0xec>)
 800fd24:	4602      	mov	r2, r0
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f002 fe72 	bl	8012a10 <tcp_rst>
      return;
 800fd2c:	e01b      	b.n	800fd66 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fd2e:	4b0f      	ldr	r3, [pc, #60]	; (800fd6c <tcp_timewait_input+0xc8>)
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	f003 0301 	and.w	r3, r3, #1
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d003      	beq.n	800fd42 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fd3a:	4b16      	ldr	r3, [pc, #88]	; (800fd94 <tcp_timewait_input+0xf0>)
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fd42:	4b10      	ldr	r3, [pc, #64]	; (800fd84 <tcp_timewait_input+0xe0>)
 800fd44:	881b      	ldrh	r3, [r3, #0]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00c      	beq.n	800fd64 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	8b5b      	ldrh	r3, [r3, #26]
 800fd4e:	f043 0302 	orr.w	r3, r3, #2
 800fd52:	b29a      	uxth	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f002 f8a5 	bl	8011ea8 <tcp_output>
  }
  return;
 800fd5e:	e001      	b.n	800fd64 <tcp_timewait_input+0xc0>
    return;
 800fd60:	bf00      	nop
 800fd62:	e000      	b.n	800fd66 <tcp_timewait_input+0xc2>
  return;
 800fd64:	bf00      	nop
}
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}
 800fd6c:	20009734 	.word	0x20009734
 800fd70:	08018688 	.word	0x08018688
 800fd74:	080188a0 	.word	0x080188a0
 800fd78:	080186d4 	.word	0x080186d4
 800fd7c:	20009728 	.word	0x20009728
 800fd80:	2000972c 	.word	0x2000972c
 800fd84:	20009732 	.word	0x20009732
 800fd88:	20009718 	.word	0x20009718
 800fd8c:	20006190 	.word	0x20006190
 800fd90:	20006194 	.word	0x20006194
 800fd94:	200096f0 	.word	0x200096f0

0800fd98 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fd98:	b590      	push	{r4, r7, lr}
 800fd9a:	b08d      	sub	sp, #52	; 0x34
 800fd9c:	af04      	add	r7, sp, #16
 800fd9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fda0:	2300      	movs	r3, #0
 800fda2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fda4:	2300      	movs	r3, #0
 800fda6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d106      	bne.n	800fdbc <tcp_process+0x24>
 800fdae:	4b9d      	ldr	r3, [pc, #628]	; (8010024 <tcp_process+0x28c>)
 800fdb0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fdb4:	499c      	ldr	r1, [pc, #624]	; (8010028 <tcp_process+0x290>)
 800fdb6:	489d      	ldr	r0, [pc, #628]	; (801002c <tcp_process+0x294>)
 800fdb8:	f006 f9ba 	bl	8016130 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fdbc:	4b9c      	ldr	r3, [pc, #624]	; (8010030 <tcp_process+0x298>)
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	f003 0304 	and.w	r3, r3, #4
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d04e      	beq.n	800fe66 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	7d1b      	ldrb	r3, [r3, #20]
 800fdcc:	2b02      	cmp	r3, #2
 800fdce:	d108      	bne.n	800fde2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fdd4:	4b97      	ldr	r3, [pc, #604]	; (8010034 <tcp_process+0x29c>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d123      	bne.n	800fe24 <tcp_process+0x8c>
        acceptable = 1;
 800fddc:	2301      	movs	r3, #1
 800fdde:	76fb      	strb	r3, [r7, #27]
 800fde0:	e020      	b.n	800fe24 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fde6:	4b94      	ldr	r3, [pc, #592]	; (8010038 <tcp_process+0x2a0>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d102      	bne.n	800fdf4 <tcp_process+0x5c>
        acceptable = 1;
 800fdee:	2301      	movs	r3, #1
 800fdf0:	76fb      	strb	r3, [r7, #27]
 800fdf2:	e017      	b.n	800fe24 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fdf4:	4b90      	ldr	r3, [pc, #576]	; (8010038 <tcp_process+0x2a0>)
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	db10      	blt.n	800fe24 <tcp_process+0x8c>
 800fe02:	4b8d      	ldr	r3, [pc, #564]	; (8010038 <tcp_process+0x2a0>)
 800fe04:	681a      	ldr	r2, [r3, #0]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0a:	6879      	ldr	r1, [r7, #4]
 800fe0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe0e:	440b      	add	r3, r1
 800fe10:	1ad3      	subs	r3, r2, r3
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	dc06      	bgt.n	800fe24 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	8b5b      	ldrh	r3, [r3, #26]
 800fe1a:	f043 0302 	orr.w	r3, r3, #2
 800fe1e:	b29a      	uxth	r2, r3
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fe24:	7efb      	ldrb	r3, [r7, #27]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d01b      	beq.n	800fe62 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	7d1b      	ldrb	r3, [r3, #20]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d106      	bne.n	800fe40 <tcp_process+0xa8>
 800fe32:	4b7c      	ldr	r3, [pc, #496]	; (8010024 <tcp_process+0x28c>)
 800fe34:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fe38:	4980      	ldr	r1, [pc, #512]	; (801003c <tcp_process+0x2a4>)
 800fe3a:	487c      	ldr	r0, [pc, #496]	; (801002c <tcp_process+0x294>)
 800fe3c:	f006 f978 	bl	8016130 <iprintf>
      recv_flags |= TF_RESET;
 800fe40:	4b7f      	ldr	r3, [pc, #508]	; (8010040 <tcp_process+0x2a8>)
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	f043 0308 	orr.w	r3, r3, #8
 800fe48:	b2da      	uxtb	r2, r3
 800fe4a:	4b7d      	ldr	r3, [pc, #500]	; (8010040 <tcp_process+0x2a8>)
 800fe4c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	8b5b      	ldrh	r3, [r3, #26]
 800fe52:	f023 0301 	bic.w	r3, r3, #1
 800fe56:	b29a      	uxth	r2, r3
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fe5c:	f06f 030d 	mvn.w	r3, #13
 800fe60:	e37a      	b.n	8010558 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fe62:	2300      	movs	r3, #0
 800fe64:	e378      	b.n	8010558 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fe66:	4b72      	ldr	r3, [pc, #456]	; (8010030 <tcp_process+0x298>)
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	f003 0302 	and.w	r3, r3, #2
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d010      	beq.n	800fe94 <tcp_process+0xfc>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	7d1b      	ldrb	r3, [r3, #20]
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	d00c      	beq.n	800fe94 <tcp_process+0xfc>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	7d1b      	ldrb	r3, [r3, #20]
 800fe7e:	2b03      	cmp	r3, #3
 800fe80:	d008      	beq.n	800fe94 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	8b5b      	ldrh	r3, [r3, #26]
 800fe86:	f043 0302 	orr.w	r3, r3, #2
 800fe8a:	b29a      	uxth	r2, r3
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fe90:	2300      	movs	r3, #0
 800fe92:	e361      	b.n	8010558 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	8b5b      	ldrh	r3, [r3, #26]
 800fe98:	f003 0310 	and.w	r3, r3, #16
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d103      	bne.n	800fea8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fea0:	4b68      	ldr	r3, [pc, #416]	; (8010044 <tcp_process+0x2ac>)
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2200      	movs	r2, #0
 800feac:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2200      	movs	r2, #0
 800feb4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f001 fc2f 	bl	801171c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	7d1b      	ldrb	r3, [r3, #20]
 800fec2:	3b02      	subs	r3, #2
 800fec4:	2b07      	cmp	r3, #7
 800fec6:	f200 8337 	bhi.w	8010538 <tcp_process+0x7a0>
 800feca:	a201      	add	r2, pc, #4	; (adr r2, 800fed0 <tcp_process+0x138>)
 800fecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed0:	0800fef1 	.word	0x0800fef1
 800fed4:	08010121 	.word	0x08010121
 800fed8:	08010299 	.word	0x08010299
 800fedc:	080102c3 	.word	0x080102c3
 800fee0:	080103e7 	.word	0x080103e7
 800fee4:	08010299 	.word	0x08010299
 800fee8:	08010473 	.word	0x08010473
 800feec:	08010503 	.word	0x08010503
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fef0:	4b4f      	ldr	r3, [pc, #316]	; (8010030 <tcp_process+0x298>)
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	f003 0310 	and.w	r3, r3, #16
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	f000 80e4 	beq.w	80100c6 <tcp_process+0x32e>
 800fefe:	4b4c      	ldr	r3, [pc, #304]	; (8010030 <tcp_process+0x298>)
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	f003 0302 	and.w	r3, r3, #2
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	f000 80dd 	beq.w	80100c6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff10:	1c5a      	adds	r2, r3, #1
 800ff12:	4b48      	ldr	r3, [pc, #288]	; (8010034 <tcp_process+0x29c>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	f040 80d5 	bne.w	80100c6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ff1c:	4b46      	ldr	r3, [pc, #280]	; (8010038 <tcp_process+0x2a0>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	1c5a      	adds	r2, r3, #1
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ff2e:	4b41      	ldr	r3, [pc, #260]	; (8010034 <tcp_process+0x29c>)
 800ff30:	681a      	ldr	r2, [r3, #0]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ff36:	4b44      	ldr	r3, [pc, #272]	; (8010048 <tcp_process+0x2b0>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	89db      	ldrh	r3, [r3, #14]
 800ff3c:	b29a      	uxth	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ff50:	4b39      	ldr	r3, [pc, #228]	; (8010038 <tcp_process+0x2a0>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	1e5a      	subs	r2, r3, #1
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2204      	movs	r2, #4
 800ff5e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	3304      	adds	r3, #4
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f004 feab 	bl	8014cc4 <ip4_route>
 800ff6e:	4601      	mov	r1, r0
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	3304      	adds	r3, #4
 800ff74:	461a      	mov	r2, r3
 800ff76:	4620      	mov	r0, r4
 800ff78:	f7ff f88c 	bl	800f094 <tcp_eff_send_mss_netif>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	461a      	mov	r2, r3
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff88:	009a      	lsls	r2, r3, #2
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff8e:	005b      	lsls	r3, r3, #1
 800ff90:	f241 111c 	movw	r1, #4380	; 0x111c
 800ff94:	428b      	cmp	r3, r1
 800ff96:	bf38      	it	cc
 800ff98:	460b      	movcc	r3, r1
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d204      	bcs.n	800ffa8 <tcp_process+0x210>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	e00d      	b.n	800ffc4 <tcp_process+0x22c>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffac:	005b      	lsls	r3, r3, #1
 800ffae:	f241 121c 	movw	r2, #4380	; 0x111c
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d904      	bls.n	800ffc0 <tcp_process+0x228>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffba:	005b      	lsls	r3, r3, #1
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	e001      	b.n	800ffc4 <tcp_process+0x22c>
 800ffc0:	f241 131c 	movw	r3, #4380	; 0x111c
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d106      	bne.n	800ffe2 <tcp_process+0x24a>
 800ffd4:	4b13      	ldr	r3, [pc, #76]	; (8010024 <tcp_process+0x28c>)
 800ffd6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ffda:	491c      	ldr	r1, [pc, #112]	; (801004c <tcp_process+0x2b4>)
 800ffdc:	4813      	ldr	r0, [pc, #76]	; (801002c <tcp_process+0x294>)
 800ffde:	f006 f8a7 	bl	8016130 <iprintf>
        --pcb->snd_queuelen;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fff6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d12a      	bne.n	8010054 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010002:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d106      	bne.n	8010018 <tcp_process+0x280>
 801000a:	4b06      	ldr	r3, [pc, #24]	; (8010024 <tcp_process+0x28c>)
 801000c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010010:	490f      	ldr	r1, [pc, #60]	; (8010050 <tcp_process+0x2b8>)
 8010012:	4806      	ldr	r0, [pc, #24]	; (801002c <tcp_process+0x294>)
 8010014:	f006 f88c 	bl	8016130 <iprintf>
          pcb->unsent = rseg->next;
 8010018:	69fb      	ldr	r3, [r7, #28]
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	66da      	str	r2, [r3, #108]	; 0x6c
 8010020:	e01c      	b.n	801005c <tcp_process+0x2c4>
 8010022:	bf00      	nop
 8010024:	08018688 	.word	0x08018688
 8010028:	080188c0 	.word	0x080188c0
 801002c:	080186d4 	.word	0x080186d4
 8010030:	20009734 	.word	0x20009734
 8010034:	2000972c 	.word	0x2000972c
 8010038:	20009728 	.word	0x20009728
 801003c:	080188dc 	.word	0x080188dc
 8010040:	20009735 	.word	0x20009735
 8010044:	200096f0 	.word	0x200096f0
 8010048:	20009718 	.word	0x20009718
 801004c:	080188fc 	.word	0x080188fc
 8010050:	08018914 	.word	0x08018914
        } else {
          pcb->unacked = rseg->next;
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801005c:	69f8      	ldr	r0, [r7, #28]
 801005e:	f7fe fd22 	bl	800eaa6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010066:	2b00      	cmp	r3, #0
 8010068:	d104      	bne.n	8010074 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010070:	861a      	strh	r2, [r3, #48]	; 0x30
 8010072:	e006      	b.n	8010082 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2200      	movs	r2, #0
 801007e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010088:	2b00      	cmp	r3, #0
 801008a:	d00a      	beq.n	80100a2 <tcp_process+0x30a>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010092:	687a      	ldr	r2, [r7, #4]
 8010094:	6910      	ldr	r0, [r2, #16]
 8010096:	2200      	movs	r2, #0
 8010098:	6879      	ldr	r1, [r7, #4]
 801009a:	4798      	blx	r3
 801009c:	4603      	mov	r3, r0
 801009e:	76bb      	strb	r3, [r7, #26]
 80100a0:	e001      	b.n	80100a6 <tcp_process+0x30e>
 80100a2:	2300      	movs	r3, #0
 80100a4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80100a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80100aa:	f113 0f0d 	cmn.w	r3, #13
 80100ae:	d102      	bne.n	80100b6 <tcp_process+0x31e>
          return ERR_ABRT;
 80100b0:	f06f 030c 	mvn.w	r3, #12
 80100b4:	e250      	b.n	8010558 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	8b5b      	ldrh	r3, [r3, #26]
 80100ba:	f043 0302 	orr.w	r3, r3, #2
 80100be:	b29a      	uxth	r2, r3
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80100c4:	e23a      	b.n	801053c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80100c6:	4b98      	ldr	r3, [pc, #608]	; (8010328 <tcp_process+0x590>)
 80100c8:	781b      	ldrb	r3, [r3, #0]
 80100ca:	f003 0310 	and.w	r3, r3, #16
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	f000 8234 	beq.w	801053c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100d4:	4b95      	ldr	r3, [pc, #596]	; (801032c <tcp_process+0x594>)
 80100d6:	6819      	ldr	r1, [r3, #0]
 80100d8:	4b95      	ldr	r3, [pc, #596]	; (8010330 <tcp_process+0x598>)
 80100da:	881b      	ldrh	r3, [r3, #0]
 80100dc:	461a      	mov	r2, r3
 80100de:	4b95      	ldr	r3, [pc, #596]	; (8010334 <tcp_process+0x59c>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100e4:	4b94      	ldr	r3, [pc, #592]	; (8010338 <tcp_process+0x5a0>)
 80100e6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100e8:	885b      	ldrh	r3, [r3, #2]
 80100ea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100ec:	4a92      	ldr	r2, [pc, #584]	; (8010338 <tcp_process+0x5a0>)
 80100ee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100f0:	8812      	ldrh	r2, [r2, #0]
 80100f2:	b292      	uxth	r2, r2
 80100f4:	9202      	str	r2, [sp, #8]
 80100f6:	9301      	str	r3, [sp, #4]
 80100f8:	4b90      	ldr	r3, [pc, #576]	; (801033c <tcp_process+0x5a4>)
 80100fa:	9300      	str	r3, [sp, #0]
 80100fc:	4b90      	ldr	r3, [pc, #576]	; (8010340 <tcp_process+0x5a8>)
 80100fe:	4602      	mov	r2, r0
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f002 fc85 	bl	8012a10 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801010c:	2b05      	cmp	r3, #5
 801010e:	f200 8215 	bhi.w	801053c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2200      	movs	r2, #0
 8010116:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f002 fa4f 	bl	80125bc <tcp_rexmit_rto>
      break;
 801011e:	e20d      	b.n	801053c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010120:	4b81      	ldr	r3, [pc, #516]	; (8010328 <tcp_process+0x590>)
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	f003 0310 	and.w	r3, r3, #16
 8010128:	2b00      	cmp	r3, #0
 801012a:	f000 80a1 	beq.w	8010270 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801012e:	4b7f      	ldr	r3, [pc, #508]	; (801032c <tcp_process+0x594>)
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010136:	1ad3      	subs	r3, r2, r3
 8010138:	3b01      	subs	r3, #1
 801013a:	2b00      	cmp	r3, #0
 801013c:	db7e      	blt.n	801023c <tcp_process+0x4a4>
 801013e:	4b7b      	ldr	r3, [pc, #492]	; (801032c <tcp_process+0x594>)
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010146:	1ad3      	subs	r3, r2, r3
 8010148:	2b00      	cmp	r3, #0
 801014a:	dc77      	bgt.n	801023c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2204      	movs	r2, #4
 8010150:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010156:	2b00      	cmp	r3, #0
 8010158:	d102      	bne.n	8010160 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801015a:	23fa      	movs	r3, #250	; 0xfa
 801015c:	76bb      	strb	r3, [r7, #26]
 801015e:	e01d      	b.n	801019c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010164:	699b      	ldr	r3, [r3, #24]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d106      	bne.n	8010178 <tcp_process+0x3e0>
 801016a:	4b76      	ldr	r3, [pc, #472]	; (8010344 <tcp_process+0x5ac>)
 801016c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010170:	4975      	ldr	r1, [pc, #468]	; (8010348 <tcp_process+0x5b0>)
 8010172:	4876      	ldr	r0, [pc, #472]	; (801034c <tcp_process+0x5b4>)
 8010174:	f005 ffdc 	bl	8016130 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801017c:	699b      	ldr	r3, [r3, #24]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00a      	beq.n	8010198 <tcp_process+0x400>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010186:	699b      	ldr	r3, [r3, #24]
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	6910      	ldr	r0, [r2, #16]
 801018c:	2200      	movs	r2, #0
 801018e:	6879      	ldr	r1, [r7, #4]
 8010190:	4798      	blx	r3
 8010192:	4603      	mov	r3, r0
 8010194:	76bb      	strb	r3, [r7, #26]
 8010196:	e001      	b.n	801019c <tcp_process+0x404>
 8010198:	23f0      	movs	r3, #240	; 0xf0
 801019a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801019c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00a      	beq.n	80101ba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80101a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80101a8:	f113 0f0d 	cmn.w	r3, #13
 80101ac:	d002      	beq.n	80101b4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f7fd ff8e 	bl	800e0d0 <tcp_abort>
            }
            return ERR_ABRT;
 80101b4:	f06f 030c 	mvn.w	r3, #12
 80101b8:	e1ce      	b.n	8010558 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 fae0 	bl	8010780 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80101c0:	4b63      	ldr	r3, [pc, #396]	; (8010350 <tcp_process+0x5b8>)
 80101c2:	881b      	ldrh	r3, [r3, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d005      	beq.n	80101d4 <tcp_process+0x43c>
            recv_acked--;
 80101c8:	4b61      	ldr	r3, [pc, #388]	; (8010350 <tcp_process+0x5b8>)
 80101ca:	881b      	ldrh	r3, [r3, #0]
 80101cc:	3b01      	subs	r3, #1
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	4b5f      	ldr	r3, [pc, #380]	; (8010350 <tcp_process+0x5b8>)
 80101d2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101d8:	009a      	lsls	r2, r3, #2
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	f241 111c 	movw	r1, #4380	; 0x111c
 80101e4:	428b      	cmp	r3, r1
 80101e6:	bf38      	it	cc
 80101e8:	460b      	movcc	r3, r1
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d204      	bcs.n	80101f8 <tcp_process+0x460>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	e00d      	b.n	8010214 <tcp_process+0x47c>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101fc:	005b      	lsls	r3, r3, #1
 80101fe:	f241 121c 	movw	r2, #4380	; 0x111c
 8010202:	4293      	cmp	r3, r2
 8010204:	d904      	bls.n	8010210 <tcp_process+0x478>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801020a:	005b      	lsls	r3, r3, #1
 801020c:	b29b      	uxth	r3, r3
 801020e:	e001      	b.n	8010214 <tcp_process+0x47c>
 8010210:	f241 131c 	movw	r3, #4380	; 0x111c
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801021a:	4b4e      	ldr	r3, [pc, #312]	; (8010354 <tcp_process+0x5bc>)
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	f003 0320 	and.w	r3, r3, #32
 8010222:	2b00      	cmp	r3, #0
 8010224:	d037      	beq.n	8010296 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	8b5b      	ldrh	r3, [r3, #26]
 801022a:	f043 0302 	orr.w	r3, r3, #2
 801022e:	b29a      	uxth	r2, r3
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2207      	movs	r2, #7
 8010238:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801023a:	e02c      	b.n	8010296 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801023c:	4b3b      	ldr	r3, [pc, #236]	; (801032c <tcp_process+0x594>)
 801023e:	6819      	ldr	r1, [r3, #0]
 8010240:	4b3b      	ldr	r3, [pc, #236]	; (8010330 <tcp_process+0x598>)
 8010242:	881b      	ldrh	r3, [r3, #0]
 8010244:	461a      	mov	r2, r3
 8010246:	4b3b      	ldr	r3, [pc, #236]	; (8010334 <tcp_process+0x59c>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801024c:	4b3a      	ldr	r3, [pc, #232]	; (8010338 <tcp_process+0x5a0>)
 801024e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010250:	885b      	ldrh	r3, [r3, #2]
 8010252:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010254:	4a38      	ldr	r2, [pc, #224]	; (8010338 <tcp_process+0x5a0>)
 8010256:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010258:	8812      	ldrh	r2, [r2, #0]
 801025a:	b292      	uxth	r2, r2
 801025c:	9202      	str	r2, [sp, #8]
 801025e:	9301      	str	r3, [sp, #4]
 8010260:	4b36      	ldr	r3, [pc, #216]	; (801033c <tcp_process+0x5a4>)
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	4b36      	ldr	r3, [pc, #216]	; (8010340 <tcp_process+0x5a8>)
 8010266:	4602      	mov	r2, r0
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f002 fbd1 	bl	8012a10 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801026e:	e167      	b.n	8010540 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010270:	4b2d      	ldr	r3, [pc, #180]	; (8010328 <tcp_process+0x590>)
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	f003 0302 	and.w	r3, r3, #2
 8010278:	2b00      	cmp	r3, #0
 801027a:	f000 8161 	beq.w	8010540 <tcp_process+0x7a8>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010282:	1e5a      	subs	r2, r3, #1
 8010284:	4b2b      	ldr	r3, [pc, #172]	; (8010334 <tcp_process+0x59c>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	429a      	cmp	r2, r3
 801028a:	f040 8159 	bne.w	8010540 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f002 f9b6 	bl	8012600 <tcp_rexmit>
      break;
 8010294:	e154      	b.n	8010540 <tcp_process+0x7a8>
 8010296:	e153      	b.n	8010540 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 fa71 	bl	8010780 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801029e:	4b2d      	ldr	r3, [pc, #180]	; (8010354 <tcp_process+0x5bc>)
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	f003 0320 	and.w	r3, r3, #32
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f000 814c 	beq.w	8010544 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	8b5b      	ldrh	r3, [r3, #26]
 80102b0:	f043 0302 	orr.w	r3, r3, #2
 80102b4:	b29a      	uxth	r2, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2207      	movs	r2, #7
 80102be:	751a      	strb	r2, [r3, #20]
      }
      break;
 80102c0:	e140      	b.n	8010544 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 fa5c 	bl	8010780 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80102c8:	4b22      	ldr	r3, [pc, #136]	; (8010354 <tcp_process+0x5bc>)
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	f003 0320 	and.w	r3, r3, #32
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d071      	beq.n	80103b8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102d4:	4b14      	ldr	r3, [pc, #80]	; (8010328 <tcp_process+0x590>)
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	f003 0310 	and.w	r3, r3, #16
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d060      	beq.n	80103a2 <tcp_process+0x60a>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102e4:	4b11      	ldr	r3, [pc, #68]	; (801032c <tcp_process+0x594>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d15a      	bne.n	80103a2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d156      	bne.n	80103a2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	8b5b      	ldrh	r3, [r3, #26]
 80102f8:	f043 0302 	orr.w	r3, r3, #2
 80102fc:	b29a      	uxth	r2, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f7fe fdbc 	bl	800ee80 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010308:	4b13      	ldr	r3, [pc, #76]	; (8010358 <tcp_process+0x5c0>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	429a      	cmp	r2, r3
 8010310:	d105      	bne.n	801031e <tcp_process+0x586>
 8010312:	4b11      	ldr	r3, [pc, #68]	; (8010358 <tcp_process+0x5c0>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	68db      	ldr	r3, [r3, #12]
 8010318:	4a0f      	ldr	r2, [pc, #60]	; (8010358 <tcp_process+0x5c0>)
 801031a:	6013      	str	r3, [r2, #0]
 801031c:	e02e      	b.n	801037c <tcp_process+0x5e4>
 801031e:	4b0e      	ldr	r3, [pc, #56]	; (8010358 <tcp_process+0x5c0>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	617b      	str	r3, [r7, #20]
 8010324:	e027      	b.n	8010376 <tcp_process+0x5de>
 8010326:	bf00      	nop
 8010328:	20009734 	.word	0x20009734
 801032c:	2000972c 	.word	0x2000972c
 8010330:	20009732 	.word	0x20009732
 8010334:	20009728 	.word	0x20009728
 8010338:	20009718 	.word	0x20009718
 801033c:	20006190 	.word	0x20006190
 8010340:	20006194 	.word	0x20006194
 8010344:	08018688 	.word	0x08018688
 8010348:	08018928 	.word	0x08018928
 801034c:	080186d4 	.word	0x080186d4
 8010350:	20009730 	.word	0x20009730
 8010354:	20009735 	.word	0x20009735
 8010358:	200096fc 	.word	0x200096fc
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	68db      	ldr	r3, [r3, #12]
 8010360:	687a      	ldr	r2, [r7, #4]
 8010362:	429a      	cmp	r2, r3
 8010364:	d104      	bne.n	8010370 <tcp_process+0x5d8>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	68da      	ldr	r2, [r3, #12]
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	60da      	str	r2, [r3, #12]
 801036e:	e005      	b.n	801037c <tcp_process+0x5e4>
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	617b      	str	r3, [r7, #20]
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d1ef      	bne.n	801035c <tcp_process+0x5c4>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2200      	movs	r2, #0
 8010380:	60da      	str	r2, [r3, #12]
 8010382:	4b77      	ldr	r3, [pc, #476]	; (8010560 <tcp_process+0x7c8>)
 8010384:	2201      	movs	r2, #1
 8010386:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	220a      	movs	r2, #10
 801038c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801038e:	4b75      	ldr	r3, [pc, #468]	; (8010564 <tcp_process+0x7cc>)
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	60da      	str	r2, [r3, #12]
 8010396:	4a73      	ldr	r2, [pc, #460]	; (8010564 <tcp_process+0x7cc>)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6013      	str	r3, [r2, #0]
 801039c:	f002 fcfa 	bl	8012d94 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80103a0:	e0d2      	b.n	8010548 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	8b5b      	ldrh	r3, [r3, #26]
 80103a6:	f043 0302 	orr.w	r3, r3, #2
 80103aa:	b29a      	uxth	r2, r3
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2208      	movs	r2, #8
 80103b4:	751a      	strb	r2, [r3, #20]
      break;
 80103b6:	e0c7      	b.n	8010548 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80103b8:	4b6b      	ldr	r3, [pc, #428]	; (8010568 <tcp_process+0x7d0>)
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	f003 0310 	and.w	r3, r3, #16
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	f000 80c1 	beq.w	8010548 <tcp_process+0x7b0>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103ca:	4b68      	ldr	r3, [pc, #416]	; (801056c <tcp_process+0x7d4>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	429a      	cmp	r2, r3
 80103d0:	f040 80ba 	bne.w	8010548 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f040 80b5 	bne.w	8010548 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2206      	movs	r2, #6
 80103e2:	751a      	strb	r2, [r3, #20]
      break;
 80103e4:	e0b0      	b.n	8010548 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f000 f9ca 	bl	8010780 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80103ec:	4b60      	ldr	r3, [pc, #384]	; (8010570 <tcp_process+0x7d8>)
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	f003 0320 	and.w	r3, r3, #32
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f000 80a9 	beq.w	801054c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	8b5b      	ldrh	r3, [r3, #26]
 80103fe:	f043 0302 	orr.w	r3, r3, #2
 8010402:	b29a      	uxth	r2, r3
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f7fe fd39 	bl	800ee80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801040e:	4b59      	ldr	r3, [pc, #356]	; (8010574 <tcp_process+0x7dc>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	429a      	cmp	r2, r3
 8010416:	d105      	bne.n	8010424 <tcp_process+0x68c>
 8010418:	4b56      	ldr	r3, [pc, #344]	; (8010574 <tcp_process+0x7dc>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	4a55      	ldr	r2, [pc, #340]	; (8010574 <tcp_process+0x7dc>)
 8010420:	6013      	str	r3, [r2, #0]
 8010422:	e013      	b.n	801044c <tcp_process+0x6b4>
 8010424:	4b53      	ldr	r3, [pc, #332]	; (8010574 <tcp_process+0x7dc>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	613b      	str	r3, [r7, #16]
 801042a:	e00c      	b.n	8010446 <tcp_process+0x6ae>
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	68db      	ldr	r3, [r3, #12]
 8010430:	687a      	ldr	r2, [r7, #4]
 8010432:	429a      	cmp	r2, r3
 8010434:	d104      	bne.n	8010440 <tcp_process+0x6a8>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	68da      	ldr	r2, [r3, #12]
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	60da      	str	r2, [r3, #12]
 801043e:	e005      	b.n	801044c <tcp_process+0x6b4>
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	613b      	str	r3, [r7, #16]
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d1ef      	bne.n	801042c <tcp_process+0x694>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2200      	movs	r2, #0
 8010450:	60da      	str	r2, [r3, #12]
 8010452:	4b43      	ldr	r3, [pc, #268]	; (8010560 <tcp_process+0x7c8>)
 8010454:	2201      	movs	r2, #1
 8010456:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	220a      	movs	r2, #10
 801045c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801045e:	4b41      	ldr	r3, [pc, #260]	; (8010564 <tcp_process+0x7cc>)
 8010460:	681a      	ldr	r2, [r3, #0]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	60da      	str	r2, [r3, #12]
 8010466:	4a3f      	ldr	r2, [pc, #252]	; (8010564 <tcp_process+0x7cc>)
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6013      	str	r3, [r2, #0]
 801046c:	f002 fc92 	bl	8012d94 <tcp_timer_needed>
      }
      break;
 8010470:	e06c      	b.n	801054c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f000 f984 	bl	8010780 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010478:	4b3b      	ldr	r3, [pc, #236]	; (8010568 <tcp_process+0x7d0>)
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	f003 0310 	and.w	r3, r3, #16
 8010480:	2b00      	cmp	r3, #0
 8010482:	d065      	beq.n	8010550 <tcp_process+0x7b8>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010488:	4b38      	ldr	r3, [pc, #224]	; (801056c <tcp_process+0x7d4>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	429a      	cmp	r2, r3
 801048e:	d15f      	bne.n	8010550 <tcp_process+0x7b8>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010494:	2b00      	cmp	r3, #0
 8010496:	d15b      	bne.n	8010550 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f7fe fcf1 	bl	800ee80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801049e:	4b35      	ldr	r3, [pc, #212]	; (8010574 <tcp_process+0x7dc>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d105      	bne.n	80104b4 <tcp_process+0x71c>
 80104a8:	4b32      	ldr	r3, [pc, #200]	; (8010574 <tcp_process+0x7dc>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	4a31      	ldr	r2, [pc, #196]	; (8010574 <tcp_process+0x7dc>)
 80104b0:	6013      	str	r3, [r2, #0]
 80104b2:	e013      	b.n	80104dc <tcp_process+0x744>
 80104b4:	4b2f      	ldr	r3, [pc, #188]	; (8010574 <tcp_process+0x7dc>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	60fb      	str	r3, [r7, #12]
 80104ba:	e00c      	b.n	80104d6 <tcp_process+0x73e>
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	687a      	ldr	r2, [r7, #4]
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d104      	bne.n	80104d0 <tcp_process+0x738>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	68da      	ldr	r2, [r3, #12]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	60da      	str	r2, [r3, #12]
 80104ce:	e005      	b.n	80104dc <tcp_process+0x744>
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	60fb      	str	r3, [r7, #12]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d1ef      	bne.n	80104bc <tcp_process+0x724>
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2200      	movs	r2, #0
 80104e0:	60da      	str	r2, [r3, #12]
 80104e2:	4b1f      	ldr	r3, [pc, #124]	; (8010560 <tcp_process+0x7c8>)
 80104e4:	2201      	movs	r2, #1
 80104e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	220a      	movs	r2, #10
 80104ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104ee:	4b1d      	ldr	r3, [pc, #116]	; (8010564 <tcp_process+0x7cc>)
 80104f0:	681a      	ldr	r2, [r3, #0]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	60da      	str	r2, [r3, #12]
 80104f6:	4a1b      	ldr	r2, [pc, #108]	; (8010564 <tcp_process+0x7cc>)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6013      	str	r3, [r2, #0]
 80104fc:	f002 fc4a 	bl	8012d94 <tcp_timer_needed>
      }
      break;
 8010500:	e026      	b.n	8010550 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 f93c 	bl	8010780 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010508:	4b17      	ldr	r3, [pc, #92]	; (8010568 <tcp_process+0x7d0>)
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	f003 0310 	and.w	r3, r3, #16
 8010510:	2b00      	cmp	r3, #0
 8010512:	d01f      	beq.n	8010554 <tcp_process+0x7bc>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010518:	4b14      	ldr	r3, [pc, #80]	; (801056c <tcp_process+0x7d4>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	429a      	cmp	r2, r3
 801051e:	d119      	bne.n	8010554 <tcp_process+0x7bc>
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010524:	2b00      	cmp	r3, #0
 8010526:	d115      	bne.n	8010554 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010528:	4b11      	ldr	r3, [pc, #68]	; (8010570 <tcp_process+0x7d8>)
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	f043 0310 	orr.w	r3, r3, #16
 8010530:	b2da      	uxtb	r2, r3
 8010532:	4b0f      	ldr	r3, [pc, #60]	; (8010570 <tcp_process+0x7d8>)
 8010534:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010536:	e00d      	b.n	8010554 <tcp_process+0x7bc>
    default:
      break;
 8010538:	bf00      	nop
 801053a:	e00c      	b.n	8010556 <tcp_process+0x7be>
      break;
 801053c:	bf00      	nop
 801053e:	e00a      	b.n	8010556 <tcp_process+0x7be>
      break;
 8010540:	bf00      	nop
 8010542:	e008      	b.n	8010556 <tcp_process+0x7be>
      break;
 8010544:	bf00      	nop
 8010546:	e006      	b.n	8010556 <tcp_process+0x7be>
      break;
 8010548:	bf00      	nop
 801054a:	e004      	b.n	8010556 <tcp_process+0x7be>
      break;
 801054c:	bf00      	nop
 801054e:	e002      	b.n	8010556 <tcp_process+0x7be>
      break;
 8010550:	bf00      	nop
 8010552:	e000      	b.n	8010556 <tcp_process+0x7be>
      break;
 8010554:	bf00      	nop
  }
  return ERR_OK;
 8010556:	2300      	movs	r3, #0
}
 8010558:	4618      	mov	r0, r3
 801055a:	3724      	adds	r7, #36	; 0x24
 801055c:	46bd      	mov	sp, r7
 801055e:	bd90      	pop	{r4, r7, pc}
 8010560:	20009704 	.word	0x20009704
 8010564:	20009700 	.word	0x20009700
 8010568:	20009734 	.word	0x20009734
 801056c:	2000972c 	.word	0x2000972c
 8010570:	20009735 	.word	0x20009735
 8010574:	200096fc 	.word	0x200096fc

08010578 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010578:	b590      	push	{r4, r7, lr}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d106      	bne.n	8010596 <tcp_oos_insert_segment+0x1e>
 8010588:	4b3b      	ldr	r3, [pc, #236]	; (8010678 <tcp_oos_insert_segment+0x100>)
 801058a:	f240 421f 	movw	r2, #1055	; 0x41f
 801058e:	493b      	ldr	r1, [pc, #236]	; (801067c <tcp_oos_insert_segment+0x104>)
 8010590:	483b      	ldr	r0, [pc, #236]	; (8010680 <tcp_oos_insert_segment+0x108>)
 8010592:	f005 fdcd 	bl	8016130 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	899b      	ldrh	r3, [r3, #12]
 801059c:	b29b      	uxth	r3, r3
 801059e:	4618      	mov	r0, r3
 80105a0:	f7fb fc0e 	bl	800bdc0 <lwip_htons>
 80105a4:	4603      	mov	r3, r0
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	f003 0301 	and.w	r3, r3, #1
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d028      	beq.n	8010602 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80105b0:	6838      	ldr	r0, [r7, #0]
 80105b2:	f7fe fa63 	bl	800ea7c <tcp_segs_free>
    next = NULL;
 80105b6:	2300      	movs	r3, #0
 80105b8:	603b      	str	r3, [r7, #0]
 80105ba:	e056      	b.n	801066a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	899b      	ldrh	r3, [r3, #12]
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7fb fbfb 	bl	800bdc0 <lwip_htons>
 80105ca:	4603      	mov	r3, r0
 80105cc:	b2db      	uxtb	r3, r3
 80105ce:	f003 0301 	and.w	r3, r3, #1
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00d      	beq.n	80105f2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	68db      	ldr	r3, [r3, #12]
 80105da:	899b      	ldrh	r3, [r3, #12]
 80105dc:	b29c      	uxth	r4, r3
 80105de:	2001      	movs	r0, #1
 80105e0:	f7fb fbee 	bl	800bdc0 <lwip_htons>
 80105e4:	4603      	mov	r3, r0
 80105e6:	461a      	mov	r2, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	4322      	orrs	r2, r4
 80105ee:	b292      	uxth	r2, r2
 80105f0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80105fc:	68f8      	ldr	r0, [r7, #12]
 80105fe:	f7fe fa52 	bl	800eaa6 <tcp_seg_free>
    while (next &&
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d00e      	beq.n	8010626 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	891b      	ldrh	r3, [r3, #8]
 801060c:	461a      	mov	r2, r3
 801060e:	4b1d      	ldr	r3, [pc, #116]	; (8010684 <tcp_oos_insert_segment+0x10c>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	441a      	add	r2, r3
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	6839      	ldr	r1, [r7, #0]
 801061c:	8909      	ldrh	r1, [r1, #8]
 801061e:	440b      	add	r3, r1
 8010620:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010622:	2b00      	cmp	r3, #0
 8010624:	daca      	bge.n	80105bc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d01e      	beq.n	801066a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	891b      	ldrh	r3, [r3, #8]
 8010630:	461a      	mov	r2, r3
 8010632:	4b14      	ldr	r3, [pc, #80]	; (8010684 <tcp_oos_insert_segment+0x10c>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	441a      	add	r2, r3
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010640:	2b00      	cmp	r3, #0
 8010642:	dd12      	ble.n	801066a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	b29a      	uxth	r2, r3
 801064c:	4b0d      	ldr	r3, [pc, #52]	; (8010684 <tcp_oos_insert_segment+0x10c>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	b29b      	uxth	r3, r3
 8010652:	1ad3      	subs	r3, r2, r3
 8010654:	b29a      	uxth	r2, r3
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	685a      	ldr	r2, [r3, #4]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	891b      	ldrh	r3, [r3, #8]
 8010662:	4619      	mov	r1, r3
 8010664:	4610      	mov	r0, r2
 8010666:	f7fc fd83 	bl	800d170 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	683a      	ldr	r2, [r7, #0]
 801066e:	601a      	str	r2, [r3, #0]
}
 8010670:	bf00      	nop
 8010672:	3714      	adds	r7, #20
 8010674:	46bd      	mov	sp, r7
 8010676:	bd90      	pop	{r4, r7, pc}
 8010678:	08018688 	.word	0x08018688
 801067c:	08018948 	.word	0x08018948
 8010680:	080186d4 	.word	0x080186d4
 8010684:	20009728 	.word	0x20009728

08010688 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010688:	b5b0      	push	{r4, r5, r7, lr}
 801068a:	b086      	sub	sp, #24
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	607a      	str	r2, [r7, #4]
 8010694:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010696:	e03e      	b.n	8010716 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	685b      	ldr	r3, [r3, #4]
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fc ff70 	bl	800d58c <pbuf_clen>
 80106ac:	4603      	mov	r3, r0
 80106ae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106b6:	8a7a      	ldrh	r2, [r7, #18]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d906      	bls.n	80106ca <tcp_free_acked_segments+0x42>
 80106bc:	4b2a      	ldr	r3, [pc, #168]	; (8010768 <tcp_free_acked_segments+0xe0>)
 80106be:	f240 4257 	movw	r2, #1111	; 0x457
 80106c2:	492a      	ldr	r1, [pc, #168]	; (801076c <tcp_free_acked_segments+0xe4>)
 80106c4:	482a      	ldr	r0, [pc, #168]	; (8010770 <tcp_free_acked_segments+0xe8>)
 80106c6:	f005 fd33 	bl	8016130 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80106d0:	8a7b      	ldrh	r3, [r7, #18]
 80106d2:	1ad3      	subs	r3, r2, r3
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	891a      	ldrh	r2, [r3, #8]
 80106e0:	4b24      	ldr	r3, [pc, #144]	; (8010774 <tcp_free_acked_segments+0xec>)
 80106e2:	881b      	ldrh	r3, [r3, #0]
 80106e4:	4413      	add	r3, r2
 80106e6:	b29a      	uxth	r2, r3
 80106e8:	4b22      	ldr	r3, [pc, #136]	; (8010774 <tcp_free_acked_segments+0xec>)
 80106ea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80106ec:	6978      	ldr	r0, [r7, #20]
 80106ee:	f7fe f9da 	bl	800eaa6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d00c      	beq.n	8010716 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d109      	bne.n	8010716 <tcp_free_acked_segments+0x8e>
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d106      	bne.n	8010716 <tcp_free_acked_segments+0x8e>
 8010708:	4b17      	ldr	r3, [pc, #92]	; (8010768 <tcp_free_acked_segments+0xe0>)
 801070a:	f240 4261 	movw	r2, #1121	; 0x461
 801070e:	491a      	ldr	r1, [pc, #104]	; (8010778 <tcp_free_acked_segments+0xf0>)
 8010710:	4817      	ldr	r0, [pc, #92]	; (8010770 <tcp_free_acked_segments+0xe8>)
 8010712:	f005 fd0d 	bl	8016130 <iprintf>
  while (seg_list != NULL &&
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d020      	beq.n	801075e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	4618      	mov	r0, r3
 8010724:	f7fb fb61 	bl	800bdea <lwip_htonl>
 8010728:	4604      	mov	r4, r0
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	891b      	ldrh	r3, [r3, #8]
 801072e:	461d      	mov	r5, r3
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	899b      	ldrh	r3, [r3, #12]
 8010736:	b29b      	uxth	r3, r3
 8010738:	4618      	mov	r0, r3
 801073a:	f7fb fb41 	bl	800bdc0 <lwip_htons>
 801073e:	4603      	mov	r3, r0
 8010740:	b2db      	uxtb	r3, r3
 8010742:	f003 0303 	and.w	r3, r3, #3
 8010746:	2b00      	cmp	r3, #0
 8010748:	d001      	beq.n	801074e <tcp_free_acked_segments+0xc6>
 801074a:	2301      	movs	r3, #1
 801074c:	e000      	b.n	8010750 <tcp_free_acked_segments+0xc8>
 801074e:	2300      	movs	r3, #0
 8010750:	442b      	add	r3, r5
 8010752:	18e2      	adds	r2, r4, r3
 8010754:	4b09      	ldr	r3, [pc, #36]	; (801077c <tcp_free_acked_segments+0xf4>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801075a:	2b00      	cmp	r3, #0
 801075c:	dd9c      	ble.n	8010698 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801075e:	68bb      	ldr	r3, [r7, #8]
}
 8010760:	4618      	mov	r0, r3
 8010762:	3718      	adds	r7, #24
 8010764:	46bd      	mov	sp, r7
 8010766:	bdb0      	pop	{r4, r5, r7, pc}
 8010768:	08018688 	.word	0x08018688
 801076c:	08018970 	.word	0x08018970
 8010770:	080186d4 	.word	0x080186d4
 8010774:	20009730 	.word	0x20009730
 8010778:	08018998 	.word	0x08018998
 801077c:	2000972c 	.word	0x2000972c

08010780 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010780:	b5b0      	push	{r4, r5, r7, lr}
 8010782:	b094      	sub	sp, #80	; 0x50
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010788:	2300      	movs	r3, #0
 801078a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d106      	bne.n	80107a0 <tcp_receive+0x20>
 8010792:	4b91      	ldr	r3, [pc, #580]	; (80109d8 <tcp_receive+0x258>)
 8010794:	f240 427b 	movw	r2, #1147	; 0x47b
 8010798:	4990      	ldr	r1, [pc, #576]	; (80109dc <tcp_receive+0x25c>)
 801079a:	4891      	ldr	r0, [pc, #580]	; (80109e0 <tcp_receive+0x260>)
 801079c:	f005 fcc8 	bl	8016130 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	7d1b      	ldrb	r3, [r3, #20]
 80107a4:	2b03      	cmp	r3, #3
 80107a6:	d806      	bhi.n	80107b6 <tcp_receive+0x36>
 80107a8:	4b8b      	ldr	r3, [pc, #556]	; (80109d8 <tcp_receive+0x258>)
 80107aa:	f240 427c 	movw	r2, #1148	; 0x47c
 80107ae:	498d      	ldr	r1, [pc, #564]	; (80109e4 <tcp_receive+0x264>)
 80107b0:	488b      	ldr	r0, [pc, #556]	; (80109e0 <tcp_receive+0x260>)
 80107b2:	f005 fcbd 	bl	8016130 <iprintf>

  if (flags & TCP_ACK) {
 80107b6:	4b8c      	ldr	r3, [pc, #560]	; (80109e8 <tcp_receive+0x268>)
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	f003 0310 	and.w	r3, r3, #16
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f000 8264 	beq.w	8010c8c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107ca:	461a      	mov	r2, r3
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107d0:	4413      	add	r3, r2
 80107d2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107d8:	4b84      	ldr	r3, [pc, #528]	; (80109ec <tcp_receive+0x26c>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	1ad3      	subs	r3, r2, r3
 80107de:	2b00      	cmp	r3, #0
 80107e0:	db1b      	blt.n	801081a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107e6:	4b81      	ldr	r3, [pc, #516]	; (80109ec <tcp_receive+0x26c>)
 80107e8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d106      	bne.n	80107fc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80107f2:	4b7f      	ldr	r3, [pc, #508]	; (80109f0 <tcp_receive+0x270>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	1ad3      	subs	r3, r2, r3
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	db0e      	blt.n	801081a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010800:	4b7b      	ldr	r3, [pc, #492]	; (80109f0 <tcp_receive+0x270>)
 8010802:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010804:	429a      	cmp	r2, r3
 8010806:	d125      	bne.n	8010854 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010808:	4b7a      	ldr	r3, [pc, #488]	; (80109f4 <tcp_receive+0x274>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	89db      	ldrh	r3, [r3, #14]
 801080e:	b29a      	uxth	r2, r3
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010816:	429a      	cmp	r2, r3
 8010818:	d91c      	bls.n	8010854 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801081a:	4b76      	ldr	r3, [pc, #472]	; (80109f4 <tcp_receive+0x274>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	89db      	ldrh	r3, [r3, #14]
 8010820:	b29a      	uxth	r2, r3
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010834:	429a      	cmp	r2, r3
 8010836:	d205      	bcs.n	8010844 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010844:	4b69      	ldr	r3, [pc, #420]	; (80109ec <tcp_receive+0x26c>)
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801084c:	4b68      	ldr	r3, [pc, #416]	; (80109f0 <tcp_receive+0x270>)
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010854:	4b66      	ldr	r3, [pc, #408]	; (80109f0 <tcp_receive+0x270>)
 8010856:	681a      	ldr	r2, [r3, #0]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801085c:	1ad3      	subs	r3, r2, r3
 801085e:	2b00      	cmp	r3, #0
 8010860:	dc58      	bgt.n	8010914 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010862:	4b65      	ldr	r3, [pc, #404]	; (80109f8 <tcp_receive+0x278>)
 8010864:	881b      	ldrh	r3, [r3, #0]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d14b      	bne.n	8010902 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010874:	4413      	add	r3, r2
 8010876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010878:	429a      	cmp	r2, r3
 801087a:	d142      	bne.n	8010902 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010882:	2b00      	cmp	r3, #0
 8010884:	db3d      	blt.n	8010902 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801088a:	4b59      	ldr	r3, [pc, #356]	; (80109f0 <tcp_receive+0x270>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	429a      	cmp	r2, r3
 8010890:	d137      	bne.n	8010902 <tcp_receive+0x182>
              found_dupack = 1;
 8010892:	2301      	movs	r3, #1
 8010894:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801089c:	2bff      	cmp	r3, #255	; 0xff
 801089e:	d007      	beq.n	80108b0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108a6:	3301      	adds	r3, #1
 80108a8:	b2da      	uxtb	r2, r3
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108b6:	2b03      	cmp	r3, #3
 80108b8:	d91b      	bls.n	80108f2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108c4:	4413      	add	r3, r2
 80108c6:	b29a      	uxth	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d30a      	bcc.n	80108e8 <tcp_receive+0x168>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108dc:	4413      	add	r3, r2
 80108de:	b29a      	uxth	r2, r3
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80108e6:	e004      	b.n	80108f2 <tcp_receive+0x172>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108f8:	2b02      	cmp	r3, #2
 80108fa:	d902      	bls.n	8010902 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f001 feeb 	bl	80126d8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010904:	2b00      	cmp	r3, #0
 8010906:	f040 8161 	bne.w	8010bcc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2200      	movs	r2, #0
 801090e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010912:	e15b      	b.n	8010bcc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010914:	4b36      	ldr	r3, [pc, #216]	; (80109f0 <tcp_receive+0x270>)
 8010916:	681a      	ldr	r2, [r3, #0]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801091c:	1ad3      	subs	r3, r2, r3
 801091e:	3b01      	subs	r3, #1
 8010920:	2b00      	cmp	r3, #0
 8010922:	f2c0 814e 	blt.w	8010bc2 <tcp_receive+0x442>
 8010926:	4b32      	ldr	r3, [pc, #200]	; (80109f0 <tcp_receive+0x270>)
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801092e:	1ad3      	subs	r3, r2, r3
 8010930:	2b00      	cmp	r3, #0
 8010932:	f300 8146 	bgt.w	8010bc2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	8b5b      	ldrh	r3, [r3, #26]
 801093a:	f003 0304 	and.w	r3, r3, #4
 801093e:	2b00      	cmp	r3, #0
 8010940:	d010      	beq.n	8010964 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	8b5b      	ldrh	r3, [r3, #26]
 8010946:	f023 0304 	bic.w	r3, r3, #4
 801094a:	b29a      	uxth	r2, r3
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2200      	movs	r2, #0
 8010960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010972:	10db      	asrs	r3, r3, #3
 8010974:	b21b      	sxth	r3, r3
 8010976:	b29a      	uxth	r2, r3
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801097e:	b29b      	uxth	r3, r3
 8010980:	4413      	add	r3, r2
 8010982:	b29b      	uxth	r3, r3
 8010984:	b21a      	sxth	r2, r3
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801098c:	4b18      	ldr	r3, [pc, #96]	; (80109f0 <tcp_receive+0x270>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	b29a      	uxth	r2, r3
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010996:	b29b      	uxth	r3, r3
 8010998:	1ad3      	subs	r3, r2, r3
 801099a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2200      	movs	r2, #0
 80109a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80109a4:	4b12      	ldr	r3, [pc, #72]	; (80109f0 <tcp_receive+0x270>)
 80109a6:	681a      	ldr	r2, [r3, #0]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	7d1b      	ldrb	r3, [r3, #20]
 80109b0:	2b03      	cmp	r3, #3
 80109b2:	f240 8097 	bls.w	8010ae4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d245      	bcs.n	8010a52 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	8b5b      	ldrh	r3, [r3, #26]
 80109ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d014      	beq.n	80109fc <tcp_receive+0x27c>
 80109d2:	2301      	movs	r3, #1
 80109d4:	e013      	b.n	80109fe <tcp_receive+0x27e>
 80109d6:	bf00      	nop
 80109d8:	08018688 	.word	0x08018688
 80109dc:	080189b8 	.word	0x080189b8
 80109e0:	080186d4 	.word	0x080186d4
 80109e4:	080189d4 	.word	0x080189d4
 80109e8:	20009734 	.word	0x20009734
 80109ec:	20009728 	.word	0x20009728
 80109f0:	2000972c 	.word	0x2000972c
 80109f4:	20009718 	.word	0x20009718
 80109f8:	20009732 	.word	0x20009732
 80109fc:	2302      	movs	r3, #2
 80109fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010a02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a0c:	fb12 f303 	smulbb	r3, r2, r3
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010a14:	4293      	cmp	r3, r2
 8010a16:	bf28      	it	cs
 8010a18:	4613      	movcs	r3, r2
 8010a1a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a24:	4413      	add	r3, r2
 8010a26:	b29a      	uxth	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d309      	bcc.n	8010a46 <tcp_receive+0x2c6>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a3a:	4413      	add	r3, r2
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a44:	e04e      	b.n	8010ae4 <tcp_receive+0x364>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a50:	e048      	b.n	8010ae4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a5a:	4413      	add	r3, r2
 8010a5c:	b29a      	uxth	r2, r3
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d309      	bcc.n	8010a7c <tcp_receive+0x2fc>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a70:	4413      	add	r3, r2
 8010a72:	b29a      	uxth	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010a7a:	e004      	b.n	8010a86 <tcp_receive+0x306>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d326      	bcc.n	8010ae4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010aa2:	1ad3      	subs	r3, r2, r3
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ab6:	4413      	add	r3, r2
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d30a      	bcc.n	8010ada <tcp_receive+0x35a>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ace:	4413      	add	r3, r2
 8010ad0:	b29a      	uxth	r2, r3
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ad8:	e004      	b.n	8010ae4 <tcp_receive+0x364>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ae0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aec:	4a98      	ldr	r2, [pc, #608]	; (8010d50 <tcp_receive+0x5d0>)
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f7ff fdca 	bl	8010688 <tcp_free_acked_segments>
 8010af4:	4602      	mov	r2, r0
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b02:	4a94      	ldr	r2, [pc, #592]	; (8010d54 <tcp_receive+0x5d4>)
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f7ff fdbf 	bl	8010688 <tcp_free_acked_segments>
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d104      	bne.n	8010b22 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b1e:	861a      	strh	r2, [r3, #48]	; 0x30
 8010b20:	e002      	b.n	8010b28 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d103      	bne.n	8010b3e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010b44:	4b84      	ldr	r3, [pc, #528]	; (8010d58 <tcp_receive+0x5d8>)
 8010b46:	881b      	ldrh	r3, [r3, #0]
 8010b48:	4413      	add	r3, r2
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	8b5b      	ldrh	r3, [r3, #26]
 8010b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d035      	beq.n	8010bca <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d118      	bne.n	8010b98 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d00c      	beq.n	8010b88 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b76:	68db      	ldr	r3, [r3, #12]
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fb f935 	bl	800bdea <lwip_htonl>
 8010b80:	4603      	mov	r3, r0
 8010b82:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	dc20      	bgt.n	8010bca <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	8b5b      	ldrh	r3, [r3, #26]
 8010b8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b96:	e018      	b.n	8010bca <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ba0:	68db      	ldr	r3, [r3, #12]
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7fb f920 	bl	800bdea <lwip_htonl>
 8010baa:	4603      	mov	r3, r0
 8010bac:	1ae3      	subs	r3, r4, r3
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	dc0b      	bgt.n	8010bca <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	8b5b      	ldrh	r3, [r3, #26]
 8010bb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010bba:	b29a      	uxth	r2, r3
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010bc0:	e003      	b.n	8010bca <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f001 ff76 	bl	8012ab4 <tcp_send_empty_ack>
 8010bc8:	e000      	b.n	8010bcc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010bca:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d05b      	beq.n	8010c8c <tcp_receive+0x50c>
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010bd8:	4b60      	ldr	r3, [pc, #384]	; (8010d5c <tcp_receive+0x5dc>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	1ad3      	subs	r3, r2, r3
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	da54      	bge.n	8010c8c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010be2:	4b5f      	ldr	r3, [pc, #380]	; (8010d60 <tcp_receive+0x5e0>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	1ad3      	subs	r3, r2, r3
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010bf6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c00:	10db      	asrs	r3, r3, #3
 8010c02:	b21b      	sxth	r3, r3
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	1ad3      	subs	r3, r2, r3
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c14:	b29a      	uxth	r2, r3
 8010c16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c1a:	4413      	add	r3, r2
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	b21a      	sxth	r2, r3
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010c24:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	da05      	bge.n	8010c38 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010c2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c30:	425b      	negs	r3, r3
 8010c32:	b29b      	uxth	r3, r3
 8010c34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010c38:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c42:	109b      	asrs	r3, r3, #2
 8010c44:	b21b      	sxth	r3, r3
 8010c46:	b29b      	uxth	r3, r3
 8010c48:	1ad3      	subs	r3, r2, r3
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c56:	b29a      	uxth	r2, r3
 8010c58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c5c:	4413      	add	r3, r2
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	b21a      	sxth	r2, r3
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c6c:	10db      	asrs	r3, r3, #3
 8010c6e:	b21b      	sxth	r3, r3
 8010c70:	b29a      	uxth	r2, r3
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	4413      	add	r3, r2
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	b21a      	sxth	r2, r3
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2200      	movs	r2, #0
 8010c8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010c8c:	4b35      	ldr	r3, [pc, #212]	; (8010d64 <tcp_receive+0x5e4>)
 8010c8e:	881b      	ldrh	r3, [r3, #0]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	f000 84e2 	beq.w	801165a <tcp_receive+0xeda>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	7d1b      	ldrb	r3, [r3, #20]
 8010c9a:	2b06      	cmp	r3, #6
 8010c9c:	f200 84dd 	bhi.w	801165a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ca4:	4b30      	ldr	r3, [pc, #192]	; (8010d68 <tcp_receive+0x5e8>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	1ad3      	subs	r3, r2, r3
 8010caa:	3b01      	subs	r3, #1
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	f2c0 808f 	blt.w	8010dd0 <tcp_receive+0x650>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cb6:	4b2b      	ldr	r3, [pc, #172]	; (8010d64 <tcp_receive+0x5e4>)
 8010cb8:	881b      	ldrh	r3, [r3, #0]
 8010cba:	4619      	mov	r1, r3
 8010cbc:	4b2a      	ldr	r3, [pc, #168]	; (8010d68 <tcp_receive+0x5e8>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	440b      	add	r3, r1
 8010cc2:	1ad3      	subs	r3, r2, r3
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	f300 8082 	bgt.w	8010dd0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010ccc:	4b27      	ldr	r3, [pc, #156]	; (8010d6c <tcp_receive+0x5ec>)
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cd6:	4b24      	ldr	r3, [pc, #144]	; (8010d68 <tcp_receive+0x5e8>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	1ad3      	subs	r3, r2, r3
 8010cdc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010cde:	4b23      	ldr	r3, [pc, #140]	; (8010d6c <tcp_receive+0x5ec>)
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d106      	bne.n	8010cf4 <tcp_receive+0x574>
 8010ce6:	4b22      	ldr	r3, [pc, #136]	; (8010d70 <tcp_receive+0x5f0>)
 8010ce8:	f240 5294 	movw	r2, #1428	; 0x594
 8010cec:	4921      	ldr	r1, [pc, #132]	; (8010d74 <tcp_receive+0x5f4>)
 8010cee:	4822      	ldr	r0, [pc, #136]	; (8010d78 <tcp_receive+0x5f8>)
 8010cf0:	f005 fa1e 	bl	8016130 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d906      	bls.n	8010d0c <tcp_receive+0x58c>
 8010cfe:	4b1c      	ldr	r3, [pc, #112]	; (8010d70 <tcp_receive+0x5f0>)
 8010d00:	f240 5295 	movw	r2, #1429	; 0x595
 8010d04:	491d      	ldr	r1, [pc, #116]	; (8010d7c <tcp_receive+0x5fc>)
 8010d06:	481c      	ldr	r0, [pc, #112]	; (8010d78 <tcp_receive+0x5f8>)
 8010d08:	f005 fa12 	bl	8016130 <iprintf>
      off = (u16_t)off32;
 8010d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010d12:	4b16      	ldr	r3, [pc, #88]	; (8010d6c <tcp_receive+0x5ec>)
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	891b      	ldrh	r3, [r3, #8]
 8010d18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d906      	bls.n	8010d2e <tcp_receive+0x5ae>
 8010d20:	4b13      	ldr	r3, [pc, #76]	; (8010d70 <tcp_receive+0x5f0>)
 8010d22:	f240 5297 	movw	r2, #1431	; 0x597
 8010d26:	4916      	ldr	r1, [pc, #88]	; (8010d80 <tcp_receive+0x600>)
 8010d28:	4813      	ldr	r0, [pc, #76]	; (8010d78 <tcp_receive+0x5f8>)
 8010d2a:	f005 fa01 	bl	8016130 <iprintf>
      inseg.len -= off;
 8010d2e:	4b0f      	ldr	r3, [pc, #60]	; (8010d6c <tcp_receive+0x5ec>)
 8010d30:	891a      	ldrh	r2, [r3, #8]
 8010d32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d36:	1ad3      	subs	r3, r2, r3
 8010d38:	b29a      	uxth	r2, r3
 8010d3a:	4b0c      	ldr	r3, [pc, #48]	; (8010d6c <tcp_receive+0x5ec>)
 8010d3c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010d3e:	4b0b      	ldr	r3, [pc, #44]	; (8010d6c <tcp_receive+0x5ec>)
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	891a      	ldrh	r2, [r3, #8]
 8010d44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d48:	1ad3      	subs	r3, r2, r3
 8010d4a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010d4c:	e02a      	b.n	8010da4 <tcp_receive+0x624>
 8010d4e:	bf00      	nop
 8010d50:	080189f0 	.word	0x080189f0
 8010d54:	080189f8 	.word	0x080189f8
 8010d58:	20009730 	.word	0x20009730
 8010d5c:	2000972c 	.word	0x2000972c
 8010d60:	200096f0 	.word	0x200096f0
 8010d64:	20009732 	.word	0x20009732
 8010d68:	20009728 	.word	0x20009728
 8010d6c:	20009708 	.word	0x20009708
 8010d70:	08018688 	.word	0x08018688
 8010d74:	08018a00 	.word	0x08018a00
 8010d78:	080186d4 	.word	0x080186d4
 8010d7c:	08018a10 	.word	0x08018a10
 8010d80:	08018a20 	.word	0x08018a20
        off -= p->len;
 8010d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d86:	895b      	ldrh	r3, [r3, #10]
 8010d88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d8c:	1ad3      	subs	r3, r2, r3
 8010d8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d96:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010da6:	895b      	ldrh	r3, [r3, #10]
 8010da8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d8e9      	bhi.n	8010d84 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010db0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010db4:	4619      	mov	r1, r3
 8010db6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010db8:	f7fc fada 	bl	800d370 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dc0:	4a91      	ldr	r2, [pc, #580]	; (8011008 <tcp_receive+0x888>)
 8010dc2:	6013      	str	r3, [r2, #0]
 8010dc4:	4b91      	ldr	r3, [pc, #580]	; (801100c <tcp_receive+0x88c>)
 8010dc6:	68db      	ldr	r3, [r3, #12]
 8010dc8:	4a8f      	ldr	r2, [pc, #572]	; (8011008 <tcp_receive+0x888>)
 8010dca:	6812      	ldr	r2, [r2, #0]
 8010dcc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010dce:	e00d      	b.n	8010dec <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010dd0:	4b8d      	ldr	r3, [pc, #564]	; (8011008 <tcp_receive+0x888>)
 8010dd2:	681a      	ldr	r2, [r3, #0]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dd8:	1ad3      	subs	r3, r2, r3
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	da06      	bge.n	8010dec <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	8b5b      	ldrh	r3, [r3, #26]
 8010de2:	f043 0302 	orr.w	r3, r3, #2
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010dec:	4b86      	ldr	r3, [pc, #536]	; (8011008 <tcp_receive+0x888>)
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df4:	1ad3      	subs	r3, r2, r3
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	f2c0 842a 	blt.w	8011650 <tcp_receive+0xed0>
 8010dfc:	4b82      	ldr	r3, [pc, #520]	; (8011008 <tcp_receive+0x888>)
 8010dfe:	681a      	ldr	r2, [r3, #0]
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e04:	6879      	ldr	r1, [r7, #4]
 8010e06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e08:	440b      	add	r3, r1
 8010e0a:	1ad3      	subs	r3, r2, r3
 8010e0c:	3301      	adds	r3, #1
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	f300 841e 	bgt.w	8011650 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e18:	4b7b      	ldr	r3, [pc, #492]	; (8011008 <tcp_receive+0x888>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	f040 829a 	bne.w	8011356 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010e22:	4b7a      	ldr	r3, [pc, #488]	; (801100c <tcp_receive+0x88c>)
 8010e24:	891c      	ldrh	r4, [r3, #8]
 8010e26:	4b79      	ldr	r3, [pc, #484]	; (801100c <tcp_receive+0x88c>)
 8010e28:	68db      	ldr	r3, [r3, #12]
 8010e2a:	899b      	ldrh	r3, [r3, #12]
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7fa ffc6 	bl	800bdc0 <lwip_htons>
 8010e34:	4603      	mov	r3, r0
 8010e36:	b2db      	uxtb	r3, r3
 8010e38:	f003 0303 	and.w	r3, r3, #3
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d001      	beq.n	8010e44 <tcp_receive+0x6c4>
 8010e40:	2301      	movs	r3, #1
 8010e42:	e000      	b.n	8010e46 <tcp_receive+0x6c6>
 8010e44:	2300      	movs	r3, #0
 8010e46:	4423      	add	r3, r4
 8010e48:	b29a      	uxth	r2, r3
 8010e4a:	4b71      	ldr	r3, [pc, #452]	; (8011010 <tcp_receive+0x890>)
 8010e4c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e52:	4b6f      	ldr	r3, [pc, #444]	; (8011010 <tcp_receive+0x890>)
 8010e54:	881b      	ldrh	r3, [r3, #0]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	d275      	bcs.n	8010f46 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e5a:	4b6c      	ldr	r3, [pc, #432]	; (801100c <tcp_receive+0x88c>)
 8010e5c:	68db      	ldr	r3, [r3, #12]
 8010e5e:	899b      	ldrh	r3, [r3, #12]
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7fa ffac 	bl	800bdc0 <lwip_htons>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	f003 0301 	and.w	r3, r3, #1
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d01f      	beq.n	8010eb4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010e74:	4b65      	ldr	r3, [pc, #404]	; (801100c <tcp_receive+0x88c>)
 8010e76:	68db      	ldr	r3, [r3, #12]
 8010e78:	899b      	ldrh	r3, [r3, #12]
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	b21b      	sxth	r3, r3
 8010e7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010e82:	b21c      	sxth	r4, r3
 8010e84:	4b61      	ldr	r3, [pc, #388]	; (801100c <tcp_receive+0x88c>)
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	899b      	ldrh	r3, [r3, #12]
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7fa ff97 	bl	800bdc0 <lwip_htons>
 8010e92:	4603      	mov	r3, r0
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fa ff8e 	bl	800bdc0 <lwip_htons>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	b21b      	sxth	r3, r3
 8010ea8:	4323      	orrs	r3, r4
 8010eaa:	b21a      	sxth	r2, r3
 8010eac:	4b57      	ldr	r3, [pc, #348]	; (801100c <tcp_receive+0x88c>)
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	b292      	uxth	r2, r2
 8010eb2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010eb8:	4b54      	ldr	r3, [pc, #336]	; (801100c <tcp_receive+0x88c>)
 8010eba:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010ebc:	4b53      	ldr	r3, [pc, #332]	; (801100c <tcp_receive+0x88c>)
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	899b      	ldrh	r3, [r3, #12]
 8010ec2:	b29b      	uxth	r3, r3
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7fa ff7b 	bl	800bdc0 <lwip_htons>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	f003 0302 	and.w	r3, r3, #2
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d005      	beq.n	8010ee2 <tcp_receive+0x762>
            inseg.len -= 1;
 8010ed6:	4b4d      	ldr	r3, [pc, #308]	; (801100c <tcp_receive+0x88c>)
 8010ed8:	891b      	ldrh	r3, [r3, #8]
 8010eda:	3b01      	subs	r3, #1
 8010edc:	b29a      	uxth	r2, r3
 8010ede:	4b4b      	ldr	r3, [pc, #300]	; (801100c <tcp_receive+0x88c>)
 8010ee0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010ee2:	4b4a      	ldr	r3, [pc, #296]	; (801100c <tcp_receive+0x88c>)
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	4a49      	ldr	r2, [pc, #292]	; (801100c <tcp_receive+0x88c>)
 8010ee8:	8912      	ldrh	r2, [r2, #8]
 8010eea:	4611      	mov	r1, r2
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7fc f93f 	bl	800d170 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010ef2:	4b46      	ldr	r3, [pc, #280]	; (801100c <tcp_receive+0x88c>)
 8010ef4:	891c      	ldrh	r4, [r3, #8]
 8010ef6:	4b45      	ldr	r3, [pc, #276]	; (801100c <tcp_receive+0x88c>)
 8010ef8:	68db      	ldr	r3, [r3, #12]
 8010efa:	899b      	ldrh	r3, [r3, #12]
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7fa ff5e 	bl	800bdc0 <lwip_htons>
 8010f04:	4603      	mov	r3, r0
 8010f06:	b2db      	uxtb	r3, r3
 8010f08:	f003 0303 	and.w	r3, r3, #3
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <tcp_receive+0x794>
 8010f10:	2301      	movs	r3, #1
 8010f12:	e000      	b.n	8010f16 <tcp_receive+0x796>
 8010f14:	2300      	movs	r3, #0
 8010f16:	4423      	add	r3, r4
 8010f18:	b29a      	uxth	r2, r3
 8010f1a:	4b3d      	ldr	r3, [pc, #244]	; (8011010 <tcp_receive+0x890>)
 8010f1c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010f1e:	4b3c      	ldr	r3, [pc, #240]	; (8011010 <tcp_receive+0x890>)
 8010f20:	881b      	ldrh	r3, [r3, #0]
 8010f22:	461a      	mov	r2, r3
 8010f24:	4b38      	ldr	r3, [pc, #224]	; (8011008 <tcp_receive+0x888>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	441a      	add	r2, r3
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f2e:	6879      	ldr	r1, [r7, #4]
 8010f30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f32:	440b      	add	r3, r1
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d006      	beq.n	8010f46 <tcp_receive+0x7c6>
 8010f38:	4b36      	ldr	r3, [pc, #216]	; (8011014 <tcp_receive+0x894>)
 8010f3a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010f3e:	4936      	ldr	r1, [pc, #216]	; (8011018 <tcp_receive+0x898>)
 8010f40:	4836      	ldr	r0, [pc, #216]	; (801101c <tcp_receive+0x89c>)
 8010f42:	f005 f8f5 	bl	8016130 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	f000 80e7 	beq.w	801111e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010f50:	4b2e      	ldr	r3, [pc, #184]	; (801100c <tcp_receive+0x88c>)
 8010f52:	68db      	ldr	r3, [r3, #12]
 8010f54:	899b      	ldrh	r3, [r3, #12]
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7fa ff31 	bl	800bdc0 <lwip_htons>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	b2db      	uxtb	r3, r3
 8010f62:	f003 0301 	and.w	r3, r3, #1
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d010      	beq.n	8010f8c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010f6a:	e00a      	b.n	8010f82 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f70:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010f7c:	68f8      	ldr	r0, [r7, #12]
 8010f7e:	f7fd fd92 	bl	800eaa6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d1f0      	bne.n	8010f6c <tcp_receive+0x7ec>
 8010f8a:	e0c8      	b.n	801111e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f90:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010f92:	e052      	b.n	801103a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	899b      	ldrh	r3, [r3, #12]
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7fa ff0f 	bl	800bdc0 <lwip_htons>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	f003 0301 	and.w	r3, r3, #1
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d03d      	beq.n	801102a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010fae:	4b17      	ldr	r3, [pc, #92]	; (801100c <tcp_receive+0x88c>)
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	899b      	ldrh	r3, [r3, #12]
 8010fb4:	b29b      	uxth	r3, r3
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7fa ff02 	bl	800bdc0 <lwip_htons>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d130      	bne.n	801102a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010fc8:	4b10      	ldr	r3, [pc, #64]	; (801100c <tcp_receive+0x88c>)
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	899b      	ldrh	r3, [r3, #12]
 8010fce:	b29c      	uxth	r4, r3
 8010fd0:	2001      	movs	r0, #1
 8010fd2:	f7fa fef5 	bl	800bdc0 <lwip_htons>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	461a      	mov	r2, r3
 8010fda:	4b0c      	ldr	r3, [pc, #48]	; (801100c <tcp_receive+0x88c>)
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	4322      	orrs	r2, r4
 8010fe0:	b292      	uxth	r2, r2
 8010fe2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010fe4:	4b09      	ldr	r3, [pc, #36]	; (801100c <tcp_receive+0x88c>)
 8010fe6:	891c      	ldrh	r4, [r3, #8]
 8010fe8:	4b08      	ldr	r3, [pc, #32]	; (801100c <tcp_receive+0x88c>)
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	899b      	ldrh	r3, [r3, #12]
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7fa fee5 	bl	800bdc0 <lwip_htons>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	b2db      	uxtb	r3, r3
 8010ffa:	f003 0303 	and.w	r3, r3, #3
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d00e      	beq.n	8011020 <tcp_receive+0x8a0>
 8011002:	2301      	movs	r3, #1
 8011004:	e00d      	b.n	8011022 <tcp_receive+0x8a2>
 8011006:	bf00      	nop
 8011008:	20009728 	.word	0x20009728
 801100c:	20009708 	.word	0x20009708
 8011010:	20009732 	.word	0x20009732
 8011014:	08018688 	.word	0x08018688
 8011018:	08018a30 	.word	0x08018a30
 801101c:	080186d4 	.word	0x080186d4
 8011020:	2300      	movs	r3, #0
 8011022:	4423      	add	r3, r4
 8011024:	b29a      	uxth	r2, r3
 8011026:	4b98      	ldr	r3, [pc, #608]	; (8011288 <tcp_receive+0xb08>)
 8011028:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801102a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801102c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801102e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011034:	6938      	ldr	r0, [r7, #16]
 8011036:	f7fd fd36 	bl	800eaa6 <tcp_seg_free>
            while (next &&
 801103a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00e      	beq.n	801105e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011040:	4b91      	ldr	r3, [pc, #580]	; (8011288 <tcp_receive+0xb08>)
 8011042:	881b      	ldrh	r3, [r3, #0]
 8011044:	461a      	mov	r2, r3
 8011046:	4b91      	ldr	r3, [pc, #580]	; (801128c <tcp_receive+0xb0c>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	441a      	add	r2, r3
 801104c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801104e:	68db      	ldr	r3, [r3, #12]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011054:	8909      	ldrh	r1, [r1, #8]
 8011056:	440b      	add	r3, r1
 8011058:	1ad3      	subs	r3, r2, r3
            while (next &&
 801105a:	2b00      	cmp	r3, #0
 801105c:	da9a      	bge.n	8010f94 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801105e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011060:	2b00      	cmp	r3, #0
 8011062:	d059      	beq.n	8011118 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011064:	4b88      	ldr	r3, [pc, #544]	; (8011288 <tcp_receive+0xb08>)
 8011066:	881b      	ldrh	r3, [r3, #0]
 8011068:	461a      	mov	r2, r3
 801106a:	4b88      	ldr	r3, [pc, #544]	; (801128c <tcp_receive+0xb0c>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	441a      	add	r2, r3
 8011070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011072:	68db      	ldr	r3, [r3, #12]
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011078:	2b00      	cmp	r3, #0
 801107a:	dd4d      	ble.n	8011118 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801107c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	b29a      	uxth	r2, r3
 8011084:	4b81      	ldr	r3, [pc, #516]	; (801128c <tcp_receive+0xb0c>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	b29b      	uxth	r3, r3
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	b29a      	uxth	r2, r3
 801108e:	4b80      	ldr	r3, [pc, #512]	; (8011290 <tcp_receive+0xb10>)
 8011090:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011092:	4b7f      	ldr	r3, [pc, #508]	; (8011290 <tcp_receive+0xb10>)
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	899b      	ldrh	r3, [r3, #12]
 8011098:	b29b      	uxth	r3, r3
 801109a:	4618      	mov	r0, r3
 801109c:	f7fa fe90 	bl	800bdc0 <lwip_htons>
 80110a0:	4603      	mov	r3, r0
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	f003 0302 	and.w	r3, r3, #2
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d005      	beq.n	80110b8 <tcp_receive+0x938>
                inseg.len -= 1;
 80110ac:	4b78      	ldr	r3, [pc, #480]	; (8011290 <tcp_receive+0xb10>)
 80110ae:	891b      	ldrh	r3, [r3, #8]
 80110b0:	3b01      	subs	r3, #1
 80110b2:	b29a      	uxth	r2, r3
 80110b4:	4b76      	ldr	r3, [pc, #472]	; (8011290 <tcp_receive+0xb10>)
 80110b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80110b8:	4b75      	ldr	r3, [pc, #468]	; (8011290 <tcp_receive+0xb10>)
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	4a74      	ldr	r2, [pc, #464]	; (8011290 <tcp_receive+0xb10>)
 80110be:	8912      	ldrh	r2, [r2, #8]
 80110c0:	4611      	mov	r1, r2
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fc f854 	bl	800d170 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80110c8:	4b71      	ldr	r3, [pc, #452]	; (8011290 <tcp_receive+0xb10>)
 80110ca:	891c      	ldrh	r4, [r3, #8]
 80110cc:	4b70      	ldr	r3, [pc, #448]	; (8011290 <tcp_receive+0xb10>)
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	899b      	ldrh	r3, [r3, #12]
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7fa fe73 	bl	800bdc0 <lwip_htons>
 80110da:	4603      	mov	r3, r0
 80110dc:	b2db      	uxtb	r3, r3
 80110de:	f003 0303 	and.w	r3, r3, #3
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d001      	beq.n	80110ea <tcp_receive+0x96a>
 80110e6:	2301      	movs	r3, #1
 80110e8:	e000      	b.n	80110ec <tcp_receive+0x96c>
 80110ea:	2300      	movs	r3, #0
 80110ec:	4423      	add	r3, r4
 80110ee:	b29a      	uxth	r2, r3
 80110f0:	4b65      	ldr	r3, [pc, #404]	; (8011288 <tcp_receive+0xb08>)
 80110f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80110f4:	4b64      	ldr	r3, [pc, #400]	; (8011288 <tcp_receive+0xb08>)
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	461a      	mov	r2, r3
 80110fa:	4b64      	ldr	r3, [pc, #400]	; (801128c <tcp_receive+0xb0c>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	441a      	add	r2, r3
 8011100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	429a      	cmp	r2, r3
 8011108:	d006      	beq.n	8011118 <tcp_receive+0x998>
 801110a:	4b62      	ldr	r3, [pc, #392]	; (8011294 <tcp_receive+0xb14>)
 801110c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011110:	4961      	ldr	r1, [pc, #388]	; (8011298 <tcp_receive+0xb18>)
 8011112:	4862      	ldr	r0, [pc, #392]	; (801129c <tcp_receive+0xb1c>)
 8011114:	f005 f80c 	bl	8016130 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801111c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801111e:	4b5a      	ldr	r3, [pc, #360]	; (8011288 <tcp_receive+0xb08>)
 8011120:	881b      	ldrh	r3, [r3, #0]
 8011122:	461a      	mov	r2, r3
 8011124:	4b59      	ldr	r3, [pc, #356]	; (801128c <tcp_receive+0xb0c>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	441a      	add	r2, r3
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011132:	4b55      	ldr	r3, [pc, #340]	; (8011288 <tcp_receive+0xb08>)
 8011134:	881b      	ldrh	r3, [r3, #0]
 8011136:	429a      	cmp	r2, r3
 8011138:	d206      	bcs.n	8011148 <tcp_receive+0x9c8>
 801113a:	4b56      	ldr	r3, [pc, #344]	; (8011294 <tcp_receive+0xb14>)
 801113c:	f240 6207 	movw	r2, #1543	; 0x607
 8011140:	4957      	ldr	r1, [pc, #348]	; (80112a0 <tcp_receive+0xb20>)
 8011142:	4856      	ldr	r0, [pc, #344]	; (801129c <tcp_receive+0xb1c>)
 8011144:	f004 fff4 	bl	8016130 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801114c:	4b4e      	ldr	r3, [pc, #312]	; (8011288 <tcp_receive+0xb08>)
 801114e:	881b      	ldrh	r3, [r3, #0]
 8011150:	1ad3      	subs	r3, r2, r3
 8011152:	b29a      	uxth	r2, r3
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f7fc ffc5 	bl	800e0e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801115e:	4b4c      	ldr	r3, [pc, #304]	; (8011290 <tcp_receive+0xb10>)
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	891b      	ldrh	r3, [r3, #8]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d006      	beq.n	8011176 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011168:	4b49      	ldr	r3, [pc, #292]	; (8011290 <tcp_receive+0xb10>)
 801116a:	685b      	ldr	r3, [r3, #4]
 801116c:	4a4d      	ldr	r2, [pc, #308]	; (80112a4 <tcp_receive+0xb24>)
 801116e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011170:	4b47      	ldr	r3, [pc, #284]	; (8011290 <tcp_receive+0xb10>)
 8011172:	2200      	movs	r2, #0
 8011174:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011176:	4b46      	ldr	r3, [pc, #280]	; (8011290 <tcp_receive+0xb10>)
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	899b      	ldrh	r3, [r3, #12]
 801117c:	b29b      	uxth	r3, r3
 801117e:	4618      	mov	r0, r3
 8011180:	f7fa fe1e 	bl	800bdc0 <lwip_htons>
 8011184:	4603      	mov	r3, r0
 8011186:	b2db      	uxtb	r3, r3
 8011188:	f003 0301 	and.w	r3, r3, #1
 801118c:	2b00      	cmp	r3, #0
 801118e:	f000 80b8 	beq.w	8011302 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011192:	4b45      	ldr	r3, [pc, #276]	; (80112a8 <tcp_receive+0xb28>)
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	f043 0320 	orr.w	r3, r3, #32
 801119a:	b2da      	uxtb	r2, r3
 801119c:	4b42      	ldr	r3, [pc, #264]	; (80112a8 <tcp_receive+0xb28>)
 801119e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80111a0:	e0af      	b.n	8011302 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111a6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	685b      	ldr	r3, [r3, #4]
 80111b0:	4a36      	ldr	r2, [pc, #216]	; (801128c <tcp_receive+0xb0c>)
 80111b2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	891b      	ldrh	r3, [r3, #8]
 80111b8:	461c      	mov	r4, r3
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	899b      	ldrh	r3, [r3, #12]
 80111c0:	b29b      	uxth	r3, r3
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7fa fdfc 	bl	800bdc0 <lwip_htons>
 80111c8:	4603      	mov	r3, r0
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	f003 0303 	and.w	r3, r3, #3
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d001      	beq.n	80111d8 <tcp_receive+0xa58>
 80111d4:	2301      	movs	r3, #1
 80111d6:	e000      	b.n	80111da <tcp_receive+0xa5a>
 80111d8:	2300      	movs	r3, #0
 80111da:	191a      	adds	r2, r3, r4
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111e0:	441a      	add	r2, r3
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111ea:	461c      	mov	r4, r3
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	891b      	ldrh	r3, [r3, #8]
 80111f0:	461d      	mov	r5, r3
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	68db      	ldr	r3, [r3, #12]
 80111f6:	899b      	ldrh	r3, [r3, #12]
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7fa fde0 	bl	800bdc0 <lwip_htons>
 8011200:	4603      	mov	r3, r0
 8011202:	b2db      	uxtb	r3, r3
 8011204:	f003 0303 	and.w	r3, r3, #3
 8011208:	2b00      	cmp	r3, #0
 801120a:	d001      	beq.n	8011210 <tcp_receive+0xa90>
 801120c:	2301      	movs	r3, #1
 801120e:	e000      	b.n	8011212 <tcp_receive+0xa92>
 8011210:	2300      	movs	r3, #0
 8011212:	442b      	add	r3, r5
 8011214:	429c      	cmp	r4, r3
 8011216:	d206      	bcs.n	8011226 <tcp_receive+0xaa6>
 8011218:	4b1e      	ldr	r3, [pc, #120]	; (8011294 <tcp_receive+0xb14>)
 801121a:	f240 622b 	movw	r2, #1579	; 0x62b
 801121e:	4923      	ldr	r1, [pc, #140]	; (80112ac <tcp_receive+0xb2c>)
 8011220:	481e      	ldr	r0, [pc, #120]	; (801129c <tcp_receive+0xb1c>)
 8011222:	f004 ff85 	bl	8016130 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	891b      	ldrh	r3, [r3, #8]
 801122a:	461c      	mov	r4, r3
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	899b      	ldrh	r3, [r3, #12]
 8011232:	b29b      	uxth	r3, r3
 8011234:	4618      	mov	r0, r3
 8011236:	f7fa fdc3 	bl	800bdc0 <lwip_htons>
 801123a:	4603      	mov	r3, r0
 801123c:	b2db      	uxtb	r3, r3
 801123e:	f003 0303 	and.w	r3, r3, #3
 8011242:	2b00      	cmp	r3, #0
 8011244:	d001      	beq.n	801124a <tcp_receive+0xaca>
 8011246:	2301      	movs	r3, #1
 8011248:	e000      	b.n	801124c <tcp_receive+0xacc>
 801124a:	2300      	movs	r3, #0
 801124c:	1919      	adds	r1, r3, r4
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011252:	b28b      	uxth	r3, r1
 8011254:	1ad3      	subs	r3, r2, r3
 8011256:	b29a      	uxth	r2, r3
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f7fc ff43 	bl	800e0e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	891b      	ldrh	r3, [r3, #8]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d028      	beq.n	80112be <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801126c:	4b0d      	ldr	r3, [pc, #52]	; (80112a4 <tcp_receive+0xb24>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d01d      	beq.n	80112b0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011274:	4b0b      	ldr	r3, [pc, #44]	; (80112a4 <tcp_receive+0xb24>)
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	4619      	mov	r1, r3
 801127e:	4610      	mov	r0, r2
 8011280:	f7fc f9be 	bl	800d600 <pbuf_cat>
 8011284:	e018      	b.n	80112b8 <tcp_receive+0xb38>
 8011286:	bf00      	nop
 8011288:	20009732 	.word	0x20009732
 801128c:	20009728 	.word	0x20009728
 8011290:	20009708 	.word	0x20009708
 8011294:	08018688 	.word	0x08018688
 8011298:	08018a68 	.word	0x08018a68
 801129c:	080186d4 	.word	0x080186d4
 80112a0:	08018aa4 	.word	0x08018aa4
 80112a4:	20009738 	.word	0x20009738
 80112a8:	20009735 	.word	0x20009735
 80112ac:	08018ac4 	.word	0x08018ac4
            } else {
              recv_data = cseg->p;
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	4a70      	ldr	r2, [pc, #448]	; (8011478 <tcp_receive+0xcf8>)
 80112b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	2200      	movs	r2, #0
 80112bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	68db      	ldr	r3, [r3, #12]
 80112c2:	899b      	ldrh	r3, [r3, #12]
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7fa fd7a 	bl	800bdc0 <lwip_htons>
 80112cc:	4603      	mov	r3, r0
 80112ce:	b2db      	uxtb	r3, r3
 80112d0:	f003 0301 	and.w	r3, r3, #1
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d00d      	beq.n	80112f4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80112d8:	4b68      	ldr	r3, [pc, #416]	; (801147c <tcp_receive+0xcfc>)
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	f043 0320 	orr.w	r3, r3, #32
 80112e0:	b2da      	uxtb	r2, r3
 80112e2:	4b66      	ldr	r3, [pc, #408]	; (801147c <tcp_receive+0xcfc>)
 80112e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	7d1b      	ldrb	r3, [r3, #20]
 80112ea:	2b04      	cmp	r3, #4
 80112ec:	d102      	bne.n	80112f4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2207      	movs	r2, #7
 80112f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	681a      	ldr	r2, [r3, #0]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80112fc:	68b8      	ldr	r0, [r7, #8]
 80112fe:	f7fd fbd2 	bl	800eaa6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011306:	2b00      	cmp	r3, #0
 8011308:	d008      	beq.n	801131c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801130e:	68db      	ldr	r3, [r3, #12]
 8011310:	685a      	ldr	r2, [r3, #4]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011316:	429a      	cmp	r2, r3
 8011318:	f43f af43 	beq.w	80111a2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	8b5b      	ldrh	r3, [r3, #26]
 8011320:	f003 0301 	and.w	r3, r3, #1
 8011324:	2b00      	cmp	r3, #0
 8011326:	d00e      	beq.n	8011346 <tcp_receive+0xbc6>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	8b5b      	ldrh	r3, [r3, #26]
 801132c:	f023 0301 	bic.w	r3, r3, #1
 8011330:	b29a      	uxth	r2, r3
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	835a      	strh	r2, [r3, #26]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	8b5b      	ldrh	r3, [r3, #26]
 801133a:	f043 0302 	orr.w	r3, r3, #2
 801133e:	b29a      	uxth	r2, r3
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011344:	e188      	b.n	8011658 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	8b5b      	ldrh	r3, [r3, #26]
 801134a:	f043 0301 	orr.w	r3, r3, #1
 801134e:	b29a      	uxth	r2, r3
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011354:	e180      	b.n	8011658 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801135a:	2b00      	cmp	r3, #0
 801135c:	d106      	bne.n	801136c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801135e:	4848      	ldr	r0, [pc, #288]	; (8011480 <tcp_receive+0xd00>)
 8011360:	f7fd fbba 	bl	800ead8 <tcp_seg_copy>
 8011364:	4602      	mov	r2, r0
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	675a      	str	r2, [r3, #116]	; 0x74
 801136a:	e16d      	b.n	8011648 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801136c:	2300      	movs	r3, #0
 801136e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011374:	63bb      	str	r3, [r7, #56]	; 0x38
 8011376:	e157      	b.n	8011628 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	685a      	ldr	r2, [r3, #4]
 801137e:	4b41      	ldr	r3, [pc, #260]	; (8011484 <tcp_receive+0xd04>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	429a      	cmp	r2, r3
 8011384:	d11d      	bne.n	80113c2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011386:	4b3e      	ldr	r3, [pc, #248]	; (8011480 <tcp_receive+0xd00>)
 8011388:	891a      	ldrh	r2, [r3, #8]
 801138a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138c:	891b      	ldrh	r3, [r3, #8]
 801138e:	429a      	cmp	r2, r3
 8011390:	f240 814f 	bls.w	8011632 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011394:	483a      	ldr	r0, [pc, #232]	; (8011480 <tcp_receive+0xd00>)
 8011396:	f7fd fb9f 	bl	800ead8 <tcp_seg_copy>
 801139a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f000 8149 	beq.w	8011636 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80113a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d003      	beq.n	80113b2 <tcp_receive+0xc32>
                    prev->next = cseg;
 80113aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ac:	697a      	ldr	r2, [r7, #20]
 80113ae:	601a      	str	r2, [r3, #0]
 80113b0:	e002      	b.n	80113b8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	697a      	ldr	r2, [r7, #20]
 80113b6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80113b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80113ba:	6978      	ldr	r0, [r7, #20]
 80113bc:	f7ff f8dc 	bl	8010578 <tcp_oos_insert_segment>
                }
                break;
 80113c0:	e139      	b.n	8011636 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80113c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d117      	bne.n	80113f8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80113c8:	4b2e      	ldr	r3, [pc, #184]	; (8011484 <tcp_receive+0xd04>)
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	1ad3      	subs	r3, r2, r3
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	da57      	bge.n	8011488 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80113d8:	4829      	ldr	r0, [pc, #164]	; (8011480 <tcp_receive+0xd00>)
 80113da:	f7fd fb7d 	bl	800ead8 <tcp_seg_copy>
 80113de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80113e0:	69bb      	ldr	r3, [r7, #24]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	f000 8129 	beq.w	801163a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	69ba      	ldr	r2, [r7, #24]
 80113ec:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80113ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80113f0:	69b8      	ldr	r0, [r7, #24]
 80113f2:	f7ff f8c1 	bl	8010578 <tcp_oos_insert_segment>
                  }
                  break;
 80113f6:	e120      	b.n	801163a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80113f8:	4b22      	ldr	r3, [pc, #136]	; (8011484 <tcp_receive+0xd04>)
 80113fa:	681a      	ldr	r2, [r3, #0]
 80113fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	1ad3      	subs	r3, r2, r3
 8011404:	3b01      	subs	r3, #1
 8011406:	2b00      	cmp	r3, #0
 8011408:	db3e      	blt.n	8011488 <tcp_receive+0xd08>
 801140a:	4b1e      	ldr	r3, [pc, #120]	; (8011484 <tcp_receive+0xd04>)
 801140c:	681a      	ldr	r2, [r3, #0]
 801140e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011410:	68db      	ldr	r3, [r3, #12]
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	1ad3      	subs	r3, r2, r3
 8011416:	3301      	adds	r3, #1
 8011418:	2b00      	cmp	r3, #0
 801141a:	dc35      	bgt.n	8011488 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801141c:	4818      	ldr	r0, [pc, #96]	; (8011480 <tcp_receive+0xd00>)
 801141e:	f7fd fb5b 	bl	800ead8 <tcp_seg_copy>
 8011422:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	2b00      	cmp	r3, #0
 8011428:	f000 8109 	beq.w	801163e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011434:	8912      	ldrh	r2, [r2, #8]
 8011436:	441a      	add	r2, r3
 8011438:	4b12      	ldr	r3, [pc, #72]	; (8011484 <tcp_receive+0xd04>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	1ad3      	subs	r3, r2, r3
 801143e:	2b00      	cmp	r3, #0
 8011440:	dd12      	ble.n	8011468 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011442:	4b10      	ldr	r3, [pc, #64]	; (8011484 <tcp_receive+0xd04>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	b29a      	uxth	r2, r3
 8011448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	b29b      	uxth	r3, r3
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	b29a      	uxth	r2, r3
 8011454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011456:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801145a:	685a      	ldr	r2, [r3, #4]
 801145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801145e:	891b      	ldrh	r3, [r3, #8]
 8011460:	4619      	mov	r1, r3
 8011462:	4610      	mov	r0, r2
 8011464:	f7fb fe84 	bl	800d170 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801146a:	69fa      	ldr	r2, [r7, #28]
 801146c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801146e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011470:	69f8      	ldr	r0, [r7, #28]
 8011472:	f7ff f881 	bl	8010578 <tcp_oos_insert_segment>
                  }
                  break;
 8011476:	e0e2      	b.n	801163e <tcp_receive+0xebe>
 8011478:	20009738 	.word	0x20009738
 801147c:	20009735 	.word	0x20009735
 8011480:	20009708 	.word	0x20009708
 8011484:	20009728 	.word	0x20009728
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801148a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801148c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2b00      	cmp	r3, #0
 8011492:	f040 80c6 	bne.w	8011622 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011496:	4b80      	ldr	r3, [pc, #512]	; (8011698 <tcp_receive+0xf18>)
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	f340 80bd 	ble.w	8011622 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80114a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	899b      	ldrh	r3, [r3, #12]
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7fa fc85 	bl	800bdc0 <lwip_htons>
 80114b6:	4603      	mov	r3, r0
 80114b8:	b2db      	uxtb	r3, r3
 80114ba:	f003 0301 	and.w	r3, r3, #1
 80114be:	2b00      	cmp	r3, #0
 80114c0:	f040 80bf 	bne.w	8011642 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80114c4:	4875      	ldr	r0, [pc, #468]	; (801169c <tcp_receive+0xf1c>)
 80114c6:	f7fd fb07 	bl	800ead8 <tcp_seg_copy>
 80114ca:	4602      	mov	r2, r0
 80114cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80114d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	f000 80b6 	beq.w	8011646 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80114da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114e2:	8912      	ldrh	r2, [r2, #8]
 80114e4:	441a      	add	r2, r3
 80114e6:	4b6c      	ldr	r3, [pc, #432]	; (8011698 <tcp_receive+0xf18>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	1ad3      	subs	r3, r2, r3
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	dd12      	ble.n	8011516 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80114f0:	4b69      	ldr	r3, [pc, #420]	; (8011698 <tcp_receive+0xf18>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	b29a      	uxth	r2, r3
 80114f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f8:	68db      	ldr	r3, [r3, #12]
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	1ad3      	subs	r3, r2, r3
 8011500:	b29a      	uxth	r2, r3
 8011502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011504:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011508:	685a      	ldr	r2, [r3, #4]
 801150a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150c:	891b      	ldrh	r3, [r3, #8]
 801150e:	4619      	mov	r1, r3
 8011510:	4610      	mov	r0, r2
 8011512:	f7fb fe2d 	bl	800d170 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011516:	4b62      	ldr	r3, [pc, #392]	; (80116a0 <tcp_receive+0xf20>)
 8011518:	881b      	ldrh	r3, [r3, #0]
 801151a:	461a      	mov	r2, r3
 801151c:	4b5e      	ldr	r3, [pc, #376]	; (8011698 <tcp_receive+0xf18>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	441a      	add	r2, r3
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011526:	6879      	ldr	r1, [r7, #4]
 8011528:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801152a:	440b      	add	r3, r1
 801152c:	1ad3      	subs	r3, r2, r3
 801152e:	2b00      	cmp	r3, #0
 8011530:	f340 8089 	ble.w	8011646 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	899b      	ldrh	r3, [r3, #12]
 801153c:	b29b      	uxth	r3, r3
 801153e:	4618      	mov	r0, r3
 8011540:	f7fa fc3e 	bl	800bdc0 <lwip_htons>
 8011544:	4603      	mov	r3, r0
 8011546:	b2db      	uxtb	r3, r3
 8011548:	f003 0301 	and.w	r3, r3, #1
 801154c:	2b00      	cmp	r3, #0
 801154e:	d022      	beq.n	8011596 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	68db      	ldr	r3, [r3, #12]
 8011556:	899b      	ldrh	r3, [r3, #12]
 8011558:	b29b      	uxth	r3, r3
 801155a:	b21b      	sxth	r3, r3
 801155c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011560:	b21c      	sxth	r4, r3
 8011562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	899b      	ldrh	r3, [r3, #12]
 801156a:	b29b      	uxth	r3, r3
 801156c:	4618      	mov	r0, r3
 801156e:	f7fa fc27 	bl	800bdc0 <lwip_htons>
 8011572:	4603      	mov	r3, r0
 8011574:	b2db      	uxtb	r3, r3
 8011576:	b29b      	uxth	r3, r3
 8011578:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801157c:	b29b      	uxth	r3, r3
 801157e:	4618      	mov	r0, r3
 8011580:	f7fa fc1e 	bl	800bdc0 <lwip_htons>
 8011584:	4603      	mov	r3, r0
 8011586:	b21b      	sxth	r3, r3
 8011588:	4323      	orrs	r3, r4
 801158a:	b21a      	sxth	r2, r3
 801158c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	b292      	uxth	r2, r2
 8011594:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801159a:	b29a      	uxth	r2, r3
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115a0:	4413      	add	r3, r2
 80115a2:	b299      	uxth	r1, r3
 80115a4:	4b3c      	ldr	r3, [pc, #240]	; (8011698 <tcp_receive+0xf18>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	b29a      	uxth	r2, r3
 80115aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	1a8a      	subs	r2, r1, r2
 80115b0:	b292      	uxth	r2, r2
 80115b2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80115b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	685a      	ldr	r2, [r3, #4]
 80115ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	891b      	ldrh	r3, [r3, #8]
 80115c0:	4619      	mov	r1, r3
 80115c2:	4610      	mov	r0, r2
 80115c4:	f7fb fdd4 	bl	800d170 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80115c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	891c      	ldrh	r4, [r3, #8]
 80115ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	899b      	ldrh	r3, [r3, #12]
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	4618      	mov	r0, r3
 80115da:	f7fa fbf1 	bl	800bdc0 <lwip_htons>
 80115de:	4603      	mov	r3, r0
 80115e0:	b2db      	uxtb	r3, r3
 80115e2:	f003 0303 	and.w	r3, r3, #3
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d001      	beq.n	80115ee <tcp_receive+0xe6e>
 80115ea:	2301      	movs	r3, #1
 80115ec:	e000      	b.n	80115f0 <tcp_receive+0xe70>
 80115ee:	2300      	movs	r3, #0
 80115f0:	4423      	add	r3, r4
 80115f2:	b29a      	uxth	r2, r3
 80115f4:	4b2a      	ldr	r3, [pc, #168]	; (80116a0 <tcp_receive+0xf20>)
 80115f6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80115f8:	4b29      	ldr	r3, [pc, #164]	; (80116a0 <tcp_receive+0xf20>)
 80115fa:	881b      	ldrh	r3, [r3, #0]
 80115fc:	461a      	mov	r2, r3
 80115fe:	4b26      	ldr	r3, [pc, #152]	; (8011698 <tcp_receive+0xf18>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	441a      	add	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011608:	6879      	ldr	r1, [r7, #4]
 801160a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801160c:	440b      	add	r3, r1
 801160e:	429a      	cmp	r2, r3
 8011610:	d019      	beq.n	8011646 <tcp_receive+0xec6>
 8011612:	4b24      	ldr	r3, [pc, #144]	; (80116a4 <tcp_receive+0xf24>)
 8011614:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011618:	4923      	ldr	r1, [pc, #140]	; (80116a8 <tcp_receive+0xf28>)
 801161a:	4824      	ldr	r0, [pc, #144]	; (80116ac <tcp_receive+0xf2c>)
 801161c:	f004 fd88 	bl	8016130 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011620:	e011      	b.n	8011646 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	63bb      	str	r3, [r7, #56]	; 0x38
 8011628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162a:	2b00      	cmp	r3, #0
 801162c:	f47f aea4 	bne.w	8011378 <tcp_receive+0xbf8>
 8011630:	e00a      	b.n	8011648 <tcp_receive+0xec8>
                break;
 8011632:	bf00      	nop
 8011634:	e008      	b.n	8011648 <tcp_receive+0xec8>
                break;
 8011636:	bf00      	nop
 8011638:	e006      	b.n	8011648 <tcp_receive+0xec8>
                  break;
 801163a:	bf00      	nop
 801163c:	e004      	b.n	8011648 <tcp_receive+0xec8>
                  break;
 801163e:	bf00      	nop
 8011640:	e002      	b.n	8011648 <tcp_receive+0xec8>
                  break;
 8011642:	bf00      	nop
 8011644:	e000      	b.n	8011648 <tcp_receive+0xec8>
                break;
 8011646:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f001 fa33 	bl	8012ab4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801164e:	e003      	b.n	8011658 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f001 fa2f 	bl	8012ab4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011656:	e01a      	b.n	801168e <tcp_receive+0xf0e>
 8011658:	e019      	b.n	801168e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801165a:	4b0f      	ldr	r3, [pc, #60]	; (8011698 <tcp_receive+0xf18>)
 801165c:	681a      	ldr	r2, [r3, #0]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011662:	1ad3      	subs	r3, r2, r3
 8011664:	2b00      	cmp	r3, #0
 8011666:	db0a      	blt.n	801167e <tcp_receive+0xefe>
 8011668:	4b0b      	ldr	r3, [pc, #44]	; (8011698 <tcp_receive+0xf18>)
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011670:	6879      	ldr	r1, [r7, #4]
 8011672:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011674:	440b      	add	r3, r1
 8011676:	1ad3      	subs	r3, r2, r3
 8011678:	3301      	adds	r3, #1
 801167a:	2b00      	cmp	r3, #0
 801167c:	dd07      	ble.n	801168e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	8b5b      	ldrh	r3, [r3, #26]
 8011682:	f043 0302 	orr.w	r3, r3, #2
 8011686:	b29a      	uxth	r2, r3
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801168c:	e7ff      	b.n	801168e <tcp_receive+0xf0e>
 801168e:	bf00      	nop
 8011690:	3750      	adds	r7, #80	; 0x50
 8011692:	46bd      	mov	sp, r7
 8011694:	bdb0      	pop	{r4, r5, r7, pc}
 8011696:	bf00      	nop
 8011698:	20009728 	.word	0x20009728
 801169c:	20009708 	.word	0x20009708
 80116a0:	20009732 	.word	0x20009732
 80116a4:	08018688 	.word	0x08018688
 80116a8:	08018a30 	.word	0x08018a30
 80116ac:	080186d4 	.word	0x080186d4

080116b0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80116b0:	b480      	push	{r7}
 80116b2:	b083      	sub	sp, #12
 80116b4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80116b6:	4b15      	ldr	r3, [pc, #84]	; (801170c <tcp_get_next_optbyte+0x5c>)
 80116b8:	881b      	ldrh	r3, [r3, #0]
 80116ba:	1c5a      	adds	r2, r3, #1
 80116bc:	b291      	uxth	r1, r2
 80116be:	4a13      	ldr	r2, [pc, #76]	; (801170c <tcp_get_next_optbyte+0x5c>)
 80116c0:	8011      	strh	r1, [r2, #0]
 80116c2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80116c4:	4b12      	ldr	r3, [pc, #72]	; (8011710 <tcp_get_next_optbyte+0x60>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d004      	beq.n	80116d6 <tcp_get_next_optbyte+0x26>
 80116cc:	4b11      	ldr	r3, [pc, #68]	; (8011714 <tcp_get_next_optbyte+0x64>)
 80116ce:	881b      	ldrh	r3, [r3, #0]
 80116d0:	88fa      	ldrh	r2, [r7, #6]
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d208      	bcs.n	80116e8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80116d6:	4b10      	ldr	r3, [pc, #64]	; (8011718 <tcp_get_next_optbyte+0x68>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	3314      	adds	r3, #20
 80116dc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80116de:	88fb      	ldrh	r3, [r7, #6]
 80116e0:	683a      	ldr	r2, [r7, #0]
 80116e2:	4413      	add	r3, r2
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	e00b      	b.n	8011700 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80116e8:	88fb      	ldrh	r3, [r7, #6]
 80116ea:	b2da      	uxtb	r2, r3
 80116ec:	4b09      	ldr	r3, [pc, #36]	; (8011714 <tcp_get_next_optbyte+0x64>)
 80116ee:	881b      	ldrh	r3, [r3, #0]
 80116f0:	b2db      	uxtb	r3, r3
 80116f2:	1ad3      	subs	r3, r2, r3
 80116f4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80116f6:	4b06      	ldr	r3, [pc, #24]	; (8011710 <tcp_get_next_optbyte+0x60>)
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	797b      	ldrb	r3, [r7, #5]
 80116fc:	4413      	add	r3, r2
 80116fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011700:	4618      	mov	r0, r3
 8011702:	370c      	adds	r7, #12
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr
 801170c:	20009724 	.word	0x20009724
 8011710:	20009720 	.word	0x20009720
 8011714:	2000971e 	.word	0x2000971e
 8011718:	20009718 	.word	0x20009718

0801171c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b084      	sub	sp, #16
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d106      	bne.n	8011738 <tcp_parseopt+0x1c>
 801172a:	4b32      	ldr	r3, [pc, #200]	; (80117f4 <tcp_parseopt+0xd8>)
 801172c:	f240 727d 	movw	r2, #1917	; 0x77d
 8011730:	4931      	ldr	r1, [pc, #196]	; (80117f8 <tcp_parseopt+0xdc>)
 8011732:	4832      	ldr	r0, [pc, #200]	; (80117fc <tcp_parseopt+0xe0>)
 8011734:	f004 fcfc 	bl	8016130 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011738:	4b31      	ldr	r3, [pc, #196]	; (8011800 <tcp_parseopt+0xe4>)
 801173a:	881b      	ldrh	r3, [r3, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d055      	beq.n	80117ec <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011740:	4b30      	ldr	r3, [pc, #192]	; (8011804 <tcp_parseopt+0xe8>)
 8011742:	2200      	movs	r2, #0
 8011744:	801a      	strh	r2, [r3, #0]
 8011746:	e045      	b.n	80117d4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011748:	f7ff ffb2 	bl	80116b0 <tcp_get_next_optbyte>
 801174c:	4603      	mov	r3, r0
 801174e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011750:	7bfb      	ldrb	r3, [r7, #15]
 8011752:	2b02      	cmp	r3, #2
 8011754:	d006      	beq.n	8011764 <tcp_parseopt+0x48>
 8011756:	2b02      	cmp	r3, #2
 8011758:	dc2b      	bgt.n	80117b2 <tcp_parseopt+0x96>
 801175a:	2b00      	cmp	r3, #0
 801175c:	d041      	beq.n	80117e2 <tcp_parseopt+0xc6>
 801175e:	2b01      	cmp	r3, #1
 8011760:	d127      	bne.n	80117b2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011762:	e037      	b.n	80117d4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011764:	f7ff ffa4 	bl	80116b0 <tcp_get_next_optbyte>
 8011768:	4603      	mov	r3, r0
 801176a:	2b04      	cmp	r3, #4
 801176c:	d13b      	bne.n	80117e6 <tcp_parseopt+0xca>
 801176e:	4b25      	ldr	r3, [pc, #148]	; (8011804 <tcp_parseopt+0xe8>)
 8011770:	881b      	ldrh	r3, [r3, #0]
 8011772:	3301      	adds	r3, #1
 8011774:	4a22      	ldr	r2, [pc, #136]	; (8011800 <tcp_parseopt+0xe4>)
 8011776:	8812      	ldrh	r2, [r2, #0]
 8011778:	4293      	cmp	r3, r2
 801177a:	da34      	bge.n	80117e6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801177c:	f7ff ff98 	bl	80116b0 <tcp_get_next_optbyte>
 8011780:	4603      	mov	r3, r0
 8011782:	b29b      	uxth	r3, r3
 8011784:	021b      	lsls	r3, r3, #8
 8011786:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011788:	f7ff ff92 	bl	80116b0 <tcp_get_next_optbyte>
 801178c:	4603      	mov	r3, r0
 801178e:	b29a      	uxth	r2, r3
 8011790:	89bb      	ldrh	r3, [r7, #12]
 8011792:	4313      	orrs	r3, r2
 8011794:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011796:	89bb      	ldrh	r3, [r7, #12]
 8011798:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801179c:	d804      	bhi.n	80117a8 <tcp_parseopt+0x8c>
 801179e:	89bb      	ldrh	r3, [r7, #12]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d001      	beq.n	80117a8 <tcp_parseopt+0x8c>
 80117a4:	89ba      	ldrh	r2, [r7, #12]
 80117a6:	e001      	b.n	80117ac <tcp_parseopt+0x90>
 80117a8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80117b0:	e010      	b.n	80117d4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80117b2:	f7ff ff7d 	bl	80116b0 <tcp_get_next_optbyte>
 80117b6:	4603      	mov	r3, r0
 80117b8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80117ba:	7afb      	ldrb	r3, [r7, #11]
 80117bc:	2b01      	cmp	r3, #1
 80117be:	d914      	bls.n	80117ea <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80117c0:	7afb      	ldrb	r3, [r7, #11]
 80117c2:	b29a      	uxth	r2, r3
 80117c4:	4b0f      	ldr	r3, [pc, #60]	; (8011804 <tcp_parseopt+0xe8>)
 80117c6:	881b      	ldrh	r3, [r3, #0]
 80117c8:	4413      	add	r3, r2
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	3b02      	subs	r3, #2
 80117ce:	b29a      	uxth	r2, r3
 80117d0:	4b0c      	ldr	r3, [pc, #48]	; (8011804 <tcp_parseopt+0xe8>)
 80117d2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80117d4:	4b0b      	ldr	r3, [pc, #44]	; (8011804 <tcp_parseopt+0xe8>)
 80117d6:	881a      	ldrh	r2, [r3, #0]
 80117d8:	4b09      	ldr	r3, [pc, #36]	; (8011800 <tcp_parseopt+0xe4>)
 80117da:	881b      	ldrh	r3, [r3, #0]
 80117dc:	429a      	cmp	r2, r3
 80117de:	d3b3      	bcc.n	8011748 <tcp_parseopt+0x2c>
 80117e0:	e004      	b.n	80117ec <tcp_parseopt+0xd0>
          return;
 80117e2:	bf00      	nop
 80117e4:	e002      	b.n	80117ec <tcp_parseopt+0xd0>
            return;
 80117e6:	bf00      	nop
 80117e8:	e000      	b.n	80117ec <tcp_parseopt+0xd0>
            return;
 80117ea:	bf00      	nop
      }
    }
  }
}
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	08018688 	.word	0x08018688
 80117f8:	08018aec 	.word	0x08018aec
 80117fc:	080186d4 	.word	0x080186d4
 8011800:	2000971c 	.word	0x2000971c
 8011804:	20009724 	.word	0x20009724

08011808 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011808:	b480      	push	{r7}
 801180a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801180c:	4b05      	ldr	r3, [pc, #20]	; (8011824 <tcp_trigger_input_pcb_close+0x1c>)
 801180e:	781b      	ldrb	r3, [r3, #0]
 8011810:	f043 0310 	orr.w	r3, r3, #16
 8011814:	b2da      	uxtb	r2, r3
 8011816:	4b03      	ldr	r3, [pc, #12]	; (8011824 <tcp_trigger_input_pcb_close+0x1c>)
 8011818:	701a      	strb	r2, [r3, #0]
}
 801181a:	bf00      	nop
 801181c:	46bd      	mov	sp, r7
 801181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011822:	4770      	bx	lr
 8011824:	20009735 	.word	0x20009735

08011828 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b084      	sub	sp, #16
 801182c:	af00      	add	r7, sp, #0
 801182e:	60f8      	str	r0, [r7, #12]
 8011830:	60b9      	str	r1, [r7, #8]
 8011832:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d00a      	beq.n	8011850 <tcp_route+0x28>
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	7a1b      	ldrb	r3, [r3, #8]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d006      	beq.n	8011850 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	7a1b      	ldrb	r3, [r3, #8]
 8011846:	4618      	mov	r0, r3
 8011848:	f7fb fab8 	bl	800cdbc <netif_get_by_index>
 801184c:	4603      	mov	r3, r0
 801184e:	e003      	b.n	8011858 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f003 fa37 	bl	8014cc4 <ip4_route>
 8011856:	4603      	mov	r3, r0
  }
}
 8011858:	4618      	mov	r0, r3
 801185a:	3710      	adds	r7, #16
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011860:	b590      	push	{r4, r7, lr}
 8011862:	b087      	sub	sp, #28
 8011864:	af00      	add	r7, sp, #0
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	603b      	str	r3, [r7, #0]
 801186c:	4613      	mov	r3, r2
 801186e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d105      	bne.n	8011882 <tcp_create_segment+0x22>
 8011876:	4b44      	ldr	r3, [pc, #272]	; (8011988 <tcp_create_segment+0x128>)
 8011878:	22a3      	movs	r2, #163	; 0xa3
 801187a:	4944      	ldr	r1, [pc, #272]	; (801198c <tcp_create_segment+0x12c>)
 801187c:	4844      	ldr	r0, [pc, #272]	; (8011990 <tcp_create_segment+0x130>)
 801187e:	f004 fc57 	bl	8016130 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d105      	bne.n	8011894 <tcp_create_segment+0x34>
 8011888:	4b3f      	ldr	r3, [pc, #252]	; (8011988 <tcp_create_segment+0x128>)
 801188a:	22a4      	movs	r2, #164	; 0xa4
 801188c:	4941      	ldr	r1, [pc, #260]	; (8011994 <tcp_create_segment+0x134>)
 801188e:	4840      	ldr	r0, [pc, #256]	; (8011990 <tcp_create_segment+0x130>)
 8011890:	f004 fc4e 	bl	8016130 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011894:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011898:	009b      	lsls	r3, r3, #2
 801189a:	b2db      	uxtb	r3, r3
 801189c:	f003 0304 	and.w	r3, r3, #4
 80118a0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80118a2:	2003      	movs	r0, #3
 80118a4:	f7fa ff04 	bl	800c6b0 <memp_malloc>
 80118a8:	6138      	str	r0, [r7, #16]
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d104      	bne.n	80118ba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80118b0:	68b8      	ldr	r0, [r7, #8]
 80118b2:	f7fb fde3 	bl	800d47c <pbuf_free>
    return NULL;
 80118b6:	2300      	movs	r3, #0
 80118b8:	e061      	b.n	801197e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80118c0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	2200      	movs	r2, #0
 80118c6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	68ba      	ldr	r2, [r7, #8]
 80118cc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	891a      	ldrh	r2, [r3, #8]
 80118d2:	7dfb      	ldrb	r3, [r7, #23]
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d205      	bcs.n	80118e6 <tcp_create_segment+0x86>
 80118da:	4b2b      	ldr	r3, [pc, #172]	; (8011988 <tcp_create_segment+0x128>)
 80118dc:	22b0      	movs	r2, #176	; 0xb0
 80118de:	492e      	ldr	r1, [pc, #184]	; (8011998 <tcp_create_segment+0x138>)
 80118e0:	482b      	ldr	r0, [pc, #172]	; (8011990 <tcp_create_segment+0x130>)
 80118e2:	f004 fc25 	bl	8016130 <iprintf>
  seg->len = p->tot_len - optlen;
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	891a      	ldrh	r2, [r3, #8]
 80118ea:	7dfb      	ldrb	r3, [r7, #23]
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	b29a      	uxth	r2, r3
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80118f6:	2114      	movs	r1, #20
 80118f8:	68b8      	ldr	r0, [r7, #8]
 80118fa:	f7fb fd29 	bl	800d350 <pbuf_add_header>
 80118fe:	4603      	mov	r3, r0
 8011900:	2b00      	cmp	r3, #0
 8011902:	d004      	beq.n	801190e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011904:	6938      	ldr	r0, [r7, #16]
 8011906:	f7fd f8ce 	bl	800eaa6 <tcp_seg_free>
    return NULL;
 801190a:	2300      	movs	r3, #0
 801190c:	e037      	b.n	801197e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	685a      	ldr	r2, [r3, #4]
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	8ada      	ldrh	r2, [r3, #22]
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	68dc      	ldr	r4, [r3, #12]
 8011920:	4610      	mov	r0, r2
 8011922:	f7fa fa4d 	bl	800bdc0 <lwip_htons>
 8011926:	4603      	mov	r3, r0
 8011928:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	8b1a      	ldrh	r2, [r3, #24]
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	68dc      	ldr	r4, [r3, #12]
 8011932:	4610      	mov	r0, r2
 8011934:	f7fa fa44 	bl	800bdc0 <lwip_htons>
 8011938:	4603      	mov	r3, r0
 801193a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	68dc      	ldr	r4, [r3, #12]
 8011940:	6838      	ldr	r0, [r7, #0]
 8011942:	f7fa fa52 	bl	800bdea <lwip_htonl>
 8011946:	4603      	mov	r3, r0
 8011948:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801194a:	7dfb      	ldrb	r3, [r7, #23]
 801194c:	089b      	lsrs	r3, r3, #2
 801194e:	b2db      	uxtb	r3, r3
 8011950:	b29b      	uxth	r3, r3
 8011952:	3305      	adds	r3, #5
 8011954:	b29b      	uxth	r3, r3
 8011956:	031b      	lsls	r3, r3, #12
 8011958:	b29a      	uxth	r2, r3
 801195a:	79fb      	ldrb	r3, [r7, #7]
 801195c:	b29b      	uxth	r3, r3
 801195e:	4313      	orrs	r3, r2
 8011960:	b29a      	uxth	r2, r3
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	68dc      	ldr	r4, [r3, #12]
 8011966:	4610      	mov	r0, r2
 8011968:	f7fa fa2a 	bl	800bdc0 <lwip_htons>
 801196c:	4603      	mov	r3, r0
 801196e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	68db      	ldr	r3, [r3, #12]
 8011974:	2200      	movs	r2, #0
 8011976:	749a      	strb	r2, [r3, #18]
 8011978:	2200      	movs	r2, #0
 801197a:	74da      	strb	r2, [r3, #19]
  return seg;
 801197c:	693b      	ldr	r3, [r7, #16]
}
 801197e:	4618      	mov	r0, r3
 8011980:	371c      	adds	r7, #28
 8011982:	46bd      	mov	sp, r7
 8011984:	bd90      	pop	{r4, r7, pc}
 8011986:	bf00      	nop
 8011988:	08018b08 	.word	0x08018b08
 801198c:	08018b3c 	.word	0x08018b3c
 8011990:	08018b5c 	.word	0x08018b5c
 8011994:	08018b84 	.word	0x08018b84
 8011998:	08018ba8 	.word	0x08018ba8

0801199c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801199c:	b590      	push	{r4, r7, lr}
 801199e:	b08b      	sub	sp, #44	; 0x2c
 80119a0:	af02      	add	r7, sp, #8
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	460b      	mov	r3, r1
 80119a6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80119a8:	2300      	movs	r3, #0
 80119aa:	61fb      	str	r3, [r7, #28]
 80119ac:	2300      	movs	r3, #0
 80119ae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80119b0:	2300      	movs	r3, #0
 80119b2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d106      	bne.n	80119c8 <tcp_split_unsent_seg+0x2c>
 80119ba:	4b95      	ldr	r3, [pc, #596]	; (8011c10 <tcp_split_unsent_seg+0x274>)
 80119bc:	f240 324b 	movw	r2, #843	; 0x34b
 80119c0:	4994      	ldr	r1, [pc, #592]	; (8011c14 <tcp_split_unsent_seg+0x278>)
 80119c2:	4895      	ldr	r0, [pc, #596]	; (8011c18 <tcp_split_unsent_seg+0x27c>)
 80119c4:	f004 fbb4 	bl	8016130 <iprintf>

  useg = pcb->unsent;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119cc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d102      	bne.n	80119da <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80119d4:	f04f 33ff 	mov.w	r3, #4294967295
 80119d8:	e116      	b.n	8011c08 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80119da:	887b      	ldrh	r3, [r7, #2]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d109      	bne.n	80119f4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80119e0:	4b8b      	ldr	r3, [pc, #556]	; (8011c10 <tcp_split_unsent_seg+0x274>)
 80119e2:	f240 3253 	movw	r2, #851	; 0x353
 80119e6:	498d      	ldr	r1, [pc, #564]	; (8011c1c <tcp_split_unsent_seg+0x280>)
 80119e8:	488b      	ldr	r0, [pc, #556]	; (8011c18 <tcp_split_unsent_seg+0x27c>)
 80119ea:	f004 fba1 	bl	8016130 <iprintf>
    return ERR_VAL;
 80119ee:	f06f 0305 	mvn.w	r3, #5
 80119f2:	e109      	b.n	8011c08 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	891b      	ldrh	r3, [r3, #8]
 80119f8:	887a      	ldrh	r2, [r7, #2]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d301      	bcc.n	8011a02 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80119fe:	2300      	movs	r3, #0
 8011a00:	e102      	b.n	8011c08 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a06:	887a      	ldrh	r2, [r7, #2]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d906      	bls.n	8011a1a <tcp_split_unsent_seg+0x7e>
 8011a0c:	4b80      	ldr	r3, [pc, #512]	; (8011c10 <tcp_split_unsent_seg+0x274>)
 8011a0e:	f240 325b 	movw	r2, #859	; 0x35b
 8011a12:	4983      	ldr	r1, [pc, #524]	; (8011c20 <tcp_split_unsent_seg+0x284>)
 8011a14:	4880      	ldr	r0, [pc, #512]	; (8011c18 <tcp_split_unsent_seg+0x27c>)
 8011a16:	f004 fb8b 	bl	8016130 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	891b      	ldrh	r3, [r3, #8]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d106      	bne.n	8011a30 <tcp_split_unsent_seg+0x94>
 8011a22:	4b7b      	ldr	r3, [pc, #492]	; (8011c10 <tcp_split_unsent_seg+0x274>)
 8011a24:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011a28:	497e      	ldr	r1, [pc, #504]	; (8011c24 <tcp_split_unsent_seg+0x288>)
 8011a2a:	487b      	ldr	r0, [pc, #492]	; (8011c18 <tcp_split_unsent_seg+0x27c>)
 8011a2c:	f004 fb80 	bl	8016130 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	7a9b      	ldrb	r3, [r3, #10]
 8011a34:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011a36:	7bfb      	ldrb	r3, [r7, #15]
 8011a38:	009b      	lsls	r3, r3, #2
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	f003 0304 	and.w	r3, r3, #4
 8011a40:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	891a      	ldrh	r2, [r3, #8]
 8011a46:	887b      	ldrh	r3, [r7, #2]
 8011a48:	1ad3      	subs	r3, r2, r3
 8011a4a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011a4c:	7bbb      	ldrb	r3, [r7, #14]
 8011a4e:	b29a      	uxth	r2, r3
 8011a50:	89bb      	ldrh	r3, [r7, #12]
 8011a52:	4413      	add	r3, r2
 8011a54:	b29b      	uxth	r3, r3
 8011a56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a5a:	4619      	mov	r1, r3
 8011a5c:	2036      	movs	r0, #54	; 0x36
 8011a5e:	f7fb fa29 	bl	800ceb4 <pbuf_alloc>
 8011a62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	f000 80b7 	beq.w	8011bda <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	891a      	ldrh	r2, [r3, #8]
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	891b      	ldrh	r3, [r3, #8]
 8011a76:	1ad3      	subs	r3, r2, r3
 8011a78:	b29a      	uxth	r2, r3
 8011a7a:	887b      	ldrh	r3, [r7, #2]
 8011a7c:	4413      	add	r3, r2
 8011a7e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	6858      	ldr	r0, [r3, #4]
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	685a      	ldr	r2, [r3, #4]
 8011a88:	7bbb      	ldrb	r3, [r7, #14]
 8011a8a:	18d1      	adds	r1, r2, r3
 8011a8c:	897b      	ldrh	r3, [r7, #10]
 8011a8e:	89ba      	ldrh	r2, [r7, #12]
 8011a90:	f7fb feee 	bl	800d870 <pbuf_copy_partial>
 8011a94:	4603      	mov	r3, r0
 8011a96:	461a      	mov	r2, r3
 8011a98:	89bb      	ldrh	r3, [r7, #12]
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	f040 809f 	bne.w	8011bde <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	899b      	ldrh	r3, [r3, #12]
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7fa f989 	bl	800bdc0 <lwip_htons>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ab6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011ab8:	2300      	movs	r3, #0
 8011aba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011abc:	7efb      	ldrb	r3, [r7, #27]
 8011abe:	f003 0308 	and.w	r3, r3, #8
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d007      	beq.n	8011ad6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011ac6:	7efb      	ldrb	r3, [r7, #27]
 8011ac8:	f023 0308 	bic.w	r3, r3, #8
 8011acc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011ace:	7ebb      	ldrb	r3, [r7, #26]
 8011ad0:	f043 0308 	orr.w	r3, r3, #8
 8011ad4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011ad6:	7efb      	ldrb	r3, [r7, #27]
 8011ad8:	f003 0301 	and.w	r3, r3, #1
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d007      	beq.n	8011af0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011ae0:	7efb      	ldrb	r3, [r7, #27]
 8011ae2:	f023 0301 	bic.w	r3, r3, #1
 8011ae6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011ae8:	7ebb      	ldrb	r3, [r7, #26]
 8011aea:	f043 0301 	orr.w	r3, r3, #1
 8011aee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	68db      	ldr	r3, [r3, #12]
 8011af4:	685b      	ldr	r3, [r3, #4]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fa f977 	bl	800bdea <lwip_htonl>
 8011afc:	4602      	mov	r2, r0
 8011afe:	887b      	ldrh	r3, [r7, #2]
 8011b00:	18d1      	adds	r1, r2, r3
 8011b02:	7eba      	ldrb	r2, [r7, #26]
 8011b04:	7bfb      	ldrb	r3, [r7, #15]
 8011b06:	9300      	str	r3, [sp, #0]
 8011b08:	460b      	mov	r3, r1
 8011b0a:	6939      	ldr	r1, [r7, #16]
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f7ff fea7 	bl	8011860 <tcp_create_segment>
 8011b12:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d063      	beq.n	8011be2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7fb fd34 	bl	800d58c <pbuf_clen>
 8011b24:	4603      	mov	r3, r0
 8011b26:	461a      	mov	r2, r3
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b2e:	1a9b      	subs	r3, r3, r2
 8011b30:	b29a      	uxth	r2, r3
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	6858      	ldr	r0, [r3, #4]
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	891a      	ldrh	r2, [r3, #8]
 8011b42:	89bb      	ldrh	r3, [r7, #12]
 8011b44:	1ad3      	subs	r3, r2, r3
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	4619      	mov	r1, r3
 8011b4a:	f7fb fb11 	bl	800d170 <pbuf_realloc>
  useg->len -= remainder;
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	891a      	ldrh	r2, [r3, #8]
 8011b52:	89bb      	ldrh	r3, [r7, #12]
 8011b54:	1ad3      	subs	r3, r2, r3
 8011b56:	b29a      	uxth	r2, r3
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	899b      	ldrh	r3, [r3, #12]
 8011b62:	b29c      	uxth	r4, r3
 8011b64:	7efb      	ldrb	r3, [r7, #27]
 8011b66:	b29b      	uxth	r3, r3
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f7fa f929 	bl	800bdc0 <lwip_htons>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	461a      	mov	r2, r3
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	68db      	ldr	r3, [r3, #12]
 8011b76:	4322      	orrs	r2, r4
 8011b78:	b292      	uxth	r2, r2
 8011b7a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7fb fd03 	bl	800d58c <pbuf_clen>
 8011b86:	4603      	mov	r3, r0
 8011b88:	461a      	mov	r2, r3
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b90:	4413      	add	r3, r2
 8011b92:	b29a      	uxth	r2, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011b9a:	69fb      	ldr	r3, [r7, #28]
 8011b9c:	685b      	ldr	r3, [r3, #4]
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7fb fcf4 	bl	800d58c <pbuf_clen>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bae:	4413      	add	r3, r2
 8011bb0:	b29a      	uxth	r2, r3
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	681a      	ldr	r2, [r3, #0]
 8011bbc:	69fb      	ldr	r3, [r7, #28]
 8011bbe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	69fa      	ldr	r2, [r7, #28]
 8011bc4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011bc6:	69fb      	ldr	r3, [r7, #28]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d103      	bne.n	8011bd6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	e016      	b.n	8011c08 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011bda:	bf00      	nop
 8011bdc:	e002      	b.n	8011be4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011bde:	bf00      	nop
 8011be0:	e000      	b.n	8011be4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011be2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011be4:	69fb      	ldr	r3, [r7, #28]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d006      	beq.n	8011bf8 <tcp_split_unsent_seg+0x25c>
 8011bea:	4b09      	ldr	r3, [pc, #36]	; (8011c10 <tcp_split_unsent_seg+0x274>)
 8011bec:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011bf0:	490d      	ldr	r1, [pc, #52]	; (8011c28 <tcp_split_unsent_seg+0x28c>)
 8011bf2:	4809      	ldr	r0, [pc, #36]	; (8011c18 <tcp_split_unsent_seg+0x27c>)
 8011bf4:	f004 fa9c 	bl	8016130 <iprintf>
  if (p != NULL) {
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d002      	beq.n	8011c04 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011bfe:	6938      	ldr	r0, [r7, #16]
 8011c00:	f7fb fc3c 	bl	800d47c <pbuf_free>
  }

  return ERR_MEM;
 8011c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3724      	adds	r7, #36	; 0x24
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd90      	pop	{r4, r7, pc}
 8011c10:	08018b08 	.word	0x08018b08
 8011c14:	08018e9c 	.word	0x08018e9c
 8011c18:	08018b5c 	.word	0x08018b5c
 8011c1c:	08018ec0 	.word	0x08018ec0
 8011c20:	08018ee4 	.word	0x08018ee4
 8011c24:	08018ef4 	.word	0x08018ef4
 8011c28:	08018f04 	.word	0x08018f04

08011c2c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011c2c:	b590      	push	{r4, r7, lr}
 8011c2e:	b085      	sub	sp, #20
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d106      	bne.n	8011c48 <tcp_send_fin+0x1c>
 8011c3a:	4b21      	ldr	r3, [pc, #132]	; (8011cc0 <tcp_send_fin+0x94>)
 8011c3c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011c40:	4920      	ldr	r1, [pc, #128]	; (8011cc4 <tcp_send_fin+0x98>)
 8011c42:	4821      	ldr	r0, [pc, #132]	; (8011cc8 <tcp_send_fin+0x9c>)
 8011c44:	f004 fa74 	bl	8016130 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d02e      	beq.n	8011cae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c54:	60fb      	str	r3, [r7, #12]
 8011c56:	e002      	b.n	8011c5e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d1f8      	bne.n	8011c58 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	68db      	ldr	r3, [r3, #12]
 8011c6a:	899b      	ldrh	r3, [r3, #12]
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7fa f8a6 	bl	800bdc0 <lwip_htons>
 8011c74:	4603      	mov	r3, r0
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	f003 0307 	and.w	r3, r3, #7
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d116      	bne.n	8011cae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	899b      	ldrh	r3, [r3, #12]
 8011c86:	b29c      	uxth	r4, r3
 8011c88:	2001      	movs	r0, #1
 8011c8a:	f7fa f899 	bl	800bdc0 <lwip_htons>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	461a      	mov	r2, r3
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	68db      	ldr	r3, [r3, #12]
 8011c96:	4322      	orrs	r2, r4
 8011c98:	b292      	uxth	r2, r2
 8011c9a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	8b5b      	ldrh	r3, [r3, #26]
 8011ca0:	f043 0320 	orr.w	r3, r3, #32
 8011ca4:	b29a      	uxth	r2, r3
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011caa:	2300      	movs	r3, #0
 8011cac:	e004      	b.n	8011cb8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011cae:	2101      	movs	r1, #1
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f000 f80b 	bl	8011ccc <tcp_enqueue_flags>
 8011cb6:	4603      	mov	r3, r0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3714      	adds	r7, #20
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd90      	pop	{r4, r7, pc}
 8011cc0:	08018b08 	.word	0x08018b08
 8011cc4:	08018f10 	.word	0x08018f10
 8011cc8:	08018b5c 	.word	0x08018b5c

08011ccc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b08a      	sub	sp, #40	; 0x28
 8011cd0:	af02      	add	r7, sp, #8
 8011cd2:	6078      	str	r0, [r7, #4]
 8011cd4:	460b      	mov	r3, r1
 8011cd6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011ce0:	78fb      	ldrb	r3, [r7, #3]
 8011ce2:	f003 0303 	and.w	r3, r3, #3
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d106      	bne.n	8011cf8 <tcp_enqueue_flags+0x2c>
 8011cea:	4b67      	ldr	r3, [pc, #412]	; (8011e88 <tcp_enqueue_flags+0x1bc>)
 8011cec:	f240 4211 	movw	r2, #1041	; 0x411
 8011cf0:	4966      	ldr	r1, [pc, #408]	; (8011e8c <tcp_enqueue_flags+0x1c0>)
 8011cf2:	4867      	ldr	r0, [pc, #412]	; (8011e90 <tcp_enqueue_flags+0x1c4>)
 8011cf4:	f004 fa1c 	bl	8016130 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d106      	bne.n	8011d0c <tcp_enqueue_flags+0x40>
 8011cfe:	4b62      	ldr	r3, [pc, #392]	; (8011e88 <tcp_enqueue_flags+0x1bc>)
 8011d00:	f240 4213 	movw	r2, #1043	; 0x413
 8011d04:	4963      	ldr	r1, [pc, #396]	; (8011e94 <tcp_enqueue_flags+0x1c8>)
 8011d06:	4862      	ldr	r0, [pc, #392]	; (8011e90 <tcp_enqueue_flags+0x1c4>)
 8011d08:	f004 fa12 	bl	8016130 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011d0c:	78fb      	ldrb	r3, [r7, #3]
 8011d0e:	f003 0302 	and.w	r3, r3, #2
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d001      	beq.n	8011d1a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011d16:	2301      	movs	r3, #1
 8011d18:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011d1a:	7ffb      	ldrb	r3, [r7, #31]
 8011d1c:	009b      	lsls	r3, r3, #2
 8011d1e:	b2db      	uxtb	r3, r3
 8011d20:	f003 0304 	and.w	r3, r3, #4
 8011d24:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011d26:	7dfb      	ldrb	r3, [r7, #23]
 8011d28:	b29b      	uxth	r3, r3
 8011d2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d2e:	4619      	mov	r1, r3
 8011d30:	2036      	movs	r0, #54	; 0x36
 8011d32:	f7fb f8bf 	bl	800ceb4 <pbuf_alloc>
 8011d36:	6138      	str	r0, [r7, #16]
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d109      	bne.n	8011d52 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	8b5b      	ldrh	r3, [r3, #26]
 8011d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d46:	b29a      	uxth	r2, r3
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d50:	e095      	b.n	8011e7e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	895a      	ldrh	r2, [r3, #10]
 8011d56:	7dfb      	ldrb	r3, [r7, #23]
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d206      	bcs.n	8011d6c <tcp_enqueue_flags+0xa0>
 8011d5e:	4b4a      	ldr	r3, [pc, #296]	; (8011e88 <tcp_enqueue_flags+0x1bc>)
 8011d60:	f240 4239 	movw	r2, #1081	; 0x439
 8011d64:	494c      	ldr	r1, [pc, #304]	; (8011e98 <tcp_enqueue_flags+0x1cc>)
 8011d66:	484a      	ldr	r0, [pc, #296]	; (8011e90 <tcp_enqueue_flags+0x1c4>)
 8011d68:	f004 f9e2 	bl	8016130 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011d70:	78fa      	ldrb	r2, [r7, #3]
 8011d72:	7ffb      	ldrb	r3, [r7, #31]
 8011d74:	9300      	str	r3, [sp, #0]
 8011d76:	460b      	mov	r3, r1
 8011d78:	6939      	ldr	r1, [r7, #16]
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f7ff fd70 	bl	8011860 <tcp_create_segment>
 8011d80:	60f8      	str	r0, [r7, #12]
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d109      	bne.n	8011d9c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	8b5b      	ldrh	r3, [r3, #26]
 8011d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d90:	b29a      	uxth	r2, r3
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011d96:	f04f 33ff 	mov.w	r3, #4294967295
 8011d9a:	e070      	b.n	8011e7e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	68db      	ldr	r3, [r3, #12]
 8011da0:	f003 0303 	and.w	r3, r3, #3
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d006      	beq.n	8011db6 <tcp_enqueue_flags+0xea>
 8011da8:	4b37      	ldr	r3, [pc, #220]	; (8011e88 <tcp_enqueue_flags+0x1bc>)
 8011daa:	f240 4242 	movw	r2, #1090	; 0x442
 8011dae:	493b      	ldr	r1, [pc, #236]	; (8011e9c <tcp_enqueue_flags+0x1d0>)
 8011db0:	4837      	ldr	r0, [pc, #220]	; (8011e90 <tcp_enqueue_flags+0x1c4>)
 8011db2:	f004 f9bd 	bl	8016130 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	891b      	ldrh	r3, [r3, #8]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d006      	beq.n	8011dcc <tcp_enqueue_flags+0x100>
 8011dbe:	4b32      	ldr	r3, [pc, #200]	; (8011e88 <tcp_enqueue_flags+0x1bc>)
 8011dc0:	f240 4243 	movw	r2, #1091	; 0x443
 8011dc4:	4936      	ldr	r1, [pc, #216]	; (8011ea0 <tcp_enqueue_flags+0x1d4>)
 8011dc6:	4832      	ldr	r0, [pc, #200]	; (8011e90 <tcp_enqueue_flags+0x1c4>)
 8011dc8:	f004 f9b2 	bl	8016130 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d103      	bne.n	8011ddc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	68fa      	ldr	r2, [r7, #12]
 8011dd8:	66da      	str	r2, [r3, #108]	; 0x6c
 8011dda:	e00d      	b.n	8011df8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011de0:	61bb      	str	r3, [r7, #24]
 8011de2:	e002      	b.n	8011dea <tcp_enqueue_flags+0x11e>
 8011de4:	69bb      	ldr	r3, [r7, #24]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	61bb      	str	r3, [r7, #24]
 8011dea:	69bb      	ldr	r3, [r7, #24]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d1f8      	bne.n	8011de4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	68fa      	ldr	r2, [r7, #12]
 8011df6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011e00:	78fb      	ldrb	r3, [r7, #3]
 8011e02:	f003 0302 	and.w	r3, r3, #2
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d104      	bne.n	8011e14 <tcp_enqueue_flags+0x148>
 8011e0a:	78fb      	ldrb	r3, [r7, #3]
 8011e0c:	f003 0301 	and.w	r3, r3, #1
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d004      	beq.n	8011e1e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e18:	1c5a      	adds	r2, r3, #1
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011e1e:	78fb      	ldrb	r3, [r7, #3]
 8011e20:	f003 0301 	and.w	r3, r3, #1
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d006      	beq.n	8011e36 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	8b5b      	ldrh	r3, [r3, #26]
 8011e2c:	f043 0320 	orr.w	r3, r3, #32
 8011e30:	b29a      	uxth	r2, r3
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7fb fba6 	bl	800d58c <pbuf_clen>
 8011e40:	4603      	mov	r3, r0
 8011e42:	461a      	mov	r2, r3
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e4a:	4413      	add	r3, r2
 8011e4c:	b29a      	uxth	r2, r3
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d00e      	beq.n	8011e7c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d10a      	bne.n	8011e7c <tcp_enqueue_flags+0x1b0>
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d106      	bne.n	8011e7c <tcp_enqueue_flags+0x1b0>
 8011e6e:	4b06      	ldr	r3, [pc, #24]	; (8011e88 <tcp_enqueue_flags+0x1bc>)
 8011e70:	f240 4265 	movw	r2, #1125	; 0x465
 8011e74:	490b      	ldr	r1, [pc, #44]	; (8011ea4 <tcp_enqueue_flags+0x1d8>)
 8011e76:	4806      	ldr	r0, [pc, #24]	; (8011e90 <tcp_enqueue_flags+0x1c4>)
 8011e78:	f004 f95a 	bl	8016130 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011e7c:	2300      	movs	r3, #0
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3720      	adds	r7, #32
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
 8011e86:	bf00      	nop
 8011e88:	08018b08 	.word	0x08018b08
 8011e8c:	08018f2c 	.word	0x08018f2c
 8011e90:	08018b5c 	.word	0x08018b5c
 8011e94:	08018f84 	.word	0x08018f84
 8011e98:	08018fa4 	.word	0x08018fa4
 8011e9c:	08018fe0 	.word	0x08018fe0
 8011ea0:	08018ff8 	.word	0x08018ff8
 8011ea4:	08019024 	.word	0x08019024

08011ea8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011ea8:	b5b0      	push	{r4, r5, r7, lr}
 8011eaa:	b08a      	sub	sp, #40	; 0x28
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d106      	bne.n	8011ec4 <tcp_output+0x1c>
 8011eb6:	4b8a      	ldr	r3, [pc, #552]	; (80120e0 <tcp_output+0x238>)
 8011eb8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011ebc:	4989      	ldr	r1, [pc, #548]	; (80120e4 <tcp_output+0x23c>)
 8011ebe:	488a      	ldr	r0, [pc, #552]	; (80120e8 <tcp_output+0x240>)
 8011ec0:	f004 f936 	bl	8016130 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	7d1b      	ldrb	r3, [r3, #20]
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	d106      	bne.n	8011eda <tcp_output+0x32>
 8011ecc:	4b84      	ldr	r3, [pc, #528]	; (80120e0 <tcp_output+0x238>)
 8011ece:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011ed2:	4986      	ldr	r1, [pc, #536]	; (80120ec <tcp_output+0x244>)
 8011ed4:	4884      	ldr	r0, [pc, #528]	; (80120e8 <tcp_output+0x240>)
 8011ed6:	f004 f92b 	bl	8016130 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011eda:	4b85      	ldr	r3, [pc, #532]	; (80120f0 <tcp_output+0x248>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d101      	bne.n	8011ee8 <tcp_output+0x40>
    return ERR_OK;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	e1ce      	b.n	8012286 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	bf28      	it	cs
 8011ef8:	4613      	movcs	r3, r2
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f02:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d10b      	bne.n	8011f22 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	8b5b      	ldrh	r3, [r3, #26]
 8011f0e:	f003 0302 	and.w	r3, r3, #2
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	f000 81aa 	beq.w	801226c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f000 fdcb 	bl	8012ab4 <tcp_send_empty_ack>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	e1b1      	b.n	8012286 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011f22:	6879      	ldr	r1, [r7, #4]
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	3304      	adds	r3, #4
 8011f28:	461a      	mov	r2, r3
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7ff fc7c 	bl	8011828 <tcp_route>
 8011f30:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d102      	bne.n	8011f3e <tcp_output+0x96>
    return ERR_RTE;
 8011f38:	f06f 0303 	mvn.w	r3, #3
 8011f3c:	e1a3      	b.n	8012286 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d003      	beq.n	8011f4c <tcp_output+0xa4>
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d111      	bne.n	8011f70 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d002      	beq.n	8011f58 <tcp_output+0xb0>
 8011f52:	697b      	ldr	r3, [r7, #20]
 8011f54:	3304      	adds	r3, #4
 8011f56:	e000      	b.n	8011f5a <tcp_output+0xb2>
 8011f58:	2300      	movs	r3, #0
 8011f5a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d102      	bne.n	8011f68 <tcp_output+0xc0>
      return ERR_RTE;
 8011f62:	f06f 0303 	mvn.w	r3, #3
 8011f66:	e18e      	b.n	8012286 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7f9 ff37 	bl	800bdea <lwip_htonl>
 8011f7c:	4602      	mov	r2, r0
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f82:	1ad3      	subs	r3, r2, r3
 8011f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f86:	8912      	ldrh	r2, [r2, #8]
 8011f88:	4413      	add	r3, r2
 8011f8a:	69ba      	ldr	r2, [r7, #24]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d227      	bcs.n	8011fe0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f96:	461a      	mov	r2, r3
 8011f98:	69bb      	ldr	r3, [r7, #24]
 8011f9a:	4293      	cmp	r3, r2
 8011f9c:	d114      	bne.n	8011fc8 <tcp_output+0x120>
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d110      	bne.n	8011fc8 <tcp_output+0x120>
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d10b      	bne.n	8011fc8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2201      	movs	r2, #1
 8011fbc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	8b5b      	ldrh	r3, [r3, #26]
 8011fcc:	f003 0302 	and.w	r3, r3, #2
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	f000 814d 	beq.w	8012270 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f000 fd6c 	bl	8012ab4 <tcp_send_empty_ack>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	e152      	b.n	8012286 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011fee:	6a3b      	ldr	r3, [r7, #32]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	f000 811c 	beq.w	801222e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011ff6:	e002      	b.n	8011ffe <tcp_output+0x156>
 8011ff8:	6a3b      	ldr	r3, [r7, #32]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	623b      	str	r3, [r7, #32]
 8011ffe:	6a3b      	ldr	r3, [r7, #32]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d1f8      	bne.n	8011ff8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012006:	e112      	b.n	801222e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	899b      	ldrh	r3, [r3, #12]
 801200e:	b29b      	uxth	r3, r3
 8012010:	4618      	mov	r0, r3
 8012012:	f7f9 fed5 	bl	800bdc0 <lwip_htons>
 8012016:	4603      	mov	r3, r0
 8012018:	b2db      	uxtb	r3, r3
 801201a:	f003 0304 	and.w	r3, r3, #4
 801201e:	2b00      	cmp	r3, #0
 8012020:	d006      	beq.n	8012030 <tcp_output+0x188>
 8012022:	4b2f      	ldr	r3, [pc, #188]	; (80120e0 <tcp_output+0x238>)
 8012024:	f240 5236 	movw	r2, #1334	; 0x536
 8012028:	4932      	ldr	r1, [pc, #200]	; (80120f4 <tcp_output+0x24c>)
 801202a:	482f      	ldr	r0, [pc, #188]	; (80120e8 <tcp_output+0x240>)
 801202c:	f004 f880 	bl	8016130 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012034:	2b00      	cmp	r3, #0
 8012036:	d01f      	beq.n	8012078 <tcp_output+0x1d0>
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	8b5b      	ldrh	r3, [r3, #26]
 801203c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012040:	2b00      	cmp	r3, #0
 8012042:	d119      	bne.n	8012078 <tcp_output+0x1d0>
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012048:	2b00      	cmp	r3, #0
 801204a:	d00b      	beq.n	8012064 <tcp_output+0x1bc>
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d110      	bne.n	8012078 <tcp_output+0x1d0>
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801205a:	891a      	ldrh	r2, [r3, #8]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012060:	429a      	cmp	r2, r3
 8012062:	d209      	bcs.n	8012078 <tcp_output+0x1d0>
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801206a:	2b00      	cmp	r3, #0
 801206c:	d004      	beq.n	8012078 <tcp_output+0x1d0>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012074:	2b08      	cmp	r3, #8
 8012076:	d901      	bls.n	801207c <tcp_output+0x1d4>
 8012078:	2301      	movs	r3, #1
 801207a:	e000      	b.n	801207e <tcp_output+0x1d6>
 801207c:	2300      	movs	r3, #0
 801207e:	2b00      	cmp	r3, #0
 8012080:	d106      	bne.n	8012090 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	8b5b      	ldrh	r3, [r3, #26]
 8012086:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801208a:	2b00      	cmp	r3, #0
 801208c:	f000 80e4 	beq.w	8012258 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	7d1b      	ldrb	r3, [r3, #20]
 8012094:	2b02      	cmp	r3, #2
 8012096:	d00d      	beq.n	80120b4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	899b      	ldrh	r3, [r3, #12]
 801209e:	b29c      	uxth	r4, r3
 80120a0:	2010      	movs	r0, #16
 80120a2:	f7f9 fe8d 	bl	800bdc0 <lwip_htons>
 80120a6:	4603      	mov	r3, r0
 80120a8:	461a      	mov	r2, r3
 80120aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	4322      	orrs	r2, r4
 80120b0:	b292      	uxth	r2, r2
 80120b2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80120b4:	697a      	ldr	r2, [r7, #20]
 80120b6:	6879      	ldr	r1, [r7, #4]
 80120b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120ba:	f000 f909 	bl	80122d0 <tcp_output_segment>
 80120be:	4603      	mov	r3, r0
 80120c0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80120c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d016      	beq.n	80120f8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	8b5b      	ldrh	r3, [r3, #26]
 80120ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120d2:	b29a      	uxth	r2, r3
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	835a      	strh	r2, [r3, #26]
      return err;
 80120d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120dc:	e0d3      	b.n	8012286 <tcp_output+0x3de>
 80120de:	bf00      	nop
 80120e0:	08018b08 	.word	0x08018b08
 80120e4:	0801904c 	.word	0x0801904c
 80120e8:	08018b5c 	.word	0x08018b5c
 80120ec:	08019064 	.word	0x08019064
 80120f0:	2000973c 	.word	0x2000973c
 80120f4:	0801908c 	.word	0x0801908c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80120f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	7d1b      	ldrb	r3, [r3, #20]
 8012104:	2b02      	cmp	r3, #2
 8012106:	d006      	beq.n	8012116 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	8b5b      	ldrh	r3, [r3, #26]
 801210c:	f023 0303 	bic.w	r3, r3, #3
 8012110:	b29a      	uxth	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012118:	68db      	ldr	r3, [r3, #12]
 801211a:	685b      	ldr	r3, [r3, #4]
 801211c:	4618      	mov	r0, r3
 801211e:	f7f9 fe64 	bl	800bdea <lwip_htonl>
 8012122:	4604      	mov	r4, r0
 8012124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012126:	891b      	ldrh	r3, [r3, #8]
 8012128:	461d      	mov	r5, r3
 801212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	899b      	ldrh	r3, [r3, #12]
 8012130:	b29b      	uxth	r3, r3
 8012132:	4618      	mov	r0, r3
 8012134:	f7f9 fe44 	bl	800bdc0 <lwip_htons>
 8012138:	4603      	mov	r3, r0
 801213a:	b2db      	uxtb	r3, r3
 801213c:	f003 0303 	and.w	r3, r3, #3
 8012140:	2b00      	cmp	r3, #0
 8012142:	d001      	beq.n	8012148 <tcp_output+0x2a0>
 8012144:	2301      	movs	r3, #1
 8012146:	e000      	b.n	801214a <tcp_output+0x2a2>
 8012148:	2300      	movs	r3, #0
 801214a:	442b      	add	r3, r5
 801214c:	4423      	add	r3, r4
 801214e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	1ad3      	subs	r3, r2, r3
 8012158:	2b00      	cmp	r3, #0
 801215a:	da02      	bge.n	8012162 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	68ba      	ldr	r2, [r7, #8]
 8012160:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012164:	891b      	ldrh	r3, [r3, #8]
 8012166:	461c      	mov	r4, r3
 8012168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216a:	68db      	ldr	r3, [r3, #12]
 801216c:	899b      	ldrh	r3, [r3, #12]
 801216e:	b29b      	uxth	r3, r3
 8012170:	4618      	mov	r0, r3
 8012172:	f7f9 fe25 	bl	800bdc0 <lwip_htons>
 8012176:	4603      	mov	r3, r0
 8012178:	b2db      	uxtb	r3, r3
 801217a:	f003 0303 	and.w	r3, r3, #3
 801217e:	2b00      	cmp	r3, #0
 8012180:	d001      	beq.n	8012186 <tcp_output+0x2de>
 8012182:	2301      	movs	r3, #1
 8012184:	e000      	b.n	8012188 <tcp_output+0x2e0>
 8012186:	2300      	movs	r3, #0
 8012188:	4423      	add	r3, r4
 801218a:	2b00      	cmp	r3, #0
 801218c:	d049      	beq.n	8012222 <tcp_output+0x37a>
      seg->next = NULL;
 801218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012190:	2200      	movs	r2, #0
 8012192:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012198:	2b00      	cmp	r3, #0
 801219a:	d105      	bne.n	80121a8 <tcp_output+0x300>
        pcb->unacked = seg;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121a0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80121a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a4:	623b      	str	r3, [r7, #32]
 80121a6:	e03f      	b.n	8012228 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80121a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121aa:	68db      	ldr	r3, [r3, #12]
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7f9 fe1b 	bl	800bdea <lwip_htonl>
 80121b4:	4604      	mov	r4, r0
 80121b6:	6a3b      	ldr	r3, [r7, #32]
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	4618      	mov	r0, r3
 80121be:	f7f9 fe14 	bl	800bdea <lwip_htonl>
 80121c2:	4603      	mov	r3, r0
 80121c4:	1ae3      	subs	r3, r4, r3
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	da24      	bge.n	8012214 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	3370      	adds	r3, #112	; 0x70
 80121ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80121d0:	e002      	b.n	80121d8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80121d2:	69fb      	ldr	r3, [r7, #28]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d011      	beq.n	8012204 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80121e0:	69fb      	ldr	r3, [r7, #28]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	68db      	ldr	r3, [r3, #12]
 80121e6:	685b      	ldr	r3, [r3, #4]
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7f9 fdfe 	bl	800bdea <lwip_htonl>
 80121ee:	4604      	mov	r4, r0
 80121f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f2:	68db      	ldr	r3, [r3, #12]
 80121f4:	685b      	ldr	r3, [r3, #4]
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7f9 fdf7 	bl	800bdea <lwip_htonl>
 80121fc:	4603      	mov	r3, r0
 80121fe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012200:	2b00      	cmp	r3, #0
 8012202:	dbe6      	blt.n	80121d2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	681a      	ldr	r2, [r3, #0]
 8012208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012210:	601a      	str	r2, [r3, #0]
 8012212:	e009      	b.n	8012228 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012214:	6a3b      	ldr	r3, [r7, #32]
 8012216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012218:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801221a:	6a3b      	ldr	r3, [r7, #32]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	623b      	str	r3, [r7, #32]
 8012220:	e002      	b.n	8012228 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012222:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012224:	f7fc fc3f 	bl	800eaa6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801222c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012230:	2b00      	cmp	r3, #0
 8012232:	d012      	beq.n	801225a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012236:	68db      	ldr	r3, [r3, #12]
 8012238:	685b      	ldr	r3, [r3, #4]
 801223a:	4618      	mov	r0, r3
 801223c:	f7f9 fdd5 	bl	800bdea <lwip_htonl>
 8012240:	4602      	mov	r2, r0
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012246:	1ad3      	subs	r3, r2, r3
 8012248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801224a:	8912      	ldrh	r2, [r2, #8]
 801224c:	4413      	add	r3, r2
  while (seg != NULL &&
 801224e:	69ba      	ldr	r2, [r7, #24]
 8012250:	429a      	cmp	r2, r3
 8012252:	f4bf aed9 	bcs.w	8012008 <tcp_output+0x160>
 8012256:	e000      	b.n	801225a <tcp_output+0x3b2>
      break;
 8012258:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801225e:	2b00      	cmp	r3, #0
 8012260:	d108      	bne.n	8012274 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2200      	movs	r2, #0
 8012266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801226a:	e004      	b.n	8012276 <tcp_output+0x3ce>
    goto output_done;
 801226c:	bf00      	nop
 801226e:	e002      	b.n	8012276 <tcp_output+0x3ce>
    goto output_done;
 8012270:	bf00      	nop
 8012272:	e000      	b.n	8012276 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012274:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	8b5b      	ldrh	r3, [r3, #26]
 801227a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801227e:	b29a      	uxth	r2, r3
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012284:	2300      	movs	r3, #0
}
 8012286:	4618      	mov	r0, r3
 8012288:	3728      	adds	r7, #40	; 0x28
 801228a:	46bd      	mov	sp, r7
 801228c:	bdb0      	pop	{r4, r5, r7, pc}
 801228e:	bf00      	nop

08012290 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d106      	bne.n	80122ac <tcp_output_segment_busy+0x1c>
 801229e:	4b09      	ldr	r3, [pc, #36]	; (80122c4 <tcp_output_segment_busy+0x34>)
 80122a0:	f240 529a 	movw	r2, #1434	; 0x59a
 80122a4:	4908      	ldr	r1, [pc, #32]	; (80122c8 <tcp_output_segment_busy+0x38>)
 80122a6:	4809      	ldr	r0, [pc, #36]	; (80122cc <tcp_output_segment_busy+0x3c>)
 80122a8:	f003 ff42 	bl	8016130 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	685b      	ldr	r3, [r3, #4]
 80122b0:	7b9b      	ldrb	r3, [r3, #14]
 80122b2:	2b01      	cmp	r3, #1
 80122b4:	d001      	beq.n	80122ba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80122b6:	2301      	movs	r3, #1
 80122b8:	e000      	b.n	80122bc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80122ba:	2300      	movs	r3, #0
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3708      	adds	r7, #8
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}
 80122c4:	08018b08 	.word	0x08018b08
 80122c8:	080190a4 	.word	0x080190a4
 80122cc:	08018b5c 	.word	0x08018b5c

080122d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80122d0:	b5b0      	push	{r4, r5, r7, lr}
 80122d2:	b08c      	sub	sp, #48	; 0x30
 80122d4:	af04      	add	r7, sp, #16
 80122d6:	60f8      	str	r0, [r7, #12]
 80122d8:	60b9      	str	r1, [r7, #8]
 80122da:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d106      	bne.n	80122f0 <tcp_output_segment+0x20>
 80122e2:	4b63      	ldr	r3, [pc, #396]	; (8012470 <tcp_output_segment+0x1a0>)
 80122e4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80122e8:	4962      	ldr	r1, [pc, #392]	; (8012474 <tcp_output_segment+0x1a4>)
 80122ea:	4863      	ldr	r0, [pc, #396]	; (8012478 <tcp_output_segment+0x1a8>)
 80122ec:	f003 ff20 	bl	8016130 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d106      	bne.n	8012304 <tcp_output_segment+0x34>
 80122f6:	4b5e      	ldr	r3, [pc, #376]	; (8012470 <tcp_output_segment+0x1a0>)
 80122f8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80122fc:	495f      	ldr	r1, [pc, #380]	; (801247c <tcp_output_segment+0x1ac>)
 80122fe:	485e      	ldr	r0, [pc, #376]	; (8012478 <tcp_output_segment+0x1a8>)
 8012300:	f003 ff16 	bl	8016130 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d106      	bne.n	8012318 <tcp_output_segment+0x48>
 801230a:	4b59      	ldr	r3, [pc, #356]	; (8012470 <tcp_output_segment+0x1a0>)
 801230c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012310:	495b      	ldr	r1, [pc, #364]	; (8012480 <tcp_output_segment+0x1b0>)
 8012312:	4859      	ldr	r0, [pc, #356]	; (8012478 <tcp_output_segment+0x1a8>)
 8012314:	f003 ff0c 	bl	8016130 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012318:	68f8      	ldr	r0, [r7, #12]
 801231a:	f7ff ffb9 	bl	8012290 <tcp_output_segment_busy>
 801231e:	4603      	mov	r3, r0
 8012320:	2b00      	cmp	r3, #0
 8012322:	d001      	beq.n	8012328 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012324:	2300      	movs	r3, #0
 8012326:	e09f      	b.n	8012468 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	68dc      	ldr	r4, [r3, #12]
 8012330:	4610      	mov	r0, r2
 8012332:	f7f9 fd5a 	bl	800bdea <lwip_htonl>
 8012336:	4603      	mov	r3, r0
 8012338:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	68dc      	ldr	r4, [r3, #12]
 8012342:	4610      	mov	r0, r2
 8012344:	f7f9 fd3c 	bl	800bdc0 <lwip_htons>
 8012348:	4603      	mov	r3, r0
 801234a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012350:	68ba      	ldr	r2, [r7, #8]
 8012352:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012354:	441a      	add	r2, r3
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	68db      	ldr	r3, [r3, #12]
 801235e:	3314      	adds	r3, #20
 8012360:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	7a9b      	ldrb	r3, [r3, #10]
 8012366:	f003 0301 	and.w	r3, r3, #1
 801236a:	2b00      	cmp	r3, #0
 801236c:	d015      	beq.n	801239a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	3304      	adds	r3, #4
 8012372:	461a      	mov	r2, r3
 8012374:	6879      	ldr	r1, [r7, #4]
 8012376:	f44f 7006 	mov.w	r0, #536	; 0x218
 801237a:	f7fc fe8b 	bl	800f094 <tcp_eff_send_mss_netif>
 801237e:	4603      	mov	r3, r0
 8012380:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012382:	8b7b      	ldrh	r3, [r7, #26]
 8012384:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012388:	4618      	mov	r0, r3
 801238a:	f7f9 fd2e 	bl	800bdea <lwip_htonl>
 801238e:	4602      	mov	r2, r0
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012394:	69fb      	ldr	r3, [r7, #28]
 8012396:	3304      	adds	r3, #4
 8012398:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	da02      	bge.n	80123aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	2200      	movs	r2, #0
 80123a8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d10c      	bne.n	80123cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80123b2:	4b34      	ldr	r3, [pc, #208]	; (8012484 <tcp_output_segment+0x1b4>)
 80123b4:	681a      	ldr	r2, [r3, #0]
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7f9 fd12 	bl	800bdea <lwip_htonl>
 80123c6:	4602      	mov	r2, r0
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	68da      	ldr	r2, [r3, #12]
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	685b      	ldr	r3, [r3, #4]
 80123d6:	1ad3      	subs	r3, r2, r3
 80123d8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	685b      	ldr	r3, [r3, #4]
 80123de:	8959      	ldrh	r1, [r3, #10]
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	8b3a      	ldrh	r2, [r7, #24]
 80123e6:	1a8a      	subs	r2, r1, r2
 80123e8:	b292      	uxth	r2, r2
 80123ea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	8919      	ldrh	r1, [r3, #8]
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	8b3a      	ldrh	r2, [r7, #24]
 80123f8:	1a8a      	subs	r2, r1, r2
 80123fa:	b292      	uxth	r2, r2
 80123fc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	685b      	ldr	r3, [r3, #4]
 8012402:	68fa      	ldr	r2, [r7, #12]
 8012404:	68d2      	ldr	r2, [r2, #12]
 8012406:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	2200      	movs	r2, #0
 801240e:	741a      	strb	r2, [r3, #16]
 8012410:	2200      	movs	r2, #0
 8012412:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	f103 0214 	add.w	r2, r3, #20
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	7a9b      	ldrb	r3, [r3, #10]
 8012420:	009b      	lsls	r3, r3, #2
 8012422:	f003 0304 	and.w	r3, r3, #4
 8012426:	4413      	add	r3, r2
 8012428:	69fa      	ldr	r2, [r7, #28]
 801242a:	429a      	cmp	r2, r3
 801242c:	d006      	beq.n	801243c <tcp_output_segment+0x16c>
 801242e:	4b10      	ldr	r3, [pc, #64]	; (8012470 <tcp_output_segment+0x1a0>)
 8012430:	f240 621c 	movw	r2, #1564	; 0x61c
 8012434:	4914      	ldr	r1, [pc, #80]	; (8012488 <tcp_output_segment+0x1b8>)
 8012436:	4810      	ldr	r0, [pc, #64]	; (8012478 <tcp_output_segment+0x1a8>)
 8012438:	f003 fe7a 	bl	8016130 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	6858      	ldr	r0, [r3, #4]
 8012440:	68b9      	ldr	r1, [r7, #8]
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	1d1c      	adds	r4, r3, #4
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	7add      	ldrb	r5, [r3, #11]
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	7a9b      	ldrb	r3, [r3, #10]
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	9202      	str	r2, [sp, #8]
 8012452:	2206      	movs	r2, #6
 8012454:	9201      	str	r2, [sp, #4]
 8012456:	9300      	str	r3, [sp, #0]
 8012458:	462b      	mov	r3, r5
 801245a:	4622      	mov	r2, r4
 801245c:	f002 fdf0 	bl	8015040 <ip4_output_if>
 8012460:	4603      	mov	r3, r0
 8012462:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012464:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012468:	4618      	mov	r0, r3
 801246a:	3720      	adds	r7, #32
 801246c:	46bd      	mov	sp, r7
 801246e:	bdb0      	pop	{r4, r5, r7, pc}
 8012470:	08018b08 	.word	0x08018b08
 8012474:	080190cc 	.word	0x080190cc
 8012478:	08018b5c 	.word	0x08018b5c
 801247c:	080190ec 	.word	0x080190ec
 8012480:	0801910c 	.word	0x0801910c
 8012484:	200096f0 	.word	0x200096f0
 8012488:	08019130 	.word	0x08019130

0801248c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801248c:	b5b0      	push	{r4, r5, r7, lr}
 801248e:	b084      	sub	sp, #16
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d106      	bne.n	80124a8 <tcp_rexmit_rto_prepare+0x1c>
 801249a:	4b31      	ldr	r3, [pc, #196]	; (8012560 <tcp_rexmit_rto_prepare+0xd4>)
 801249c:	f240 6263 	movw	r2, #1635	; 0x663
 80124a0:	4930      	ldr	r1, [pc, #192]	; (8012564 <tcp_rexmit_rto_prepare+0xd8>)
 80124a2:	4831      	ldr	r0, [pc, #196]	; (8012568 <tcp_rexmit_rto_prepare+0xdc>)
 80124a4:	f003 fe44 	bl	8016130 <iprintf>

  if (pcb->unacked == NULL) {
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d102      	bne.n	80124b6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80124b0:	f06f 0305 	mvn.w	r3, #5
 80124b4:	e050      	b.n	8012558 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124ba:	60fb      	str	r3, [r7, #12]
 80124bc:	e00b      	b.n	80124d6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80124be:	68f8      	ldr	r0, [r7, #12]
 80124c0:	f7ff fee6 	bl	8012290 <tcp_output_segment_busy>
 80124c4:	4603      	mov	r3, r0
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d002      	beq.n	80124d0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80124ca:	f06f 0305 	mvn.w	r3, #5
 80124ce:	e043      	b.n	8012558 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	60fb      	str	r3, [r7, #12]
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d1ef      	bne.n	80124be <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80124de:	68f8      	ldr	r0, [r7, #12]
 80124e0:	f7ff fed6 	bl	8012290 <tcp_output_segment_busy>
 80124e4:	4603      	mov	r3, r0
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d002      	beq.n	80124f0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80124ea:	f06f 0305 	mvn.w	r3, #5
 80124ee:	e033      	b.n	8012558 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2200      	movs	r2, #0
 8012504:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	8b5b      	ldrh	r3, [r3, #26]
 801250a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801250e:	b29a      	uxth	r2, r3
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	68db      	ldr	r3, [r3, #12]
 8012518:	685b      	ldr	r3, [r3, #4]
 801251a:	4618      	mov	r0, r3
 801251c:	f7f9 fc65 	bl	800bdea <lwip_htonl>
 8012520:	4604      	mov	r4, r0
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	891b      	ldrh	r3, [r3, #8]
 8012526:	461d      	mov	r5, r3
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	68db      	ldr	r3, [r3, #12]
 801252c:	899b      	ldrh	r3, [r3, #12]
 801252e:	b29b      	uxth	r3, r3
 8012530:	4618      	mov	r0, r3
 8012532:	f7f9 fc45 	bl	800bdc0 <lwip_htons>
 8012536:	4603      	mov	r3, r0
 8012538:	b2db      	uxtb	r3, r3
 801253a:	f003 0303 	and.w	r3, r3, #3
 801253e:	2b00      	cmp	r3, #0
 8012540:	d001      	beq.n	8012546 <tcp_rexmit_rto_prepare+0xba>
 8012542:	2301      	movs	r3, #1
 8012544:	e000      	b.n	8012548 <tcp_rexmit_rto_prepare+0xbc>
 8012546:	2300      	movs	r3, #0
 8012548:	442b      	add	r3, r5
 801254a:	18e2      	adds	r2, r4, r3
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	2200      	movs	r2, #0
 8012554:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012556:	2300      	movs	r3, #0
}
 8012558:	4618      	mov	r0, r3
 801255a:	3710      	adds	r7, #16
 801255c:	46bd      	mov	sp, r7
 801255e:	bdb0      	pop	{r4, r5, r7, pc}
 8012560:	08018b08 	.word	0x08018b08
 8012564:	08019144 	.word	0x08019144
 8012568:	08018b5c 	.word	0x08018b5c

0801256c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d106      	bne.n	8012588 <tcp_rexmit_rto_commit+0x1c>
 801257a:	4b0d      	ldr	r3, [pc, #52]	; (80125b0 <tcp_rexmit_rto_commit+0x44>)
 801257c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012580:	490c      	ldr	r1, [pc, #48]	; (80125b4 <tcp_rexmit_rto_commit+0x48>)
 8012582:	480d      	ldr	r0, [pc, #52]	; (80125b8 <tcp_rexmit_rto_commit+0x4c>)
 8012584:	f003 fdd4 	bl	8016130 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801258e:	2bff      	cmp	r3, #255	; 0xff
 8012590:	d007      	beq.n	80125a2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012598:	3301      	adds	r3, #1
 801259a:	b2da      	uxtb	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f7ff fc80 	bl	8011ea8 <tcp_output>
}
 80125a8:	bf00      	nop
 80125aa:	3708      	adds	r7, #8
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}
 80125b0:	08018b08 	.word	0x08018b08
 80125b4:	08019168 	.word	0x08019168
 80125b8:	08018b5c 	.word	0x08018b5c

080125bc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b082      	sub	sp, #8
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d106      	bne.n	80125d8 <tcp_rexmit_rto+0x1c>
 80125ca:	4b0a      	ldr	r3, [pc, #40]	; (80125f4 <tcp_rexmit_rto+0x38>)
 80125cc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80125d0:	4909      	ldr	r1, [pc, #36]	; (80125f8 <tcp_rexmit_rto+0x3c>)
 80125d2:	480a      	ldr	r0, [pc, #40]	; (80125fc <tcp_rexmit_rto+0x40>)
 80125d4:	f003 fdac 	bl	8016130 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f7ff ff57 	bl	801248c <tcp_rexmit_rto_prepare>
 80125de:	4603      	mov	r3, r0
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d102      	bne.n	80125ea <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f7ff ffc1 	bl	801256c <tcp_rexmit_rto_commit>
  }
}
 80125ea:	bf00      	nop
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	bf00      	nop
 80125f4:	08018b08 	.word	0x08018b08
 80125f8:	0801918c 	.word	0x0801918c
 80125fc:	08018b5c 	.word	0x08018b5c

08012600 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012600:	b590      	push	{r4, r7, lr}
 8012602:	b085      	sub	sp, #20
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d106      	bne.n	801261c <tcp_rexmit+0x1c>
 801260e:	4b2f      	ldr	r3, [pc, #188]	; (80126cc <tcp_rexmit+0xcc>)
 8012610:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012614:	492e      	ldr	r1, [pc, #184]	; (80126d0 <tcp_rexmit+0xd0>)
 8012616:	482f      	ldr	r0, [pc, #188]	; (80126d4 <tcp_rexmit+0xd4>)
 8012618:	f003 fd8a 	bl	8016130 <iprintf>

  if (pcb->unacked == NULL) {
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012620:	2b00      	cmp	r3, #0
 8012622:	d102      	bne.n	801262a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012624:	f06f 0305 	mvn.w	r3, #5
 8012628:	e04c      	b.n	80126c4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801262e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012630:	68b8      	ldr	r0, [r7, #8]
 8012632:	f7ff fe2d 	bl	8012290 <tcp_output_segment_busy>
 8012636:	4603      	mov	r3, r0
 8012638:	2b00      	cmp	r3, #0
 801263a:	d002      	beq.n	8012642 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801263c:	f06f 0305 	mvn.w	r3, #5
 8012640:	e040      	b.n	80126c4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	681a      	ldr	r2, [r3, #0]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	336c      	adds	r3, #108	; 0x6c
 801264e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012650:	e002      	b.n	8012658 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d011      	beq.n	8012684 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	68db      	ldr	r3, [r3, #12]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	4618      	mov	r0, r3
 801266a:	f7f9 fbbe 	bl	800bdea <lwip_htonl>
 801266e:	4604      	mov	r4, r0
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	68db      	ldr	r3, [r3, #12]
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	4618      	mov	r0, r3
 8012678:	f7f9 fbb7 	bl	800bdea <lwip_htonl>
 801267c:	4603      	mov	r3, r0
 801267e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012680:	2b00      	cmp	r3, #0
 8012682:	dbe6      	blt.n	8012652 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	68ba      	ldr	r2, [r7, #8]
 8012690:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d103      	bne.n	80126a2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2200      	movs	r2, #0
 801269e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80126a8:	2bff      	cmp	r3, #255	; 0xff
 80126aa:	d007      	beq.n	80126bc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80126b2:	3301      	adds	r3, #1
 80126b4:	b2da      	uxtb	r2, r3
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2200      	movs	r2, #0
 80126c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80126c2:	2300      	movs	r3, #0
}
 80126c4:	4618      	mov	r0, r3
 80126c6:	3714      	adds	r7, #20
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd90      	pop	{r4, r7, pc}
 80126cc:	08018b08 	.word	0x08018b08
 80126d0:	080191a8 	.word	0x080191a8
 80126d4:	08018b5c 	.word	0x08018b5c

080126d8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b082      	sub	sp, #8
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d106      	bne.n	80126f4 <tcp_rexmit_fast+0x1c>
 80126e6:	4b2a      	ldr	r3, [pc, #168]	; (8012790 <tcp_rexmit_fast+0xb8>)
 80126e8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80126ec:	4929      	ldr	r1, [pc, #164]	; (8012794 <tcp_rexmit_fast+0xbc>)
 80126ee:	482a      	ldr	r0, [pc, #168]	; (8012798 <tcp_rexmit_fast+0xc0>)
 80126f0:	f003 fd1e 	bl	8016130 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d045      	beq.n	8012788 <tcp_rexmit_fast+0xb0>
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	8b5b      	ldrh	r3, [r3, #26]
 8012700:	f003 0304 	and.w	r3, r3, #4
 8012704:	2b00      	cmp	r3, #0
 8012706:	d13f      	bne.n	8012788 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f7ff ff79 	bl	8012600 <tcp_rexmit>
 801270e:	4603      	mov	r3, r0
 8012710:	2b00      	cmp	r3, #0
 8012712:	d139      	bne.n	8012788 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012720:	4293      	cmp	r3, r2
 8012722:	bf28      	it	cs
 8012724:	4613      	movcs	r3, r2
 8012726:	b29b      	uxth	r3, r3
 8012728:	2b00      	cmp	r3, #0
 801272a:	da00      	bge.n	801272e <tcp_rexmit_fast+0x56>
 801272c:	3301      	adds	r3, #1
 801272e:	105b      	asrs	r3, r3, #1
 8012730:	b29a      	uxth	r2, r3
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801273e:	461a      	mov	r2, r3
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012744:	005b      	lsls	r3, r3, #1
 8012746:	429a      	cmp	r2, r3
 8012748:	d206      	bcs.n	8012758 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801274e:	005b      	lsls	r3, r3, #1
 8012750:	b29a      	uxth	r2, r3
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012762:	4619      	mov	r1, r3
 8012764:	0049      	lsls	r1, r1, #1
 8012766:	440b      	add	r3, r1
 8012768:	b29b      	uxth	r3, r3
 801276a:	4413      	add	r3, r2
 801276c:	b29a      	uxth	r2, r3
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	8b5b      	ldrh	r3, [r3, #26]
 8012778:	f043 0304 	orr.w	r3, r3, #4
 801277c:	b29a      	uxth	r2, r3
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2200      	movs	r2, #0
 8012786:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012788:	bf00      	nop
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	08018b08 	.word	0x08018b08
 8012794:	080191c0 	.word	0x080191c0
 8012798:	08018b5c 	.word	0x08018b5c

0801279c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b086      	sub	sp, #24
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	607b      	str	r3, [r7, #4]
 80127a6:	460b      	mov	r3, r1
 80127a8:	817b      	strh	r3, [r7, #10]
 80127aa:	4613      	mov	r3, r2
 80127ac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80127ae:	897a      	ldrh	r2, [r7, #10]
 80127b0:	893b      	ldrh	r3, [r7, #8]
 80127b2:	4413      	add	r3, r2
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	3314      	adds	r3, #20
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127be:	4619      	mov	r1, r3
 80127c0:	2022      	movs	r0, #34	; 0x22
 80127c2:	f7fa fb77 	bl	800ceb4 <pbuf_alloc>
 80127c6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d04d      	beq.n	801286a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80127ce:	897b      	ldrh	r3, [r7, #10]
 80127d0:	3313      	adds	r3, #19
 80127d2:	697a      	ldr	r2, [r7, #20]
 80127d4:	8952      	ldrh	r2, [r2, #10]
 80127d6:	4293      	cmp	r3, r2
 80127d8:	db06      	blt.n	80127e8 <tcp_output_alloc_header_common+0x4c>
 80127da:	4b26      	ldr	r3, [pc, #152]	; (8012874 <tcp_output_alloc_header_common+0xd8>)
 80127dc:	f240 7223 	movw	r2, #1827	; 0x723
 80127e0:	4925      	ldr	r1, [pc, #148]	; (8012878 <tcp_output_alloc_header_common+0xdc>)
 80127e2:	4826      	ldr	r0, [pc, #152]	; (801287c <tcp_output_alloc_header_common+0xe0>)
 80127e4:	f003 fca4 	bl	8016130 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80127ee:	8c3b      	ldrh	r3, [r7, #32]
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7f9 fae5 	bl	800bdc0 <lwip_htons>
 80127f6:	4603      	mov	r3, r0
 80127f8:	461a      	mov	r2, r3
 80127fa:	693b      	ldr	r3, [r7, #16]
 80127fc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80127fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012800:	4618      	mov	r0, r3
 8012802:	f7f9 fadd 	bl	800bdc0 <lwip_htons>
 8012806:	4603      	mov	r3, r0
 8012808:	461a      	mov	r2, r3
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	687a      	ldr	r2, [r7, #4]
 8012812:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012814:	68f8      	ldr	r0, [r7, #12]
 8012816:	f7f9 fae8 	bl	800bdea <lwip_htonl>
 801281a:	4602      	mov	r2, r0
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012820:	897b      	ldrh	r3, [r7, #10]
 8012822:	089b      	lsrs	r3, r3, #2
 8012824:	b29b      	uxth	r3, r3
 8012826:	3305      	adds	r3, #5
 8012828:	b29b      	uxth	r3, r3
 801282a:	031b      	lsls	r3, r3, #12
 801282c:	b29a      	uxth	r2, r3
 801282e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012832:	b29b      	uxth	r3, r3
 8012834:	4313      	orrs	r3, r2
 8012836:	b29b      	uxth	r3, r3
 8012838:	4618      	mov	r0, r3
 801283a:	f7f9 fac1 	bl	800bdc0 <lwip_htons>
 801283e:	4603      	mov	r3, r0
 8012840:	461a      	mov	r2, r3
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012846:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012848:	4618      	mov	r0, r3
 801284a:	f7f9 fab9 	bl	800bdc0 <lwip_htons>
 801284e:	4603      	mov	r3, r0
 8012850:	461a      	mov	r2, r3
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	2200      	movs	r2, #0
 801285a:	741a      	strb	r2, [r3, #16]
 801285c:	2200      	movs	r2, #0
 801285e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	2200      	movs	r2, #0
 8012864:	749a      	strb	r2, [r3, #18]
 8012866:	2200      	movs	r2, #0
 8012868:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801286a:	697b      	ldr	r3, [r7, #20]
}
 801286c:	4618      	mov	r0, r3
 801286e:	3718      	adds	r7, #24
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}
 8012874:	08018b08 	.word	0x08018b08
 8012878:	080191e0 	.word	0x080191e0
 801287c:	08018b5c 	.word	0x08018b5c

08012880 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012880:	b5b0      	push	{r4, r5, r7, lr}
 8012882:	b08a      	sub	sp, #40	; 0x28
 8012884:	af04      	add	r7, sp, #16
 8012886:	60f8      	str	r0, [r7, #12]
 8012888:	607b      	str	r3, [r7, #4]
 801288a:	460b      	mov	r3, r1
 801288c:	817b      	strh	r3, [r7, #10]
 801288e:	4613      	mov	r3, r2
 8012890:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d106      	bne.n	80128a6 <tcp_output_alloc_header+0x26>
 8012898:	4b15      	ldr	r3, [pc, #84]	; (80128f0 <tcp_output_alloc_header+0x70>)
 801289a:	f240 7242 	movw	r2, #1858	; 0x742
 801289e:	4915      	ldr	r1, [pc, #84]	; (80128f4 <tcp_output_alloc_header+0x74>)
 80128a0:	4815      	ldr	r0, [pc, #84]	; (80128f8 <tcp_output_alloc_header+0x78>)
 80128a2:	f003 fc45 	bl	8016130 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	8adb      	ldrh	r3, [r3, #22]
 80128ae:	68fa      	ldr	r2, [r7, #12]
 80128b0:	8b12      	ldrh	r2, [r2, #24]
 80128b2:	68f9      	ldr	r1, [r7, #12]
 80128b4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80128b6:	893d      	ldrh	r5, [r7, #8]
 80128b8:	897c      	ldrh	r4, [r7, #10]
 80128ba:	9103      	str	r1, [sp, #12]
 80128bc:	2110      	movs	r1, #16
 80128be:	9102      	str	r1, [sp, #8]
 80128c0:	9201      	str	r2, [sp, #4]
 80128c2:	9300      	str	r3, [sp, #0]
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	462a      	mov	r2, r5
 80128c8:	4621      	mov	r1, r4
 80128ca:	f7ff ff67 	bl	801279c <tcp_output_alloc_header_common>
 80128ce:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d006      	beq.n	80128e4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128da:	68fa      	ldr	r2, [r7, #12]
 80128dc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80128de:	441a      	add	r2, r3
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80128e4:	697b      	ldr	r3, [r7, #20]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3718      	adds	r7, #24
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bdb0      	pop	{r4, r5, r7, pc}
 80128ee:	bf00      	nop
 80128f0:	08018b08 	.word	0x08018b08
 80128f4:	08019210 	.word	0x08019210
 80128f8:	08018b5c 	.word	0x08018b5c

080128fc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b088      	sub	sp, #32
 8012900:	af00      	add	r7, sp, #0
 8012902:	60f8      	str	r0, [r7, #12]
 8012904:	60b9      	str	r1, [r7, #8]
 8012906:	4611      	mov	r1, r2
 8012908:	461a      	mov	r2, r3
 801290a:	460b      	mov	r3, r1
 801290c:	71fb      	strb	r3, [r7, #7]
 801290e:	4613      	mov	r3, r2
 8012910:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012912:	2300      	movs	r3, #0
 8012914:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d106      	bne.n	801292a <tcp_output_fill_options+0x2e>
 801291c:	4b13      	ldr	r3, [pc, #76]	; (801296c <tcp_output_fill_options+0x70>)
 801291e:	f240 7256 	movw	r2, #1878	; 0x756
 8012922:	4913      	ldr	r1, [pc, #76]	; (8012970 <tcp_output_fill_options+0x74>)
 8012924:	4813      	ldr	r0, [pc, #76]	; (8012974 <tcp_output_fill_options+0x78>)
 8012926:	f003 fc03 	bl	8016130 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	685b      	ldr	r3, [r3, #4]
 801292e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	3314      	adds	r3, #20
 8012934:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012936:	69bb      	ldr	r3, [r7, #24]
 8012938:	f103 0214 	add.w	r2, r3, #20
 801293c:	8bfb      	ldrh	r3, [r7, #30]
 801293e:	009b      	lsls	r3, r3, #2
 8012940:	4619      	mov	r1, r3
 8012942:	79fb      	ldrb	r3, [r7, #7]
 8012944:	009b      	lsls	r3, r3, #2
 8012946:	f003 0304 	and.w	r3, r3, #4
 801294a:	440b      	add	r3, r1
 801294c:	4413      	add	r3, r2
 801294e:	697a      	ldr	r2, [r7, #20]
 8012950:	429a      	cmp	r2, r3
 8012952:	d006      	beq.n	8012962 <tcp_output_fill_options+0x66>
 8012954:	4b05      	ldr	r3, [pc, #20]	; (801296c <tcp_output_fill_options+0x70>)
 8012956:	f240 7275 	movw	r2, #1909	; 0x775
 801295a:	4907      	ldr	r1, [pc, #28]	; (8012978 <tcp_output_fill_options+0x7c>)
 801295c:	4805      	ldr	r0, [pc, #20]	; (8012974 <tcp_output_fill_options+0x78>)
 801295e:	f003 fbe7 	bl	8016130 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012962:	bf00      	nop
 8012964:	3720      	adds	r7, #32
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	08018b08 	.word	0x08018b08
 8012970:	08019238 	.word	0x08019238
 8012974:	08018b5c 	.word	0x08018b5c
 8012978:	08019130 	.word	0x08019130

0801297c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b08a      	sub	sp, #40	; 0x28
 8012980:	af04      	add	r7, sp, #16
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	60b9      	str	r1, [r7, #8]
 8012986:	607a      	str	r2, [r7, #4]
 8012988:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d106      	bne.n	801299e <tcp_output_control_segment+0x22>
 8012990:	4b1c      	ldr	r3, [pc, #112]	; (8012a04 <tcp_output_control_segment+0x88>)
 8012992:	f240 7287 	movw	r2, #1927	; 0x787
 8012996:	491c      	ldr	r1, [pc, #112]	; (8012a08 <tcp_output_control_segment+0x8c>)
 8012998:	481c      	ldr	r0, [pc, #112]	; (8012a0c <tcp_output_control_segment+0x90>)
 801299a:	f003 fbc9 	bl	8016130 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801299e:	683a      	ldr	r2, [r7, #0]
 80129a0:	6879      	ldr	r1, [r7, #4]
 80129a2:	68f8      	ldr	r0, [r7, #12]
 80129a4:	f7fe ff40 	bl	8011828 <tcp_route>
 80129a8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d102      	bne.n	80129b6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80129b0:	23fc      	movs	r3, #252	; 0xfc
 80129b2:	75fb      	strb	r3, [r7, #23]
 80129b4:	e01c      	b.n	80129f0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d006      	beq.n	80129ca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	7adb      	ldrb	r3, [r3, #11]
 80129c0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	7a9b      	ldrb	r3, [r3, #10]
 80129c6:	757b      	strb	r3, [r7, #21]
 80129c8:	e003      	b.n	80129d2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80129ca:	23ff      	movs	r3, #255	; 0xff
 80129cc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80129ce:	2300      	movs	r3, #0
 80129d0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80129d2:	7dba      	ldrb	r2, [r7, #22]
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	9302      	str	r3, [sp, #8]
 80129d8:	2306      	movs	r3, #6
 80129da:	9301      	str	r3, [sp, #4]
 80129dc:	7d7b      	ldrb	r3, [r7, #21]
 80129de:	9300      	str	r3, [sp, #0]
 80129e0:	4613      	mov	r3, r2
 80129e2:	683a      	ldr	r2, [r7, #0]
 80129e4:	6879      	ldr	r1, [r7, #4]
 80129e6:	68b8      	ldr	r0, [r7, #8]
 80129e8:	f002 fb2a 	bl	8015040 <ip4_output_if>
 80129ec:	4603      	mov	r3, r0
 80129ee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80129f0:	68b8      	ldr	r0, [r7, #8]
 80129f2:	f7fa fd43 	bl	800d47c <pbuf_free>
  return err;
 80129f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	3718      	adds	r7, #24
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
 8012a02:	bf00      	nop
 8012a04:	08018b08 	.word	0x08018b08
 8012a08:	08019260 	.word	0x08019260
 8012a0c:	08018b5c 	.word	0x08018b5c

08012a10 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012a10:	b590      	push	{r4, r7, lr}
 8012a12:	b08b      	sub	sp, #44	; 0x2c
 8012a14:	af04      	add	r7, sp, #16
 8012a16:	60f8      	str	r0, [r7, #12]
 8012a18:	60b9      	str	r1, [r7, #8]
 8012a1a:	607a      	str	r2, [r7, #4]
 8012a1c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d106      	bne.n	8012a32 <tcp_rst+0x22>
 8012a24:	4b1f      	ldr	r3, [pc, #124]	; (8012aa4 <tcp_rst+0x94>)
 8012a26:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012a2a:	491f      	ldr	r1, [pc, #124]	; (8012aa8 <tcp_rst+0x98>)
 8012a2c:	481f      	ldr	r0, [pc, #124]	; (8012aac <tcp_rst+0x9c>)
 8012a2e:	f003 fb7f 	bl	8016130 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d106      	bne.n	8012a46 <tcp_rst+0x36>
 8012a38:	4b1a      	ldr	r3, [pc, #104]	; (8012aa4 <tcp_rst+0x94>)
 8012a3a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012a3e:	491c      	ldr	r1, [pc, #112]	; (8012ab0 <tcp_rst+0xa0>)
 8012a40:	481a      	ldr	r0, [pc, #104]	; (8012aac <tcp_rst+0x9c>)
 8012a42:	f003 fb75 	bl	8016130 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a46:	2300      	movs	r3, #0
 8012a48:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012a4a:	f246 0308 	movw	r3, #24584	; 0x6008
 8012a4e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012a50:	7dfb      	ldrb	r3, [r7, #23]
 8012a52:	b29c      	uxth	r4, r3
 8012a54:	68b8      	ldr	r0, [r7, #8]
 8012a56:	f7f9 f9c8 	bl	800bdea <lwip_htonl>
 8012a5a:	4602      	mov	r2, r0
 8012a5c:	8abb      	ldrh	r3, [r7, #20]
 8012a5e:	9303      	str	r3, [sp, #12]
 8012a60:	2314      	movs	r3, #20
 8012a62:	9302      	str	r3, [sp, #8]
 8012a64:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012a66:	9301      	str	r3, [sp, #4]
 8012a68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a6a:	9300      	str	r3, [sp, #0]
 8012a6c:	4613      	mov	r3, r2
 8012a6e:	2200      	movs	r2, #0
 8012a70:	4621      	mov	r1, r4
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f7ff fe92 	bl	801279c <tcp_output_alloc_header_common>
 8012a78:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012a7a:	693b      	ldr	r3, [r7, #16]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d00c      	beq.n	8012a9a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012a80:	7dfb      	ldrb	r3, [r7, #23]
 8012a82:	2200      	movs	r2, #0
 8012a84:	6939      	ldr	r1, [r7, #16]
 8012a86:	68f8      	ldr	r0, [r7, #12]
 8012a88:	f7ff ff38 	bl	80128fc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8e:	683a      	ldr	r2, [r7, #0]
 8012a90:	6939      	ldr	r1, [r7, #16]
 8012a92:	68f8      	ldr	r0, [r7, #12]
 8012a94:	f7ff ff72 	bl	801297c <tcp_output_control_segment>
 8012a98:	e000      	b.n	8012a9c <tcp_rst+0x8c>
    return;
 8012a9a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012a9c:	371c      	adds	r7, #28
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd90      	pop	{r4, r7, pc}
 8012aa2:	bf00      	nop
 8012aa4:	08018b08 	.word	0x08018b08
 8012aa8:	0801928c 	.word	0x0801928c
 8012aac:	08018b5c 	.word	0x08018b5c
 8012ab0:	080192a8 	.word	0x080192a8

08012ab4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012ab4:	b590      	push	{r4, r7, lr}
 8012ab6:	b087      	sub	sp, #28
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012abc:	2300      	movs	r3, #0
 8012abe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d106      	bne.n	8012ad8 <tcp_send_empty_ack+0x24>
 8012aca:	4b28      	ldr	r3, [pc, #160]	; (8012b6c <tcp_send_empty_ack+0xb8>)
 8012acc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012ad0:	4927      	ldr	r1, [pc, #156]	; (8012b70 <tcp_send_empty_ack+0xbc>)
 8012ad2:	4828      	ldr	r0, [pc, #160]	; (8012b74 <tcp_send_empty_ack+0xc0>)
 8012ad4:	f003 fb2c 	bl	8016130 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012ad8:	7dfb      	ldrb	r3, [r7, #23]
 8012ada:	009b      	lsls	r3, r3, #2
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	f003 0304 	and.w	r3, r3, #4
 8012ae2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012ae4:	7d7b      	ldrb	r3, [r7, #21]
 8012ae6:	b29c      	uxth	r4, r3
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7f9 f97c 	bl	800bdea <lwip_htonl>
 8012af2:	4603      	mov	r3, r0
 8012af4:	2200      	movs	r2, #0
 8012af6:	4621      	mov	r1, r4
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f7ff fec1 	bl	8012880 <tcp_output_alloc_header>
 8012afe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012b00:	693b      	ldr	r3, [r7, #16]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d109      	bne.n	8012b1a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	8b5b      	ldrh	r3, [r3, #26]
 8012b0a:	f043 0303 	orr.w	r3, r3, #3
 8012b0e:	b29a      	uxth	r2, r3
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012b14:	f06f 0301 	mvn.w	r3, #1
 8012b18:	e023      	b.n	8012b62 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012b1a:	7dbb      	ldrb	r3, [r7, #22]
 8012b1c:	7dfa      	ldrb	r2, [r7, #23]
 8012b1e:	6939      	ldr	r1, [r7, #16]
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7ff feeb 	bl	80128fc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012b26:	687a      	ldr	r2, [r7, #4]
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	3304      	adds	r3, #4
 8012b2c:	6939      	ldr	r1, [r7, #16]
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f7ff ff24 	bl	801297c <tcp_output_control_segment>
 8012b34:	4603      	mov	r3, r0
 8012b36:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d007      	beq.n	8012b50 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	8b5b      	ldrh	r3, [r3, #26]
 8012b44:	f043 0303 	orr.w	r3, r3, #3
 8012b48:	b29a      	uxth	r2, r3
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	835a      	strh	r2, [r3, #26]
 8012b4e:	e006      	b.n	8012b5e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	8b5b      	ldrh	r3, [r3, #26]
 8012b54:	f023 0303 	bic.w	r3, r3, #3
 8012b58:	b29a      	uxth	r2, r3
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012b62:	4618      	mov	r0, r3
 8012b64:	371c      	adds	r7, #28
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd90      	pop	{r4, r7, pc}
 8012b6a:	bf00      	nop
 8012b6c:	08018b08 	.word	0x08018b08
 8012b70:	080192c4 	.word	0x080192c4
 8012b74:	08018b5c 	.word	0x08018b5c

08012b78 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012b78:	b590      	push	{r4, r7, lr}
 8012b7a:	b087      	sub	sp, #28
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012b80:	2300      	movs	r3, #0
 8012b82:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d106      	bne.n	8012b98 <tcp_keepalive+0x20>
 8012b8a:	4b18      	ldr	r3, [pc, #96]	; (8012bec <tcp_keepalive+0x74>)
 8012b8c:	f640 0224 	movw	r2, #2084	; 0x824
 8012b90:	4917      	ldr	r1, [pc, #92]	; (8012bf0 <tcp_keepalive+0x78>)
 8012b92:	4818      	ldr	r0, [pc, #96]	; (8012bf4 <tcp_keepalive+0x7c>)
 8012b94:	f003 facc 	bl	8016130 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012b98:	7dfb      	ldrb	r3, [r7, #23]
 8012b9a:	b29c      	uxth	r4, r3
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ba0:	3b01      	subs	r3, #1
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7f9 f921 	bl	800bdea <lwip_htonl>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	2200      	movs	r2, #0
 8012bac:	4621      	mov	r1, r4
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f7ff fe66 	bl	8012880 <tcp_output_alloc_header>
 8012bb4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d102      	bne.n	8012bc2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8012bc0:	e010      	b.n	8012be4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012bc2:	7dfb      	ldrb	r3, [r7, #23]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	6939      	ldr	r1, [r7, #16]
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f7ff fe97 	bl	80128fc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	3304      	adds	r3, #4
 8012bd4:	6939      	ldr	r1, [r7, #16]
 8012bd6:	6878      	ldr	r0, [r7, #4]
 8012bd8:	f7ff fed0 	bl	801297c <tcp_output_control_segment>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	371c      	adds	r7, #28
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd90      	pop	{r4, r7, pc}
 8012bec:	08018b08 	.word	0x08018b08
 8012bf0:	080192e4 	.word	0x080192e4
 8012bf4:	08018b5c 	.word	0x08018b5c

08012bf8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012bf8:	b590      	push	{r4, r7, lr}
 8012bfa:	b08b      	sub	sp, #44	; 0x2c
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012c00:	2300      	movs	r3, #0
 8012c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d106      	bne.n	8012c1a <tcp_zero_window_probe+0x22>
 8012c0c:	4b4c      	ldr	r3, [pc, #304]	; (8012d40 <tcp_zero_window_probe+0x148>)
 8012c0e:	f640 024f 	movw	r2, #2127	; 0x84f
 8012c12:	494c      	ldr	r1, [pc, #304]	; (8012d44 <tcp_zero_window_probe+0x14c>)
 8012c14:	484c      	ldr	r0, [pc, #304]	; (8012d48 <tcp_zero_window_probe+0x150>)
 8012c16:	f003 fa8b 	bl	8016130 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c1e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012c20:	6a3b      	ldr	r3, [r7, #32]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d101      	bne.n	8012c2a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012c26:	2300      	movs	r3, #0
 8012c28:	e086      	b.n	8012d38 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012c30:	2bff      	cmp	r3, #255	; 0xff
 8012c32:	d007      	beq.n	8012c44 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	b2da      	uxtb	r2, r3
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012c44:	6a3b      	ldr	r3, [r7, #32]
 8012c46:	68db      	ldr	r3, [r3, #12]
 8012c48:	899b      	ldrh	r3, [r3, #12]
 8012c4a:	b29b      	uxth	r3, r3
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7f9 f8b7 	bl	800bdc0 <lwip_htons>
 8012c52:	4603      	mov	r3, r0
 8012c54:	b2db      	uxtb	r3, r3
 8012c56:	f003 0301 	and.w	r3, r3, #1
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d005      	beq.n	8012c6a <tcp_zero_window_probe+0x72>
 8012c5e:	6a3b      	ldr	r3, [r7, #32]
 8012c60:	891b      	ldrh	r3, [r3, #8]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d101      	bne.n	8012c6a <tcp_zero_window_probe+0x72>
 8012c66:	2301      	movs	r3, #1
 8012c68:	e000      	b.n	8012c6c <tcp_zero_window_probe+0x74>
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012c6e:	7ffb      	ldrb	r3, [r7, #31]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	bf0c      	ite	eq
 8012c74:	2301      	moveq	r3, #1
 8012c76:	2300      	movne	r3, #0
 8012c78:	b2db      	uxtb	r3, r3
 8012c7a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c80:	b299      	uxth	r1, r3
 8012c82:	6a3b      	ldr	r3, [r7, #32]
 8012c84:	68db      	ldr	r3, [r3, #12]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	8bba      	ldrh	r2, [r7, #28]
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f7ff fdf8 	bl	8012880 <tcp_output_alloc_header>
 8012c90:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d102      	bne.n	8012c9e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012c98:	f04f 33ff 	mov.w	r3, #4294967295
 8012c9c:	e04c      	b.n	8012d38 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012c9e:	69bb      	ldr	r3, [r7, #24]
 8012ca0:	685b      	ldr	r3, [r3, #4]
 8012ca2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012ca4:	7ffb      	ldrb	r3, [r7, #31]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d011      	beq.n	8012cce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	899b      	ldrh	r3, [r3, #12]
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	b21b      	sxth	r3, r3
 8012cb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012cb6:	b21c      	sxth	r4, r3
 8012cb8:	2011      	movs	r0, #17
 8012cba:	f7f9 f881 	bl	800bdc0 <lwip_htons>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	b21b      	sxth	r3, r3
 8012cc2:	4323      	orrs	r3, r4
 8012cc4:	b21b      	sxth	r3, r3
 8012cc6:	b29a      	uxth	r2, r3
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	819a      	strh	r2, [r3, #12]
 8012ccc:	e010      	b.n	8012cf0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012cce:	69bb      	ldr	r3, [r7, #24]
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	3314      	adds	r3, #20
 8012cd4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012cd6:	6a3b      	ldr	r3, [r7, #32]
 8012cd8:	6858      	ldr	r0, [r3, #4]
 8012cda:	6a3b      	ldr	r3, [r7, #32]
 8012cdc:	685b      	ldr	r3, [r3, #4]
 8012cde:	891a      	ldrh	r2, [r3, #8]
 8012ce0:	6a3b      	ldr	r3, [r7, #32]
 8012ce2:	891b      	ldrh	r3, [r3, #8]
 8012ce4:	1ad3      	subs	r3, r2, r3
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	2201      	movs	r2, #1
 8012cea:	6939      	ldr	r1, [r7, #16]
 8012cec:	f7fa fdc0 	bl	800d870 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012cf0:	6a3b      	ldr	r3, [r7, #32]
 8012cf2:	68db      	ldr	r3, [r3, #12]
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7f9 f877 	bl	800bdea <lwip_htonl>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	3301      	adds	r3, #1
 8012d00:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	1ad3      	subs	r3, r2, r3
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	da02      	bge.n	8012d14 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	68fa      	ldr	r2, [r7, #12]
 8012d12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d18:	2200      	movs	r2, #0
 8012d1a:	69b9      	ldr	r1, [r7, #24]
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f7ff fded 	bl	80128fc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d22:	687a      	ldr	r2, [r7, #4]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	3304      	adds	r3, #4
 8012d28:	69b9      	ldr	r1, [r7, #24]
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f7ff fe26 	bl	801297c <tcp_output_control_segment>
 8012d30:	4603      	mov	r3, r0
 8012d32:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d34:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012d38:	4618      	mov	r0, r3
 8012d3a:	372c      	adds	r7, #44	; 0x2c
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd90      	pop	{r4, r7, pc}
 8012d40:	08018b08 	.word	0x08018b08
 8012d44:	08019300 	.word	0x08019300
 8012d48:	08018b5c 	.word	0x08018b5c

08012d4c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b082      	sub	sp, #8
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012d54:	f7fa ff0c 	bl	800db70 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012d58:	4b0a      	ldr	r3, [pc, #40]	; (8012d84 <tcpip_tcp_timer+0x38>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d103      	bne.n	8012d68 <tcpip_tcp_timer+0x1c>
 8012d60:	4b09      	ldr	r3, [pc, #36]	; (8012d88 <tcpip_tcp_timer+0x3c>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d005      	beq.n	8012d74 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012d68:	2200      	movs	r2, #0
 8012d6a:	4908      	ldr	r1, [pc, #32]	; (8012d8c <tcpip_tcp_timer+0x40>)
 8012d6c:	20fa      	movs	r0, #250	; 0xfa
 8012d6e:	f000 f8f3 	bl	8012f58 <sys_timeout>
 8012d72:	e003      	b.n	8012d7c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012d74:	4b06      	ldr	r3, [pc, #24]	; (8012d90 <tcpip_tcp_timer+0x44>)
 8012d76:	2200      	movs	r2, #0
 8012d78:	601a      	str	r2, [r3, #0]
  }
}
 8012d7a:	bf00      	nop
 8012d7c:	bf00      	nop
 8012d7e:	3708      	adds	r7, #8
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}
 8012d84:	200096fc 	.word	0x200096fc
 8012d88:	20009700 	.word	0x20009700
 8012d8c:	08012d4d 	.word	0x08012d4d
 8012d90:	20009748 	.word	0x20009748

08012d94 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012d98:	4b0a      	ldr	r3, [pc, #40]	; (8012dc4 <tcp_timer_needed+0x30>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d10f      	bne.n	8012dc0 <tcp_timer_needed+0x2c>
 8012da0:	4b09      	ldr	r3, [pc, #36]	; (8012dc8 <tcp_timer_needed+0x34>)
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d103      	bne.n	8012db0 <tcp_timer_needed+0x1c>
 8012da8:	4b08      	ldr	r3, [pc, #32]	; (8012dcc <tcp_timer_needed+0x38>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d007      	beq.n	8012dc0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012db0:	4b04      	ldr	r3, [pc, #16]	; (8012dc4 <tcp_timer_needed+0x30>)
 8012db2:	2201      	movs	r2, #1
 8012db4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012db6:	2200      	movs	r2, #0
 8012db8:	4905      	ldr	r1, [pc, #20]	; (8012dd0 <tcp_timer_needed+0x3c>)
 8012dba:	20fa      	movs	r0, #250	; 0xfa
 8012dbc:	f000 f8cc 	bl	8012f58 <sys_timeout>
  }
}
 8012dc0:	bf00      	nop
 8012dc2:	bd80      	pop	{r7, pc}
 8012dc4:	20009748 	.word	0x20009748
 8012dc8:	200096fc 	.word	0x200096fc
 8012dcc:	20009700 	.word	0x20009700
 8012dd0:	08012d4d 	.word	0x08012d4d

08012dd4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b086      	sub	sp, #24
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012de0:	2006      	movs	r0, #6
 8012de2:	f7f9 fc65 	bl	800c6b0 <memp_malloc>
 8012de6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d109      	bne.n	8012e02 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d151      	bne.n	8012e98 <sys_timeout_abs+0xc4>
 8012df4:	4b2a      	ldr	r3, [pc, #168]	; (8012ea0 <sys_timeout_abs+0xcc>)
 8012df6:	22be      	movs	r2, #190	; 0xbe
 8012df8:	492a      	ldr	r1, [pc, #168]	; (8012ea4 <sys_timeout_abs+0xd0>)
 8012dfa:	482b      	ldr	r0, [pc, #172]	; (8012ea8 <sys_timeout_abs+0xd4>)
 8012dfc:	f003 f998 	bl	8016130 <iprintf>
    return;
 8012e00:	e04a      	b.n	8012e98 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	2200      	movs	r2, #0
 8012e06:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	68ba      	ldr	r2, [r7, #8]
 8012e0c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	687a      	ldr	r2, [r7, #4]
 8012e12:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	68fa      	ldr	r2, [r7, #12]
 8012e18:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012e1a:	4b24      	ldr	r3, [pc, #144]	; (8012eac <sys_timeout_abs+0xd8>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d103      	bne.n	8012e2a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012e22:	4a22      	ldr	r2, [pc, #136]	; (8012eac <sys_timeout_abs+0xd8>)
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	6013      	str	r3, [r2, #0]
    return;
 8012e28:	e037      	b.n	8012e9a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	685a      	ldr	r2, [r3, #4]
 8012e2e:	4b1f      	ldr	r3, [pc, #124]	; (8012eac <sys_timeout_abs+0xd8>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	685b      	ldr	r3, [r3, #4]
 8012e34:	1ad3      	subs	r3, r2, r3
 8012e36:	0fdb      	lsrs	r3, r3, #31
 8012e38:	f003 0301 	and.w	r3, r3, #1
 8012e3c:	b2db      	uxtb	r3, r3
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d007      	beq.n	8012e52 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012e42:	4b1a      	ldr	r3, [pc, #104]	; (8012eac <sys_timeout_abs+0xd8>)
 8012e44:	681a      	ldr	r2, [r3, #0]
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012e4a:	4a18      	ldr	r2, [pc, #96]	; (8012eac <sys_timeout_abs+0xd8>)
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	6013      	str	r3, [r2, #0]
 8012e50:	e023      	b.n	8012e9a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012e52:	4b16      	ldr	r3, [pc, #88]	; (8012eac <sys_timeout_abs+0xd8>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	617b      	str	r3, [r7, #20]
 8012e58:	e01a      	b.n	8012e90 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d00b      	beq.n	8012e7a <sys_timeout_abs+0xa6>
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	685a      	ldr	r2, [r3, #4]
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	1ad3      	subs	r3, r2, r3
 8012e6e:	0fdb      	lsrs	r3, r3, #31
 8012e70:	f003 0301 	and.w	r3, r3, #1
 8012e74:	b2db      	uxtb	r3, r3
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d007      	beq.n	8012e8a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	681a      	ldr	r2, [r3, #0]
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	693a      	ldr	r2, [r7, #16]
 8012e86:	601a      	str	r2, [r3, #0]
        break;
 8012e88:	e007      	b.n	8012e9a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012e8a:	697b      	ldr	r3, [r7, #20]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	617b      	str	r3, [r7, #20]
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d1e1      	bne.n	8012e5a <sys_timeout_abs+0x86>
 8012e96:	e000      	b.n	8012e9a <sys_timeout_abs+0xc6>
    return;
 8012e98:	bf00      	nop
      }
    }
  }
}
 8012e9a:	3718      	adds	r7, #24
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}
 8012ea0:	08019324 	.word	0x08019324
 8012ea4:	08019358 	.word	0x08019358
 8012ea8:	08019398 	.word	0x08019398
 8012eac:	20009740 	.word	0x20009740

08012eb0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b086      	sub	sp, #24
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012ebc:	697b      	ldr	r3, [r7, #20]
 8012ebe:	685b      	ldr	r3, [r3, #4]
 8012ec0:	4798      	blx	r3

  now = sys_now();
 8012ec2:	f7f8 fd69 	bl	800b998 <sys_now>
 8012ec6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	681a      	ldr	r2, [r3, #0]
 8012ecc:	4b0f      	ldr	r3, [pc, #60]	; (8012f0c <lwip_cyclic_timer+0x5c>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	4413      	add	r3, r2
 8012ed2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012ed4:	68fa      	ldr	r2, [r7, #12]
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	1ad3      	subs	r3, r2, r3
 8012eda:	0fdb      	lsrs	r3, r3, #31
 8012edc:	f003 0301 	and.w	r3, r3, #1
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d009      	beq.n	8012efa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012ee6:	697b      	ldr	r3, [r7, #20]
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	4413      	add	r3, r2
 8012eee:	687a      	ldr	r2, [r7, #4]
 8012ef0:	4907      	ldr	r1, [pc, #28]	; (8012f10 <lwip_cyclic_timer+0x60>)
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7ff ff6e 	bl	8012dd4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012ef8:	e004      	b.n	8012f04 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012efa:	687a      	ldr	r2, [r7, #4]
 8012efc:	4904      	ldr	r1, [pc, #16]	; (8012f10 <lwip_cyclic_timer+0x60>)
 8012efe:	68f8      	ldr	r0, [r7, #12]
 8012f00:	f7ff ff68 	bl	8012dd4 <sys_timeout_abs>
}
 8012f04:	bf00      	nop
 8012f06:	3718      	adds	r7, #24
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	20009744 	.word	0x20009744
 8012f10:	08012eb1 	.word	0x08012eb1

08012f14 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	607b      	str	r3, [r7, #4]
 8012f1e:	e00e      	b.n	8012f3e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012f20:	4a0b      	ldr	r2, [pc, #44]	; (8012f50 <sys_timeouts_init+0x3c>)
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	00db      	lsls	r3, r3, #3
 8012f2c:	4a08      	ldr	r2, [pc, #32]	; (8012f50 <sys_timeouts_init+0x3c>)
 8012f2e:	4413      	add	r3, r2
 8012f30:	461a      	mov	r2, r3
 8012f32:	4908      	ldr	r1, [pc, #32]	; (8012f54 <sys_timeouts_init+0x40>)
 8012f34:	f000 f810 	bl	8012f58 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	607b      	str	r3, [r7, #4]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2b02      	cmp	r3, #2
 8012f42:	d9ed      	bls.n	8012f20 <sys_timeouts_init+0xc>
  }
}
 8012f44:	bf00      	nop
 8012f46:	bf00      	nop
 8012f48:	3708      	adds	r7, #8
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd80      	pop	{r7, pc}
 8012f4e:	bf00      	nop
 8012f50:	08019f18 	.word	0x08019f18
 8012f54:	08012eb1 	.word	0x08012eb1

08012f58 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b086      	sub	sp, #24
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f6a:	d306      	bcc.n	8012f7a <sys_timeout+0x22>
 8012f6c:	4b0a      	ldr	r3, [pc, #40]	; (8012f98 <sys_timeout+0x40>)
 8012f6e:	f240 1229 	movw	r2, #297	; 0x129
 8012f72:	490a      	ldr	r1, [pc, #40]	; (8012f9c <sys_timeout+0x44>)
 8012f74:	480a      	ldr	r0, [pc, #40]	; (8012fa0 <sys_timeout+0x48>)
 8012f76:	f003 f8db 	bl	8016130 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012f7a:	f7f8 fd0d 	bl	800b998 <sys_now>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	4413      	add	r3, r2
 8012f84:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012f86:	687a      	ldr	r2, [r7, #4]
 8012f88:	68b9      	ldr	r1, [r7, #8]
 8012f8a:	6978      	ldr	r0, [r7, #20]
 8012f8c:	f7ff ff22 	bl	8012dd4 <sys_timeout_abs>
#endif
}
 8012f90:	bf00      	nop
 8012f92:	3718      	adds	r7, #24
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	08019324 	.word	0x08019324
 8012f9c:	080193c0 	.word	0x080193c0
 8012fa0:	08019398 	.word	0x08019398

08012fa4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b084      	sub	sp, #16
 8012fa8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012faa:	f7f8 fcf5 	bl	800b998 <sys_now>
 8012fae:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012fb0:	4b1a      	ldr	r3, [pc, #104]	; (801301c <sys_check_timeouts+0x78>)
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	b2db      	uxtb	r3, r3
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d001      	beq.n	8012fbe <sys_check_timeouts+0x1a>
 8012fba:	f7f9 ff25 	bl	800ce08 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012fbe:	4b18      	ldr	r3, [pc, #96]	; (8013020 <sys_check_timeouts+0x7c>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d022      	beq.n	8013010 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	685b      	ldr	r3, [r3, #4]
 8012fce:	68fa      	ldr	r2, [r7, #12]
 8012fd0:	1ad3      	subs	r3, r2, r3
 8012fd2:	0fdb      	lsrs	r3, r3, #31
 8012fd4:	f003 0301 	and.w	r3, r3, #1
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d11a      	bne.n	8013014 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	4a0f      	ldr	r2, [pc, #60]	; (8013020 <sys_check_timeouts+0x7c>)
 8012fe4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	689b      	ldr	r3, [r3, #8]
 8012fea:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	68db      	ldr	r3, [r3, #12]
 8012ff0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	4a0b      	ldr	r2, [pc, #44]	; (8013024 <sys_check_timeouts+0x80>)
 8012ff8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012ffa:	68b9      	ldr	r1, [r7, #8]
 8012ffc:	2006      	movs	r0, #6
 8012ffe:	f7f9 fbc7 	bl	800c790 <memp_free>
    if (handler != NULL) {
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d0d3      	beq.n	8012fb0 <sys_check_timeouts+0xc>
      handler(arg);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6838      	ldr	r0, [r7, #0]
 801300c:	4798      	blx	r3
  do {
 801300e:	e7cf      	b.n	8012fb0 <sys_check_timeouts+0xc>
      return;
 8013010:	bf00      	nop
 8013012:	e000      	b.n	8013016 <sys_check_timeouts+0x72>
      return;
 8013014:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013016:	3710      	adds	r7, #16
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}
 801301c:	200096ed 	.word	0x200096ed
 8013020:	20009740 	.word	0x20009740
 8013024:	20009744 	.word	0x20009744

08013028 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801302c:	f003 f90e 	bl	801624c <rand>
 8013030:	4603      	mov	r3, r0
 8013032:	b29b      	uxth	r3, r3
 8013034:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013038:	b29b      	uxth	r3, r3
 801303a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801303e:	b29a      	uxth	r2, r3
 8013040:	4b01      	ldr	r3, [pc, #4]	; (8013048 <udp_init+0x20>)
 8013042:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013044:	bf00      	nop
 8013046:	bd80      	pop	{r7, pc}
 8013048:	20000028 	.word	0x20000028

0801304c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801304c:	b480      	push	{r7}
 801304e:	b083      	sub	sp, #12
 8013050:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013052:	2300      	movs	r3, #0
 8013054:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013056:	4b17      	ldr	r3, [pc, #92]	; (80130b4 <udp_new_port+0x68>)
 8013058:	881b      	ldrh	r3, [r3, #0]
 801305a:	1c5a      	adds	r2, r3, #1
 801305c:	b291      	uxth	r1, r2
 801305e:	4a15      	ldr	r2, [pc, #84]	; (80130b4 <udp_new_port+0x68>)
 8013060:	8011      	strh	r1, [r2, #0]
 8013062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013066:	4293      	cmp	r3, r2
 8013068:	d103      	bne.n	8013072 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801306a:	4b12      	ldr	r3, [pc, #72]	; (80130b4 <udp_new_port+0x68>)
 801306c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013070:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013072:	4b11      	ldr	r3, [pc, #68]	; (80130b8 <udp_new_port+0x6c>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	603b      	str	r3, [r7, #0]
 8013078:	e011      	b.n	801309e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	8a5a      	ldrh	r2, [r3, #18]
 801307e:	4b0d      	ldr	r3, [pc, #52]	; (80130b4 <udp_new_port+0x68>)
 8013080:	881b      	ldrh	r3, [r3, #0]
 8013082:	429a      	cmp	r2, r3
 8013084:	d108      	bne.n	8013098 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013086:	88fb      	ldrh	r3, [r7, #6]
 8013088:	3301      	adds	r3, #1
 801308a:	80fb      	strh	r3, [r7, #6]
 801308c:	88fb      	ldrh	r3, [r7, #6]
 801308e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013092:	d3e0      	bcc.n	8013056 <udp_new_port+0xa>
        return 0;
 8013094:	2300      	movs	r3, #0
 8013096:	e007      	b.n	80130a8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	68db      	ldr	r3, [r3, #12]
 801309c:	603b      	str	r3, [r7, #0]
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d1ea      	bne.n	801307a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80130a4:	4b03      	ldr	r3, [pc, #12]	; (80130b4 <udp_new_port+0x68>)
 80130a6:	881b      	ldrh	r3, [r3, #0]
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	370c      	adds	r7, #12
 80130ac:	46bd      	mov	sp, r7
 80130ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b2:	4770      	bx	lr
 80130b4:	20000028 	.word	0x20000028
 80130b8:	2000974c 	.word	0x2000974c

080130bc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	60b9      	str	r1, [r7, #8]
 80130c6:	4613      	mov	r3, r2
 80130c8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d105      	bne.n	80130dc <udp_input_local_match+0x20>
 80130d0:	4b27      	ldr	r3, [pc, #156]	; (8013170 <udp_input_local_match+0xb4>)
 80130d2:	2287      	movs	r2, #135	; 0x87
 80130d4:	4927      	ldr	r1, [pc, #156]	; (8013174 <udp_input_local_match+0xb8>)
 80130d6:	4828      	ldr	r0, [pc, #160]	; (8013178 <udp_input_local_match+0xbc>)
 80130d8:	f003 f82a 	bl	8016130 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d105      	bne.n	80130ee <udp_input_local_match+0x32>
 80130e2:	4b23      	ldr	r3, [pc, #140]	; (8013170 <udp_input_local_match+0xb4>)
 80130e4:	2288      	movs	r2, #136	; 0x88
 80130e6:	4925      	ldr	r1, [pc, #148]	; (801317c <udp_input_local_match+0xc0>)
 80130e8:	4823      	ldr	r0, [pc, #140]	; (8013178 <udp_input_local_match+0xbc>)
 80130ea:	f003 f821 	bl	8016130 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	7a1b      	ldrb	r3, [r3, #8]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d00b      	beq.n	801310e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	7a1a      	ldrb	r2, [r3, #8]
 80130fa:	4b21      	ldr	r3, [pc, #132]	; (8013180 <udp_input_local_match+0xc4>)
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013102:	3301      	adds	r3, #1
 8013104:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013106:	429a      	cmp	r2, r3
 8013108:	d001      	beq.n	801310e <udp_input_local_match+0x52>
    return 0;
 801310a:	2300      	movs	r3, #0
 801310c:	e02b      	b.n	8013166 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801310e:	79fb      	ldrb	r3, [r7, #7]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d018      	beq.n	8013146 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d013      	beq.n	8013142 <udp_input_local_match+0x86>
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d00f      	beq.n	8013142 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013122:	4b17      	ldr	r3, [pc, #92]	; (8013180 <udp_input_local_match+0xc4>)
 8013124:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013126:	f1b3 3fff 	cmp.w	r3, #4294967295
 801312a:	d00a      	beq.n	8013142 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	681a      	ldr	r2, [r3, #0]
 8013130:	4b13      	ldr	r3, [pc, #76]	; (8013180 <udp_input_local_match+0xc4>)
 8013132:	695b      	ldr	r3, [r3, #20]
 8013134:	405a      	eors	r2, r3
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	3308      	adds	r3, #8
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801313e:	2b00      	cmp	r3, #0
 8013140:	d110      	bne.n	8013164 <udp_input_local_match+0xa8>
          return 1;
 8013142:	2301      	movs	r3, #1
 8013144:	e00f      	b.n	8013166 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d009      	beq.n	8013160 <udp_input_local_match+0xa4>
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d005      	beq.n	8013160 <udp_input_local_match+0xa4>
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	4b09      	ldr	r3, [pc, #36]	; (8013180 <udp_input_local_match+0xc4>)
 801315a:	695b      	ldr	r3, [r3, #20]
 801315c:	429a      	cmp	r2, r3
 801315e:	d101      	bne.n	8013164 <udp_input_local_match+0xa8>
        return 1;
 8013160:	2301      	movs	r3, #1
 8013162:	e000      	b.n	8013166 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013164:	2300      	movs	r3, #0
}
 8013166:	4618      	mov	r0, r3
 8013168:	3710      	adds	r7, #16
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}
 801316e:	bf00      	nop
 8013170:	0801940c 	.word	0x0801940c
 8013174:	0801943c 	.word	0x0801943c
 8013178:	08019460 	.word	0x08019460
 801317c:	08019488 	.word	0x08019488
 8013180:	20006180 	.word	0x20006180

08013184 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013184:	b590      	push	{r4, r7, lr}
 8013186:	b08d      	sub	sp, #52	; 0x34
 8013188:	af02      	add	r7, sp, #8
 801318a:	6078      	str	r0, [r7, #4]
 801318c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801318e:	2300      	movs	r3, #0
 8013190:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d105      	bne.n	80131a4 <udp_input+0x20>
 8013198:	4b7c      	ldr	r3, [pc, #496]	; (801338c <udp_input+0x208>)
 801319a:	22cf      	movs	r2, #207	; 0xcf
 801319c:	497c      	ldr	r1, [pc, #496]	; (8013390 <udp_input+0x20c>)
 801319e:	487d      	ldr	r0, [pc, #500]	; (8013394 <udp_input+0x210>)
 80131a0:	f002 ffc6 	bl	8016130 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d105      	bne.n	80131b6 <udp_input+0x32>
 80131aa:	4b78      	ldr	r3, [pc, #480]	; (801338c <udp_input+0x208>)
 80131ac:	22d0      	movs	r2, #208	; 0xd0
 80131ae:	497a      	ldr	r1, [pc, #488]	; (8013398 <udp_input+0x214>)
 80131b0:	4878      	ldr	r0, [pc, #480]	; (8013394 <udp_input+0x210>)
 80131b2:	f002 ffbd 	bl	8016130 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	895b      	ldrh	r3, [r3, #10]
 80131ba:	2b07      	cmp	r3, #7
 80131bc:	d803      	bhi.n	80131c6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80131be:	6878      	ldr	r0, [r7, #4]
 80131c0:	f7fa f95c 	bl	800d47c <pbuf_free>
    goto end;
 80131c4:	e0de      	b.n	8013384 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	685b      	ldr	r3, [r3, #4]
 80131ca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80131cc:	4b73      	ldr	r3, [pc, #460]	; (801339c <udp_input+0x218>)
 80131ce:	695b      	ldr	r3, [r3, #20]
 80131d0:	4a72      	ldr	r2, [pc, #456]	; (801339c <udp_input+0x218>)
 80131d2:	6812      	ldr	r2, [r2, #0]
 80131d4:	4611      	mov	r1, r2
 80131d6:	4618      	mov	r0, r3
 80131d8:	f002 f80a 	bl	80151f0 <ip4_addr_isbroadcast_u32>
 80131dc:	4603      	mov	r3, r0
 80131de:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	881b      	ldrh	r3, [r3, #0]
 80131e4:	b29b      	uxth	r3, r3
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7f8 fdea 	bl	800bdc0 <lwip_htons>
 80131ec:	4603      	mov	r3, r0
 80131ee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	885b      	ldrh	r3, [r3, #2]
 80131f4:	b29b      	uxth	r3, r3
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7f8 fde2 	bl	800bdc0 <lwip_htons>
 80131fc:	4603      	mov	r3, r0
 80131fe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013200:	2300      	movs	r3, #0
 8013202:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013204:	2300      	movs	r3, #0
 8013206:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013208:	2300      	movs	r3, #0
 801320a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801320c:	4b64      	ldr	r3, [pc, #400]	; (80133a0 <udp_input+0x21c>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	627b      	str	r3, [r7, #36]	; 0x24
 8013212:	e054      	b.n	80132be <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013216:	8a5b      	ldrh	r3, [r3, #18]
 8013218:	89fa      	ldrh	r2, [r7, #14]
 801321a:	429a      	cmp	r2, r3
 801321c:	d14a      	bne.n	80132b4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801321e:	7cfb      	ldrb	r3, [r7, #19]
 8013220:	461a      	mov	r2, r3
 8013222:	6839      	ldr	r1, [r7, #0]
 8013224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013226:	f7ff ff49 	bl	80130bc <udp_input_local_match>
 801322a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801322c:	2b00      	cmp	r3, #0
 801322e:	d041      	beq.n	80132b4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013232:	7c1b      	ldrb	r3, [r3, #16]
 8013234:	f003 0304 	and.w	r3, r3, #4
 8013238:	2b00      	cmp	r3, #0
 801323a:	d11d      	bne.n	8013278 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d102      	bne.n	8013248 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013244:	61fb      	str	r3, [r7, #28]
 8013246:	e017      	b.n	8013278 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013248:	7cfb      	ldrb	r3, [r7, #19]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d014      	beq.n	8013278 <udp_input+0xf4>
 801324e:	4b53      	ldr	r3, [pc, #332]	; (801339c <udp_input+0x218>)
 8013250:	695b      	ldr	r3, [r3, #20]
 8013252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013256:	d10f      	bne.n	8013278 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013258:	69fb      	ldr	r3, [r7, #28]
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	3304      	adds	r3, #4
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	429a      	cmp	r2, r3
 8013264:	d008      	beq.n	8013278 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013268:	681a      	ldr	r2, [r3, #0]
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	3304      	adds	r3, #4
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	429a      	cmp	r2, r3
 8013272:	d101      	bne.n	8013278 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013276:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327a:	8a9b      	ldrh	r3, [r3, #20]
 801327c:	8a3a      	ldrh	r2, [r7, #16]
 801327e:	429a      	cmp	r2, r3
 8013280:	d118      	bne.n	80132b4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013284:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013286:	2b00      	cmp	r3, #0
 8013288:	d005      	beq.n	8013296 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801328c:	685a      	ldr	r2, [r3, #4]
 801328e:	4b43      	ldr	r3, [pc, #268]	; (801339c <udp_input+0x218>)
 8013290:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013292:	429a      	cmp	r2, r3
 8013294:	d10e      	bne.n	80132b4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013296:	6a3b      	ldr	r3, [r7, #32]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d014      	beq.n	80132c6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329e:	68da      	ldr	r2, [r3, #12]
 80132a0:	6a3b      	ldr	r3, [r7, #32]
 80132a2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80132a4:	4b3e      	ldr	r3, [pc, #248]	; (80133a0 <udp_input+0x21c>)
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132aa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80132ac:	4a3c      	ldr	r2, [pc, #240]	; (80133a0 <udp_input+0x21c>)
 80132ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80132b2:	e008      	b.n	80132c6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80132b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80132b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	627b      	str	r3, [r7, #36]	; 0x24
 80132be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d1a7      	bne.n	8013214 <udp_input+0x90>
 80132c4:	e000      	b.n	80132c8 <udp_input+0x144>
        break;
 80132c6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80132c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d101      	bne.n	80132d2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80132ce:	69fb      	ldr	r3, [r7, #28]
 80132d0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80132d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d002      	beq.n	80132de <udp_input+0x15a>
    for_us = 1;
 80132d8:	2301      	movs	r3, #1
 80132da:	76fb      	strb	r3, [r7, #27]
 80132dc:	e00a      	b.n	80132f4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	3304      	adds	r3, #4
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	4b2d      	ldr	r3, [pc, #180]	; (801339c <udp_input+0x218>)
 80132e6:	695b      	ldr	r3, [r3, #20]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	bf0c      	ite	eq
 80132ec:	2301      	moveq	r3, #1
 80132ee:	2300      	movne	r3, #0
 80132f0:	b2db      	uxtb	r3, r3
 80132f2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80132f4:	7efb      	ldrb	r3, [r7, #27]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d041      	beq.n	801337e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80132fa:	2108      	movs	r1, #8
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f7fa f837 	bl	800d370 <pbuf_remove_header>
 8013302:	4603      	mov	r3, r0
 8013304:	2b00      	cmp	r3, #0
 8013306:	d00a      	beq.n	801331e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013308:	4b20      	ldr	r3, [pc, #128]	; (801338c <udp_input+0x208>)
 801330a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801330e:	4925      	ldr	r1, [pc, #148]	; (80133a4 <udp_input+0x220>)
 8013310:	4820      	ldr	r0, [pc, #128]	; (8013394 <udp_input+0x210>)
 8013312:	f002 ff0d 	bl	8016130 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f7fa f8b0 	bl	800d47c <pbuf_free>
      goto end;
 801331c:	e032      	b.n	8013384 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013320:	2b00      	cmp	r3, #0
 8013322:	d012      	beq.n	801334a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013326:	699b      	ldr	r3, [r3, #24]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d00a      	beq.n	8013342 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801332e:	699c      	ldr	r4, [r3, #24]
 8013330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013332:	69d8      	ldr	r0, [r3, #28]
 8013334:	8a3b      	ldrh	r3, [r7, #16]
 8013336:	9300      	str	r3, [sp, #0]
 8013338:	4b1b      	ldr	r3, [pc, #108]	; (80133a8 <udp_input+0x224>)
 801333a:	687a      	ldr	r2, [r7, #4]
 801333c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801333e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013340:	e021      	b.n	8013386 <udp_input+0x202>
        pbuf_free(p);
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f7fa f89a 	bl	800d47c <pbuf_free>
        goto end;
 8013348:	e01c      	b.n	8013384 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801334a:	7cfb      	ldrb	r3, [r7, #19]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d112      	bne.n	8013376 <udp_input+0x1f2>
 8013350:	4b12      	ldr	r3, [pc, #72]	; (801339c <udp_input+0x218>)
 8013352:	695b      	ldr	r3, [r3, #20]
 8013354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013358:	2be0      	cmp	r3, #224	; 0xe0
 801335a:	d00c      	beq.n	8013376 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801335c:	4b0f      	ldr	r3, [pc, #60]	; (801339c <udp_input+0x218>)
 801335e:	899b      	ldrh	r3, [r3, #12]
 8013360:	3308      	adds	r3, #8
 8013362:	b29b      	uxth	r3, r3
 8013364:	b21b      	sxth	r3, r3
 8013366:	4619      	mov	r1, r3
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f7fa f874 	bl	800d456 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801336e:	2103      	movs	r1, #3
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f001 fc1d 	bl	8014bb0 <icmp_dest_unreach>
      pbuf_free(p);
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f7fa f880 	bl	800d47c <pbuf_free>
  return;
 801337c:	e003      	b.n	8013386 <udp_input+0x202>
    pbuf_free(p);
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f7fa f87c 	bl	800d47c <pbuf_free>
  return;
 8013384:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013386:	372c      	adds	r7, #44	; 0x2c
 8013388:	46bd      	mov	sp, r7
 801338a:	bd90      	pop	{r4, r7, pc}
 801338c:	0801940c 	.word	0x0801940c
 8013390:	080194b0 	.word	0x080194b0
 8013394:	08019460 	.word	0x08019460
 8013398:	080194c8 	.word	0x080194c8
 801339c:	20006180 	.word	0x20006180
 80133a0:	2000974c 	.word	0x2000974c
 80133a4:	080194e4 	.word	0x080194e4
 80133a8:	20006190 	.word	0x20006190

080133ac <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d109      	bne.n	80133d0 <udp_send+0x24>
 80133bc:	4b11      	ldr	r3, [pc, #68]	; (8013404 <udp_send+0x58>)
 80133be:	f240 12d5 	movw	r2, #469	; 0x1d5
 80133c2:	4911      	ldr	r1, [pc, #68]	; (8013408 <udp_send+0x5c>)
 80133c4:	4811      	ldr	r0, [pc, #68]	; (801340c <udp_send+0x60>)
 80133c6:	f002 feb3 	bl	8016130 <iprintf>
 80133ca:	f06f 030f 	mvn.w	r3, #15
 80133ce:	e015      	b.n	80133fc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d109      	bne.n	80133ea <udp_send+0x3e>
 80133d6:	4b0b      	ldr	r3, [pc, #44]	; (8013404 <udp_send+0x58>)
 80133d8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80133dc:	490c      	ldr	r1, [pc, #48]	; (8013410 <udp_send+0x64>)
 80133de:	480b      	ldr	r0, [pc, #44]	; (801340c <udp_send+0x60>)
 80133e0:	f002 fea6 	bl	8016130 <iprintf>
 80133e4:	f06f 030f 	mvn.w	r3, #15
 80133e8:	e008      	b.n	80133fc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	1d1a      	adds	r2, r3, #4
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	8a9b      	ldrh	r3, [r3, #20]
 80133f2:	6839      	ldr	r1, [r7, #0]
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f000 f80d 	bl	8013414 <udp_sendto>
 80133fa:	4603      	mov	r3, r0
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	3708      	adds	r7, #8
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}
 8013404:	0801940c 	.word	0x0801940c
 8013408:	08019500 	.word	0x08019500
 801340c:	08019460 	.word	0x08019460
 8013410:	08019518 	.word	0x08019518

08013414 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b088      	sub	sp, #32
 8013418:	af02      	add	r7, sp, #8
 801341a:	60f8      	str	r0, [r7, #12]
 801341c:	60b9      	str	r1, [r7, #8]
 801341e:	607a      	str	r2, [r7, #4]
 8013420:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d109      	bne.n	801343c <udp_sendto+0x28>
 8013428:	4b23      	ldr	r3, [pc, #140]	; (80134b8 <udp_sendto+0xa4>)
 801342a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801342e:	4923      	ldr	r1, [pc, #140]	; (80134bc <udp_sendto+0xa8>)
 8013430:	4823      	ldr	r0, [pc, #140]	; (80134c0 <udp_sendto+0xac>)
 8013432:	f002 fe7d 	bl	8016130 <iprintf>
 8013436:	f06f 030f 	mvn.w	r3, #15
 801343a:	e038      	b.n	80134ae <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d109      	bne.n	8013456 <udp_sendto+0x42>
 8013442:	4b1d      	ldr	r3, [pc, #116]	; (80134b8 <udp_sendto+0xa4>)
 8013444:	f240 2219 	movw	r2, #537	; 0x219
 8013448:	491e      	ldr	r1, [pc, #120]	; (80134c4 <udp_sendto+0xb0>)
 801344a:	481d      	ldr	r0, [pc, #116]	; (80134c0 <udp_sendto+0xac>)
 801344c:	f002 fe70 	bl	8016130 <iprintf>
 8013450:	f06f 030f 	mvn.w	r3, #15
 8013454:	e02b      	b.n	80134ae <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d109      	bne.n	8013470 <udp_sendto+0x5c>
 801345c:	4b16      	ldr	r3, [pc, #88]	; (80134b8 <udp_sendto+0xa4>)
 801345e:	f240 221a 	movw	r2, #538	; 0x21a
 8013462:	4919      	ldr	r1, [pc, #100]	; (80134c8 <udp_sendto+0xb4>)
 8013464:	4816      	ldr	r0, [pc, #88]	; (80134c0 <udp_sendto+0xac>)
 8013466:	f002 fe63 	bl	8016130 <iprintf>
 801346a:	f06f 030f 	mvn.w	r3, #15
 801346e:	e01e      	b.n	80134ae <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	7a1b      	ldrb	r3, [r3, #8]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d006      	beq.n	8013486 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	7a1b      	ldrb	r3, [r3, #8]
 801347c:	4618      	mov	r0, r3
 801347e:	f7f9 fc9d 	bl	800cdbc <netif_get_by_index>
 8013482:	6178      	str	r0, [r7, #20]
 8013484:	e003      	b.n	801348e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f001 fc1c 	bl	8014cc4 <ip4_route>
 801348c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d102      	bne.n	801349a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013494:	f06f 0303 	mvn.w	r3, #3
 8013498:	e009      	b.n	80134ae <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801349a:	887a      	ldrh	r2, [r7, #2]
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	9300      	str	r3, [sp, #0]
 80134a0:	4613      	mov	r3, r2
 80134a2:	687a      	ldr	r2, [r7, #4]
 80134a4:	68b9      	ldr	r1, [r7, #8]
 80134a6:	68f8      	ldr	r0, [r7, #12]
 80134a8:	f000 f810 	bl	80134cc <udp_sendto_if>
 80134ac:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3718      	adds	r7, #24
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	0801940c 	.word	0x0801940c
 80134bc:	08019530 	.word	0x08019530
 80134c0:	08019460 	.word	0x08019460
 80134c4:	08019548 	.word	0x08019548
 80134c8:	08019564 	.word	0x08019564

080134cc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b088      	sub	sp, #32
 80134d0:	af02      	add	r7, sp, #8
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	60b9      	str	r1, [r7, #8]
 80134d6:	607a      	str	r2, [r7, #4]
 80134d8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d109      	bne.n	80134f4 <udp_sendto_if+0x28>
 80134e0:	4b2e      	ldr	r3, [pc, #184]	; (801359c <udp_sendto_if+0xd0>)
 80134e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134e6:	492e      	ldr	r1, [pc, #184]	; (80135a0 <udp_sendto_if+0xd4>)
 80134e8:	482e      	ldr	r0, [pc, #184]	; (80135a4 <udp_sendto_if+0xd8>)
 80134ea:	f002 fe21 	bl	8016130 <iprintf>
 80134ee:	f06f 030f 	mvn.w	r3, #15
 80134f2:	e04f      	b.n	8013594 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d109      	bne.n	801350e <udp_sendto_if+0x42>
 80134fa:	4b28      	ldr	r3, [pc, #160]	; (801359c <udp_sendto_if+0xd0>)
 80134fc:	f240 2281 	movw	r2, #641	; 0x281
 8013500:	4929      	ldr	r1, [pc, #164]	; (80135a8 <udp_sendto_if+0xdc>)
 8013502:	4828      	ldr	r0, [pc, #160]	; (80135a4 <udp_sendto_if+0xd8>)
 8013504:	f002 fe14 	bl	8016130 <iprintf>
 8013508:	f06f 030f 	mvn.w	r3, #15
 801350c:	e042      	b.n	8013594 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d109      	bne.n	8013528 <udp_sendto_if+0x5c>
 8013514:	4b21      	ldr	r3, [pc, #132]	; (801359c <udp_sendto_if+0xd0>)
 8013516:	f240 2282 	movw	r2, #642	; 0x282
 801351a:	4924      	ldr	r1, [pc, #144]	; (80135ac <udp_sendto_if+0xe0>)
 801351c:	4821      	ldr	r0, [pc, #132]	; (80135a4 <udp_sendto_if+0xd8>)
 801351e:	f002 fe07 	bl	8016130 <iprintf>
 8013522:	f06f 030f 	mvn.w	r3, #15
 8013526:	e035      	b.n	8013594 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013528:	6a3b      	ldr	r3, [r7, #32]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d109      	bne.n	8013542 <udp_sendto_if+0x76>
 801352e:	4b1b      	ldr	r3, [pc, #108]	; (801359c <udp_sendto_if+0xd0>)
 8013530:	f240 2283 	movw	r2, #643	; 0x283
 8013534:	491e      	ldr	r1, [pc, #120]	; (80135b0 <udp_sendto_if+0xe4>)
 8013536:	481b      	ldr	r0, [pc, #108]	; (80135a4 <udp_sendto_if+0xd8>)
 8013538:	f002 fdfa 	bl	8016130 <iprintf>
 801353c:	f06f 030f 	mvn.w	r3, #15
 8013540:	e028      	b.n	8013594 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d009      	beq.n	801355c <udp_sendto_if+0x90>
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d005      	beq.n	801355c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013558:	2be0      	cmp	r3, #224	; 0xe0
 801355a:	d103      	bne.n	8013564 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801355c:	6a3b      	ldr	r3, [r7, #32]
 801355e:	3304      	adds	r3, #4
 8013560:	617b      	str	r3, [r7, #20]
 8013562:	e00b      	b.n	801357c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	6a3b      	ldr	r3, [r7, #32]
 801356a:	3304      	adds	r3, #4
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	429a      	cmp	r2, r3
 8013570:	d002      	beq.n	8013578 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013572:	f06f 0303 	mvn.w	r3, #3
 8013576:	e00d      	b.n	8013594 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801357c:	887a      	ldrh	r2, [r7, #2]
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	9301      	str	r3, [sp, #4]
 8013582:	6a3b      	ldr	r3, [r7, #32]
 8013584:	9300      	str	r3, [sp, #0]
 8013586:	4613      	mov	r3, r2
 8013588:	687a      	ldr	r2, [r7, #4]
 801358a:	68b9      	ldr	r1, [r7, #8]
 801358c:	68f8      	ldr	r0, [r7, #12]
 801358e:	f000 f811 	bl	80135b4 <udp_sendto_if_src>
 8013592:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013594:	4618      	mov	r0, r3
 8013596:	3718      	adds	r7, #24
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}
 801359c:	0801940c 	.word	0x0801940c
 80135a0:	08019580 	.word	0x08019580
 80135a4:	08019460 	.word	0x08019460
 80135a8:	0801959c 	.word	0x0801959c
 80135ac:	080195b8 	.word	0x080195b8
 80135b0:	080195d8 	.word	0x080195d8

080135b4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b08c      	sub	sp, #48	; 0x30
 80135b8:	af04      	add	r7, sp, #16
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	60b9      	str	r1, [r7, #8]
 80135be:	607a      	str	r2, [r7, #4]
 80135c0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d109      	bne.n	80135dc <udp_sendto_if_src+0x28>
 80135c8:	4b65      	ldr	r3, [pc, #404]	; (8013760 <udp_sendto_if_src+0x1ac>)
 80135ca:	f240 22d1 	movw	r2, #721	; 0x2d1
 80135ce:	4965      	ldr	r1, [pc, #404]	; (8013764 <udp_sendto_if_src+0x1b0>)
 80135d0:	4865      	ldr	r0, [pc, #404]	; (8013768 <udp_sendto_if_src+0x1b4>)
 80135d2:	f002 fdad 	bl	8016130 <iprintf>
 80135d6:	f06f 030f 	mvn.w	r3, #15
 80135da:	e0bc      	b.n	8013756 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d109      	bne.n	80135f6 <udp_sendto_if_src+0x42>
 80135e2:	4b5f      	ldr	r3, [pc, #380]	; (8013760 <udp_sendto_if_src+0x1ac>)
 80135e4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80135e8:	4960      	ldr	r1, [pc, #384]	; (801376c <udp_sendto_if_src+0x1b8>)
 80135ea:	485f      	ldr	r0, [pc, #380]	; (8013768 <udp_sendto_if_src+0x1b4>)
 80135ec:	f002 fda0 	bl	8016130 <iprintf>
 80135f0:	f06f 030f 	mvn.w	r3, #15
 80135f4:	e0af      	b.n	8013756 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d109      	bne.n	8013610 <udp_sendto_if_src+0x5c>
 80135fc:	4b58      	ldr	r3, [pc, #352]	; (8013760 <udp_sendto_if_src+0x1ac>)
 80135fe:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013602:	495b      	ldr	r1, [pc, #364]	; (8013770 <udp_sendto_if_src+0x1bc>)
 8013604:	4858      	ldr	r0, [pc, #352]	; (8013768 <udp_sendto_if_src+0x1b4>)
 8013606:	f002 fd93 	bl	8016130 <iprintf>
 801360a:	f06f 030f 	mvn.w	r3, #15
 801360e:	e0a2      	b.n	8013756 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013612:	2b00      	cmp	r3, #0
 8013614:	d109      	bne.n	801362a <udp_sendto_if_src+0x76>
 8013616:	4b52      	ldr	r3, [pc, #328]	; (8013760 <udp_sendto_if_src+0x1ac>)
 8013618:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801361c:	4955      	ldr	r1, [pc, #340]	; (8013774 <udp_sendto_if_src+0x1c0>)
 801361e:	4852      	ldr	r0, [pc, #328]	; (8013768 <udp_sendto_if_src+0x1b4>)
 8013620:	f002 fd86 	bl	8016130 <iprintf>
 8013624:	f06f 030f 	mvn.w	r3, #15
 8013628:	e095      	b.n	8013756 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362c:	2b00      	cmp	r3, #0
 801362e:	d109      	bne.n	8013644 <udp_sendto_if_src+0x90>
 8013630:	4b4b      	ldr	r3, [pc, #300]	; (8013760 <udp_sendto_if_src+0x1ac>)
 8013632:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013636:	4950      	ldr	r1, [pc, #320]	; (8013778 <udp_sendto_if_src+0x1c4>)
 8013638:	484b      	ldr	r0, [pc, #300]	; (8013768 <udp_sendto_if_src+0x1b4>)
 801363a:	f002 fd79 	bl	8016130 <iprintf>
 801363e:	f06f 030f 	mvn.w	r3, #15
 8013642:	e088      	b.n	8013756 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	8a5b      	ldrh	r3, [r3, #18]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d10f      	bne.n	801366c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801364c:	68f9      	ldr	r1, [r7, #12]
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	8a5b      	ldrh	r3, [r3, #18]
 8013652:	461a      	mov	r2, r3
 8013654:	68f8      	ldr	r0, [r7, #12]
 8013656:	f000 f893 	bl	8013780 <udp_bind>
 801365a:	4603      	mov	r3, r0
 801365c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801365e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d002      	beq.n	801366c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013666:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801366a:	e074      	b.n	8013756 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	891b      	ldrh	r3, [r3, #8]
 8013670:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013674:	4293      	cmp	r3, r2
 8013676:	d902      	bls.n	801367e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013678:	f04f 33ff 	mov.w	r3, #4294967295
 801367c:	e06b      	b.n	8013756 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801367e:	2108      	movs	r1, #8
 8013680:	68b8      	ldr	r0, [r7, #8]
 8013682:	f7f9 fe65 	bl	800d350 <pbuf_add_header>
 8013686:	4603      	mov	r3, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d015      	beq.n	80136b8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801368c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013690:	2108      	movs	r1, #8
 8013692:	2022      	movs	r0, #34	; 0x22
 8013694:	f7f9 fc0e 	bl	800ceb4 <pbuf_alloc>
 8013698:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801369a:	69fb      	ldr	r3, [r7, #28]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d102      	bne.n	80136a6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80136a0:	f04f 33ff 	mov.w	r3, #4294967295
 80136a4:	e057      	b.n	8013756 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	891b      	ldrh	r3, [r3, #8]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d006      	beq.n	80136bc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80136ae:	68b9      	ldr	r1, [r7, #8]
 80136b0:	69f8      	ldr	r0, [r7, #28]
 80136b2:	f7f9 fffb 	bl	800d6ac <pbuf_chain>
 80136b6:	e001      	b.n	80136bc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80136bc:	69fb      	ldr	r3, [r7, #28]
 80136be:	895b      	ldrh	r3, [r3, #10]
 80136c0:	2b07      	cmp	r3, #7
 80136c2:	d806      	bhi.n	80136d2 <udp_sendto_if_src+0x11e>
 80136c4:	4b26      	ldr	r3, [pc, #152]	; (8013760 <udp_sendto_if_src+0x1ac>)
 80136c6:	f240 320d 	movw	r2, #781	; 0x30d
 80136ca:	492c      	ldr	r1, [pc, #176]	; (801377c <udp_sendto_if_src+0x1c8>)
 80136cc:	4826      	ldr	r0, [pc, #152]	; (8013768 <udp_sendto_if_src+0x1b4>)
 80136ce:	f002 fd2f 	bl	8016130 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80136d2:	69fb      	ldr	r3, [r7, #28]
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	8a5b      	ldrh	r3, [r3, #18]
 80136dc:	4618      	mov	r0, r3
 80136de:	f7f8 fb6f 	bl	800bdc0 <lwip_htons>
 80136e2:	4603      	mov	r3, r0
 80136e4:	461a      	mov	r2, r3
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80136ea:	887b      	ldrh	r3, [r7, #2]
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7f8 fb67 	bl	800bdc0 <lwip_htons>
 80136f2:	4603      	mov	r3, r0
 80136f4:	461a      	mov	r2, r3
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	2200      	movs	r2, #0
 80136fe:	719a      	strb	r2, [r3, #6]
 8013700:	2200      	movs	r2, #0
 8013702:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	891b      	ldrh	r3, [r3, #8]
 8013708:	4618      	mov	r0, r3
 801370a:	f7f8 fb59 	bl	800bdc0 <lwip_htons>
 801370e:	4603      	mov	r3, r0
 8013710:	461a      	mov	r2, r3
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013716:	2311      	movs	r3, #17
 8013718:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	7adb      	ldrb	r3, [r3, #11]
 801371e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	7a9b      	ldrb	r3, [r3, #10]
 8013724:	7cb9      	ldrb	r1, [r7, #18]
 8013726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013728:	9202      	str	r2, [sp, #8]
 801372a:	7cfa      	ldrb	r2, [r7, #19]
 801372c:	9201      	str	r2, [sp, #4]
 801372e:	9300      	str	r3, [sp, #0]
 8013730:	460b      	mov	r3, r1
 8013732:	687a      	ldr	r2, [r7, #4]
 8013734:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013736:	69f8      	ldr	r0, [r7, #28]
 8013738:	f001 fcac 	bl	8015094 <ip4_output_if_src>
 801373c:	4603      	mov	r3, r0
 801373e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013740:	69fa      	ldr	r2, [r7, #28]
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	429a      	cmp	r2, r3
 8013746:	d004      	beq.n	8013752 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013748:	69f8      	ldr	r0, [r7, #28]
 801374a:	f7f9 fe97 	bl	800d47c <pbuf_free>
    q = NULL;
 801374e:	2300      	movs	r3, #0
 8013750:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013752:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013756:	4618      	mov	r0, r3
 8013758:	3720      	adds	r7, #32
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}
 801375e:	bf00      	nop
 8013760:	0801940c 	.word	0x0801940c
 8013764:	080195f8 	.word	0x080195f8
 8013768:	08019460 	.word	0x08019460
 801376c:	08019618 	.word	0x08019618
 8013770:	08019638 	.word	0x08019638
 8013774:	0801965c 	.word	0x0801965c
 8013778:	08019680 	.word	0x08019680
 801377c:	080196a4 	.word	0x080196a4

08013780 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b086      	sub	sp, #24
 8013784:	af00      	add	r7, sp, #0
 8013786:	60f8      	str	r0, [r7, #12]
 8013788:	60b9      	str	r1, [r7, #8]
 801378a:	4613      	mov	r3, r2
 801378c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d101      	bne.n	8013798 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013794:	4b39      	ldr	r3, [pc, #228]	; (801387c <udp_bind+0xfc>)
 8013796:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d109      	bne.n	80137b2 <udp_bind+0x32>
 801379e:	4b38      	ldr	r3, [pc, #224]	; (8013880 <udp_bind+0x100>)
 80137a0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80137a4:	4937      	ldr	r1, [pc, #220]	; (8013884 <udp_bind+0x104>)
 80137a6:	4838      	ldr	r0, [pc, #224]	; (8013888 <udp_bind+0x108>)
 80137a8:	f002 fcc2 	bl	8016130 <iprintf>
 80137ac:	f06f 030f 	mvn.w	r3, #15
 80137b0:	e060      	b.n	8013874 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80137b2:	2300      	movs	r3, #0
 80137b4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137b6:	4b35      	ldr	r3, [pc, #212]	; (801388c <udp_bind+0x10c>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	617b      	str	r3, [r7, #20]
 80137bc:	e009      	b.n	80137d2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80137be:	68fa      	ldr	r2, [r7, #12]
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d102      	bne.n	80137cc <udp_bind+0x4c>
      rebind = 1;
 80137c6:	2301      	movs	r3, #1
 80137c8:	74fb      	strb	r3, [r7, #19]
      break;
 80137ca:	e005      	b.n	80137d8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	617b      	str	r3, [r7, #20]
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d1f2      	bne.n	80137be <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80137d8:	88fb      	ldrh	r3, [r7, #6]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d109      	bne.n	80137f2 <udp_bind+0x72>
    port = udp_new_port();
 80137de:	f7ff fc35 	bl	801304c <udp_new_port>
 80137e2:	4603      	mov	r3, r0
 80137e4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80137e6:	88fb      	ldrh	r3, [r7, #6]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d12c      	bne.n	8013846 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80137ec:	f06f 0307 	mvn.w	r3, #7
 80137f0:	e040      	b.n	8013874 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80137f2:	4b26      	ldr	r3, [pc, #152]	; (801388c <udp_bind+0x10c>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	617b      	str	r3, [r7, #20]
 80137f8:	e022      	b.n	8013840 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80137fa:	68fa      	ldr	r2, [r7, #12]
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d01b      	beq.n	801383a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013802:	697b      	ldr	r3, [r7, #20]
 8013804:	8a5b      	ldrh	r3, [r3, #18]
 8013806:	88fa      	ldrh	r2, [r7, #6]
 8013808:	429a      	cmp	r2, r3
 801380a:	d116      	bne.n	801383a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801380c:	697b      	ldr	r3, [r7, #20]
 801380e:	681a      	ldr	r2, [r3, #0]
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013814:	429a      	cmp	r2, r3
 8013816:	d00d      	beq.n	8013834 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d00a      	beq.n	8013834 <udp_bind+0xb4>
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d006      	beq.n	8013834 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013826:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013828:	2b00      	cmp	r3, #0
 801382a:	d003      	beq.n	8013834 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d102      	bne.n	801383a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013834:	f06f 0307 	mvn.w	r3, #7
 8013838:	e01c      	b.n	8013874 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	68db      	ldr	r3, [r3, #12]
 801383e:	617b      	str	r3, [r7, #20]
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d1d9      	bne.n	80137fa <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d002      	beq.n	8013852 <udp_bind+0xd2>
 801384c:	68bb      	ldr	r3, [r7, #8]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	e000      	b.n	8013854 <udp_bind+0xd4>
 8013852:	2300      	movs	r3, #0
 8013854:	68fa      	ldr	r2, [r7, #12]
 8013856:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	88fa      	ldrh	r2, [r7, #6]
 801385c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801385e:	7cfb      	ldrb	r3, [r7, #19]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d106      	bne.n	8013872 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013864:	4b09      	ldr	r3, [pc, #36]	; (801388c <udp_bind+0x10c>)
 8013866:	681a      	ldr	r2, [r3, #0]
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801386c:	4a07      	ldr	r2, [pc, #28]	; (801388c <udp_bind+0x10c>)
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013872:	2300      	movs	r3, #0
}
 8013874:	4618      	mov	r0, r3
 8013876:	3718      	adds	r7, #24
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}
 801387c:	08019f30 	.word	0x08019f30
 8013880:	0801940c 	.word	0x0801940c
 8013884:	080196d4 	.word	0x080196d4
 8013888:	08019460 	.word	0x08019460
 801388c:	2000974c 	.word	0x2000974c

08013890 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b086      	sub	sp, #24
 8013894:	af00      	add	r7, sp, #0
 8013896:	60f8      	str	r0, [r7, #12]
 8013898:	60b9      	str	r1, [r7, #8]
 801389a:	4613      	mov	r3, r2
 801389c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d109      	bne.n	80138b8 <udp_connect+0x28>
 80138a4:	4b2c      	ldr	r3, [pc, #176]	; (8013958 <udp_connect+0xc8>)
 80138a6:	f240 4235 	movw	r2, #1077	; 0x435
 80138aa:	492c      	ldr	r1, [pc, #176]	; (801395c <udp_connect+0xcc>)
 80138ac:	482c      	ldr	r0, [pc, #176]	; (8013960 <udp_connect+0xd0>)
 80138ae:	f002 fc3f 	bl	8016130 <iprintf>
 80138b2:	f06f 030f 	mvn.w	r3, #15
 80138b6:	e04b      	b.n	8013950 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d109      	bne.n	80138d2 <udp_connect+0x42>
 80138be:	4b26      	ldr	r3, [pc, #152]	; (8013958 <udp_connect+0xc8>)
 80138c0:	f240 4236 	movw	r2, #1078	; 0x436
 80138c4:	4927      	ldr	r1, [pc, #156]	; (8013964 <udp_connect+0xd4>)
 80138c6:	4826      	ldr	r0, [pc, #152]	; (8013960 <udp_connect+0xd0>)
 80138c8:	f002 fc32 	bl	8016130 <iprintf>
 80138cc:	f06f 030f 	mvn.w	r3, #15
 80138d0:	e03e      	b.n	8013950 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	8a5b      	ldrh	r3, [r3, #18]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d10f      	bne.n	80138fa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80138da:	68f9      	ldr	r1, [r7, #12]
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	8a5b      	ldrh	r3, [r3, #18]
 80138e0:	461a      	mov	r2, r3
 80138e2:	68f8      	ldr	r0, [r7, #12]
 80138e4:	f7ff ff4c 	bl	8013780 <udp_bind>
 80138e8:	4603      	mov	r3, r0
 80138ea:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80138ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d002      	beq.n	80138fa <udp_connect+0x6a>
      return err;
 80138f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80138f8:	e02a      	b.n	8013950 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80138fa:	68bb      	ldr	r3, [r7, #8]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d002      	beq.n	8013906 <udp_connect+0x76>
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	e000      	b.n	8013908 <udp_connect+0x78>
 8013906:	2300      	movs	r3, #0
 8013908:	68fa      	ldr	r2, [r7, #12]
 801390a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	88fa      	ldrh	r2, [r7, #6]
 8013910:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	7c1b      	ldrb	r3, [r3, #16]
 8013916:	f043 0304 	orr.w	r3, r3, #4
 801391a:	b2da      	uxtb	r2, r3
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013920:	4b11      	ldr	r3, [pc, #68]	; (8013968 <udp_connect+0xd8>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	617b      	str	r3, [r7, #20]
 8013926:	e008      	b.n	801393a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013928:	68fa      	ldr	r2, [r7, #12]
 801392a:	697b      	ldr	r3, [r7, #20]
 801392c:	429a      	cmp	r2, r3
 801392e:	d101      	bne.n	8013934 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013930:	2300      	movs	r3, #0
 8013932:	e00d      	b.n	8013950 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	68db      	ldr	r3, [r3, #12]
 8013938:	617b      	str	r3, [r7, #20]
 801393a:	697b      	ldr	r3, [r7, #20]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d1f3      	bne.n	8013928 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013940:	4b09      	ldr	r3, [pc, #36]	; (8013968 <udp_connect+0xd8>)
 8013942:	681a      	ldr	r2, [r3, #0]
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013948:	4a07      	ldr	r2, [pc, #28]	; (8013968 <udp_connect+0xd8>)
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801394e:	2300      	movs	r3, #0
}
 8013950:	4618      	mov	r0, r3
 8013952:	3718      	adds	r7, #24
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}
 8013958:	0801940c 	.word	0x0801940c
 801395c:	080196ec 	.word	0x080196ec
 8013960:	08019460 	.word	0x08019460
 8013964:	08019708 	.word	0x08019708
 8013968:	2000974c 	.word	0x2000974c

0801396c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d107      	bne.n	801398a <udp_disconnect+0x1e>
 801397a:	4b0d      	ldr	r3, [pc, #52]	; (80139b0 <udp_disconnect+0x44>)
 801397c:	f240 426a 	movw	r2, #1130	; 0x46a
 8013980:	490c      	ldr	r1, [pc, #48]	; (80139b4 <udp_disconnect+0x48>)
 8013982:	480d      	ldr	r0, [pc, #52]	; (80139b8 <udp_disconnect+0x4c>)
 8013984:	f002 fbd4 	bl	8016130 <iprintf>
 8013988:	e00f      	b.n	80139aa <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2200      	movs	r2, #0
 801398e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2200      	movs	r2, #0
 8013994:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2200      	movs	r2, #0
 801399a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	7c1b      	ldrb	r3, [r3, #16]
 80139a0:	f023 0304 	bic.w	r3, r3, #4
 80139a4:	b2da      	uxtb	r2, r3
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	741a      	strb	r2, [r3, #16]
}
 80139aa:	3708      	adds	r7, #8
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	0801940c 	.word	0x0801940c
 80139b4:	08019724 	.word	0x08019724
 80139b8:	08019460 	.word	0x08019460

080139bc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b084      	sub	sp, #16
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	60f8      	str	r0, [r7, #12]
 80139c4:	60b9      	str	r1, [r7, #8]
 80139c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d107      	bne.n	80139de <udp_recv+0x22>
 80139ce:	4b08      	ldr	r3, [pc, #32]	; (80139f0 <udp_recv+0x34>)
 80139d0:	f240 428a 	movw	r2, #1162	; 0x48a
 80139d4:	4907      	ldr	r1, [pc, #28]	; (80139f4 <udp_recv+0x38>)
 80139d6:	4808      	ldr	r0, [pc, #32]	; (80139f8 <udp_recv+0x3c>)
 80139d8:	f002 fbaa 	bl	8016130 <iprintf>
 80139dc:	e005      	b.n	80139ea <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	68ba      	ldr	r2, [r7, #8]
 80139e2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	687a      	ldr	r2, [r7, #4]
 80139e8:	61da      	str	r2, [r3, #28]
}
 80139ea:	3710      	adds	r7, #16
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}
 80139f0:	0801940c 	.word	0x0801940c
 80139f4:	08019740 	.word	0x08019740
 80139f8:	08019460 	.word	0x08019460

080139fc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b084      	sub	sp, #16
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d107      	bne.n	8013a1a <udp_remove+0x1e>
 8013a0a:	4b19      	ldr	r3, [pc, #100]	; (8013a70 <udp_remove+0x74>)
 8013a0c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013a10:	4918      	ldr	r1, [pc, #96]	; (8013a74 <udp_remove+0x78>)
 8013a12:	4819      	ldr	r0, [pc, #100]	; (8013a78 <udp_remove+0x7c>)
 8013a14:	f002 fb8c 	bl	8016130 <iprintf>
 8013a18:	e026      	b.n	8013a68 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013a1a:	4b18      	ldr	r3, [pc, #96]	; (8013a7c <udp_remove+0x80>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	687a      	ldr	r2, [r7, #4]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d105      	bne.n	8013a30 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013a24:	4b15      	ldr	r3, [pc, #84]	; (8013a7c <udp_remove+0x80>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	68db      	ldr	r3, [r3, #12]
 8013a2a:	4a14      	ldr	r2, [pc, #80]	; (8013a7c <udp_remove+0x80>)
 8013a2c:	6013      	str	r3, [r2, #0]
 8013a2e:	e017      	b.n	8013a60 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013a30:	4b12      	ldr	r3, [pc, #72]	; (8013a7c <udp_remove+0x80>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	60fb      	str	r3, [r7, #12]
 8013a36:	e010      	b.n	8013a5a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	68db      	ldr	r3, [r3, #12]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d009      	beq.n	8013a54 <udp_remove+0x58>
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	68db      	ldr	r3, [r3, #12]
 8013a44:	687a      	ldr	r2, [r7, #4]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d104      	bne.n	8013a54 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	68da      	ldr	r2, [r3, #12]
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	60da      	str	r2, [r3, #12]
        break;
 8013a52:	e005      	b.n	8013a60 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	68db      	ldr	r3, [r3, #12]
 8013a58:	60fb      	str	r3, [r7, #12]
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d1eb      	bne.n	8013a38 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013a60:	6879      	ldr	r1, [r7, #4]
 8013a62:	2000      	movs	r0, #0
 8013a64:	f7f8 fe94 	bl	800c790 <memp_free>
}
 8013a68:	3710      	adds	r7, #16
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
 8013a6e:	bf00      	nop
 8013a70:	0801940c 	.word	0x0801940c
 8013a74:	08019758 	.word	0x08019758
 8013a78:	08019460 	.word	0x08019460
 8013a7c:	2000974c 	.word	0x2000974c

08013a80 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b082      	sub	sp, #8
 8013a84:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013a86:	2000      	movs	r0, #0
 8013a88:	f7f8 fe12 	bl	800c6b0 <memp_malloc>
 8013a8c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d007      	beq.n	8013aa4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013a94:	2220      	movs	r2, #32
 8013a96:	2100      	movs	r1, #0
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f002 fb41 	bl	8016120 <memset>
    pcb->ttl = UDP_TTL;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	22ff      	movs	r2, #255	; 0xff
 8013aa2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013aa4:	687b      	ldr	r3, [r7, #4]
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3708      	adds	r7, #8
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}
	...

08013ab0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b085      	sub	sp, #20
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d01e      	beq.n	8013afe <udp_netif_ip_addr_changed+0x4e>
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d01a      	beq.n	8013afe <udp_netif_ip_addr_changed+0x4e>
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d017      	beq.n	8013afe <udp_netif_ip_addr_changed+0x4e>
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d013      	beq.n	8013afe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013ad6:	4b0d      	ldr	r3, [pc, #52]	; (8013b0c <udp_netif_ip_addr_changed+0x5c>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	60fb      	str	r3, [r7, #12]
 8013adc:	e00c      	b.n	8013af8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	681a      	ldr	r2, [r3, #0]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d103      	bne.n	8013af2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	681a      	ldr	r2, [r3, #0]
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	68db      	ldr	r3, [r3, #12]
 8013af6:	60fb      	str	r3, [r7, #12]
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d1ef      	bne.n	8013ade <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013afe:	bf00      	nop
 8013b00:	3714      	adds	r7, #20
 8013b02:	46bd      	mov	sp, r7
 8013b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b08:	4770      	bx	lr
 8013b0a:	bf00      	nop
 8013b0c:	2000974c 	.word	0x2000974c

08013b10 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b082      	sub	sp, #8
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013b18:	4915      	ldr	r1, [pc, #84]	; (8013b70 <etharp_free_entry+0x60>)
 8013b1a:	687a      	ldr	r2, [r7, #4]
 8013b1c:	4613      	mov	r3, r2
 8013b1e:	005b      	lsls	r3, r3, #1
 8013b20:	4413      	add	r3, r2
 8013b22:	00db      	lsls	r3, r3, #3
 8013b24:	440b      	add	r3, r1
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d013      	beq.n	8013b54 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013b2c:	4910      	ldr	r1, [pc, #64]	; (8013b70 <etharp_free_entry+0x60>)
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	4613      	mov	r3, r2
 8013b32:	005b      	lsls	r3, r3, #1
 8013b34:	4413      	add	r3, r2
 8013b36:	00db      	lsls	r3, r3, #3
 8013b38:	440b      	add	r3, r1
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7f9 fc9d 	bl	800d47c <pbuf_free>
    arp_table[i].q = NULL;
 8013b42:	490b      	ldr	r1, [pc, #44]	; (8013b70 <etharp_free_entry+0x60>)
 8013b44:	687a      	ldr	r2, [r7, #4]
 8013b46:	4613      	mov	r3, r2
 8013b48:	005b      	lsls	r3, r3, #1
 8013b4a:	4413      	add	r3, r2
 8013b4c:	00db      	lsls	r3, r3, #3
 8013b4e:	440b      	add	r3, r1
 8013b50:	2200      	movs	r2, #0
 8013b52:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013b54:	4906      	ldr	r1, [pc, #24]	; (8013b70 <etharp_free_entry+0x60>)
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	4613      	mov	r3, r2
 8013b5a:	005b      	lsls	r3, r3, #1
 8013b5c:	4413      	add	r3, r2
 8013b5e:	00db      	lsls	r3, r3, #3
 8013b60:	440b      	add	r3, r1
 8013b62:	3314      	adds	r3, #20
 8013b64:	2200      	movs	r2, #0
 8013b66:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013b68:	bf00      	nop
 8013b6a:	3708      	adds	r7, #8
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}
 8013b70:	20009750 	.word	0x20009750

08013b74 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b082      	sub	sp, #8
 8013b78:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	607b      	str	r3, [r7, #4]
 8013b7e:	e096      	b.n	8013cae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013b80:	494f      	ldr	r1, [pc, #316]	; (8013cc0 <etharp_tmr+0x14c>)
 8013b82:	687a      	ldr	r2, [r7, #4]
 8013b84:	4613      	mov	r3, r2
 8013b86:	005b      	lsls	r3, r3, #1
 8013b88:	4413      	add	r3, r2
 8013b8a:	00db      	lsls	r3, r3, #3
 8013b8c:	440b      	add	r3, r1
 8013b8e:	3314      	adds	r3, #20
 8013b90:	781b      	ldrb	r3, [r3, #0]
 8013b92:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013b94:	78fb      	ldrb	r3, [r7, #3]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	f000 8086 	beq.w	8013ca8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013b9c:	4948      	ldr	r1, [pc, #288]	; (8013cc0 <etharp_tmr+0x14c>)
 8013b9e:	687a      	ldr	r2, [r7, #4]
 8013ba0:	4613      	mov	r3, r2
 8013ba2:	005b      	lsls	r3, r3, #1
 8013ba4:	4413      	add	r3, r2
 8013ba6:	00db      	lsls	r3, r3, #3
 8013ba8:	440b      	add	r3, r1
 8013baa:	3312      	adds	r3, #18
 8013bac:	881b      	ldrh	r3, [r3, #0]
 8013bae:	3301      	adds	r3, #1
 8013bb0:	b298      	uxth	r0, r3
 8013bb2:	4943      	ldr	r1, [pc, #268]	; (8013cc0 <etharp_tmr+0x14c>)
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	4613      	mov	r3, r2
 8013bb8:	005b      	lsls	r3, r3, #1
 8013bba:	4413      	add	r3, r2
 8013bbc:	00db      	lsls	r3, r3, #3
 8013bbe:	440b      	add	r3, r1
 8013bc0:	3312      	adds	r3, #18
 8013bc2:	4602      	mov	r2, r0
 8013bc4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013bc6:	493e      	ldr	r1, [pc, #248]	; (8013cc0 <etharp_tmr+0x14c>)
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	4613      	mov	r3, r2
 8013bcc:	005b      	lsls	r3, r3, #1
 8013bce:	4413      	add	r3, r2
 8013bd0:	00db      	lsls	r3, r3, #3
 8013bd2:	440b      	add	r3, r1
 8013bd4:	3312      	adds	r3, #18
 8013bd6:	881b      	ldrh	r3, [r3, #0]
 8013bd8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013bdc:	d215      	bcs.n	8013c0a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013bde:	4938      	ldr	r1, [pc, #224]	; (8013cc0 <etharp_tmr+0x14c>)
 8013be0:	687a      	ldr	r2, [r7, #4]
 8013be2:	4613      	mov	r3, r2
 8013be4:	005b      	lsls	r3, r3, #1
 8013be6:	4413      	add	r3, r2
 8013be8:	00db      	lsls	r3, r3, #3
 8013bea:	440b      	add	r3, r1
 8013bec:	3314      	adds	r3, #20
 8013bee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d10e      	bne.n	8013c12 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013bf4:	4932      	ldr	r1, [pc, #200]	; (8013cc0 <etharp_tmr+0x14c>)
 8013bf6:	687a      	ldr	r2, [r7, #4]
 8013bf8:	4613      	mov	r3, r2
 8013bfa:	005b      	lsls	r3, r3, #1
 8013bfc:	4413      	add	r3, r2
 8013bfe:	00db      	lsls	r3, r3, #3
 8013c00:	440b      	add	r3, r1
 8013c02:	3312      	adds	r3, #18
 8013c04:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013c06:	2b04      	cmp	r3, #4
 8013c08:	d903      	bls.n	8013c12 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f7ff ff80 	bl	8013b10 <etharp_free_entry>
 8013c10:	e04a      	b.n	8013ca8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013c12:	492b      	ldr	r1, [pc, #172]	; (8013cc0 <etharp_tmr+0x14c>)
 8013c14:	687a      	ldr	r2, [r7, #4]
 8013c16:	4613      	mov	r3, r2
 8013c18:	005b      	lsls	r3, r3, #1
 8013c1a:	4413      	add	r3, r2
 8013c1c:	00db      	lsls	r3, r3, #3
 8013c1e:	440b      	add	r3, r1
 8013c20:	3314      	adds	r3, #20
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	2b03      	cmp	r3, #3
 8013c26:	d10a      	bne.n	8013c3e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013c28:	4925      	ldr	r1, [pc, #148]	; (8013cc0 <etharp_tmr+0x14c>)
 8013c2a:	687a      	ldr	r2, [r7, #4]
 8013c2c:	4613      	mov	r3, r2
 8013c2e:	005b      	lsls	r3, r3, #1
 8013c30:	4413      	add	r3, r2
 8013c32:	00db      	lsls	r3, r3, #3
 8013c34:	440b      	add	r3, r1
 8013c36:	3314      	adds	r3, #20
 8013c38:	2204      	movs	r2, #4
 8013c3a:	701a      	strb	r2, [r3, #0]
 8013c3c:	e034      	b.n	8013ca8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013c3e:	4920      	ldr	r1, [pc, #128]	; (8013cc0 <etharp_tmr+0x14c>)
 8013c40:	687a      	ldr	r2, [r7, #4]
 8013c42:	4613      	mov	r3, r2
 8013c44:	005b      	lsls	r3, r3, #1
 8013c46:	4413      	add	r3, r2
 8013c48:	00db      	lsls	r3, r3, #3
 8013c4a:	440b      	add	r3, r1
 8013c4c:	3314      	adds	r3, #20
 8013c4e:	781b      	ldrb	r3, [r3, #0]
 8013c50:	2b04      	cmp	r3, #4
 8013c52:	d10a      	bne.n	8013c6a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013c54:	491a      	ldr	r1, [pc, #104]	; (8013cc0 <etharp_tmr+0x14c>)
 8013c56:	687a      	ldr	r2, [r7, #4]
 8013c58:	4613      	mov	r3, r2
 8013c5a:	005b      	lsls	r3, r3, #1
 8013c5c:	4413      	add	r3, r2
 8013c5e:	00db      	lsls	r3, r3, #3
 8013c60:	440b      	add	r3, r1
 8013c62:	3314      	adds	r3, #20
 8013c64:	2202      	movs	r2, #2
 8013c66:	701a      	strb	r2, [r3, #0]
 8013c68:	e01e      	b.n	8013ca8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013c6a:	4915      	ldr	r1, [pc, #84]	; (8013cc0 <etharp_tmr+0x14c>)
 8013c6c:	687a      	ldr	r2, [r7, #4]
 8013c6e:	4613      	mov	r3, r2
 8013c70:	005b      	lsls	r3, r3, #1
 8013c72:	4413      	add	r3, r2
 8013c74:	00db      	lsls	r3, r3, #3
 8013c76:	440b      	add	r3, r1
 8013c78:	3314      	adds	r3, #20
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d113      	bne.n	8013ca8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013c80:	490f      	ldr	r1, [pc, #60]	; (8013cc0 <etharp_tmr+0x14c>)
 8013c82:	687a      	ldr	r2, [r7, #4]
 8013c84:	4613      	mov	r3, r2
 8013c86:	005b      	lsls	r3, r3, #1
 8013c88:	4413      	add	r3, r2
 8013c8a:	00db      	lsls	r3, r3, #3
 8013c8c:	440b      	add	r3, r1
 8013c8e:	3308      	adds	r3, #8
 8013c90:	6818      	ldr	r0, [r3, #0]
 8013c92:	687a      	ldr	r2, [r7, #4]
 8013c94:	4613      	mov	r3, r2
 8013c96:	005b      	lsls	r3, r3, #1
 8013c98:	4413      	add	r3, r2
 8013c9a:	00db      	lsls	r3, r3, #3
 8013c9c:	4a08      	ldr	r2, [pc, #32]	; (8013cc0 <etharp_tmr+0x14c>)
 8013c9e:	4413      	add	r3, r2
 8013ca0:	3304      	adds	r3, #4
 8013ca2:	4619      	mov	r1, r3
 8013ca4:	f000 fe6e 	bl	8014984 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	3301      	adds	r3, #1
 8013cac:	607b      	str	r3, [r7, #4]
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2b09      	cmp	r3, #9
 8013cb2:	f77f af65 	ble.w	8013b80 <etharp_tmr+0xc>
      }
    }
  }
}
 8013cb6:	bf00      	nop
 8013cb8:	bf00      	nop
 8013cba:	3708      	adds	r7, #8
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}
 8013cc0:	20009750 	.word	0x20009750

08013cc4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b08a      	sub	sp, #40	; 0x28
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	460b      	mov	r3, r1
 8013cce:	607a      	str	r2, [r7, #4]
 8013cd0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013cd2:	230a      	movs	r3, #10
 8013cd4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013cd6:	230a      	movs	r3, #10
 8013cd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013cda:	230a      	movs	r3, #10
 8013cdc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013ce2:	230a      	movs	r3, #10
 8013ce4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	83bb      	strh	r3, [r7, #28]
 8013cea:	2300      	movs	r3, #0
 8013cec:	837b      	strh	r3, [r7, #26]
 8013cee:	2300      	movs	r3, #0
 8013cf0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	843b      	strh	r3, [r7, #32]
 8013cf6:	e0ae      	b.n	8013e56 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013cf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cfc:	49a6      	ldr	r1, [pc, #664]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013cfe:	4613      	mov	r3, r2
 8013d00:	005b      	lsls	r3, r3, #1
 8013d02:	4413      	add	r3, r2
 8013d04:	00db      	lsls	r3, r3, #3
 8013d06:	440b      	add	r3, r1
 8013d08:	3314      	adds	r3, #20
 8013d0a:	781b      	ldrb	r3, [r3, #0]
 8013d0c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013d0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013d12:	2b0a      	cmp	r3, #10
 8013d14:	d105      	bne.n	8013d22 <etharp_find_entry+0x5e>
 8013d16:	7dfb      	ldrb	r3, [r7, #23]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d102      	bne.n	8013d22 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013d1c:	8c3b      	ldrh	r3, [r7, #32]
 8013d1e:	847b      	strh	r3, [r7, #34]	; 0x22
 8013d20:	e095      	b.n	8013e4e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013d22:	7dfb      	ldrb	r3, [r7, #23]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	f000 8092 	beq.w	8013e4e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013d2a:	7dfb      	ldrb	r3, [r7, #23]
 8013d2c:	2b01      	cmp	r3, #1
 8013d2e:	d009      	beq.n	8013d44 <etharp_find_entry+0x80>
 8013d30:	7dfb      	ldrb	r3, [r7, #23]
 8013d32:	2b01      	cmp	r3, #1
 8013d34:	d806      	bhi.n	8013d44 <etharp_find_entry+0x80>
 8013d36:	4b99      	ldr	r3, [pc, #612]	; (8013f9c <etharp_find_entry+0x2d8>)
 8013d38:	f240 1223 	movw	r2, #291	; 0x123
 8013d3c:	4998      	ldr	r1, [pc, #608]	; (8013fa0 <etharp_find_entry+0x2dc>)
 8013d3e:	4899      	ldr	r0, [pc, #612]	; (8013fa4 <etharp_find_entry+0x2e0>)
 8013d40:	f002 f9f6 	bl	8016130 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d020      	beq.n	8013d8c <etharp_find_entry+0xc8>
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	6819      	ldr	r1, [r3, #0]
 8013d4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d52:	4891      	ldr	r0, [pc, #580]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013d54:	4613      	mov	r3, r2
 8013d56:	005b      	lsls	r3, r3, #1
 8013d58:	4413      	add	r3, r2
 8013d5a:	00db      	lsls	r3, r3, #3
 8013d5c:	4403      	add	r3, r0
 8013d5e:	3304      	adds	r3, #4
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	4299      	cmp	r1, r3
 8013d64:	d112      	bne.n	8013d8c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d00c      	beq.n	8013d86 <etharp_find_entry+0xc2>
 8013d6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d70:	4989      	ldr	r1, [pc, #548]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013d72:	4613      	mov	r3, r2
 8013d74:	005b      	lsls	r3, r3, #1
 8013d76:	4413      	add	r3, r2
 8013d78:	00db      	lsls	r3, r3, #3
 8013d7a:	440b      	add	r3, r1
 8013d7c:	3308      	adds	r3, #8
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	687a      	ldr	r2, [r7, #4]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d102      	bne.n	8013d8c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013d86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013d8a:	e100      	b.n	8013f8e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013d8c:	7dfb      	ldrb	r3, [r7, #23]
 8013d8e:	2b01      	cmp	r3, #1
 8013d90:	d140      	bne.n	8013e14 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013d92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d96:	4980      	ldr	r1, [pc, #512]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013d98:	4613      	mov	r3, r2
 8013d9a:	005b      	lsls	r3, r3, #1
 8013d9c:	4413      	add	r3, r2
 8013d9e:	00db      	lsls	r3, r3, #3
 8013da0:	440b      	add	r3, r1
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d01a      	beq.n	8013dde <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013da8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dac:	497a      	ldr	r1, [pc, #488]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013dae:	4613      	mov	r3, r2
 8013db0:	005b      	lsls	r3, r3, #1
 8013db2:	4413      	add	r3, r2
 8013db4:	00db      	lsls	r3, r3, #3
 8013db6:	440b      	add	r3, r1
 8013db8:	3312      	adds	r3, #18
 8013dba:	881b      	ldrh	r3, [r3, #0]
 8013dbc:	8bba      	ldrh	r2, [r7, #28]
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d845      	bhi.n	8013e4e <etharp_find_entry+0x18a>
            old_queue = i;
 8013dc2:	8c3b      	ldrh	r3, [r7, #32]
 8013dc4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013dc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013dca:	4973      	ldr	r1, [pc, #460]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013dcc:	4613      	mov	r3, r2
 8013dce:	005b      	lsls	r3, r3, #1
 8013dd0:	4413      	add	r3, r2
 8013dd2:	00db      	lsls	r3, r3, #3
 8013dd4:	440b      	add	r3, r1
 8013dd6:	3312      	adds	r3, #18
 8013dd8:	881b      	ldrh	r3, [r3, #0]
 8013dda:	83bb      	strh	r3, [r7, #28]
 8013ddc:	e037      	b.n	8013e4e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013dde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013de2:	496d      	ldr	r1, [pc, #436]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013de4:	4613      	mov	r3, r2
 8013de6:	005b      	lsls	r3, r3, #1
 8013de8:	4413      	add	r3, r2
 8013dea:	00db      	lsls	r3, r3, #3
 8013dec:	440b      	add	r3, r1
 8013dee:	3312      	adds	r3, #18
 8013df0:	881b      	ldrh	r3, [r3, #0]
 8013df2:	8b7a      	ldrh	r2, [r7, #26]
 8013df4:	429a      	cmp	r2, r3
 8013df6:	d82a      	bhi.n	8013e4e <etharp_find_entry+0x18a>
            old_pending = i;
 8013df8:	8c3b      	ldrh	r3, [r7, #32]
 8013dfa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013dfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e00:	4965      	ldr	r1, [pc, #404]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013e02:	4613      	mov	r3, r2
 8013e04:	005b      	lsls	r3, r3, #1
 8013e06:	4413      	add	r3, r2
 8013e08:	00db      	lsls	r3, r3, #3
 8013e0a:	440b      	add	r3, r1
 8013e0c:	3312      	adds	r3, #18
 8013e0e:	881b      	ldrh	r3, [r3, #0]
 8013e10:	837b      	strh	r3, [r7, #26]
 8013e12:	e01c      	b.n	8013e4e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013e14:	7dfb      	ldrb	r3, [r7, #23]
 8013e16:	2b01      	cmp	r3, #1
 8013e18:	d919      	bls.n	8013e4e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013e1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e1e:	495e      	ldr	r1, [pc, #376]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013e20:	4613      	mov	r3, r2
 8013e22:	005b      	lsls	r3, r3, #1
 8013e24:	4413      	add	r3, r2
 8013e26:	00db      	lsls	r3, r3, #3
 8013e28:	440b      	add	r3, r1
 8013e2a:	3312      	adds	r3, #18
 8013e2c:	881b      	ldrh	r3, [r3, #0]
 8013e2e:	8b3a      	ldrh	r2, [r7, #24]
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d80c      	bhi.n	8013e4e <etharp_find_entry+0x18a>
            old_stable = i;
 8013e34:	8c3b      	ldrh	r3, [r7, #32]
 8013e36:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013e38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e3c:	4956      	ldr	r1, [pc, #344]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013e3e:	4613      	mov	r3, r2
 8013e40:	005b      	lsls	r3, r3, #1
 8013e42:	4413      	add	r3, r2
 8013e44:	00db      	lsls	r3, r3, #3
 8013e46:	440b      	add	r3, r1
 8013e48:	3312      	adds	r3, #18
 8013e4a:	881b      	ldrh	r3, [r3, #0]
 8013e4c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e4e:	8c3b      	ldrh	r3, [r7, #32]
 8013e50:	3301      	adds	r3, #1
 8013e52:	b29b      	uxth	r3, r3
 8013e54:	843b      	strh	r3, [r7, #32]
 8013e56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e5a:	2b09      	cmp	r3, #9
 8013e5c:	f77f af4c 	ble.w	8013cf8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013e60:	7afb      	ldrb	r3, [r7, #11]
 8013e62:	f003 0302 	and.w	r3, r3, #2
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d108      	bne.n	8013e7c <etharp_find_entry+0x1b8>
 8013e6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013e6e:	2b0a      	cmp	r3, #10
 8013e70:	d107      	bne.n	8013e82 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013e72:	7afb      	ldrb	r3, [r7, #11]
 8013e74:	f003 0301 	and.w	r3, r3, #1
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d102      	bne.n	8013e82 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e80:	e085      	b.n	8013f8e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013e82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013e86:	2b09      	cmp	r3, #9
 8013e88:	dc02      	bgt.n	8013e90 <etharp_find_entry+0x1cc>
    i = empty;
 8013e8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e8c:	843b      	strh	r3, [r7, #32]
 8013e8e:	e039      	b.n	8013f04 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013e90:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013e94:	2b09      	cmp	r3, #9
 8013e96:	dc14      	bgt.n	8013ec2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013e98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e9a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013e9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ea0:	493d      	ldr	r1, [pc, #244]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	005b      	lsls	r3, r3, #1
 8013ea6:	4413      	add	r3, r2
 8013ea8:	00db      	lsls	r3, r3, #3
 8013eaa:	440b      	add	r3, r1
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d018      	beq.n	8013ee4 <etharp_find_entry+0x220>
 8013eb2:	4b3a      	ldr	r3, [pc, #232]	; (8013f9c <etharp_find_entry+0x2d8>)
 8013eb4:	f240 126d 	movw	r2, #365	; 0x16d
 8013eb8:	493b      	ldr	r1, [pc, #236]	; (8013fa8 <etharp_find_entry+0x2e4>)
 8013eba:	483a      	ldr	r0, [pc, #232]	; (8013fa4 <etharp_find_entry+0x2e0>)
 8013ebc:	f002 f938 	bl	8016130 <iprintf>
 8013ec0:	e010      	b.n	8013ee4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013ec2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013ec6:	2b09      	cmp	r3, #9
 8013ec8:	dc02      	bgt.n	8013ed0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013eca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013ecc:	843b      	strh	r3, [r7, #32]
 8013ece:	e009      	b.n	8013ee4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013ed0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013ed4:	2b09      	cmp	r3, #9
 8013ed6:	dc02      	bgt.n	8013ede <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013ed8:	8bfb      	ldrh	r3, [r7, #30]
 8013eda:	843b      	strh	r3, [r7, #32]
 8013edc:	e002      	b.n	8013ee4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013ede:	f04f 33ff 	mov.w	r3, #4294967295
 8013ee2:	e054      	b.n	8013f8e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013ee4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013ee8:	2b09      	cmp	r3, #9
 8013eea:	dd06      	ble.n	8013efa <etharp_find_entry+0x236>
 8013eec:	4b2b      	ldr	r3, [pc, #172]	; (8013f9c <etharp_find_entry+0x2d8>)
 8013eee:	f240 127f 	movw	r2, #383	; 0x17f
 8013ef2:	492e      	ldr	r1, [pc, #184]	; (8013fac <etharp_find_entry+0x2e8>)
 8013ef4:	482b      	ldr	r0, [pc, #172]	; (8013fa4 <etharp_find_entry+0x2e0>)
 8013ef6:	f002 f91b 	bl	8016130 <iprintf>
    etharp_free_entry(i);
 8013efa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7ff fe06 	bl	8013b10 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013f04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f08:	2b09      	cmp	r3, #9
 8013f0a:	dd06      	ble.n	8013f1a <etharp_find_entry+0x256>
 8013f0c:	4b23      	ldr	r3, [pc, #140]	; (8013f9c <etharp_find_entry+0x2d8>)
 8013f0e:	f240 1283 	movw	r2, #387	; 0x183
 8013f12:	4926      	ldr	r1, [pc, #152]	; (8013fac <etharp_find_entry+0x2e8>)
 8013f14:	4823      	ldr	r0, [pc, #140]	; (8013fa4 <etharp_find_entry+0x2e0>)
 8013f16:	f002 f90b 	bl	8016130 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013f1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f1e:	491e      	ldr	r1, [pc, #120]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013f20:	4613      	mov	r3, r2
 8013f22:	005b      	lsls	r3, r3, #1
 8013f24:	4413      	add	r3, r2
 8013f26:	00db      	lsls	r3, r3, #3
 8013f28:	440b      	add	r3, r1
 8013f2a:	3314      	adds	r3, #20
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d006      	beq.n	8013f40 <etharp_find_entry+0x27c>
 8013f32:	4b1a      	ldr	r3, [pc, #104]	; (8013f9c <etharp_find_entry+0x2d8>)
 8013f34:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013f38:	491d      	ldr	r1, [pc, #116]	; (8013fb0 <etharp_find_entry+0x2ec>)
 8013f3a:	481a      	ldr	r0, [pc, #104]	; (8013fa4 <etharp_find_entry+0x2e0>)
 8013f3c:	f002 f8f8 	bl	8016130 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d00b      	beq.n	8013f5e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013f46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	6819      	ldr	r1, [r3, #0]
 8013f4e:	4812      	ldr	r0, [pc, #72]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013f50:	4613      	mov	r3, r2
 8013f52:	005b      	lsls	r3, r3, #1
 8013f54:	4413      	add	r3, r2
 8013f56:	00db      	lsls	r3, r3, #3
 8013f58:	4403      	add	r3, r0
 8013f5a:	3304      	adds	r3, #4
 8013f5c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013f5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f62:	490d      	ldr	r1, [pc, #52]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013f64:	4613      	mov	r3, r2
 8013f66:	005b      	lsls	r3, r3, #1
 8013f68:	4413      	add	r3, r2
 8013f6a:	00db      	lsls	r3, r3, #3
 8013f6c:	440b      	add	r3, r1
 8013f6e:	3312      	adds	r3, #18
 8013f70:	2200      	movs	r2, #0
 8013f72:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013f74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f78:	4907      	ldr	r1, [pc, #28]	; (8013f98 <etharp_find_entry+0x2d4>)
 8013f7a:	4613      	mov	r3, r2
 8013f7c:	005b      	lsls	r3, r3, #1
 8013f7e:	4413      	add	r3, r2
 8013f80:	00db      	lsls	r3, r3, #3
 8013f82:	440b      	add	r3, r1
 8013f84:	3308      	adds	r3, #8
 8013f86:	687a      	ldr	r2, [r7, #4]
 8013f88:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013f8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3728      	adds	r7, #40	; 0x28
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	20009750 	.word	0x20009750
 8013f9c:	08019770 	.word	0x08019770
 8013fa0:	080197a8 	.word	0x080197a8
 8013fa4:	080197e8 	.word	0x080197e8
 8013fa8:	08019810 	.word	0x08019810
 8013fac:	08019828 	.word	0x08019828
 8013fb0:	0801983c 	.word	0x0801983c

08013fb4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b088      	sub	sp, #32
 8013fb8:	af02      	add	r7, sp, #8
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	607a      	str	r2, [r7, #4]
 8013fc0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013fc8:	2b06      	cmp	r3, #6
 8013fca:	d006      	beq.n	8013fda <etharp_update_arp_entry+0x26>
 8013fcc:	4b48      	ldr	r3, [pc, #288]	; (80140f0 <etharp_update_arp_entry+0x13c>)
 8013fce:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013fd2:	4948      	ldr	r1, [pc, #288]	; (80140f4 <etharp_update_arp_entry+0x140>)
 8013fd4:	4848      	ldr	r0, [pc, #288]	; (80140f8 <etharp_update_arp_entry+0x144>)
 8013fd6:	f002 f8ab 	bl	8016130 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d012      	beq.n	8014006 <etharp_update_arp_entry+0x52>
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d00e      	beq.n	8014006 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	68f9      	ldr	r1, [r7, #12]
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f001 f8fe 	bl	80151f0 <ip4_addr_isbroadcast_u32>
 8013ff4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d105      	bne.n	8014006 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014002:	2be0      	cmp	r3, #224	; 0xe0
 8014004:	d102      	bne.n	801400c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014006:	f06f 030f 	mvn.w	r3, #15
 801400a:	e06c      	b.n	80140e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801400c:	78fb      	ldrb	r3, [r7, #3]
 801400e:	68fa      	ldr	r2, [r7, #12]
 8014010:	4619      	mov	r1, r3
 8014012:	68b8      	ldr	r0, [r7, #8]
 8014014:	f7ff fe56 	bl	8013cc4 <etharp_find_entry>
 8014018:	4603      	mov	r3, r0
 801401a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801401c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014020:	2b00      	cmp	r3, #0
 8014022:	da02      	bge.n	801402a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014024:	8afb      	ldrh	r3, [r7, #22]
 8014026:	b25b      	sxtb	r3, r3
 8014028:	e05d      	b.n	80140e6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801402a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801402e:	4933      	ldr	r1, [pc, #204]	; (80140fc <etharp_update_arp_entry+0x148>)
 8014030:	4613      	mov	r3, r2
 8014032:	005b      	lsls	r3, r3, #1
 8014034:	4413      	add	r3, r2
 8014036:	00db      	lsls	r3, r3, #3
 8014038:	440b      	add	r3, r1
 801403a:	3314      	adds	r3, #20
 801403c:	2202      	movs	r2, #2
 801403e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014040:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014044:	492d      	ldr	r1, [pc, #180]	; (80140fc <etharp_update_arp_entry+0x148>)
 8014046:	4613      	mov	r3, r2
 8014048:	005b      	lsls	r3, r3, #1
 801404a:	4413      	add	r3, r2
 801404c:	00db      	lsls	r3, r3, #3
 801404e:	440b      	add	r3, r1
 8014050:	3308      	adds	r3, #8
 8014052:	68fa      	ldr	r2, [r7, #12]
 8014054:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014056:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801405a:	4613      	mov	r3, r2
 801405c:	005b      	lsls	r3, r3, #1
 801405e:	4413      	add	r3, r2
 8014060:	00db      	lsls	r3, r3, #3
 8014062:	3308      	adds	r3, #8
 8014064:	4a25      	ldr	r2, [pc, #148]	; (80140fc <etharp_update_arp_entry+0x148>)
 8014066:	4413      	add	r3, r2
 8014068:	3304      	adds	r3, #4
 801406a:	2206      	movs	r2, #6
 801406c:	6879      	ldr	r1, [r7, #4]
 801406e:	4618      	mov	r0, r3
 8014070:	f002 f848 	bl	8016104 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014074:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014078:	4920      	ldr	r1, [pc, #128]	; (80140fc <etharp_update_arp_entry+0x148>)
 801407a:	4613      	mov	r3, r2
 801407c:	005b      	lsls	r3, r3, #1
 801407e:	4413      	add	r3, r2
 8014080:	00db      	lsls	r3, r3, #3
 8014082:	440b      	add	r3, r1
 8014084:	3312      	adds	r3, #18
 8014086:	2200      	movs	r2, #0
 8014088:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801408a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801408e:	491b      	ldr	r1, [pc, #108]	; (80140fc <etharp_update_arp_entry+0x148>)
 8014090:	4613      	mov	r3, r2
 8014092:	005b      	lsls	r3, r3, #1
 8014094:	4413      	add	r3, r2
 8014096:	00db      	lsls	r3, r3, #3
 8014098:	440b      	add	r3, r1
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d021      	beq.n	80140e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80140a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80140a4:	4915      	ldr	r1, [pc, #84]	; (80140fc <etharp_update_arp_entry+0x148>)
 80140a6:	4613      	mov	r3, r2
 80140a8:	005b      	lsls	r3, r3, #1
 80140aa:	4413      	add	r3, r2
 80140ac:	00db      	lsls	r3, r3, #3
 80140ae:	440b      	add	r3, r1
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80140b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80140b8:	4910      	ldr	r1, [pc, #64]	; (80140fc <etharp_update_arp_entry+0x148>)
 80140ba:	4613      	mov	r3, r2
 80140bc:	005b      	lsls	r3, r3, #1
 80140be:	4413      	add	r3, r2
 80140c0:	00db      	lsls	r3, r3, #3
 80140c2:	440b      	add	r3, r1
 80140c4:	2200      	movs	r2, #0
 80140c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80140ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80140d2:	9300      	str	r3, [sp, #0]
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	6939      	ldr	r1, [r7, #16]
 80140d8:	68f8      	ldr	r0, [r7, #12]
 80140da:	f001 ff97 	bl	801600c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80140de:	6938      	ldr	r0, [r7, #16]
 80140e0:	f7f9 f9cc 	bl	800d47c <pbuf_free>
  }
  return ERR_OK;
 80140e4:	2300      	movs	r3, #0
}
 80140e6:	4618      	mov	r0, r3
 80140e8:	3718      	adds	r7, #24
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}
 80140ee:	bf00      	nop
 80140f0:	08019770 	.word	0x08019770
 80140f4:	08019868 	.word	0x08019868
 80140f8:	080197e8 	.word	0x080197e8
 80140fc:	20009750 	.word	0x20009750

08014100 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b084      	sub	sp, #16
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014108:	2300      	movs	r3, #0
 801410a:	60fb      	str	r3, [r7, #12]
 801410c:	e01e      	b.n	801414c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801410e:	4913      	ldr	r1, [pc, #76]	; (801415c <etharp_cleanup_netif+0x5c>)
 8014110:	68fa      	ldr	r2, [r7, #12]
 8014112:	4613      	mov	r3, r2
 8014114:	005b      	lsls	r3, r3, #1
 8014116:	4413      	add	r3, r2
 8014118:	00db      	lsls	r3, r3, #3
 801411a:	440b      	add	r3, r1
 801411c:	3314      	adds	r3, #20
 801411e:	781b      	ldrb	r3, [r3, #0]
 8014120:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014122:	7afb      	ldrb	r3, [r7, #11]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d00e      	beq.n	8014146 <etharp_cleanup_netif+0x46>
 8014128:	490c      	ldr	r1, [pc, #48]	; (801415c <etharp_cleanup_netif+0x5c>)
 801412a:	68fa      	ldr	r2, [r7, #12]
 801412c:	4613      	mov	r3, r2
 801412e:	005b      	lsls	r3, r3, #1
 8014130:	4413      	add	r3, r2
 8014132:	00db      	lsls	r3, r3, #3
 8014134:	440b      	add	r3, r1
 8014136:	3308      	adds	r3, #8
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	429a      	cmp	r2, r3
 801413e:	d102      	bne.n	8014146 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014140:	68f8      	ldr	r0, [r7, #12]
 8014142:	f7ff fce5 	bl	8013b10 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	3301      	adds	r3, #1
 801414a:	60fb      	str	r3, [r7, #12]
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2b09      	cmp	r3, #9
 8014150:	dddd      	ble.n	801410e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014152:	bf00      	nop
 8014154:	bf00      	nop
 8014156:	3710      	adds	r7, #16
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}
 801415c:	20009750 	.word	0x20009750

08014160 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014160:	b5b0      	push	{r4, r5, r7, lr}
 8014162:	b08a      	sub	sp, #40	; 0x28
 8014164:	af04      	add	r7, sp, #16
 8014166:	6078      	str	r0, [r7, #4]
 8014168:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d107      	bne.n	8014180 <etharp_input+0x20>
 8014170:	4b3d      	ldr	r3, [pc, #244]	; (8014268 <etharp_input+0x108>)
 8014172:	f240 228a 	movw	r2, #650	; 0x28a
 8014176:	493d      	ldr	r1, [pc, #244]	; (801426c <etharp_input+0x10c>)
 8014178:	483d      	ldr	r0, [pc, #244]	; (8014270 <etharp_input+0x110>)
 801417a:	f001 ffd9 	bl	8016130 <iprintf>
 801417e:	e06f      	b.n	8014260 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	685b      	ldr	r3, [r3, #4]
 8014184:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014186:	693b      	ldr	r3, [r7, #16]
 8014188:	881b      	ldrh	r3, [r3, #0]
 801418a:	b29b      	uxth	r3, r3
 801418c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014190:	d10c      	bne.n	80141ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014192:	693b      	ldr	r3, [r7, #16]
 8014194:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014196:	2b06      	cmp	r3, #6
 8014198:	d108      	bne.n	80141ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801419a:	693b      	ldr	r3, [r7, #16]
 801419c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801419e:	2b04      	cmp	r3, #4
 80141a0:	d104      	bne.n	80141ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	885b      	ldrh	r3, [r3, #2]
 80141a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80141a8:	2b08      	cmp	r3, #8
 80141aa:	d003      	beq.n	80141b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	f7f9 f965 	bl	800d47c <pbuf_free>
    return;
 80141b2:	e055      	b.n	8014260 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80141b4:	693b      	ldr	r3, [r7, #16]
 80141b6:	330e      	adds	r3, #14
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80141bc:	693b      	ldr	r3, [r7, #16]
 80141be:	3318      	adds	r3, #24
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	3304      	adds	r3, #4
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d102      	bne.n	80141d4 <etharp_input+0x74>
    for_us = 0;
 80141ce:	2300      	movs	r3, #0
 80141d0:	75fb      	strb	r3, [r7, #23]
 80141d2:	e009      	b.n	80141e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80141d4:	68ba      	ldr	r2, [r7, #8]
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	3304      	adds	r3, #4
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	429a      	cmp	r2, r3
 80141de:	bf0c      	ite	eq
 80141e0:	2301      	moveq	r3, #1
 80141e2:	2300      	movne	r3, #0
 80141e4:	b2db      	uxtb	r3, r3
 80141e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80141e8:	693b      	ldr	r3, [r7, #16]
 80141ea:	f103 0208 	add.w	r2, r3, #8
 80141ee:	7dfb      	ldrb	r3, [r7, #23]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d001      	beq.n	80141f8 <etharp_input+0x98>
 80141f4:	2301      	movs	r3, #1
 80141f6:	e000      	b.n	80141fa <etharp_input+0x9a>
 80141f8:	2302      	movs	r3, #2
 80141fa:	f107 010c 	add.w	r1, r7, #12
 80141fe:	6838      	ldr	r0, [r7, #0]
 8014200:	f7ff fed8 	bl	8013fb4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	88db      	ldrh	r3, [r3, #6]
 8014208:	b29b      	uxth	r3, r3
 801420a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801420e:	d003      	beq.n	8014218 <etharp_input+0xb8>
 8014210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014214:	d01e      	beq.n	8014254 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014216:	e020      	b.n	801425a <etharp_input+0xfa>
      if (for_us) {
 8014218:	7dfb      	ldrb	r3, [r7, #23]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d01c      	beq.n	8014258 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014224:	693b      	ldr	r3, [r7, #16]
 8014226:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801422a:	683b      	ldr	r3, [r7, #0]
 801422c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014234:	693a      	ldr	r2, [r7, #16]
 8014236:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014238:	2102      	movs	r1, #2
 801423a:	9103      	str	r1, [sp, #12]
 801423c:	f107 010c 	add.w	r1, r7, #12
 8014240:	9102      	str	r1, [sp, #8]
 8014242:	9201      	str	r2, [sp, #4]
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	462b      	mov	r3, r5
 8014248:	4622      	mov	r2, r4
 801424a:	4601      	mov	r1, r0
 801424c:	6838      	ldr	r0, [r7, #0]
 801424e:	f000 faeb 	bl	8014828 <etharp_raw>
      break;
 8014252:	e001      	b.n	8014258 <etharp_input+0xf8>
      break;
 8014254:	bf00      	nop
 8014256:	e000      	b.n	801425a <etharp_input+0xfa>
      break;
 8014258:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f7f9 f90e 	bl	800d47c <pbuf_free>
}
 8014260:	3718      	adds	r7, #24
 8014262:	46bd      	mov	sp, r7
 8014264:	bdb0      	pop	{r4, r5, r7, pc}
 8014266:	bf00      	nop
 8014268:	08019770 	.word	0x08019770
 801426c:	080198c0 	.word	0x080198c0
 8014270:	080197e8 	.word	0x080197e8

08014274 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b086      	sub	sp, #24
 8014278:	af02      	add	r7, sp, #8
 801427a:	60f8      	str	r0, [r7, #12]
 801427c:	60b9      	str	r1, [r7, #8]
 801427e:	4613      	mov	r3, r2
 8014280:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014282:	79fa      	ldrb	r2, [r7, #7]
 8014284:	4944      	ldr	r1, [pc, #272]	; (8014398 <etharp_output_to_arp_index+0x124>)
 8014286:	4613      	mov	r3, r2
 8014288:	005b      	lsls	r3, r3, #1
 801428a:	4413      	add	r3, r2
 801428c:	00db      	lsls	r3, r3, #3
 801428e:	440b      	add	r3, r1
 8014290:	3314      	adds	r3, #20
 8014292:	781b      	ldrb	r3, [r3, #0]
 8014294:	2b01      	cmp	r3, #1
 8014296:	d806      	bhi.n	80142a6 <etharp_output_to_arp_index+0x32>
 8014298:	4b40      	ldr	r3, [pc, #256]	; (801439c <etharp_output_to_arp_index+0x128>)
 801429a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801429e:	4940      	ldr	r1, [pc, #256]	; (80143a0 <etharp_output_to_arp_index+0x12c>)
 80142a0:	4840      	ldr	r0, [pc, #256]	; (80143a4 <etharp_output_to_arp_index+0x130>)
 80142a2:	f001 ff45 	bl	8016130 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80142a6:	79fa      	ldrb	r2, [r7, #7]
 80142a8:	493b      	ldr	r1, [pc, #236]	; (8014398 <etharp_output_to_arp_index+0x124>)
 80142aa:	4613      	mov	r3, r2
 80142ac:	005b      	lsls	r3, r3, #1
 80142ae:	4413      	add	r3, r2
 80142b0:	00db      	lsls	r3, r3, #3
 80142b2:	440b      	add	r3, r1
 80142b4:	3314      	adds	r3, #20
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	2b02      	cmp	r3, #2
 80142ba:	d153      	bne.n	8014364 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80142bc:	79fa      	ldrb	r2, [r7, #7]
 80142be:	4936      	ldr	r1, [pc, #216]	; (8014398 <etharp_output_to_arp_index+0x124>)
 80142c0:	4613      	mov	r3, r2
 80142c2:	005b      	lsls	r3, r3, #1
 80142c4:	4413      	add	r3, r2
 80142c6:	00db      	lsls	r3, r3, #3
 80142c8:	440b      	add	r3, r1
 80142ca:	3312      	adds	r3, #18
 80142cc:	881b      	ldrh	r3, [r3, #0]
 80142ce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80142d2:	d919      	bls.n	8014308 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80142d4:	79fa      	ldrb	r2, [r7, #7]
 80142d6:	4613      	mov	r3, r2
 80142d8:	005b      	lsls	r3, r3, #1
 80142da:	4413      	add	r3, r2
 80142dc:	00db      	lsls	r3, r3, #3
 80142de:	4a2e      	ldr	r2, [pc, #184]	; (8014398 <etharp_output_to_arp_index+0x124>)
 80142e0:	4413      	add	r3, r2
 80142e2:	3304      	adds	r3, #4
 80142e4:	4619      	mov	r1, r3
 80142e6:	68f8      	ldr	r0, [r7, #12]
 80142e8:	f000 fb4c 	bl	8014984 <etharp_request>
 80142ec:	4603      	mov	r3, r0
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d138      	bne.n	8014364 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80142f2:	79fa      	ldrb	r2, [r7, #7]
 80142f4:	4928      	ldr	r1, [pc, #160]	; (8014398 <etharp_output_to_arp_index+0x124>)
 80142f6:	4613      	mov	r3, r2
 80142f8:	005b      	lsls	r3, r3, #1
 80142fa:	4413      	add	r3, r2
 80142fc:	00db      	lsls	r3, r3, #3
 80142fe:	440b      	add	r3, r1
 8014300:	3314      	adds	r3, #20
 8014302:	2203      	movs	r2, #3
 8014304:	701a      	strb	r2, [r3, #0]
 8014306:	e02d      	b.n	8014364 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014308:	79fa      	ldrb	r2, [r7, #7]
 801430a:	4923      	ldr	r1, [pc, #140]	; (8014398 <etharp_output_to_arp_index+0x124>)
 801430c:	4613      	mov	r3, r2
 801430e:	005b      	lsls	r3, r3, #1
 8014310:	4413      	add	r3, r2
 8014312:	00db      	lsls	r3, r3, #3
 8014314:	440b      	add	r3, r1
 8014316:	3312      	adds	r3, #18
 8014318:	881b      	ldrh	r3, [r3, #0]
 801431a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801431e:	d321      	bcc.n	8014364 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014320:	79fa      	ldrb	r2, [r7, #7]
 8014322:	4613      	mov	r3, r2
 8014324:	005b      	lsls	r3, r3, #1
 8014326:	4413      	add	r3, r2
 8014328:	00db      	lsls	r3, r3, #3
 801432a:	4a1b      	ldr	r2, [pc, #108]	; (8014398 <etharp_output_to_arp_index+0x124>)
 801432c:	4413      	add	r3, r2
 801432e:	1d19      	adds	r1, r3, #4
 8014330:	79fa      	ldrb	r2, [r7, #7]
 8014332:	4613      	mov	r3, r2
 8014334:	005b      	lsls	r3, r3, #1
 8014336:	4413      	add	r3, r2
 8014338:	00db      	lsls	r3, r3, #3
 801433a:	3308      	adds	r3, #8
 801433c:	4a16      	ldr	r2, [pc, #88]	; (8014398 <etharp_output_to_arp_index+0x124>)
 801433e:	4413      	add	r3, r2
 8014340:	3304      	adds	r3, #4
 8014342:	461a      	mov	r2, r3
 8014344:	68f8      	ldr	r0, [r7, #12]
 8014346:	f000 fafb 	bl	8014940 <etharp_request_dst>
 801434a:	4603      	mov	r3, r0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d109      	bne.n	8014364 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014350:	79fa      	ldrb	r2, [r7, #7]
 8014352:	4911      	ldr	r1, [pc, #68]	; (8014398 <etharp_output_to_arp_index+0x124>)
 8014354:	4613      	mov	r3, r2
 8014356:	005b      	lsls	r3, r3, #1
 8014358:	4413      	add	r3, r2
 801435a:	00db      	lsls	r3, r3, #3
 801435c:	440b      	add	r3, r1
 801435e:	3314      	adds	r3, #20
 8014360:	2203      	movs	r2, #3
 8014362:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801436a:	79fa      	ldrb	r2, [r7, #7]
 801436c:	4613      	mov	r3, r2
 801436e:	005b      	lsls	r3, r3, #1
 8014370:	4413      	add	r3, r2
 8014372:	00db      	lsls	r3, r3, #3
 8014374:	3308      	adds	r3, #8
 8014376:	4a08      	ldr	r2, [pc, #32]	; (8014398 <etharp_output_to_arp_index+0x124>)
 8014378:	4413      	add	r3, r2
 801437a:	3304      	adds	r3, #4
 801437c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014380:	9200      	str	r2, [sp, #0]
 8014382:	460a      	mov	r2, r1
 8014384:	68b9      	ldr	r1, [r7, #8]
 8014386:	68f8      	ldr	r0, [r7, #12]
 8014388:	f001 fe40 	bl	801600c <ethernet_output>
 801438c:	4603      	mov	r3, r0
}
 801438e:	4618      	mov	r0, r3
 8014390:	3710      	adds	r7, #16
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	20009750 	.word	0x20009750
 801439c:	08019770 	.word	0x08019770
 80143a0:	080198e0 	.word	0x080198e0
 80143a4:	080197e8 	.word	0x080197e8

080143a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b08a      	sub	sp, #40	; 0x28
 80143ac:	af02      	add	r7, sp, #8
 80143ae:	60f8      	str	r0, [r7, #12]
 80143b0:	60b9      	str	r1, [r7, #8]
 80143b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d106      	bne.n	80143cc <etharp_output+0x24>
 80143be:	4b73      	ldr	r3, [pc, #460]	; (801458c <etharp_output+0x1e4>)
 80143c0:	f240 321e 	movw	r2, #798	; 0x31e
 80143c4:	4972      	ldr	r1, [pc, #456]	; (8014590 <etharp_output+0x1e8>)
 80143c6:	4873      	ldr	r0, [pc, #460]	; (8014594 <etharp_output+0x1ec>)
 80143c8:	f001 feb2 	bl	8016130 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d106      	bne.n	80143e0 <etharp_output+0x38>
 80143d2:	4b6e      	ldr	r3, [pc, #440]	; (801458c <etharp_output+0x1e4>)
 80143d4:	f240 321f 	movw	r2, #799	; 0x31f
 80143d8:	496f      	ldr	r1, [pc, #444]	; (8014598 <etharp_output+0x1f0>)
 80143da:	486e      	ldr	r0, [pc, #440]	; (8014594 <etharp_output+0x1ec>)
 80143dc:	f001 fea8 	bl	8016130 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d106      	bne.n	80143f4 <etharp_output+0x4c>
 80143e6:	4b69      	ldr	r3, [pc, #420]	; (801458c <etharp_output+0x1e4>)
 80143e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80143ec:	496b      	ldr	r1, [pc, #428]	; (801459c <etharp_output+0x1f4>)
 80143ee:	4869      	ldr	r0, [pc, #420]	; (8014594 <etharp_output+0x1ec>)
 80143f0:	f001 fe9e 	bl	8016130 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	68f9      	ldr	r1, [r7, #12]
 80143fa:	4618      	mov	r0, r3
 80143fc:	f000 fef8 	bl	80151f0 <ip4_addr_isbroadcast_u32>
 8014400:	4603      	mov	r3, r0
 8014402:	2b00      	cmp	r3, #0
 8014404:	d002      	beq.n	801440c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014406:	4b66      	ldr	r3, [pc, #408]	; (80145a0 <etharp_output+0x1f8>)
 8014408:	61fb      	str	r3, [r7, #28]
 801440a:	e0af      	b.n	801456c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014414:	2be0      	cmp	r3, #224	; 0xe0
 8014416:	d118      	bne.n	801444a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014418:	2301      	movs	r3, #1
 801441a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801441c:	2300      	movs	r3, #0
 801441e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014420:	235e      	movs	r3, #94	; 0x5e
 8014422:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	3301      	adds	r3, #1
 8014428:	781b      	ldrb	r3, [r3, #0]
 801442a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801442e:	b2db      	uxtb	r3, r3
 8014430:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	3302      	adds	r3, #2
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	3303      	adds	r3, #3
 801443e:	781b      	ldrb	r3, [r3, #0]
 8014440:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014442:	f107 0310 	add.w	r3, r7, #16
 8014446:	61fb      	str	r3, [r7, #28]
 8014448:	e090      	b.n	801456c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	681a      	ldr	r2, [r3, #0]
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	3304      	adds	r3, #4
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	405a      	eors	r2, r3
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	3308      	adds	r3, #8
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	4013      	ands	r3, r2
 801445e:	2b00      	cmp	r3, #0
 8014460:	d012      	beq.n	8014488 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014468:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801446c:	4293      	cmp	r3, r2
 801446e:	d00b      	beq.n	8014488 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	330c      	adds	r3, #12
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d003      	beq.n	8014482 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	330c      	adds	r3, #12
 801447e:	61bb      	str	r3, [r7, #24]
 8014480:	e002      	b.n	8014488 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014482:	f06f 0303 	mvn.w	r3, #3
 8014486:	e07d      	b.n	8014584 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014488:	4b46      	ldr	r3, [pc, #280]	; (80145a4 <etharp_output+0x1fc>)
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	4619      	mov	r1, r3
 801448e:	4a46      	ldr	r2, [pc, #280]	; (80145a8 <etharp_output+0x200>)
 8014490:	460b      	mov	r3, r1
 8014492:	005b      	lsls	r3, r3, #1
 8014494:	440b      	add	r3, r1
 8014496:	00db      	lsls	r3, r3, #3
 8014498:	4413      	add	r3, r2
 801449a:	3314      	adds	r3, #20
 801449c:	781b      	ldrb	r3, [r3, #0]
 801449e:	2b01      	cmp	r3, #1
 80144a0:	d925      	bls.n	80144ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80144a2:	4b40      	ldr	r3, [pc, #256]	; (80145a4 <etharp_output+0x1fc>)
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	4619      	mov	r1, r3
 80144a8:	4a3f      	ldr	r2, [pc, #252]	; (80145a8 <etharp_output+0x200>)
 80144aa:	460b      	mov	r3, r1
 80144ac:	005b      	lsls	r3, r3, #1
 80144ae:	440b      	add	r3, r1
 80144b0:	00db      	lsls	r3, r3, #3
 80144b2:	4413      	add	r3, r2
 80144b4:	3308      	adds	r3, #8
 80144b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80144b8:	68fa      	ldr	r2, [r7, #12]
 80144ba:	429a      	cmp	r2, r3
 80144bc:	d117      	bne.n	80144ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80144be:	69bb      	ldr	r3, [r7, #24]
 80144c0:	681a      	ldr	r2, [r3, #0]
 80144c2:	4b38      	ldr	r3, [pc, #224]	; (80145a4 <etharp_output+0x1fc>)
 80144c4:	781b      	ldrb	r3, [r3, #0]
 80144c6:	4618      	mov	r0, r3
 80144c8:	4937      	ldr	r1, [pc, #220]	; (80145a8 <etharp_output+0x200>)
 80144ca:	4603      	mov	r3, r0
 80144cc:	005b      	lsls	r3, r3, #1
 80144ce:	4403      	add	r3, r0
 80144d0:	00db      	lsls	r3, r3, #3
 80144d2:	440b      	add	r3, r1
 80144d4:	3304      	adds	r3, #4
 80144d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80144d8:	429a      	cmp	r2, r3
 80144da:	d108      	bne.n	80144ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80144dc:	4b31      	ldr	r3, [pc, #196]	; (80145a4 <etharp_output+0x1fc>)
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	461a      	mov	r2, r3
 80144e2:	68b9      	ldr	r1, [r7, #8]
 80144e4:	68f8      	ldr	r0, [r7, #12]
 80144e6:	f7ff fec5 	bl	8014274 <etharp_output_to_arp_index>
 80144ea:	4603      	mov	r3, r0
 80144ec:	e04a      	b.n	8014584 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80144ee:	2300      	movs	r3, #0
 80144f0:	75fb      	strb	r3, [r7, #23]
 80144f2:	e031      	b.n	8014558 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80144f4:	7dfa      	ldrb	r2, [r7, #23]
 80144f6:	492c      	ldr	r1, [pc, #176]	; (80145a8 <etharp_output+0x200>)
 80144f8:	4613      	mov	r3, r2
 80144fa:	005b      	lsls	r3, r3, #1
 80144fc:	4413      	add	r3, r2
 80144fe:	00db      	lsls	r3, r3, #3
 8014500:	440b      	add	r3, r1
 8014502:	3314      	adds	r3, #20
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	2b01      	cmp	r3, #1
 8014508:	d923      	bls.n	8014552 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801450a:	7dfa      	ldrb	r2, [r7, #23]
 801450c:	4926      	ldr	r1, [pc, #152]	; (80145a8 <etharp_output+0x200>)
 801450e:	4613      	mov	r3, r2
 8014510:	005b      	lsls	r3, r3, #1
 8014512:	4413      	add	r3, r2
 8014514:	00db      	lsls	r3, r3, #3
 8014516:	440b      	add	r3, r1
 8014518:	3308      	adds	r3, #8
 801451a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801451c:	68fa      	ldr	r2, [r7, #12]
 801451e:	429a      	cmp	r2, r3
 8014520:	d117      	bne.n	8014552 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014522:	69bb      	ldr	r3, [r7, #24]
 8014524:	6819      	ldr	r1, [r3, #0]
 8014526:	7dfa      	ldrb	r2, [r7, #23]
 8014528:	481f      	ldr	r0, [pc, #124]	; (80145a8 <etharp_output+0x200>)
 801452a:	4613      	mov	r3, r2
 801452c:	005b      	lsls	r3, r3, #1
 801452e:	4413      	add	r3, r2
 8014530:	00db      	lsls	r3, r3, #3
 8014532:	4403      	add	r3, r0
 8014534:	3304      	adds	r3, #4
 8014536:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014538:	4299      	cmp	r1, r3
 801453a:	d10a      	bne.n	8014552 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801453c:	4a19      	ldr	r2, [pc, #100]	; (80145a4 <etharp_output+0x1fc>)
 801453e:	7dfb      	ldrb	r3, [r7, #23]
 8014540:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014542:	7dfb      	ldrb	r3, [r7, #23]
 8014544:	461a      	mov	r2, r3
 8014546:	68b9      	ldr	r1, [r7, #8]
 8014548:	68f8      	ldr	r0, [r7, #12]
 801454a:	f7ff fe93 	bl	8014274 <etharp_output_to_arp_index>
 801454e:	4603      	mov	r3, r0
 8014550:	e018      	b.n	8014584 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014552:	7dfb      	ldrb	r3, [r7, #23]
 8014554:	3301      	adds	r3, #1
 8014556:	75fb      	strb	r3, [r7, #23]
 8014558:	7dfb      	ldrb	r3, [r7, #23]
 801455a:	2b09      	cmp	r3, #9
 801455c:	d9ca      	bls.n	80144f4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801455e:	68ba      	ldr	r2, [r7, #8]
 8014560:	69b9      	ldr	r1, [r7, #24]
 8014562:	68f8      	ldr	r0, [r7, #12]
 8014564:	f000 f822 	bl	80145ac <etharp_query>
 8014568:	4603      	mov	r3, r0
 801456a:	e00b      	b.n	8014584 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014572:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014576:	9300      	str	r3, [sp, #0]
 8014578:	69fb      	ldr	r3, [r7, #28]
 801457a:	68b9      	ldr	r1, [r7, #8]
 801457c:	68f8      	ldr	r0, [r7, #12]
 801457e:	f001 fd45 	bl	801600c <ethernet_output>
 8014582:	4603      	mov	r3, r0
}
 8014584:	4618      	mov	r0, r3
 8014586:	3720      	adds	r7, #32
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}
 801458c:	08019770 	.word	0x08019770
 8014590:	080198c0 	.word	0x080198c0
 8014594:	080197e8 	.word	0x080197e8
 8014598:	08019910 	.word	0x08019910
 801459c:	080198b0 	.word	0x080198b0
 80145a0:	08019f34 	.word	0x08019f34
 80145a4:	20009840 	.word	0x20009840
 80145a8:	20009750 	.word	0x20009750

080145ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b08c      	sub	sp, #48	; 0x30
 80145b0:	af02      	add	r7, sp, #8
 80145b2:	60f8      	str	r0, [r7, #12]
 80145b4:	60b9      	str	r1, [r7, #8]
 80145b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	3326      	adds	r3, #38	; 0x26
 80145bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80145be:	23ff      	movs	r3, #255	; 0xff
 80145c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80145c4:	2300      	movs	r3, #0
 80145c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	68f9      	ldr	r1, [r7, #12]
 80145ce:	4618      	mov	r0, r3
 80145d0:	f000 fe0e 	bl	80151f0 <ip4_addr_isbroadcast_u32>
 80145d4:	4603      	mov	r3, r0
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d10c      	bne.n	80145f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80145e2:	2be0      	cmp	r3, #224	; 0xe0
 80145e4:	d006      	beq.n	80145f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d003      	beq.n	80145f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d102      	bne.n	80145fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80145f4:	f06f 030f 	mvn.w	r3, #15
 80145f8:	e101      	b.n	80147fe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80145fa:	68fa      	ldr	r2, [r7, #12]
 80145fc:	2101      	movs	r1, #1
 80145fe:	68b8      	ldr	r0, [r7, #8]
 8014600:	f7ff fb60 	bl	8013cc4 <etharp_find_entry>
 8014604:	4603      	mov	r3, r0
 8014606:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014608:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801460c:	2b00      	cmp	r3, #0
 801460e:	da02      	bge.n	8014616 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014610:	8a7b      	ldrh	r3, [r7, #18]
 8014612:	b25b      	sxtb	r3, r3
 8014614:	e0f3      	b.n	80147fe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014616:	8a7b      	ldrh	r3, [r7, #18]
 8014618:	2b7e      	cmp	r3, #126	; 0x7e
 801461a:	d906      	bls.n	801462a <etharp_query+0x7e>
 801461c:	4b7a      	ldr	r3, [pc, #488]	; (8014808 <etharp_query+0x25c>)
 801461e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014622:	497a      	ldr	r1, [pc, #488]	; (801480c <etharp_query+0x260>)
 8014624:	487a      	ldr	r0, [pc, #488]	; (8014810 <etharp_query+0x264>)
 8014626:	f001 fd83 	bl	8016130 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801462a:	8a7b      	ldrh	r3, [r7, #18]
 801462c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801462e:	7c7a      	ldrb	r2, [r7, #17]
 8014630:	4978      	ldr	r1, [pc, #480]	; (8014814 <etharp_query+0x268>)
 8014632:	4613      	mov	r3, r2
 8014634:	005b      	lsls	r3, r3, #1
 8014636:	4413      	add	r3, r2
 8014638:	00db      	lsls	r3, r3, #3
 801463a:	440b      	add	r3, r1
 801463c:	3314      	adds	r3, #20
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d115      	bne.n	8014670 <etharp_query+0xc4>
    is_new_entry = 1;
 8014644:	2301      	movs	r3, #1
 8014646:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014648:	7c7a      	ldrb	r2, [r7, #17]
 801464a:	4972      	ldr	r1, [pc, #456]	; (8014814 <etharp_query+0x268>)
 801464c:	4613      	mov	r3, r2
 801464e:	005b      	lsls	r3, r3, #1
 8014650:	4413      	add	r3, r2
 8014652:	00db      	lsls	r3, r3, #3
 8014654:	440b      	add	r3, r1
 8014656:	3314      	adds	r3, #20
 8014658:	2201      	movs	r2, #1
 801465a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801465c:	7c7a      	ldrb	r2, [r7, #17]
 801465e:	496d      	ldr	r1, [pc, #436]	; (8014814 <etharp_query+0x268>)
 8014660:	4613      	mov	r3, r2
 8014662:	005b      	lsls	r3, r3, #1
 8014664:	4413      	add	r3, r2
 8014666:	00db      	lsls	r3, r3, #3
 8014668:	440b      	add	r3, r1
 801466a:	3308      	adds	r3, #8
 801466c:	68fa      	ldr	r2, [r7, #12]
 801466e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014670:	7c7a      	ldrb	r2, [r7, #17]
 8014672:	4968      	ldr	r1, [pc, #416]	; (8014814 <etharp_query+0x268>)
 8014674:	4613      	mov	r3, r2
 8014676:	005b      	lsls	r3, r3, #1
 8014678:	4413      	add	r3, r2
 801467a:	00db      	lsls	r3, r3, #3
 801467c:	440b      	add	r3, r1
 801467e:	3314      	adds	r3, #20
 8014680:	781b      	ldrb	r3, [r3, #0]
 8014682:	2b01      	cmp	r3, #1
 8014684:	d011      	beq.n	80146aa <etharp_query+0xfe>
 8014686:	7c7a      	ldrb	r2, [r7, #17]
 8014688:	4962      	ldr	r1, [pc, #392]	; (8014814 <etharp_query+0x268>)
 801468a:	4613      	mov	r3, r2
 801468c:	005b      	lsls	r3, r3, #1
 801468e:	4413      	add	r3, r2
 8014690:	00db      	lsls	r3, r3, #3
 8014692:	440b      	add	r3, r1
 8014694:	3314      	adds	r3, #20
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	2b01      	cmp	r3, #1
 801469a:	d806      	bhi.n	80146aa <etharp_query+0xfe>
 801469c:	4b5a      	ldr	r3, [pc, #360]	; (8014808 <etharp_query+0x25c>)
 801469e:	f240 32cd 	movw	r2, #973	; 0x3cd
 80146a2:	495d      	ldr	r1, [pc, #372]	; (8014818 <etharp_query+0x26c>)
 80146a4:	485a      	ldr	r0, [pc, #360]	; (8014810 <etharp_query+0x264>)
 80146a6:	f001 fd43 	bl	8016130 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80146aa:	6a3b      	ldr	r3, [r7, #32]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d102      	bne.n	80146b6 <etharp_query+0x10a>
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d10c      	bne.n	80146d0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80146b6:	68b9      	ldr	r1, [r7, #8]
 80146b8:	68f8      	ldr	r0, [r7, #12]
 80146ba:	f000 f963 	bl	8014984 <etharp_request>
 80146be:	4603      	mov	r3, r0
 80146c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d102      	bne.n	80146d0 <etharp_query+0x124>
      return result;
 80146ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80146ce:	e096      	b.n	80147fe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d106      	bne.n	80146e4 <etharp_query+0x138>
 80146d6:	4b4c      	ldr	r3, [pc, #304]	; (8014808 <etharp_query+0x25c>)
 80146d8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80146dc:	494f      	ldr	r1, [pc, #316]	; (801481c <etharp_query+0x270>)
 80146de:	484c      	ldr	r0, [pc, #304]	; (8014810 <etharp_query+0x264>)
 80146e0:	f001 fd26 	bl	8016130 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80146e4:	7c7a      	ldrb	r2, [r7, #17]
 80146e6:	494b      	ldr	r1, [pc, #300]	; (8014814 <etharp_query+0x268>)
 80146e8:	4613      	mov	r3, r2
 80146ea:	005b      	lsls	r3, r3, #1
 80146ec:	4413      	add	r3, r2
 80146ee:	00db      	lsls	r3, r3, #3
 80146f0:	440b      	add	r3, r1
 80146f2:	3314      	adds	r3, #20
 80146f4:	781b      	ldrb	r3, [r3, #0]
 80146f6:	2b01      	cmp	r3, #1
 80146f8:	d917      	bls.n	801472a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80146fa:	4a49      	ldr	r2, [pc, #292]	; (8014820 <etharp_query+0x274>)
 80146fc:	7c7b      	ldrb	r3, [r7, #17]
 80146fe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014700:	7c7a      	ldrb	r2, [r7, #17]
 8014702:	4613      	mov	r3, r2
 8014704:	005b      	lsls	r3, r3, #1
 8014706:	4413      	add	r3, r2
 8014708:	00db      	lsls	r3, r3, #3
 801470a:	3308      	adds	r3, #8
 801470c:	4a41      	ldr	r2, [pc, #260]	; (8014814 <etharp_query+0x268>)
 801470e:	4413      	add	r3, r2
 8014710:	3304      	adds	r3, #4
 8014712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014716:	9200      	str	r2, [sp, #0]
 8014718:	697a      	ldr	r2, [r7, #20]
 801471a:	6879      	ldr	r1, [r7, #4]
 801471c:	68f8      	ldr	r0, [r7, #12]
 801471e:	f001 fc75 	bl	801600c <ethernet_output>
 8014722:	4603      	mov	r3, r0
 8014724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014728:	e067      	b.n	80147fa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801472a:	7c7a      	ldrb	r2, [r7, #17]
 801472c:	4939      	ldr	r1, [pc, #228]	; (8014814 <etharp_query+0x268>)
 801472e:	4613      	mov	r3, r2
 8014730:	005b      	lsls	r3, r3, #1
 8014732:	4413      	add	r3, r2
 8014734:	00db      	lsls	r3, r3, #3
 8014736:	440b      	add	r3, r1
 8014738:	3314      	adds	r3, #20
 801473a:	781b      	ldrb	r3, [r3, #0]
 801473c:	2b01      	cmp	r3, #1
 801473e:	d15c      	bne.n	80147fa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014740:	2300      	movs	r3, #0
 8014742:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014748:	e01c      	b.n	8014784 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801474a:	69fb      	ldr	r3, [r7, #28]
 801474c:	895a      	ldrh	r2, [r3, #10]
 801474e:	69fb      	ldr	r3, [r7, #28]
 8014750:	891b      	ldrh	r3, [r3, #8]
 8014752:	429a      	cmp	r2, r3
 8014754:	d10a      	bne.n	801476c <etharp_query+0x1c0>
 8014756:	69fb      	ldr	r3, [r7, #28]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d006      	beq.n	801476c <etharp_query+0x1c0>
 801475e:	4b2a      	ldr	r3, [pc, #168]	; (8014808 <etharp_query+0x25c>)
 8014760:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014764:	492f      	ldr	r1, [pc, #188]	; (8014824 <etharp_query+0x278>)
 8014766:	482a      	ldr	r0, [pc, #168]	; (8014810 <etharp_query+0x264>)
 8014768:	f001 fce2 	bl	8016130 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801476c:	69fb      	ldr	r3, [r7, #28]
 801476e:	7b1b      	ldrb	r3, [r3, #12]
 8014770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014774:	2b00      	cmp	r3, #0
 8014776:	d002      	beq.n	801477e <etharp_query+0x1d2>
        copy_needed = 1;
 8014778:	2301      	movs	r3, #1
 801477a:	61bb      	str	r3, [r7, #24]
        break;
 801477c:	e005      	b.n	801478a <etharp_query+0x1de>
      }
      p = p->next;
 801477e:	69fb      	ldr	r3, [r7, #28]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014784:	69fb      	ldr	r3, [r7, #28]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d1df      	bne.n	801474a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801478a:	69bb      	ldr	r3, [r7, #24]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d007      	beq.n	80147a0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014790:	687a      	ldr	r2, [r7, #4]
 8014792:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014796:	200e      	movs	r0, #14
 8014798:	f7f9 f96e 	bl	800da78 <pbuf_clone>
 801479c:	61f8      	str	r0, [r7, #28]
 801479e:	e004      	b.n	80147aa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80147a4:	69f8      	ldr	r0, [r7, #28]
 80147a6:	f7f8 ff09 	bl	800d5bc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80147aa:	69fb      	ldr	r3, [r7, #28]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d021      	beq.n	80147f4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80147b0:	7c7a      	ldrb	r2, [r7, #17]
 80147b2:	4918      	ldr	r1, [pc, #96]	; (8014814 <etharp_query+0x268>)
 80147b4:	4613      	mov	r3, r2
 80147b6:	005b      	lsls	r3, r3, #1
 80147b8:	4413      	add	r3, r2
 80147ba:	00db      	lsls	r3, r3, #3
 80147bc:	440b      	add	r3, r1
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d00a      	beq.n	80147da <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80147c4:	7c7a      	ldrb	r2, [r7, #17]
 80147c6:	4913      	ldr	r1, [pc, #76]	; (8014814 <etharp_query+0x268>)
 80147c8:	4613      	mov	r3, r2
 80147ca:	005b      	lsls	r3, r3, #1
 80147cc:	4413      	add	r3, r2
 80147ce:	00db      	lsls	r3, r3, #3
 80147d0:	440b      	add	r3, r1
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	4618      	mov	r0, r3
 80147d6:	f7f8 fe51 	bl	800d47c <pbuf_free>
      }
      arp_table[i].q = p;
 80147da:	7c7a      	ldrb	r2, [r7, #17]
 80147dc:	490d      	ldr	r1, [pc, #52]	; (8014814 <etharp_query+0x268>)
 80147de:	4613      	mov	r3, r2
 80147e0:	005b      	lsls	r3, r3, #1
 80147e2:	4413      	add	r3, r2
 80147e4:	00db      	lsls	r3, r3, #3
 80147e6:	440b      	add	r3, r1
 80147e8:	69fa      	ldr	r2, [r7, #28]
 80147ea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80147ec:	2300      	movs	r3, #0
 80147ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80147f2:	e002      	b.n	80147fa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80147f4:	23ff      	movs	r3, #255	; 0xff
 80147f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80147fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80147fe:	4618      	mov	r0, r3
 8014800:	3728      	adds	r7, #40	; 0x28
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}
 8014806:	bf00      	nop
 8014808:	08019770 	.word	0x08019770
 801480c:	0801991c 	.word	0x0801991c
 8014810:	080197e8 	.word	0x080197e8
 8014814:	20009750 	.word	0x20009750
 8014818:	0801992c 	.word	0x0801992c
 801481c:	08019910 	.word	0x08019910
 8014820:	20009840 	.word	0x20009840
 8014824:	08019954 	.word	0x08019954

08014828 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b08a      	sub	sp, #40	; 0x28
 801482c:	af02      	add	r7, sp, #8
 801482e:	60f8      	str	r0, [r7, #12]
 8014830:	60b9      	str	r1, [r7, #8]
 8014832:	607a      	str	r2, [r7, #4]
 8014834:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014836:	2300      	movs	r3, #0
 8014838:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d106      	bne.n	801484e <etharp_raw+0x26>
 8014840:	4b3a      	ldr	r3, [pc, #232]	; (801492c <etharp_raw+0x104>)
 8014842:	f240 4257 	movw	r2, #1111	; 0x457
 8014846:	493a      	ldr	r1, [pc, #232]	; (8014930 <etharp_raw+0x108>)
 8014848:	483a      	ldr	r0, [pc, #232]	; (8014934 <etharp_raw+0x10c>)
 801484a:	f001 fc71 	bl	8016130 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801484e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014852:	211c      	movs	r1, #28
 8014854:	200e      	movs	r0, #14
 8014856:	f7f8 fb2d 	bl	800ceb4 <pbuf_alloc>
 801485a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801485c:	69bb      	ldr	r3, [r7, #24]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d102      	bne.n	8014868 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014862:	f04f 33ff 	mov.w	r3, #4294967295
 8014866:	e05d      	b.n	8014924 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014868:	69bb      	ldr	r3, [r7, #24]
 801486a:	895b      	ldrh	r3, [r3, #10]
 801486c:	2b1b      	cmp	r3, #27
 801486e:	d806      	bhi.n	801487e <etharp_raw+0x56>
 8014870:	4b2e      	ldr	r3, [pc, #184]	; (801492c <etharp_raw+0x104>)
 8014872:	f240 4262 	movw	r2, #1122	; 0x462
 8014876:	4930      	ldr	r1, [pc, #192]	; (8014938 <etharp_raw+0x110>)
 8014878:	482e      	ldr	r0, [pc, #184]	; (8014934 <etharp_raw+0x10c>)
 801487a:	f001 fc59 	bl	8016130 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801487e:	69bb      	ldr	r3, [r7, #24]
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014884:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014886:	4618      	mov	r0, r3
 8014888:	f7f7 fa9a 	bl	800bdc0 <lwip_htons>
 801488c:	4603      	mov	r3, r0
 801488e:	461a      	mov	r2, r3
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801489a:	2b06      	cmp	r3, #6
 801489c:	d006      	beq.n	80148ac <etharp_raw+0x84>
 801489e:	4b23      	ldr	r3, [pc, #140]	; (801492c <etharp_raw+0x104>)
 80148a0:	f240 4269 	movw	r2, #1129	; 0x469
 80148a4:	4925      	ldr	r1, [pc, #148]	; (801493c <etharp_raw+0x114>)
 80148a6:	4823      	ldr	r0, [pc, #140]	; (8014934 <etharp_raw+0x10c>)
 80148a8:	f001 fc42 	bl	8016130 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	3308      	adds	r3, #8
 80148b0:	2206      	movs	r2, #6
 80148b2:	6839      	ldr	r1, [r7, #0]
 80148b4:	4618      	mov	r0, r3
 80148b6:	f001 fc25 	bl	8016104 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80148ba:	697b      	ldr	r3, [r7, #20]
 80148bc:	3312      	adds	r3, #18
 80148be:	2206      	movs	r2, #6
 80148c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80148c2:	4618      	mov	r0, r3
 80148c4:	f001 fc1e 	bl	8016104 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	330e      	adds	r3, #14
 80148cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80148ce:	6812      	ldr	r2, [r2, #0]
 80148d0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	3318      	adds	r3, #24
 80148d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148d8:	6812      	ldr	r2, [r2, #0]
 80148da:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80148dc:	697b      	ldr	r3, [r7, #20]
 80148de:	2200      	movs	r2, #0
 80148e0:	701a      	strb	r2, [r3, #0]
 80148e2:	2200      	movs	r2, #0
 80148e4:	f042 0201 	orr.w	r2, r2, #1
 80148e8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80148ea:	697b      	ldr	r3, [r7, #20]
 80148ec:	2200      	movs	r2, #0
 80148ee:	f042 0208 	orr.w	r2, r2, #8
 80148f2:	709a      	strb	r2, [r3, #2]
 80148f4:	2200      	movs	r2, #0
 80148f6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80148f8:	697b      	ldr	r3, [r7, #20]
 80148fa:	2206      	movs	r2, #6
 80148fc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80148fe:	697b      	ldr	r3, [r7, #20]
 8014900:	2204      	movs	r2, #4
 8014902:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014904:	f640 0306 	movw	r3, #2054	; 0x806
 8014908:	9300      	str	r3, [sp, #0]
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	68ba      	ldr	r2, [r7, #8]
 801490e:	69b9      	ldr	r1, [r7, #24]
 8014910:	68f8      	ldr	r0, [r7, #12]
 8014912:	f001 fb7b 	bl	801600c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014916:	69b8      	ldr	r0, [r7, #24]
 8014918:	f7f8 fdb0 	bl	800d47c <pbuf_free>
  p = NULL;
 801491c:	2300      	movs	r3, #0
 801491e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014920:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014924:	4618      	mov	r0, r3
 8014926:	3720      	adds	r7, #32
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}
 801492c:	08019770 	.word	0x08019770
 8014930:	080198c0 	.word	0x080198c0
 8014934:	080197e8 	.word	0x080197e8
 8014938:	08019970 	.word	0x08019970
 801493c:	080199a4 	.word	0x080199a4

08014940 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b088      	sub	sp, #32
 8014944:	af04      	add	r7, sp, #16
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801495c:	2201      	movs	r2, #1
 801495e:	9203      	str	r2, [sp, #12]
 8014960:	68ba      	ldr	r2, [r7, #8]
 8014962:	9202      	str	r2, [sp, #8]
 8014964:	4a06      	ldr	r2, [pc, #24]	; (8014980 <etharp_request_dst+0x40>)
 8014966:	9201      	str	r2, [sp, #4]
 8014968:	9300      	str	r3, [sp, #0]
 801496a:	4603      	mov	r3, r0
 801496c:	687a      	ldr	r2, [r7, #4]
 801496e:	68f8      	ldr	r0, [r7, #12]
 8014970:	f7ff ff5a 	bl	8014828 <etharp_raw>
 8014974:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014976:	4618      	mov	r0, r3
 8014978:	3710      	adds	r7, #16
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
 801497e:	bf00      	nop
 8014980:	08019f3c 	.word	0x08019f3c

08014984 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b082      	sub	sp, #8
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
 801498c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801498e:	4a05      	ldr	r2, [pc, #20]	; (80149a4 <etharp_request+0x20>)
 8014990:	6839      	ldr	r1, [r7, #0]
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f7ff ffd4 	bl	8014940 <etharp_request_dst>
 8014998:	4603      	mov	r3, r0
}
 801499a:	4618      	mov	r0, r3
 801499c:	3708      	adds	r7, #8
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}
 80149a2:	bf00      	nop
 80149a4:	08019f34 	.word	0x08019f34

080149a8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b08e      	sub	sp, #56	; 0x38
 80149ac:	af04      	add	r7, sp, #16
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80149b2:	4b79      	ldr	r3, [pc, #484]	; (8014b98 <icmp_input+0x1f0>)
 80149b4:	689b      	ldr	r3, [r3, #8]
 80149b6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80149b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ba:	781b      	ldrb	r3, [r3, #0]
 80149bc:	f003 030f 	and.w	r3, r3, #15
 80149c0:	b2db      	uxtb	r3, r3
 80149c2:	009b      	lsls	r3, r3, #2
 80149c4:	b2db      	uxtb	r3, r3
 80149c6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80149c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80149ca:	2b13      	cmp	r3, #19
 80149cc:	f240 80cd 	bls.w	8014b6a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	895b      	ldrh	r3, [r3, #10]
 80149d4:	2b03      	cmp	r3, #3
 80149d6:	f240 80ca 	bls.w	8014b6e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	685b      	ldr	r3, [r3, #4]
 80149de:	781b      	ldrb	r3, [r3, #0]
 80149e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80149e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	f000 80b7 	beq.w	8014b5c <icmp_input+0x1b4>
 80149ee:	2b08      	cmp	r3, #8
 80149f0:	f040 80b7 	bne.w	8014b62 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80149f4:	4b69      	ldr	r3, [pc, #420]	; (8014b9c <icmp_input+0x1f4>)
 80149f6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80149f8:	4b67      	ldr	r3, [pc, #412]	; (8014b98 <icmp_input+0x1f0>)
 80149fa:	695b      	ldr	r3, [r3, #20]
 80149fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a00:	2be0      	cmp	r3, #224	; 0xe0
 8014a02:	f000 80bb 	beq.w	8014b7c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014a06:	4b64      	ldr	r3, [pc, #400]	; (8014b98 <icmp_input+0x1f0>)
 8014a08:	695b      	ldr	r3, [r3, #20]
 8014a0a:	4a63      	ldr	r2, [pc, #396]	; (8014b98 <icmp_input+0x1f0>)
 8014a0c:	6812      	ldr	r2, [r2, #0]
 8014a0e:	4611      	mov	r1, r2
 8014a10:	4618      	mov	r0, r3
 8014a12:	f000 fbed 	bl	80151f0 <ip4_addr_isbroadcast_u32>
 8014a16:	4603      	mov	r3, r0
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	f040 80b1 	bne.w	8014b80 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	891b      	ldrh	r3, [r3, #8]
 8014a22:	2b07      	cmp	r3, #7
 8014a24:	f240 80a5 	bls.w	8014b72 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014a28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a2a:	330e      	adds	r3, #14
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f7f8 fc8e 	bl	800d350 <pbuf_add_header>
 8014a34:	4603      	mov	r3, r0
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d04b      	beq.n	8014ad2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	891a      	ldrh	r2, [r3, #8]
 8014a3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a40:	4413      	add	r3, r2
 8014a42:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	891b      	ldrh	r3, [r3, #8]
 8014a48:	8b7a      	ldrh	r2, [r7, #26]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	f0c0 809a 	bcc.w	8014b84 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014a50:	8b7b      	ldrh	r3, [r7, #26]
 8014a52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a56:	4619      	mov	r1, r3
 8014a58:	200e      	movs	r0, #14
 8014a5a:	f7f8 fa2b 	bl	800ceb4 <pbuf_alloc>
 8014a5e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	f000 8090 	beq.w	8014b88 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	895b      	ldrh	r3, [r3, #10]
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a70:	3308      	adds	r3, #8
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d203      	bcs.n	8014a7e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014a76:	6978      	ldr	r0, [r7, #20]
 8014a78:	f7f8 fd00 	bl	800d47c <pbuf_free>
          goto icmperr;
 8014a7c:	e085      	b.n	8014b8a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	685b      	ldr	r3, [r3, #4]
 8014a82:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a86:	4618      	mov	r0, r3
 8014a88:	f001 fb3c 	bl	8016104 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014a8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a8e:	4619      	mov	r1, r3
 8014a90:	6978      	ldr	r0, [r7, #20]
 8014a92:	f7f8 fc6d 	bl	800d370 <pbuf_remove_header>
 8014a96:	4603      	mov	r3, r0
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d009      	beq.n	8014ab0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014a9c:	4b40      	ldr	r3, [pc, #256]	; (8014ba0 <icmp_input+0x1f8>)
 8014a9e:	22b6      	movs	r2, #182	; 0xb6
 8014aa0:	4940      	ldr	r1, [pc, #256]	; (8014ba4 <icmp_input+0x1fc>)
 8014aa2:	4841      	ldr	r0, [pc, #260]	; (8014ba8 <icmp_input+0x200>)
 8014aa4:	f001 fb44 	bl	8016130 <iprintf>
          pbuf_free(r);
 8014aa8:	6978      	ldr	r0, [r7, #20]
 8014aaa:	f7f8 fce7 	bl	800d47c <pbuf_free>
          goto icmperr;
 8014aae:	e06c      	b.n	8014b8a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014ab0:	6879      	ldr	r1, [r7, #4]
 8014ab2:	6978      	ldr	r0, [r7, #20]
 8014ab4:	f7f8 fe0a 	bl	800d6cc <pbuf_copy>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d003      	beq.n	8014ac6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014abe:	6978      	ldr	r0, [r7, #20]
 8014ac0:	f7f8 fcdc 	bl	800d47c <pbuf_free>
          goto icmperr;
 8014ac4:	e061      	b.n	8014b8a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014ac6:	6878      	ldr	r0, [r7, #4]
 8014ac8:	f7f8 fcd8 	bl	800d47c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	607b      	str	r3, [r7, #4]
 8014ad0:	e00f      	b.n	8014af2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014ad2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ad4:	330e      	adds	r3, #14
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f7f8 fc49 	bl	800d370 <pbuf_remove_header>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d006      	beq.n	8014af2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014ae4:	4b2e      	ldr	r3, [pc, #184]	; (8014ba0 <icmp_input+0x1f8>)
 8014ae6:	22c7      	movs	r2, #199	; 0xc7
 8014ae8:	4930      	ldr	r1, [pc, #192]	; (8014bac <icmp_input+0x204>)
 8014aea:	482f      	ldr	r0, [pc, #188]	; (8014ba8 <icmp_input+0x200>)
 8014aec:	f001 fb20 	bl	8016130 <iprintf>
          goto icmperr;
 8014af0:	e04b      	b.n	8014b8a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	685b      	ldr	r3, [r3, #4]
 8014af6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014af8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014afa:	4619      	mov	r1, r3
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f7f8 fc27 	bl	800d350 <pbuf_add_header>
 8014b02:	4603      	mov	r3, r0
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d12b      	bne.n	8014b60 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	685b      	ldr	r3, [r3, #4]
 8014b0c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	681a      	ldr	r2, [r3, #0]
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014b16:	4b20      	ldr	r3, [pc, #128]	; (8014b98 <icmp_input+0x1f0>)
 8014b18:	691a      	ldr	r2, [r3, #16]
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014b1e:	693b      	ldr	r3, [r7, #16]
 8014b20:	2200      	movs	r2, #0
 8014b22:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014b24:	693b      	ldr	r3, [r7, #16]
 8014b26:	2200      	movs	r2, #0
 8014b28:	709a      	strb	r2, [r3, #2]
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	22ff      	movs	r2, #255	; 0xff
 8014b32:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	2200      	movs	r2, #0
 8014b38:	729a      	strb	r2, [r3, #10]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	9302      	str	r3, [sp, #8]
 8014b42:	2301      	movs	r3, #1
 8014b44:	9301      	str	r3, [sp, #4]
 8014b46:	2300      	movs	r3, #0
 8014b48:	9300      	str	r3, [sp, #0]
 8014b4a:	23ff      	movs	r3, #255	; 0xff
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	69f9      	ldr	r1, [r7, #28]
 8014b50:	6878      	ldr	r0, [r7, #4]
 8014b52:	f000 fa75 	bl	8015040 <ip4_output_if>
 8014b56:	4603      	mov	r3, r0
 8014b58:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014b5a:	e001      	b.n	8014b60 <icmp_input+0x1b8>
      break;
 8014b5c:	bf00      	nop
 8014b5e:	e000      	b.n	8014b62 <icmp_input+0x1ba>
      break;
 8014b60:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	f7f8 fc8a 	bl	800d47c <pbuf_free>
  return;
 8014b68:	e013      	b.n	8014b92 <icmp_input+0x1ea>
    goto lenerr;
 8014b6a:	bf00      	nop
 8014b6c:	e002      	b.n	8014b74 <icmp_input+0x1cc>
    goto lenerr;
 8014b6e:	bf00      	nop
 8014b70:	e000      	b.n	8014b74 <icmp_input+0x1cc>
        goto lenerr;
 8014b72:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f7f8 fc81 	bl	800d47c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014b7a:	e00a      	b.n	8014b92 <icmp_input+0x1ea>
        goto icmperr;
 8014b7c:	bf00      	nop
 8014b7e:	e004      	b.n	8014b8a <icmp_input+0x1e2>
        goto icmperr;
 8014b80:	bf00      	nop
 8014b82:	e002      	b.n	8014b8a <icmp_input+0x1e2>
          goto icmperr;
 8014b84:	bf00      	nop
 8014b86:	e000      	b.n	8014b8a <icmp_input+0x1e2>
          goto icmperr;
 8014b88:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f7f8 fc76 	bl	800d47c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014b90:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014b92:	3728      	adds	r7, #40	; 0x28
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}
 8014b98:	20006180 	.word	0x20006180
 8014b9c:	20006194 	.word	0x20006194
 8014ba0:	080199e8 	.word	0x080199e8
 8014ba4:	08019a20 	.word	0x08019a20
 8014ba8:	08019a58 	.word	0x08019a58
 8014bac:	08019a80 	.word	0x08019a80

08014bb0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b082      	sub	sp, #8
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
 8014bb8:	460b      	mov	r3, r1
 8014bba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014bbc:	78fb      	ldrb	r3, [r7, #3]
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	2103      	movs	r1, #3
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f000 f814 	bl	8014bf0 <icmp_send_response>
}
 8014bc8:	bf00      	nop
 8014bca:	3708      	adds	r7, #8
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}

08014bd0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b082      	sub	sp, #8
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	460b      	mov	r3, r1
 8014bda:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014bdc:	78fb      	ldrb	r3, [r7, #3]
 8014bde:	461a      	mov	r2, r3
 8014be0:	210b      	movs	r1, #11
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	f000 f804 	bl	8014bf0 <icmp_send_response>
}
 8014be8:	bf00      	nop
 8014bea:	3708      	adds	r7, #8
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd80      	pop	{r7, pc}

08014bf0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b08c      	sub	sp, #48	; 0x30
 8014bf4:	af04      	add	r7, sp, #16
 8014bf6:	6078      	str	r0, [r7, #4]
 8014bf8:	460b      	mov	r3, r1
 8014bfa:	70fb      	strb	r3, [r7, #3]
 8014bfc:	4613      	mov	r3, r2
 8014bfe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014c00:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c04:	2124      	movs	r1, #36	; 0x24
 8014c06:	2022      	movs	r0, #34	; 0x22
 8014c08:	f7f8 f954 	bl	800ceb4 <pbuf_alloc>
 8014c0c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014c0e:	69fb      	ldr	r3, [r7, #28]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d04c      	beq.n	8014cae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014c14:	69fb      	ldr	r3, [r7, #28]
 8014c16:	895b      	ldrh	r3, [r3, #10]
 8014c18:	2b23      	cmp	r3, #35	; 0x23
 8014c1a:	d806      	bhi.n	8014c2a <icmp_send_response+0x3a>
 8014c1c:	4b26      	ldr	r3, [pc, #152]	; (8014cb8 <icmp_send_response+0xc8>)
 8014c1e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014c22:	4926      	ldr	r1, [pc, #152]	; (8014cbc <icmp_send_response+0xcc>)
 8014c24:	4826      	ldr	r0, [pc, #152]	; (8014cc0 <icmp_send_response+0xd0>)
 8014c26:	f001 fa83 	bl	8016130 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	685b      	ldr	r3, [r3, #4]
 8014c2e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014c30:	69fb      	ldr	r3, [r7, #28]
 8014c32:	685b      	ldr	r3, [r3, #4]
 8014c34:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	78fa      	ldrb	r2, [r7, #3]
 8014c3a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	78ba      	ldrb	r2, [r7, #2]
 8014c40:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014c42:	697b      	ldr	r3, [r7, #20]
 8014c44:	2200      	movs	r2, #0
 8014c46:	711a      	strb	r2, [r3, #4]
 8014c48:	2200      	movs	r2, #0
 8014c4a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014c4c:	697b      	ldr	r3, [r7, #20]
 8014c4e:	2200      	movs	r2, #0
 8014c50:	719a      	strb	r2, [r3, #6]
 8014c52:	2200      	movs	r2, #0
 8014c54:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014c56:	69fb      	ldr	r3, [r7, #28]
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	f103 0008 	add.w	r0, r3, #8
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	685b      	ldr	r3, [r3, #4]
 8014c62:	221c      	movs	r2, #28
 8014c64:	4619      	mov	r1, r3
 8014c66:	f001 fa4d 	bl	8016104 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014c6a:	69bb      	ldr	r3, [r7, #24]
 8014c6c:	68db      	ldr	r3, [r3, #12]
 8014c6e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014c70:	f107 030c 	add.w	r3, r7, #12
 8014c74:	4618      	mov	r0, r3
 8014c76:	f000 f825 	bl	8014cc4 <ip4_route>
 8014c7a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014c7c:	693b      	ldr	r3, [r7, #16]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d011      	beq.n	8014ca6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014c82:	697b      	ldr	r3, [r7, #20]
 8014c84:	2200      	movs	r2, #0
 8014c86:	709a      	strb	r2, [r3, #2]
 8014c88:	2200      	movs	r2, #0
 8014c8a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014c8c:	f107 020c 	add.w	r2, r7, #12
 8014c90:	693b      	ldr	r3, [r7, #16]
 8014c92:	9302      	str	r3, [sp, #8]
 8014c94:	2301      	movs	r3, #1
 8014c96:	9301      	str	r3, [sp, #4]
 8014c98:	2300      	movs	r3, #0
 8014c9a:	9300      	str	r3, [sp, #0]
 8014c9c:	23ff      	movs	r3, #255	; 0xff
 8014c9e:	2100      	movs	r1, #0
 8014ca0:	69f8      	ldr	r0, [r7, #28]
 8014ca2:	f000 f9cd 	bl	8015040 <ip4_output_if>
  }
  pbuf_free(q);
 8014ca6:	69f8      	ldr	r0, [r7, #28]
 8014ca8:	f7f8 fbe8 	bl	800d47c <pbuf_free>
 8014cac:	e000      	b.n	8014cb0 <icmp_send_response+0xc0>
    return;
 8014cae:	bf00      	nop
}
 8014cb0:	3720      	adds	r7, #32
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd80      	pop	{r7, pc}
 8014cb6:	bf00      	nop
 8014cb8:	080199e8 	.word	0x080199e8
 8014cbc:	08019ab4 	.word	0x08019ab4
 8014cc0:	08019a58 	.word	0x08019a58

08014cc4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	b085      	sub	sp, #20
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014ccc:	4b33      	ldr	r3, [pc, #204]	; (8014d9c <ip4_route+0xd8>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	60fb      	str	r3, [r7, #12]
 8014cd2:	e036      	b.n	8014d42 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014cda:	f003 0301 	and.w	r3, r3, #1
 8014cde:	b2db      	uxtb	r3, r3
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d02b      	beq.n	8014d3c <ip4_route+0x78>
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014cea:	089b      	lsrs	r3, r3, #2
 8014cec:	f003 0301 	and.w	r3, r3, #1
 8014cf0:	b2db      	uxtb	r3, r3
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d022      	beq.n	8014d3c <ip4_route+0x78>
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	3304      	adds	r3, #4
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d01d      	beq.n	8014d3c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	681a      	ldr	r2, [r3, #0]
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	3304      	adds	r3, #4
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	405a      	eors	r2, r3
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	3308      	adds	r3, #8
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	4013      	ands	r3, r2
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d101      	bne.n	8014d1c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	e038      	b.n	8014d8e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d22:	f003 0302 	and.w	r3, r3, #2
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d108      	bne.n	8014d3c <ip4_route+0x78>
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681a      	ldr	r2, [r3, #0]
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	330c      	adds	r3, #12
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d101      	bne.n	8014d3c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	e028      	b.n	8014d8e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	60fb      	str	r3, [r7, #12]
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d1c5      	bne.n	8014cd4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014d48:	4b15      	ldr	r3, [pc, #84]	; (8014da0 <ip4_route+0xdc>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d01a      	beq.n	8014d86 <ip4_route+0xc2>
 8014d50:	4b13      	ldr	r3, [pc, #76]	; (8014da0 <ip4_route+0xdc>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d58:	f003 0301 	and.w	r3, r3, #1
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d012      	beq.n	8014d86 <ip4_route+0xc2>
 8014d60:	4b0f      	ldr	r3, [pc, #60]	; (8014da0 <ip4_route+0xdc>)
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d68:	f003 0304 	and.w	r3, r3, #4
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d00a      	beq.n	8014d86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014d70:	4b0b      	ldr	r3, [pc, #44]	; (8014da0 <ip4_route+0xdc>)
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	3304      	adds	r3, #4
 8014d76:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d004      	beq.n	8014d86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	2b7f      	cmp	r3, #127	; 0x7f
 8014d84:	d101      	bne.n	8014d8a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014d86:	2300      	movs	r3, #0
 8014d88:	e001      	b.n	8014d8e <ip4_route+0xca>
  }

  return netif_default;
 8014d8a:	4b05      	ldr	r3, [pc, #20]	; (8014da0 <ip4_route+0xdc>)
 8014d8c:	681b      	ldr	r3, [r3, #0]
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	3714      	adds	r7, #20
 8014d92:	46bd      	mov	sp, r7
 8014d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d98:	4770      	bx	lr
 8014d9a:	bf00      	nop
 8014d9c:	200096e4 	.word	0x200096e4
 8014da0:	200096e8 	.word	0x200096e8

08014da4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b082      	sub	sp, #8
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014db2:	f003 0301 	and.w	r3, r3, #1
 8014db6:	b2db      	uxtb	r3, r3
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d016      	beq.n	8014dea <ip4_input_accept+0x46>
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	3304      	adds	r3, #4
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d011      	beq.n	8014dea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014dc6:	4b0b      	ldr	r3, [pc, #44]	; (8014df4 <ip4_input_accept+0x50>)
 8014dc8:	695a      	ldr	r2, [r3, #20]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	3304      	adds	r3, #4
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d008      	beq.n	8014de6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014dd4:	4b07      	ldr	r3, [pc, #28]	; (8014df4 <ip4_input_accept+0x50>)
 8014dd6:	695b      	ldr	r3, [r3, #20]
 8014dd8:	6879      	ldr	r1, [r7, #4]
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f000 fa08 	bl	80151f0 <ip4_addr_isbroadcast_u32>
 8014de0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d001      	beq.n	8014dea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014de6:	2301      	movs	r3, #1
 8014de8:	e000      	b.n	8014dec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014dea:	2300      	movs	r3, #0
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}
 8014df4:	20006180 	.word	0x20006180

08014df8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b086      	sub	sp, #24
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
 8014e00:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	781b      	ldrb	r3, [r3, #0]
 8014e0c:	091b      	lsrs	r3, r3, #4
 8014e0e:	b2db      	uxtb	r3, r3
 8014e10:	2b04      	cmp	r3, #4
 8014e12:	d004      	beq.n	8014e1e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f7f8 fb31 	bl	800d47c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	e107      	b.n	801502e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	f003 030f 	and.w	r3, r3, #15
 8014e26:	b2db      	uxtb	r3, r3
 8014e28:	009b      	lsls	r3, r3, #2
 8014e2a:	b2db      	uxtb	r3, r3
 8014e2c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	885b      	ldrh	r3, [r3, #2]
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	4618      	mov	r0, r3
 8014e36:	f7f6 ffc3 	bl	800bdc0 <lwip_htons>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	891b      	ldrh	r3, [r3, #8]
 8014e42:	89ba      	ldrh	r2, [r7, #12]
 8014e44:	429a      	cmp	r2, r3
 8014e46:	d204      	bcs.n	8014e52 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014e48:	89bb      	ldrh	r3, [r7, #12]
 8014e4a:	4619      	mov	r1, r3
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	f7f8 f98f 	bl	800d170 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	895b      	ldrh	r3, [r3, #10]
 8014e56:	89fa      	ldrh	r2, [r7, #14]
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d807      	bhi.n	8014e6c <ip4_input+0x74>
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	891b      	ldrh	r3, [r3, #8]
 8014e60:	89ba      	ldrh	r2, [r7, #12]
 8014e62:	429a      	cmp	r2, r3
 8014e64:	d802      	bhi.n	8014e6c <ip4_input+0x74>
 8014e66:	89fb      	ldrh	r3, [r7, #14]
 8014e68:	2b13      	cmp	r3, #19
 8014e6a:	d804      	bhi.n	8014e76 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014e6c:	6878      	ldr	r0, [r7, #4]
 8014e6e:	f7f8 fb05 	bl	800d47c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014e72:	2300      	movs	r3, #0
 8014e74:	e0db      	b.n	801502e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014e76:	697b      	ldr	r3, [r7, #20]
 8014e78:	691b      	ldr	r3, [r3, #16]
 8014e7a:	4a6f      	ldr	r2, [pc, #444]	; (8015038 <ip4_input+0x240>)
 8014e7c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	68db      	ldr	r3, [r3, #12]
 8014e82:	4a6d      	ldr	r2, [pc, #436]	; (8015038 <ip4_input+0x240>)
 8014e84:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014e86:	4b6c      	ldr	r3, [pc, #432]	; (8015038 <ip4_input+0x240>)
 8014e88:	695b      	ldr	r3, [r3, #20]
 8014e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e8e:	2be0      	cmp	r3, #224	; 0xe0
 8014e90:	d112      	bne.n	8014eb8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e98:	f003 0301 	and.w	r3, r3, #1
 8014e9c:	b2db      	uxtb	r3, r3
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d007      	beq.n	8014eb2 <ip4_input+0xba>
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	3304      	adds	r3, #4
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d002      	beq.n	8014eb2 <ip4_input+0xba>
      netif = inp;
 8014eac:	683b      	ldr	r3, [r7, #0]
 8014eae:	613b      	str	r3, [r7, #16]
 8014eb0:	e02a      	b.n	8014f08 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	613b      	str	r3, [r7, #16]
 8014eb6:	e027      	b.n	8014f08 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014eb8:	6838      	ldr	r0, [r7, #0]
 8014eba:	f7ff ff73 	bl	8014da4 <ip4_input_accept>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d002      	beq.n	8014eca <ip4_input+0xd2>
      netif = inp;
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	613b      	str	r3, [r7, #16]
 8014ec8:	e01e      	b.n	8014f08 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014ece:	4b5a      	ldr	r3, [pc, #360]	; (8015038 <ip4_input+0x240>)
 8014ed0:	695b      	ldr	r3, [r3, #20]
 8014ed2:	b2db      	uxtb	r3, r3
 8014ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8014ed6:	d017      	beq.n	8014f08 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014ed8:	4b58      	ldr	r3, [pc, #352]	; (801503c <ip4_input+0x244>)
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	613b      	str	r3, [r7, #16]
 8014ede:	e00e      	b.n	8014efe <ip4_input+0x106>
          if (netif == inp) {
 8014ee0:	693a      	ldr	r2, [r7, #16]
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	429a      	cmp	r2, r3
 8014ee6:	d006      	beq.n	8014ef6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014ee8:	6938      	ldr	r0, [r7, #16]
 8014eea:	f7ff ff5b 	bl	8014da4 <ip4_input_accept>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d108      	bne.n	8014f06 <ip4_input+0x10e>
 8014ef4:	e000      	b.n	8014ef8 <ip4_input+0x100>
            continue;
 8014ef6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014ef8:	693b      	ldr	r3, [r7, #16]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	613b      	str	r3, [r7, #16]
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d1ed      	bne.n	8014ee0 <ip4_input+0xe8>
 8014f04:	e000      	b.n	8014f08 <ip4_input+0x110>
            break;
 8014f06:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014f08:	4b4b      	ldr	r3, [pc, #300]	; (8015038 <ip4_input+0x240>)
 8014f0a:	691b      	ldr	r3, [r3, #16]
 8014f0c:	6839      	ldr	r1, [r7, #0]
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f000 f96e 	bl	80151f0 <ip4_addr_isbroadcast_u32>
 8014f14:	4603      	mov	r3, r0
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d105      	bne.n	8014f26 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014f1a:	4b47      	ldr	r3, [pc, #284]	; (8015038 <ip4_input+0x240>)
 8014f1c:	691b      	ldr	r3, [r3, #16]
 8014f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014f22:	2be0      	cmp	r3, #224	; 0xe0
 8014f24:	d104      	bne.n	8014f30 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f7f8 faa8 	bl	800d47c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	e07e      	b.n	801502e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d104      	bne.n	8014f40 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f7f8 faa0 	bl	800d47c <pbuf_free>
    return ERR_OK;
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	e076      	b.n	801502e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014f40:	697b      	ldr	r3, [r7, #20]
 8014f42:	88db      	ldrh	r3, [r3, #6]
 8014f44:	b29b      	uxth	r3, r3
 8014f46:	461a      	mov	r2, r3
 8014f48:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014f4c:	4013      	ands	r3, r2
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d00b      	beq.n	8014f6a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014f52:	6878      	ldr	r0, [r7, #4]
 8014f54:	f000 fc92 	bl	801587c <ip4_reass>
 8014f58:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d101      	bne.n	8014f64 <ip4_input+0x16c>
      return ERR_OK;
 8014f60:	2300      	movs	r3, #0
 8014f62:	e064      	b.n	801502e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	685b      	ldr	r3, [r3, #4]
 8014f68:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014f6a:	4a33      	ldr	r2, [pc, #204]	; (8015038 <ip4_input+0x240>)
 8014f6c:	693b      	ldr	r3, [r7, #16]
 8014f6e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014f70:	4a31      	ldr	r2, [pc, #196]	; (8015038 <ip4_input+0x240>)
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014f76:	4a30      	ldr	r2, [pc, #192]	; (8015038 <ip4_input+0x240>)
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	781b      	ldrb	r3, [r3, #0]
 8014f80:	f003 030f 	and.w	r3, r3, #15
 8014f84:	b2db      	uxtb	r3, r3
 8014f86:	009b      	lsls	r3, r3, #2
 8014f88:	b2db      	uxtb	r3, r3
 8014f8a:	b29a      	uxth	r2, r3
 8014f8c:	4b2a      	ldr	r3, [pc, #168]	; (8015038 <ip4_input+0x240>)
 8014f8e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014f90:	89fb      	ldrh	r3, [r7, #14]
 8014f92:	4619      	mov	r1, r3
 8014f94:	6878      	ldr	r0, [r7, #4]
 8014f96:	f7f8 f9eb 	bl	800d370 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014f9a:	697b      	ldr	r3, [r7, #20]
 8014f9c:	7a5b      	ldrb	r3, [r3, #9]
 8014f9e:	2b11      	cmp	r3, #17
 8014fa0:	d006      	beq.n	8014fb0 <ip4_input+0x1b8>
 8014fa2:	2b11      	cmp	r3, #17
 8014fa4:	dc13      	bgt.n	8014fce <ip4_input+0x1d6>
 8014fa6:	2b01      	cmp	r3, #1
 8014fa8:	d00c      	beq.n	8014fc4 <ip4_input+0x1cc>
 8014faa:	2b06      	cmp	r3, #6
 8014fac:	d005      	beq.n	8014fba <ip4_input+0x1c2>
 8014fae:	e00e      	b.n	8014fce <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014fb0:	6839      	ldr	r1, [r7, #0]
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f7fe f8e6 	bl	8013184 <udp_input>
        break;
 8014fb8:	e026      	b.n	8015008 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014fba:	6839      	ldr	r1, [r7, #0]
 8014fbc:	6878      	ldr	r0, [r7, #4]
 8014fbe:	f7fa f927 	bl	800f210 <tcp_input>
        break;
 8014fc2:	e021      	b.n	8015008 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014fc4:	6839      	ldr	r1, [r7, #0]
 8014fc6:	6878      	ldr	r0, [r7, #4]
 8014fc8:	f7ff fcee 	bl	80149a8 <icmp_input>
        break;
 8014fcc:	e01c      	b.n	8015008 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014fce:	4b1a      	ldr	r3, [pc, #104]	; (8015038 <ip4_input+0x240>)
 8014fd0:	695b      	ldr	r3, [r3, #20]
 8014fd2:	6939      	ldr	r1, [r7, #16]
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f000 f90b 	bl	80151f0 <ip4_addr_isbroadcast_u32>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d10f      	bne.n	8015000 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014fe0:	4b15      	ldr	r3, [pc, #84]	; (8015038 <ip4_input+0x240>)
 8014fe2:	695b      	ldr	r3, [r3, #20]
 8014fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014fe8:	2be0      	cmp	r3, #224	; 0xe0
 8014fea:	d009      	beq.n	8015000 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014fec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ff0:	4619      	mov	r1, r3
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f7f8 fa2f 	bl	800d456 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014ff8:	2102      	movs	r1, #2
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f7ff fdd8 	bl	8014bb0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f7f8 fa3b 	bl	800d47c <pbuf_free>
        break;
 8015006:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015008:	4b0b      	ldr	r3, [pc, #44]	; (8015038 <ip4_input+0x240>)
 801500a:	2200      	movs	r2, #0
 801500c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801500e:	4b0a      	ldr	r3, [pc, #40]	; (8015038 <ip4_input+0x240>)
 8015010:	2200      	movs	r2, #0
 8015012:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015014:	4b08      	ldr	r3, [pc, #32]	; (8015038 <ip4_input+0x240>)
 8015016:	2200      	movs	r2, #0
 8015018:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801501a:	4b07      	ldr	r3, [pc, #28]	; (8015038 <ip4_input+0x240>)
 801501c:	2200      	movs	r2, #0
 801501e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015020:	4b05      	ldr	r3, [pc, #20]	; (8015038 <ip4_input+0x240>)
 8015022:	2200      	movs	r2, #0
 8015024:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015026:	4b04      	ldr	r3, [pc, #16]	; (8015038 <ip4_input+0x240>)
 8015028:	2200      	movs	r2, #0
 801502a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801502c:	2300      	movs	r3, #0
}
 801502e:	4618      	mov	r0, r3
 8015030:	3718      	adds	r7, #24
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	20006180 	.word	0x20006180
 801503c:	200096e4 	.word	0x200096e4

08015040 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b08a      	sub	sp, #40	; 0x28
 8015044:	af04      	add	r7, sp, #16
 8015046:	60f8      	str	r0, [r7, #12]
 8015048:	60b9      	str	r1, [r7, #8]
 801504a:	607a      	str	r2, [r7, #4]
 801504c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d009      	beq.n	801506c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015058:	68bb      	ldr	r3, [r7, #8]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d003      	beq.n	8015066 <ip4_output_if+0x26>
 801505e:	68bb      	ldr	r3, [r7, #8]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d102      	bne.n	801506c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015068:	3304      	adds	r3, #4
 801506a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801506c:	78fa      	ldrb	r2, [r7, #3]
 801506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015070:	9302      	str	r3, [sp, #8]
 8015072:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015076:	9301      	str	r3, [sp, #4]
 8015078:	f897 3020 	ldrb.w	r3, [r7, #32]
 801507c:	9300      	str	r3, [sp, #0]
 801507e:	4613      	mov	r3, r2
 8015080:	687a      	ldr	r2, [r7, #4]
 8015082:	6979      	ldr	r1, [r7, #20]
 8015084:	68f8      	ldr	r0, [r7, #12]
 8015086:	f000 f805 	bl	8015094 <ip4_output_if_src>
 801508a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801508c:	4618      	mov	r0, r3
 801508e:	3718      	adds	r7, #24
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}

08015094 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b088      	sub	sp, #32
 8015098:	af00      	add	r7, sp, #0
 801509a:	60f8      	str	r0, [r7, #12]
 801509c:	60b9      	str	r1, [r7, #8]
 801509e:	607a      	str	r2, [r7, #4]
 80150a0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	7b9b      	ldrb	r3, [r3, #14]
 80150a6:	2b01      	cmp	r3, #1
 80150a8:	d006      	beq.n	80150b8 <ip4_output_if_src+0x24>
 80150aa:	4b4b      	ldr	r3, [pc, #300]	; (80151d8 <ip4_output_if_src+0x144>)
 80150ac:	f44f 7255 	mov.w	r2, #852	; 0x354
 80150b0:	494a      	ldr	r1, [pc, #296]	; (80151dc <ip4_output_if_src+0x148>)
 80150b2:	484b      	ldr	r0, [pc, #300]	; (80151e0 <ip4_output_if_src+0x14c>)
 80150b4:	f001 f83c 	bl	8016130 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d060      	beq.n	8015180 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80150be:	2314      	movs	r3, #20
 80150c0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80150c2:	2114      	movs	r1, #20
 80150c4:	68f8      	ldr	r0, [r7, #12]
 80150c6:	f7f8 f943 	bl	800d350 <pbuf_add_header>
 80150ca:	4603      	mov	r3, r0
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d002      	beq.n	80150d6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80150d0:	f06f 0301 	mvn.w	r3, #1
 80150d4:	e07c      	b.n	80151d0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	685b      	ldr	r3, [r3, #4]
 80150da:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	895b      	ldrh	r3, [r3, #10]
 80150e0:	2b13      	cmp	r3, #19
 80150e2:	d806      	bhi.n	80150f2 <ip4_output_if_src+0x5e>
 80150e4:	4b3c      	ldr	r3, [pc, #240]	; (80151d8 <ip4_output_if_src+0x144>)
 80150e6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80150ea:	493e      	ldr	r1, [pc, #248]	; (80151e4 <ip4_output_if_src+0x150>)
 80150ec:	483c      	ldr	r0, [pc, #240]	; (80151e0 <ip4_output_if_src+0x14c>)
 80150ee:	f001 f81f 	bl	8016130 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80150f2:	69fb      	ldr	r3, [r7, #28]
 80150f4:	78fa      	ldrb	r2, [r7, #3]
 80150f6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80150f8:	69fb      	ldr	r3, [r7, #28]
 80150fa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80150fe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	69fb      	ldr	r3, [r7, #28]
 8015106:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015108:	8b7b      	ldrh	r3, [r7, #26]
 801510a:	089b      	lsrs	r3, r3, #2
 801510c:	b29b      	uxth	r3, r3
 801510e:	b2db      	uxtb	r3, r3
 8015110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015114:	b2da      	uxtb	r2, r3
 8015116:	69fb      	ldr	r3, [r7, #28]
 8015118:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801511a:	69fb      	ldr	r3, [r7, #28]
 801511c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015120:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	891b      	ldrh	r3, [r3, #8]
 8015126:	4618      	mov	r0, r3
 8015128:	f7f6 fe4a 	bl	800bdc0 <lwip_htons>
 801512c:	4603      	mov	r3, r0
 801512e:	461a      	mov	r2, r3
 8015130:	69fb      	ldr	r3, [r7, #28]
 8015132:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015134:	69fb      	ldr	r3, [r7, #28]
 8015136:	2200      	movs	r2, #0
 8015138:	719a      	strb	r2, [r3, #6]
 801513a:	2200      	movs	r2, #0
 801513c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801513e:	4b2a      	ldr	r3, [pc, #168]	; (80151e8 <ip4_output_if_src+0x154>)
 8015140:	881b      	ldrh	r3, [r3, #0]
 8015142:	4618      	mov	r0, r3
 8015144:	f7f6 fe3c 	bl	800bdc0 <lwip_htons>
 8015148:	4603      	mov	r3, r0
 801514a:	461a      	mov	r2, r3
 801514c:	69fb      	ldr	r3, [r7, #28]
 801514e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015150:	4b25      	ldr	r3, [pc, #148]	; (80151e8 <ip4_output_if_src+0x154>)
 8015152:	881b      	ldrh	r3, [r3, #0]
 8015154:	3301      	adds	r3, #1
 8015156:	b29a      	uxth	r2, r3
 8015158:	4b23      	ldr	r3, [pc, #140]	; (80151e8 <ip4_output_if_src+0x154>)
 801515a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d104      	bne.n	801516c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015162:	4b22      	ldr	r3, [pc, #136]	; (80151ec <ip4_output_if_src+0x158>)
 8015164:	681a      	ldr	r2, [r3, #0]
 8015166:	69fb      	ldr	r3, [r7, #28]
 8015168:	60da      	str	r2, [r3, #12]
 801516a:	e003      	b.n	8015174 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	681a      	ldr	r2, [r3, #0]
 8015170:	69fb      	ldr	r3, [r7, #28]
 8015172:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015174:	69fb      	ldr	r3, [r7, #28]
 8015176:	2200      	movs	r2, #0
 8015178:	729a      	strb	r2, [r3, #10]
 801517a:	2200      	movs	r2, #0
 801517c:	72da      	strb	r2, [r3, #11]
 801517e:	e00f      	b.n	80151a0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	895b      	ldrh	r3, [r3, #10]
 8015184:	2b13      	cmp	r3, #19
 8015186:	d802      	bhi.n	801518e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015188:	f06f 0301 	mvn.w	r3, #1
 801518c:	e020      	b.n	80151d0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	685b      	ldr	r3, [r3, #4]
 8015192:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015194:	69fb      	ldr	r3, [r7, #28]
 8015196:	691b      	ldr	r3, [r3, #16]
 8015198:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801519a:	f107 0314 	add.w	r3, r7, #20
 801519e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80151a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d00c      	beq.n	80151c2 <ip4_output_if_src+0x12e>
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	891a      	ldrh	r2, [r3, #8]
 80151ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80151b0:	429a      	cmp	r2, r3
 80151b2:	d906      	bls.n	80151c2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80151b4:	687a      	ldr	r2, [r7, #4]
 80151b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80151b8:	68f8      	ldr	r0, [r7, #12]
 80151ba:	f000 fd53 	bl	8015c64 <ip4_frag>
 80151be:	4603      	mov	r3, r0
 80151c0:	e006      	b.n	80151d0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80151c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c4:	695b      	ldr	r3, [r3, #20]
 80151c6:	687a      	ldr	r2, [r7, #4]
 80151c8:	68f9      	ldr	r1, [r7, #12]
 80151ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80151cc:	4798      	blx	r3
 80151ce:	4603      	mov	r3, r0
}
 80151d0:	4618      	mov	r0, r3
 80151d2:	3720      	adds	r7, #32
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	08019ae0 	.word	0x08019ae0
 80151dc:	08019b14 	.word	0x08019b14
 80151e0:	08019b20 	.word	0x08019b20
 80151e4:	08019b48 	.word	0x08019b48
 80151e8:	20009842 	.word	0x20009842
 80151ec:	08019f30 	.word	0x08019f30

080151f0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80151f0:	b480      	push	{r7}
 80151f2:	b085      	sub	sp, #20
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
 80151f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015204:	d002      	beq.n	801520c <ip4_addr_isbroadcast_u32+0x1c>
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d101      	bne.n	8015210 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801520c:	2301      	movs	r3, #1
 801520e:	e02a      	b.n	8015266 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015216:	f003 0302 	and.w	r3, r3, #2
 801521a:	2b00      	cmp	r3, #0
 801521c:	d101      	bne.n	8015222 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801521e:	2300      	movs	r3, #0
 8015220:	e021      	b.n	8015266 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	3304      	adds	r3, #4
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	687a      	ldr	r2, [r7, #4]
 801522a:	429a      	cmp	r2, r3
 801522c:	d101      	bne.n	8015232 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801522e:	2300      	movs	r3, #0
 8015230:	e019      	b.n	8015266 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015232:	68fa      	ldr	r2, [r7, #12]
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	3304      	adds	r3, #4
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	405a      	eors	r2, r3
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	3308      	adds	r3, #8
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	4013      	ands	r3, r2
 8015244:	2b00      	cmp	r3, #0
 8015246:	d10d      	bne.n	8015264 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	3308      	adds	r3, #8
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	43da      	mvns	r2, r3
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	3308      	adds	r3, #8
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801525c:	429a      	cmp	r2, r3
 801525e:	d101      	bne.n	8015264 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015260:	2301      	movs	r3, #1
 8015262:	e000      	b.n	8015266 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015264:	2300      	movs	r3, #0
  }
}
 8015266:	4618      	mov	r0, r3
 8015268:	3714      	adds	r7, #20
 801526a:	46bd      	mov	sp, r7
 801526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015270:	4770      	bx	lr
	...

08015274 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b084      	sub	sp, #16
 8015278:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801527a:	2300      	movs	r3, #0
 801527c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801527e:	4b12      	ldr	r3, [pc, #72]	; (80152c8 <ip_reass_tmr+0x54>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015284:	e018      	b.n	80152b8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	7fdb      	ldrb	r3, [r3, #31]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d00b      	beq.n	80152a6 <ip_reass_tmr+0x32>
      r->timer--;
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	7fdb      	ldrb	r3, [r3, #31]
 8015292:	3b01      	subs	r3, #1
 8015294:	b2da      	uxtb	r2, r3
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	60fb      	str	r3, [r7, #12]
 80152a4:	e008      	b.n	80152b8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80152b0:	68b9      	ldr	r1, [r7, #8]
 80152b2:	6878      	ldr	r0, [r7, #4]
 80152b4:	f000 f80a 	bl	80152cc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d1e3      	bne.n	8015286 <ip_reass_tmr+0x12>
    }
  }
}
 80152be:	bf00      	nop
 80152c0:	bf00      	nop
 80152c2:	3710      	adds	r7, #16
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bd80      	pop	{r7, pc}
 80152c8:	20009844 	.word	0x20009844

080152cc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b088      	sub	sp, #32
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80152d6:	2300      	movs	r3, #0
 80152d8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80152da:	683a      	ldr	r2, [r7, #0]
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	429a      	cmp	r2, r3
 80152e0:	d105      	bne.n	80152ee <ip_reass_free_complete_datagram+0x22>
 80152e2:	4b45      	ldr	r3, [pc, #276]	; (80153f8 <ip_reass_free_complete_datagram+0x12c>)
 80152e4:	22ab      	movs	r2, #171	; 0xab
 80152e6:	4945      	ldr	r1, [pc, #276]	; (80153fc <ip_reass_free_complete_datagram+0x130>)
 80152e8:	4845      	ldr	r0, [pc, #276]	; (8015400 <ip_reass_free_complete_datagram+0x134>)
 80152ea:	f000 ff21 	bl	8016130 <iprintf>
  if (prev != NULL) {
 80152ee:	683b      	ldr	r3, [r7, #0]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d00a      	beq.n	801530a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	687a      	ldr	r2, [r7, #4]
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d005      	beq.n	801530a <ip_reass_free_complete_datagram+0x3e>
 80152fe:	4b3e      	ldr	r3, [pc, #248]	; (80153f8 <ip_reass_free_complete_datagram+0x12c>)
 8015300:	22ad      	movs	r2, #173	; 0xad
 8015302:	4940      	ldr	r1, [pc, #256]	; (8015404 <ip_reass_free_complete_datagram+0x138>)
 8015304:	483e      	ldr	r0, [pc, #248]	; (8015400 <ip_reass_free_complete_datagram+0x134>)
 8015306:	f000 ff13 	bl	8016130 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	685b      	ldr	r3, [r3, #4]
 801530e:	685b      	ldr	r3, [r3, #4]
 8015310:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015312:	697b      	ldr	r3, [r7, #20]
 8015314:	889b      	ldrh	r3, [r3, #4]
 8015316:	b29b      	uxth	r3, r3
 8015318:	2b00      	cmp	r3, #0
 801531a:	d12a      	bne.n	8015372 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	685b      	ldr	r3, [r3, #4]
 8015320:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	681a      	ldr	r2, [r3, #0]
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801532a:	69bb      	ldr	r3, [r7, #24]
 801532c:	6858      	ldr	r0, [r3, #4]
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	3308      	adds	r3, #8
 8015332:	2214      	movs	r2, #20
 8015334:	4619      	mov	r1, r3
 8015336:	f000 fee5 	bl	8016104 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801533a:	2101      	movs	r1, #1
 801533c:	69b8      	ldr	r0, [r7, #24]
 801533e:	f7ff fc47 	bl	8014bd0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015342:	69b8      	ldr	r0, [r7, #24]
 8015344:	f7f8 f922 	bl	800d58c <pbuf_clen>
 8015348:	4603      	mov	r3, r0
 801534a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801534c:	8bfa      	ldrh	r2, [r7, #30]
 801534e:	8a7b      	ldrh	r3, [r7, #18]
 8015350:	4413      	add	r3, r2
 8015352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015356:	db05      	blt.n	8015364 <ip_reass_free_complete_datagram+0x98>
 8015358:	4b27      	ldr	r3, [pc, #156]	; (80153f8 <ip_reass_free_complete_datagram+0x12c>)
 801535a:	22bc      	movs	r2, #188	; 0xbc
 801535c:	492a      	ldr	r1, [pc, #168]	; (8015408 <ip_reass_free_complete_datagram+0x13c>)
 801535e:	4828      	ldr	r0, [pc, #160]	; (8015400 <ip_reass_free_complete_datagram+0x134>)
 8015360:	f000 fee6 	bl	8016130 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015364:	8bfa      	ldrh	r2, [r7, #30]
 8015366:	8a7b      	ldrh	r3, [r7, #18]
 8015368:	4413      	add	r3, r2
 801536a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801536c:	69b8      	ldr	r0, [r7, #24]
 801536e:	f7f8 f885 	bl	800d47c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	685b      	ldr	r3, [r3, #4]
 8015376:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015378:	e01f      	b.n	80153ba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801537a:	69bb      	ldr	r3, [r7, #24]
 801537c:	685b      	ldr	r3, [r3, #4]
 801537e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015380:	69bb      	ldr	r3, [r7, #24]
 8015382:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801538a:	68f8      	ldr	r0, [r7, #12]
 801538c:	f7f8 f8fe 	bl	800d58c <pbuf_clen>
 8015390:	4603      	mov	r3, r0
 8015392:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015394:	8bfa      	ldrh	r2, [r7, #30]
 8015396:	8a7b      	ldrh	r3, [r7, #18]
 8015398:	4413      	add	r3, r2
 801539a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801539e:	db05      	blt.n	80153ac <ip_reass_free_complete_datagram+0xe0>
 80153a0:	4b15      	ldr	r3, [pc, #84]	; (80153f8 <ip_reass_free_complete_datagram+0x12c>)
 80153a2:	22cc      	movs	r2, #204	; 0xcc
 80153a4:	4918      	ldr	r1, [pc, #96]	; (8015408 <ip_reass_free_complete_datagram+0x13c>)
 80153a6:	4816      	ldr	r0, [pc, #88]	; (8015400 <ip_reass_free_complete_datagram+0x134>)
 80153a8:	f000 fec2 	bl	8016130 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80153ac:	8bfa      	ldrh	r2, [r7, #30]
 80153ae:	8a7b      	ldrh	r3, [r7, #18]
 80153b0:	4413      	add	r3, r2
 80153b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80153b4:	68f8      	ldr	r0, [r7, #12]
 80153b6:	f7f8 f861 	bl	800d47c <pbuf_free>
  while (p != NULL) {
 80153ba:	69bb      	ldr	r3, [r7, #24]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d1dc      	bne.n	801537a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80153c0:	6839      	ldr	r1, [r7, #0]
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	f000 f8c2 	bl	801554c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80153c8:	4b10      	ldr	r3, [pc, #64]	; (801540c <ip_reass_free_complete_datagram+0x140>)
 80153ca:	881b      	ldrh	r3, [r3, #0]
 80153cc:	8bfa      	ldrh	r2, [r7, #30]
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d905      	bls.n	80153de <ip_reass_free_complete_datagram+0x112>
 80153d2:	4b09      	ldr	r3, [pc, #36]	; (80153f8 <ip_reass_free_complete_datagram+0x12c>)
 80153d4:	22d2      	movs	r2, #210	; 0xd2
 80153d6:	490e      	ldr	r1, [pc, #56]	; (8015410 <ip_reass_free_complete_datagram+0x144>)
 80153d8:	4809      	ldr	r0, [pc, #36]	; (8015400 <ip_reass_free_complete_datagram+0x134>)
 80153da:	f000 fea9 	bl	8016130 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80153de:	4b0b      	ldr	r3, [pc, #44]	; (801540c <ip_reass_free_complete_datagram+0x140>)
 80153e0:	881a      	ldrh	r2, [r3, #0]
 80153e2:	8bfb      	ldrh	r3, [r7, #30]
 80153e4:	1ad3      	subs	r3, r2, r3
 80153e6:	b29a      	uxth	r2, r3
 80153e8:	4b08      	ldr	r3, [pc, #32]	; (801540c <ip_reass_free_complete_datagram+0x140>)
 80153ea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80153ec:	8bfb      	ldrh	r3, [r7, #30]
}
 80153ee:	4618      	mov	r0, r3
 80153f0:	3720      	adds	r7, #32
 80153f2:	46bd      	mov	sp, r7
 80153f4:	bd80      	pop	{r7, pc}
 80153f6:	bf00      	nop
 80153f8:	08019b78 	.word	0x08019b78
 80153fc:	08019bb4 	.word	0x08019bb4
 8015400:	08019bc0 	.word	0x08019bc0
 8015404:	08019be8 	.word	0x08019be8
 8015408:	08019bfc 	.word	0x08019bfc
 801540c:	20009848 	.word	0x20009848
 8015410:	08019c1c 	.word	0x08019c1c

08015414 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b08a      	sub	sp, #40	; 0x28
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801541e:	2300      	movs	r3, #0
 8015420:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015422:	2300      	movs	r3, #0
 8015424:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015426:	2300      	movs	r3, #0
 8015428:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801542a:	2300      	movs	r3, #0
 801542c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801542e:	2300      	movs	r3, #0
 8015430:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015432:	4b28      	ldr	r3, [pc, #160]	; (80154d4 <ip_reass_remove_oldest_datagram+0xc0>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015438:	e030      	b.n	801549c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801543c:	695a      	ldr	r2, [r3, #20]
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	68db      	ldr	r3, [r3, #12]
 8015442:	429a      	cmp	r2, r3
 8015444:	d10c      	bne.n	8015460 <ip_reass_remove_oldest_datagram+0x4c>
 8015446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015448:	699a      	ldr	r2, [r3, #24]
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	691b      	ldr	r3, [r3, #16]
 801544e:	429a      	cmp	r2, r3
 8015450:	d106      	bne.n	8015460 <ip_reass_remove_oldest_datagram+0x4c>
 8015452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015454:	899a      	ldrh	r2, [r3, #12]
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	889b      	ldrh	r3, [r3, #4]
 801545a:	b29b      	uxth	r3, r3
 801545c:	429a      	cmp	r2, r3
 801545e:	d014      	beq.n	801548a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015460:	693b      	ldr	r3, [r7, #16]
 8015462:	3301      	adds	r3, #1
 8015464:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015466:	6a3b      	ldr	r3, [r7, #32]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d104      	bne.n	8015476 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801546e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015470:	69fb      	ldr	r3, [r7, #28]
 8015472:	61bb      	str	r3, [r7, #24]
 8015474:	e009      	b.n	801548a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015478:	7fda      	ldrb	r2, [r3, #31]
 801547a:	6a3b      	ldr	r3, [r7, #32]
 801547c:	7fdb      	ldrb	r3, [r3, #31]
 801547e:	429a      	cmp	r2, r3
 8015480:	d803      	bhi.n	801548a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015484:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015486:	69fb      	ldr	r3, [r7, #28]
 8015488:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d001      	beq.n	8015496 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015494:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d1cb      	bne.n	801543a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80154a2:	6a3b      	ldr	r3, [r7, #32]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d008      	beq.n	80154ba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80154a8:	69b9      	ldr	r1, [r7, #24]
 80154aa:	6a38      	ldr	r0, [r7, #32]
 80154ac:	f7ff ff0e 	bl	80152cc <ip_reass_free_complete_datagram>
 80154b0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80154b2:	697a      	ldr	r2, [r7, #20]
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	4413      	add	r3, r2
 80154b8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80154ba:	697a      	ldr	r2, [r7, #20]
 80154bc:	683b      	ldr	r3, [r7, #0]
 80154be:	429a      	cmp	r2, r3
 80154c0:	da02      	bge.n	80154c8 <ip_reass_remove_oldest_datagram+0xb4>
 80154c2:	693b      	ldr	r3, [r7, #16]
 80154c4:	2b01      	cmp	r3, #1
 80154c6:	dcac      	bgt.n	8015422 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80154c8:	697b      	ldr	r3, [r7, #20]
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	3728      	adds	r7, #40	; 0x28
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}
 80154d2:	bf00      	nop
 80154d4:	20009844 	.word	0x20009844

080154d8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b084      	sub	sp, #16
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
 80154e0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80154e2:	2004      	movs	r0, #4
 80154e4:	f7f7 f8e4 	bl	800c6b0 <memp_malloc>
 80154e8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d110      	bne.n	8015512 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80154f0:	6839      	ldr	r1, [r7, #0]
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f7ff ff8e 	bl	8015414 <ip_reass_remove_oldest_datagram>
 80154f8:	4602      	mov	r2, r0
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	4293      	cmp	r3, r2
 80154fe:	dc03      	bgt.n	8015508 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015500:	2004      	movs	r0, #4
 8015502:	f7f7 f8d5 	bl	800c6b0 <memp_malloc>
 8015506:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d101      	bne.n	8015512 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801550e:	2300      	movs	r3, #0
 8015510:	e016      	b.n	8015540 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015512:	2220      	movs	r2, #32
 8015514:	2100      	movs	r1, #0
 8015516:	68f8      	ldr	r0, [r7, #12]
 8015518:	f000 fe02 	bl	8016120 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	220f      	movs	r2, #15
 8015520:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015522:	4b09      	ldr	r3, [pc, #36]	; (8015548 <ip_reass_enqueue_new_datagram+0x70>)
 8015524:	681a      	ldr	r2, [r3, #0]
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801552a:	4a07      	ldr	r2, [pc, #28]	; (8015548 <ip_reass_enqueue_new_datagram+0x70>)
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	3308      	adds	r3, #8
 8015534:	2214      	movs	r2, #20
 8015536:	6879      	ldr	r1, [r7, #4]
 8015538:	4618      	mov	r0, r3
 801553a:	f000 fde3 	bl	8016104 <memcpy>
  return ipr;
 801553e:	68fb      	ldr	r3, [r7, #12]
}
 8015540:	4618      	mov	r0, r3
 8015542:	3710      	adds	r7, #16
 8015544:	46bd      	mov	sp, r7
 8015546:	bd80      	pop	{r7, pc}
 8015548:	20009844 	.word	0x20009844

0801554c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b082      	sub	sp, #8
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015556:	4b10      	ldr	r3, [pc, #64]	; (8015598 <ip_reass_dequeue_datagram+0x4c>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	687a      	ldr	r2, [r7, #4]
 801555c:	429a      	cmp	r2, r3
 801555e:	d104      	bne.n	801556a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	4a0c      	ldr	r2, [pc, #48]	; (8015598 <ip_reass_dequeue_datagram+0x4c>)
 8015566:	6013      	str	r3, [r2, #0]
 8015568:	e00d      	b.n	8015586 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d106      	bne.n	801557e <ip_reass_dequeue_datagram+0x32>
 8015570:	4b0a      	ldr	r3, [pc, #40]	; (801559c <ip_reass_dequeue_datagram+0x50>)
 8015572:	f240 1245 	movw	r2, #325	; 0x145
 8015576:	490a      	ldr	r1, [pc, #40]	; (80155a0 <ip_reass_dequeue_datagram+0x54>)
 8015578:	480a      	ldr	r0, [pc, #40]	; (80155a4 <ip_reass_dequeue_datagram+0x58>)
 801557a:	f000 fdd9 	bl	8016130 <iprintf>
    prev->next = ipr->next;
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	681a      	ldr	r2, [r3, #0]
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015586:	6879      	ldr	r1, [r7, #4]
 8015588:	2004      	movs	r0, #4
 801558a:	f7f7 f901 	bl	800c790 <memp_free>
}
 801558e:	bf00      	nop
 8015590:	3708      	adds	r7, #8
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	20009844 	.word	0x20009844
 801559c:	08019b78 	.word	0x08019b78
 80155a0:	08019c40 	.word	0x08019c40
 80155a4:	08019bc0 	.word	0x08019bc0

080155a8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b08c      	sub	sp, #48	; 0x30
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	60f8      	str	r0, [r7, #12]
 80155b0:	60b9      	str	r1, [r7, #8]
 80155b2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80155b4:	2300      	movs	r3, #0
 80155b6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80155b8:	2301      	movs	r3, #1
 80155ba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80155bc:	68bb      	ldr	r3, [r7, #8]
 80155be:	685b      	ldr	r3, [r3, #4]
 80155c0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80155c2:	69fb      	ldr	r3, [r7, #28]
 80155c4:	885b      	ldrh	r3, [r3, #2]
 80155c6:	b29b      	uxth	r3, r3
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7f6 fbf9 	bl	800bdc0 <lwip_htons>
 80155ce:	4603      	mov	r3, r0
 80155d0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80155d2:	69fb      	ldr	r3, [r7, #28]
 80155d4:	781b      	ldrb	r3, [r3, #0]
 80155d6:	f003 030f 	and.w	r3, r3, #15
 80155da:	b2db      	uxtb	r3, r3
 80155dc:	009b      	lsls	r3, r3, #2
 80155de:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80155e0:	7e7b      	ldrb	r3, [r7, #25]
 80155e2:	b29b      	uxth	r3, r3
 80155e4:	8b7a      	ldrh	r2, [r7, #26]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d202      	bcs.n	80155f0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80155ea:	f04f 33ff 	mov.w	r3, #4294967295
 80155ee:	e135      	b.n	801585c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80155f0:	7e7b      	ldrb	r3, [r7, #25]
 80155f2:	b29b      	uxth	r3, r3
 80155f4:	8b7a      	ldrh	r2, [r7, #26]
 80155f6:	1ad3      	subs	r3, r2, r3
 80155f8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80155fa:	69fb      	ldr	r3, [r7, #28]
 80155fc:	88db      	ldrh	r3, [r3, #6]
 80155fe:	b29b      	uxth	r3, r3
 8015600:	4618      	mov	r0, r3
 8015602:	f7f6 fbdd 	bl	800bdc0 <lwip_htons>
 8015606:	4603      	mov	r3, r0
 8015608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801560c:	b29b      	uxth	r3, r3
 801560e:	00db      	lsls	r3, r3, #3
 8015610:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015612:	68bb      	ldr	r3, [r7, #8]
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801561a:	2200      	movs	r2, #0
 801561c:	701a      	strb	r2, [r3, #0]
 801561e:	2200      	movs	r2, #0
 8015620:	705a      	strb	r2, [r3, #1]
 8015622:	2200      	movs	r2, #0
 8015624:	709a      	strb	r2, [r3, #2]
 8015626:	2200      	movs	r2, #0
 8015628:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801562c:	8afa      	ldrh	r2, [r7, #22]
 801562e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015630:	8afa      	ldrh	r2, [r7, #22]
 8015632:	8b7b      	ldrh	r3, [r7, #26]
 8015634:	4413      	add	r3, r2
 8015636:	b29a      	uxth	r2, r3
 8015638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801563a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801563e:	88db      	ldrh	r3, [r3, #6]
 8015640:	b29b      	uxth	r3, r3
 8015642:	8afa      	ldrh	r2, [r7, #22]
 8015644:	429a      	cmp	r2, r3
 8015646:	d902      	bls.n	801564e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015648:	f04f 33ff 	mov.w	r3, #4294967295
 801564c:	e106      	b.n	801585c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	685b      	ldr	r3, [r3, #4]
 8015652:	627b      	str	r3, [r7, #36]	; 0x24
 8015654:	e068      	b.n	8015728 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015658:	685b      	ldr	r3, [r3, #4]
 801565a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565e:	889b      	ldrh	r3, [r3, #4]
 8015660:	b29a      	uxth	r2, r3
 8015662:	693b      	ldr	r3, [r7, #16]
 8015664:	889b      	ldrh	r3, [r3, #4]
 8015666:	b29b      	uxth	r3, r3
 8015668:	429a      	cmp	r2, r3
 801566a:	d235      	bcs.n	80156d8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801566e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015670:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015674:	2b00      	cmp	r3, #0
 8015676:	d020      	beq.n	80156ba <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801567a:	889b      	ldrh	r3, [r3, #4]
 801567c:	b29a      	uxth	r2, r3
 801567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015680:	88db      	ldrh	r3, [r3, #6]
 8015682:	b29b      	uxth	r3, r3
 8015684:	429a      	cmp	r2, r3
 8015686:	d307      	bcc.n	8015698 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801568a:	88db      	ldrh	r3, [r3, #6]
 801568c:	b29a      	uxth	r2, r3
 801568e:	693b      	ldr	r3, [r7, #16]
 8015690:	889b      	ldrh	r3, [r3, #4]
 8015692:	b29b      	uxth	r3, r3
 8015694:	429a      	cmp	r2, r3
 8015696:	d902      	bls.n	801569e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015698:	f04f 33ff 	mov.w	r3, #4294967295
 801569c:	e0de      	b.n	801585c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a0:	68ba      	ldr	r2, [r7, #8]
 80156a2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80156a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a6:	88db      	ldrh	r3, [r3, #6]
 80156a8:	b29a      	uxth	r2, r3
 80156aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ac:	889b      	ldrh	r3, [r3, #4]
 80156ae:	b29b      	uxth	r3, r3
 80156b0:	429a      	cmp	r2, r3
 80156b2:	d03d      	beq.n	8015730 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80156b4:	2300      	movs	r3, #0
 80156b6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80156b8:	e03a      	b.n	8015730 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80156ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156bc:	88db      	ldrh	r3, [r3, #6]
 80156be:	b29a      	uxth	r2, r3
 80156c0:	693b      	ldr	r3, [r7, #16]
 80156c2:	889b      	ldrh	r3, [r3, #4]
 80156c4:	b29b      	uxth	r3, r3
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d902      	bls.n	80156d0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80156ca:	f04f 33ff 	mov.w	r3, #4294967295
 80156ce:	e0c5      	b.n	801585c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	68ba      	ldr	r2, [r7, #8]
 80156d4:	605a      	str	r2, [r3, #4]
      break;
 80156d6:	e02b      	b.n	8015730 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80156d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156da:	889b      	ldrh	r3, [r3, #4]
 80156dc:	b29a      	uxth	r2, r3
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	889b      	ldrh	r3, [r3, #4]
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d102      	bne.n	80156ee <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80156e8:	f04f 33ff 	mov.w	r3, #4294967295
 80156ec:	e0b6      	b.n	801585c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80156ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f0:	889b      	ldrh	r3, [r3, #4]
 80156f2:	b29a      	uxth	r2, r3
 80156f4:	693b      	ldr	r3, [r7, #16]
 80156f6:	88db      	ldrh	r3, [r3, #6]
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d202      	bcs.n	8015704 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80156fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015702:	e0ab      	b.n	801585c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015706:	2b00      	cmp	r3, #0
 8015708:	d009      	beq.n	801571e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801570c:	88db      	ldrh	r3, [r3, #6]
 801570e:	b29a      	uxth	r2, r3
 8015710:	693b      	ldr	r3, [r7, #16]
 8015712:	889b      	ldrh	r3, [r3, #4]
 8015714:	b29b      	uxth	r3, r3
 8015716:	429a      	cmp	r2, r3
 8015718:	d001      	beq.n	801571e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801571a:	2300      	movs	r3, #0
 801571c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801571e:	693b      	ldr	r3, [r7, #16]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015724:	693b      	ldr	r3, [r7, #16]
 8015726:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801572a:	2b00      	cmp	r3, #0
 801572c:	d193      	bne.n	8015656 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801572e:	e000      	b.n	8015732 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015730:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015734:	2b00      	cmp	r3, #0
 8015736:	d12d      	bne.n	8015794 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573a:	2b00      	cmp	r3, #0
 801573c:	d01c      	beq.n	8015778 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015740:	88db      	ldrh	r3, [r3, #6]
 8015742:	b29a      	uxth	r2, r3
 8015744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015746:	889b      	ldrh	r3, [r3, #4]
 8015748:	b29b      	uxth	r3, r3
 801574a:	429a      	cmp	r2, r3
 801574c:	d906      	bls.n	801575c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801574e:	4b45      	ldr	r3, [pc, #276]	; (8015864 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015750:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015754:	4944      	ldr	r1, [pc, #272]	; (8015868 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015756:	4845      	ldr	r0, [pc, #276]	; (801586c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015758:	f000 fcea 	bl	8016130 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801575e:	68ba      	ldr	r2, [r7, #8]
 8015760:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015764:	88db      	ldrh	r3, [r3, #6]
 8015766:	b29a      	uxth	r2, r3
 8015768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801576a:	889b      	ldrh	r3, [r3, #4]
 801576c:	b29b      	uxth	r3, r3
 801576e:	429a      	cmp	r2, r3
 8015770:	d010      	beq.n	8015794 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015772:	2300      	movs	r3, #0
 8015774:	623b      	str	r3, [r7, #32]
 8015776:	e00d      	b.n	8015794 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	685b      	ldr	r3, [r3, #4]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d006      	beq.n	801578e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015780:	4b38      	ldr	r3, [pc, #224]	; (8015864 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015782:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015786:	493a      	ldr	r1, [pc, #232]	; (8015870 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015788:	4838      	ldr	r0, [pc, #224]	; (801586c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801578a:	f000 fcd1 	bl	8016130 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	68ba      	ldr	r2, [r7, #8]
 8015792:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d105      	bne.n	80157a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	7f9b      	ldrb	r3, [r3, #30]
 801579e:	f003 0301 	and.w	r3, r3, #1
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d059      	beq.n	801585a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80157a6:	6a3b      	ldr	r3, [r7, #32]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d04f      	beq.n	801584c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	685b      	ldr	r3, [r3, #4]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d006      	beq.n	80157c2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	685b      	ldr	r3, [r3, #4]
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	889b      	ldrh	r3, [r3, #4]
 80157bc:	b29b      	uxth	r3, r3
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d002      	beq.n	80157c8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80157c2:	2300      	movs	r3, #0
 80157c4:	623b      	str	r3, [r7, #32]
 80157c6:	e041      	b.n	801584c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80157c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ca:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80157cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80157d2:	e012      	b.n	80157fa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80157d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157d6:	685b      	ldr	r3, [r3, #4]
 80157d8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80157da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157dc:	88db      	ldrh	r3, [r3, #6]
 80157de:	b29a      	uxth	r2, r3
 80157e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e2:	889b      	ldrh	r3, [r3, #4]
 80157e4:	b29b      	uxth	r3, r3
 80157e6:	429a      	cmp	r2, r3
 80157e8:	d002      	beq.n	80157f0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80157ea:	2300      	movs	r3, #0
 80157ec:	623b      	str	r3, [r7, #32]
            break;
 80157ee:	e007      	b.n	8015800 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80157f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80157f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80157fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d1e9      	bne.n	80157d4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015800:	6a3b      	ldr	r3, [r7, #32]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d022      	beq.n	801584c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	685b      	ldr	r3, [r3, #4]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d106      	bne.n	801581c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801580e:	4b15      	ldr	r3, [pc, #84]	; (8015864 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015810:	f240 12df 	movw	r2, #479	; 0x1df
 8015814:	4917      	ldr	r1, [pc, #92]	; (8015874 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015816:	4815      	ldr	r0, [pc, #84]	; (801586c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015818:	f000 fc8a 	bl	8016130 <iprintf>
          LWIP_ASSERT("sanity check",
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	685b      	ldr	r3, [r3, #4]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015824:	429a      	cmp	r2, r3
 8015826:	d106      	bne.n	8015836 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015828:	4b0e      	ldr	r3, [pc, #56]	; (8015864 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801582a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801582e:	4911      	ldr	r1, [pc, #68]	; (8015874 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015830:	480e      	ldr	r0, [pc, #56]	; (801586c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015832:	f000 fc7d 	bl	8016130 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d006      	beq.n	801584c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801583e:	4b09      	ldr	r3, [pc, #36]	; (8015864 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015840:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015844:	490c      	ldr	r1, [pc, #48]	; (8015878 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015846:	4809      	ldr	r0, [pc, #36]	; (801586c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015848:	f000 fc72 	bl	8016130 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801584c:	6a3b      	ldr	r3, [r7, #32]
 801584e:	2b00      	cmp	r3, #0
 8015850:	bf14      	ite	ne
 8015852:	2301      	movne	r3, #1
 8015854:	2300      	moveq	r3, #0
 8015856:	b2db      	uxtb	r3, r3
 8015858:	e000      	b.n	801585c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801585a:	2300      	movs	r3, #0
}
 801585c:	4618      	mov	r0, r3
 801585e:	3730      	adds	r7, #48	; 0x30
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}
 8015864:	08019b78 	.word	0x08019b78
 8015868:	08019c5c 	.word	0x08019c5c
 801586c:	08019bc0 	.word	0x08019bc0
 8015870:	08019c7c 	.word	0x08019c7c
 8015874:	08019cb4 	.word	0x08019cb4
 8015878:	08019cc4 	.word	0x08019cc4

0801587c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b08e      	sub	sp, #56	; 0x38
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	685b      	ldr	r3, [r3, #4]
 8015888:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801588c:	781b      	ldrb	r3, [r3, #0]
 801588e:	f003 030f 	and.w	r3, r3, #15
 8015892:	b2db      	uxtb	r3, r3
 8015894:	009b      	lsls	r3, r3, #2
 8015896:	b2db      	uxtb	r3, r3
 8015898:	2b14      	cmp	r3, #20
 801589a:	f040 8171 	bne.w	8015b80 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a0:	88db      	ldrh	r3, [r3, #6]
 80158a2:	b29b      	uxth	r3, r3
 80158a4:	4618      	mov	r0, r3
 80158a6:	f7f6 fa8b 	bl	800bdc0 <lwip_htons>
 80158aa:	4603      	mov	r3, r0
 80158ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80158b0:	b29b      	uxth	r3, r3
 80158b2:	00db      	lsls	r3, r3, #3
 80158b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80158b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158b8:	885b      	ldrh	r3, [r3, #2]
 80158ba:	b29b      	uxth	r3, r3
 80158bc:	4618      	mov	r0, r3
 80158be:	f7f6 fa7f 	bl	800bdc0 <lwip_htons>
 80158c2:	4603      	mov	r3, r0
 80158c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80158c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158c8:	781b      	ldrb	r3, [r3, #0]
 80158ca:	f003 030f 	and.w	r3, r3, #15
 80158ce:	b2db      	uxtb	r3, r3
 80158d0:	009b      	lsls	r3, r3, #2
 80158d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80158d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80158da:	b29b      	uxth	r3, r3
 80158dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80158de:	429a      	cmp	r2, r3
 80158e0:	f0c0 8150 	bcc.w	8015b84 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80158e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80158e8:	b29b      	uxth	r3, r3
 80158ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80158ec:	1ad3      	subs	r3, r2, r3
 80158ee:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f7f7 fe4b 	bl	800d58c <pbuf_clen>
 80158f6:	4603      	mov	r3, r0
 80158f8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80158fa:	4b8c      	ldr	r3, [pc, #560]	; (8015b2c <ip4_reass+0x2b0>)
 80158fc:	881b      	ldrh	r3, [r3, #0]
 80158fe:	461a      	mov	r2, r3
 8015900:	8c3b      	ldrh	r3, [r7, #32]
 8015902:	4413      	add	r3, r2
 8015904:	2b0a      	cmp	r3, #10
 8015906:	dd10      	ble.n	801592a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015908:	8c3b      	ldrh	r3, [r7, #32]
 801590a:	4619      	mov	r1, r3
 801590c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801590e:	f7ff fd81 	bl	8015414 <ip_reass_remove_oldest_datagram>
 8015912:	4603      	mov	r3, r0
 8015914:	2b00      	cmp	r3, #0
 8015916:	f000 8137 	beq.w	8015b88 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801591a:	4b84      	ldr	r3, [pc, #528]	; (8015b2c <ip4_reass+0x2b0>)
 801591c:	881b      	ldrh	r3, [r3, #0]
 801591e:	461a      	mov	r2, r3
 8015920:	8c3b      	ldrh	r3, [r7, #32]
 8015922:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015924:	2b0a      	cmp	r3, #10
 8015926:	f300 812f 	bgt.w	8015b88 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801592a:	4b81      	ldr	r3, [pc, #516]	; (8015b30 <ip4_reass+0x2b4>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	633b      	str	r3, [r7, #48]	; 0x30
 8015930:	e015      	b.n	801595e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015934:	695a      	ldr	r2, [r3, #20]
 8015936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015938:	68db      	ldr	r3, [r3, #12]
 801593a:	429a      	cmp	r2, r3
 801593c:	d10c      	bne.n	8015958 <ip4_reass+0xdc>
 801593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015940:	699a      	ldr	r2, [r3, #24]
 8015942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015944:	691b      	ldr	r3, [r3, #16]
 8015946:	429a      	cmp	r2, r3
 8015948:	d106      	bne.n	8015958 <ip4_reass+0xdc>
 801594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801594c:	899a      	ldrh	r2, [r3, #12]
 801594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015950:	889b      	ldrh	r3, [r3, #4]
 8015952:	b29b      	uxth	r3, r3
 8015954:	429a      	cmp	r2, r3
 8015956:	d006      	beq.n	8015966 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	633b      	str	r3, [r7, #48]	; 0x30
 801595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015960:	2b00      	cmp	r3, #0
 8015962:	d1e6      	bne.n	8015932 <ip4_reass+0xb6>
 8015964:	e000      	b.n	8015968 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015966:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801596a:	2b00      	cmp	r3, #0
 801596c:	d109      	bne.n	8015982 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801596e:	8c3b      	ldrh	r3, [r7, #32]
 8015970:	4619      	mov	r1, r3
 8015972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015974:	f7ff fdb0 	bl	80154d8 <ip_reass_enqueue_new_datagram>
 8015978:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801597c:	2b00      	cmp	r3, #0
 801597e:	d11c      	bne.n	80159ba <ip4_reass+0x13e>
      goto nullreturn;
 8015980:	e105      	b.n	8015b8e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015984:	88db      	ldrh	r3, [r3, #6]
 8015986:	b29b      	uxth	r3, r3
 8015988:	4618      	mov	r0, r3
 801598a:	f7f6 fa19 	bl	800bdc0 <lwip_htons>
 801598e:	4603      	mov	r3, r0
 8015990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015994:	2b00      	cmp	r3, #0
 8015996:	d110      	bne.n	80159ba <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801599a:	89db      	ldrh	r3, [r3, #14]
 801599c:	4618      	mov	r0, r3
 801599e:	f7f6 fa0f 	bl	800bdc0 <lwip_htons>
 80159a2:	4603      	mov	r3, r0
 80159a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d006      	beq.n	80159ba <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80159ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ae:	3308      	adds	r3, #8
 80159b0:	2214      	movs	r2, #20
 80159b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80159b4:	4618      	mov	r0, r3
 80159b6:	f000 fba5 	bl	8016104 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80159ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159bc:	88db      	ldrh	r3, [r3, #6]
 80159be:	b29b      	uxth	r3, r3
 80159c0:	f003 0320 	and.w	r3, r3, #32
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	bf0c      	ite	eq
 80159c8:	2301      	moveq	r3, #1
 80159ca:	2300      	movne	r3, #0
 80159cc:	b2db      	uxtb	r3, r3
 80159ce:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80159d0:	69fb      	ldr	r3, [r7, #28]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d00e      	beq.n	80159f4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80159d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80159d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80159da:	4413      	add	r3, r2
 80159dc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80159de:	8b7a      	ldrh	r2, [r7, #26]
 80159e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80159e2:	429a      	cmp	r2, r3
 80159e4:	f0c0 80a0 	bcc.w	8015b28 <ip4_reass+0x2ac>
 80159e8:	8b7b      	ldrh	r3, [r7, #26]
 80159ea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80159ee:	4293      	cmp	r3, r2
 80159f0:	f200 809a 	bhi.w	8015b28 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80159f4:	69fa      	ldr	r2, [r7, #28]
 80159f6:	6879      	ldr	r1, [r7, #4]
 80159f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159fa:	f7ff fdd5 	bl	80155a8 <ip_reass_chain_frag_into_datagram_and_validate>
 80159fe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015a00:	697b      	ldr	r3, [r7, #20]
 8015a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a06:	f000 809b 	beq.w	8015b40 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015a0a:	4b48      	ldr	r3, [pc, #288]	; (8015b2c <ip4_reass+0x2b0>)
 8015a0c:	881a      	ldrh	r2, [r3, #0]
 8015a0e:	8c3b      	ldrh	r3, [r7, #32]
 8015a10:	4413      	add	r3, r2
 8015a12:	b29a      	uxth	r2, r3
 8015a14:	4b45      	ldr	r3, [pc, #276]	; (8015b2c <ip4_reass+0x2b0>)
 8015a16:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015a18:	69fb      	ldr	r3, [r7, #28]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d00d      	beq.n	8015a3a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015a1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015a20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a22:	4413      	add	r3, r2
 8015a24:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a28:	8a7a      	ldrh	r2, [r7, #18]
 8015a2a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a2e:	7f9b      	ldrb	r3, [r3, #30]
 8015a30:	f043 0301 	orr.w	r3, r3, #1
 8015a34:	b2da      	uxtb	r2, r3
 8015a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a38:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015a3a:	697b      	ldr	r3, [r7, #20]
 8015a3c:	2b01      	cmp	r3, #1
 8015a3e:	d171      	bne.n	8015b24 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a42:	8b9b      	ldrh	r3, [r3, #28]
 8015a44:	3314      	adds	r3, #20
 8015a46:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a4a:	685b      	ldr	r3, [r3, #4]
 8015a4c:	685b      	ldr	r3, [r3, #4]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a54:	685b      	ldr	r3, [r3, #4]
 8015a56:	685b      	ldr	r3, [r3, #4]
 8015a58:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a5c:	3308      	adds	r3, #8
 8015a5e:	2214      	movs	r2, #20
 8015a60:	4619      	mov	r1, r3
 8015a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a64:	f000 fb4e 	bl	8016104 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015a68:	8a3b      	ldrh	r3, [r7, #16]
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7f6 f9a8 	bl	800bdc0 <lwip_htons>
 8015a70:	4603      	mov	r3, r0
 8015a72:	461a      	mov	r2, r3
 8015a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a76:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	719a      	strb	r2, [r3, #6]
 8015a7e:	2200      	movs	r2, #0
 8015a80:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a84:	2200      	movs	r2, #0
 8015a86:	729a      	strb	r2, [r3, #10]
 8015a88:	2200      	movs	r2, #0
 8015a8a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a8e:	685b      	ldr	r3, [r3, #4]
 8015a90:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015a92:	e00d      	b.n	8015ab0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a96:	685b      	ldr	r3, [r3, #4]
 8015a98:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015a9a:	2114      	movs	r1, #20
 8015a9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015a9e:	f7f7 fc67 	bl	800d370 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015aa2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f7f7 fdab 	bl	800d600 <pbuf_cat>
      r = iprh->next_pbuf;
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d1ee      	bne.n	8015a94 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015ab6:	4b1e      	ldr	r3, [pc, #120]	; (8015b30 <ip4_reass+0x2b4>)
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015abc:	429a      	cmp	r2, r3
 8015abe:	d102      	bne.n	8015ac6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ac4:	e010      	b.n	8015ae8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015ac6:	4b1a      	ldr	r3, [pc, #104]	; (8015b30 <ip4_reass+0x2b4>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015acc:	e007      	b.n	8015ade <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ad4:	429a      	cmp	r2, r3
 8015ad6:	d006      	beq.n	8015ae6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d1f4      	bne.n	8015ace <ip4_reass+0x252>
 8015ae4:	e000      	b.n	8015ae8 <ip4_reass+0x26c>
          break;
 8015ae6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015ae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015aec:	f7ff fd2e 	bl	801554c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f7f7 fd4b 	bl	800d58c <pbuf_clen>
 8015af6:	4603      	mov	r3, r0
 8015af8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015afa:	4b0c      	ldr	r3, [pc, #48]	; (8015b2c <ip4_reass+0x2b0>)
 8015afc:	881b      	ldrh	r3, [r3, #0]
 8015afe:	8c3a      	ldrh	r2, [r7, #32]
 8015b00:	429a      	cmp	r2, r3
 8015b02:	d906      	bls.n	8015b12 <ip4_reass+0x296>
 8015b04:	4b0b      	ldr	r3, [pc, #44]	; (8015b34 <ip4_reass+0x2b8>)
 8015b06:	f240 229b 	movw	r2, #667	; 0x29b
 8015b0a:	490b      	ldr	r1, [pc, #44]	; (8015b38 <ip4_reass+0x2bc>)
 8015b0c:	480b      	ldr	r0, [pc, #44]	; (8015b3c <ip4_reass+0x2c0>)
 8015b0e:	f000 fb0f 	bl	8016130 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015b12:	4b06      	ldr	r3, [pc, #24]	; (8015b2c <ip4_reass+0x2b0>)
 8015b14:	881a      	ldrh	r2, [r3, #0]
 8015b16:	8c3b      	ldrh	r3, [r7, #32]
 8015b18:	1ad3      	subs	r3, r2, r3
 8015b1a:	b29a      	uxth	r2, r3
 8015b1c:	4b03      	ldr	r3, [pc, #12]	; (8015b2c <ip4_reass+0x2b0>)
 8015b1e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	e038      	b.n	8015b96 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015b24:	2300      	movs	r3, #0
 8015b26:	e036      	b.n	8015b96 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015b28:	bf00      	nop
 8015b2a:	e00a      	b.n	8015b42 <ip4_reass+0x2c6>
 8015b2c:	20009848 	.word	0x20009848
 8015b30:	20009844 	.word	0x20009844
 8015b34:	08019b78 	.word	0x08019b78
 8015b38:	08019ce8 	.word	0x08019ce8
 8015b3c:	08019bc0 	.word	0x08019bc0
    goto nullreturn_ipr;
 8015b40:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d106      	bne.n	8015b56 <ip4_reass+0x2da>
 8015b48:	4b15      	ldr	r3, [pc, #84]	; (8015ba0 <ip4_reass+0x324>)
 8015b4a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015b4e:	4915      	ldr	r1, [pc, #84]	; (8015ba4 <ip4_reass+0x328>)
 8015b50:	4815      	ldr	r0, [pc, #84]	; (8015ba8 <ip4_reass+0x32c>)
 8015b52:	f000 faed 	bl	8016130 <iprintf>
  if (ipr->p == NULL) {
 8015b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b58:	685b      	ldr	r3, [r3, #4]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d116      	bne.n	8015b8c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015b5e:	4b13      	ldr	r3, [pc, #76]	; (8015bac <ip4_reass+0x330>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b64:	429a      	cmp	r2, r3
 8015b66:	d006      	beq.n	8015b76 <ip4_reass+0x2fa>
 8015b68:	4b0d      	ldr	r3, [pc, #52]	; (8015ba0 <ip4_reass+0x324>)
 8015b6a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015b6e:	4910      	ldr	r1, [pc, #64]	; (8015bb0 <ip4_reass+0x334>)
 8015b70:	480d      	ldr	r0, [pc, #52]	; (8015ba8 <ip4_reass+0x32c>)
 8015b72:	f000 fadd 	bl	8016130 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015b76:	2100      	movs	r1, #0
 8015b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b7a:	f7ff fce7 	bl	801554c <ip_reass_dequeue_datagram>
 8015b7e:	e006      	b.n	8015b8e <ip4_reass+0x312>
    goto nullreturn;
 8015b80:	bf00      	nop
 8015b82:	e004      	b.n	8015b8e <ip4_reass+0x312>
    goto nullreturn;
 8015b84:	bf00      	nop
 8015b86:	e002      	b.n	8015b8e <ip4_reass+0x312>
      goto nullreturn;
 8015b88:	bf00      	nop
 8015b8a:	e000      	b.n	8015b8e <ip4_reass+0x312>
  }

nullreturn:
 8015b8c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	f7f7 fc74 	bl	800d47c <pbuf_free>
  return NULL;
 8015b94:	2300      	movs	r3, #0
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3738      	adds	r7, #56	; 0x38
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	bf00      	nop
 8015ba0:	08019b78 	.word	0x08019b78
 8015ba4:	08019d04 	.word	0x08019d04
 8015ba8:	08019bc0 	.word	0x08019bc0
 8015bac:	20009844 	.word	0x20009844
 8015bb0:	08019d10 	.word	0x08019d10

08015bb4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015bb8:	2005      	movs	r0, #5
 8015bba:	f7f6 fd79 	bl	800c6b0 <memp_malloc>
 8015bbe:	4603      	mov	r3, r0
}
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	bd80      	pop	{r7, pc}

08015bc4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b082      	sub	sp, #8
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d106      	bne.n	8015be0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015bd2:	4b07      	ldr	r3, [pc, #28]	; (8015bf0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015bd4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015bd8:	4906      	ldr	r1, [pc, #24]	; (8015bf4 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015bda:	4807      	ldr	r0, [pc, #28]	; (8015bf8 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015bdc:	f000 faa8 	bl	8016130 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015be0:	6879      	ldr	r1, [r7, #4]
 8015be2:	2005      	movs	r0, #5
 8015be4:	f7f6 fdd4 	bl	800c790 <memp_free>
}
 8015be8:	bf00      	nop
 8015bea:	3708      	adds	r7, #8
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}
 8015bf0:	08019b78 	.word	0x08019b78
 8015bf4:	08019d30 	.word	0x08019d30
 8015bf8:	08019bc0 	.word	0x08019bc0

08015bfc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b084      	sub	sp, #16
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d106      	bne.n	8015c1c <ipfrag_free_pbuf_custom+0x20>
 8015c0e:	4b11      	ldr	r3, [pc, #68]	; (8015c54 <ipfrag_free_pbuf_custom+0x58>)
 8015c10:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015c14:	4910      	ldr	r1, [pc, #64]	; (8015c58 <ipfrag_free_pbuf_custom+0x5c>)
 8015c16:	4811      	ldr	r0, [pc, #68]	; (8015c5c <ipfrag_free_pbuf_custom+0x60>)
 8015c18:	f000 fa8a 	bl	8016130 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015c1c:	68fa      	ldr	r2, [r7, #12]
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d006      	beq.n	8015c32 <ipfrag_free_pbuf_custom+0x36>
 8015c24:	4b0b      	ldr	r3, [pc, #44]	; (8015c54 <ipfrag_free_pbuf_custom+0x58>)
 8015c26:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015c2a:	490d      	ldr	r1, [pc, #52]	; (8015c60 <ipfrag_free_pbuf_custom+0x64>)
 8015c2c:	480b      	ldr	r0, [pc, #44]	; (8015c5c <ipfrag_free_pbuf_custom+0x60>)
 8015c2e:	f000 fa7f 	bl	8016130 <iprintf>
  if (pcr->original != NULL) {
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	695b      	ldr	r3, [r3, #20]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d004      	beq.n	8015c44 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	695b      	ldr	r3, [r3, #20]
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f7f7 fc1c 	bl	800d47c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015c44:	68f8      	ldr	r0, [r7, #12]
 8015c46:	f7ff ffbd 	bl	8015bc4 <ip_frag_free_pbuf_custom_ref>
}
 8015c4a:	bf00      	nop
 8015c4c:	3710      	adds	r7, #16
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd80      	pop	{r7, pc}
 8015c52:	bf00      	nop
 8015c54:	08019b78 	.word	0x08019b78
 8015c58:	08019d3c 	.word	0x08019d3c
 8015c5c:	08019bc0 	.word	0x08019bc0
 8015c60:	08019d48 	.word	0x08019d48

08015c64 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b094      	sub	sp, #80	; 0x50
 8015c68:	af02      	add	r7, sp, #8
 8015c6a:	60f8      	str	r0, [r7, #12]
 8015c6c:	60b9      	str	r1, [r7, #8]
 8015c6e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015c70:	2300      	movs	r3, #0
 8015c72:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015c76:	68bb      	ldr	r3, [r7, #8]
 8015c78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015c7a:	3b14      	subs	r3, #20
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	da00      	bge.n	8015c82 <ip4_frag+0x1e>
 8015c80:	3307      	adds	r3, #7
 8015c82:	10db      	asrs	r3, r3, #3
 8015c84:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015c86:	2314      	movs	r3, #20
 8015c88:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	685b      	ldr	r3, [r3, #4]
 8015c8e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c92:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c96:	781b      	ldrb	r3, [r3, #0]
 8015c98:	f003 030f 	and.w	r3, r3, #15
 8015c9c:	b2db      	uxtb	r3, r3
 8015c9e:	009b      	lsls	r3, r3, #2
 8015ca0:	b2db      	uxtb	r3, r3
 8015ca2:	2b14      	cmp	r3, #20
 8015ca4:	d002      	beq.n	8015cac <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015ca6:	f06f 0305 	mvn.w	r3, #5
 8015caa:	e110      	b.n	8015ece <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	895b      	ldrh	r3, [r3, #10]
 8015cb0:	2b13      	cmp	r3, #19
 8015cb2:	d809      	bhi.n	8015cc8 <ip4_frag+0x64>
 8015cb4:	4b88      	ldr	r3, [pc, #544]	; (8015ed8 <ip4_frag+0x274>)
 8015cb6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015cba:	4988      	ldr	r1, [pc, #544]	; (8015edc <ip4_frag+0x278>)
 8015cbc:	4888      	ldr	r0, [pc, #544]	; (8015ee0 <ip4_frag+0x27c>)
 8015cbe:	f000 fa37 	bl	8016130 <iprintf>
 8015cc2:	f06f 0305 	mvn.w	r3, #5
 8015cc6:	e102      	b.n	8015ece <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cca:	88db      	ldrh	r3, [r3, #6]
 8015ccc:	b29b      	uxth	r3, r3
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f7f6 f876 	bl	800bdc0 <lwip_htons>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015cd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015cda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015cde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015ce2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015ce8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	891b      	ldrh	r3, [r3, #8]
 8015cee:	3b14      	subs	r3, #20
 8015cf0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015cf4:	e0e1      	b.n	8015eba <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015cf6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015cf8:	00db      	lsls	r3, r3, #3
 8015cfa:	b29b      	uxth	r3, r3
 8015cfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015d00:	4293      	cmp	r3, r2
 8015d02:	bf28      	it	cs
 8015d04:	4613      	movcs	r3, r2
 8015d06:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015d08:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015d0c:	2114      	movs	r1, #20
 8015d0e:	200e      	movs	r0, #14
 8015d10:	f7f7 f8d0 	bl	800ceb4 <pbuf_alloc>
 8015d14:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	f000 80d5 	beq.w	8015ec8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d20:	895b      	ldrh	r3, [r3, #10]
 8015d22:	2b13      	cmp	r3, #19
 8015d24:	d806      	bhi.n	8015d34 <ip4_frag+0xd0>
 8015d26:	4b6c      	ldr	r3, [pc, #432]	; (8015ed8 <ip4_frag+0x274>)
 8015d28:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015d2c:	496d      	ldr	r1, [pc, #436]	; (8015ee4 <ip4_frag+0x280>)
 8015d2e:	486c      	ldr	r0, [pc, #432]	; (8015ee0 <ip4_frag+0x27c>)
 8015d30:	f000 f9fe 	bl	8016130 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	2214      	movs	r2, #20
 8015d3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f000 f9e1 	bl	8016104 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d44:	685b      	ldr	r3, [r3, #4]
 8015d46:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015d48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015d4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015d4e:	e064      	b.n	8015e1a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	895a      	ldrh	r2, [r3, #10]
 8015d54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015d56:	1ad3      	subs	r3, r2, r3
 8015d58:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	895b      	ldrh	r3, [r3, #10]
 8015d5e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d906      	bls.n	8015d72 <ip4_frag+0x10e>
 8015d64:	4b5c      	ldr	r3, [pc, #368]	; (8015ed8 <ip4_frag+0x274>)
 8015d66:	f240 322d 	movw	r2, #813	; 0x32d
 8015d6a:	495f      	ldr	r1, [pc, #380]	; (8015ee8 <ip4_frag+0x284>)
 8015d6c:	485c      	ldr	r0, [pc, #368]	; (8015ee0 <ip4_frag+0x27c>)
 8015d6e:	f000 f9df 	bl	8016130 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015d72:	8bfa      	ldrh	r2, [r7, #30]
 8015d74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015d78:	4293      	cmp	r3, r2
 8015d7a:	bf28      	it	cs
 8015d7c:	4613      	movcs	r3, r2
 8015d7e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015d82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d105      	bne.n	8015d96 <ip4_frag+0x132>
        poff = 0;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	60fb      	str	r3, [r7, #12]
        continue;
 8015d94:	e041      	b.n	8015e1a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015d96:	f7ff ff0d 	bl	8015bb4 <ip_frag_alloc_pbuf_custom_ref>
 8015d9a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015d9c:	69bb      	ldr	r3, [r7, #24]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d103      	bne.n	8015daa <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015da4:	f7f7 fb6a 	bl	800d47c <pbuf_free>
        goto memerr;
 8015da8:	e08f      	b.n	8015eca <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015daa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015db0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015db2:	4413      	add	r3, r2
 8015db4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015db8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015dbc:	9201      	str	r2, [sp, #4]
 8015dbe:	9300      	str	r3, [sp, #0]
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	2241      	movs	r2, #65	; 0x41
 8015dc4:	2000      	movs	r0, #0
 8015dc6:	f7f7 f99f 	bl	800d108 <pbuf_alloced_custom>
 8015dca:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015dcc:	697b      	ldr	r3, [r7, #20]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d106      	bne.n	8015de0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015dd2:	69b8      	ldr	r0, [r7, #24]
 8015dd4:	f7ff fef6 	bl	8015bc4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015dda:	f7f7 fb4f 	bl	800d47c <pbuf_free>
        goto memerr;
 8015dde:	e074      	b.n	8015eca <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015de0:	68f8      	ldr	r0, [r7, #12]
 8015de2:	f7f7 fbeb 	bl	800d5bc <pbuf_ref>
      pcr->original = p;
 8015de6:	69bb      	ldr	r3, [r7, #24]
 8015de8:	68fa      	ldr	r2, [r7, #12]
 8015dea:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015dec:	69bb      	ldr	r3, [r7, #24]
 8015dee:	4a3f      	ldr	r2, [pc, #252]	; (8015eec <ip4_frag+0x288>)
 8015df0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015df2:	6979      	ldr	r1, [r7, #20]
 8015df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015df6:	f7f7 fc03 	bl	800d600 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015dfa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015dfe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015e02:	1ad3      	subs	r3, r2, r3
 8015e04:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015e08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d004      	beq.n	8015e1a <ip4_frag+0x1b6>
        poff = 0;
 8015e10:	2300      	movs	r3, #0
 8015e12:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015e1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d196      	bne.n	8015d50 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015e22:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015e24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015e28:	4413      	add	r3, r2
 8015e2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015e2c:	68bb      	ldr	r3, [r7, #8]
 8015e2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015e30:	f1a3 0213 	sub.w	r2, r3, #19
 8015e34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	bfcc      	ite	gt
 8015e3c:	2301      	movgt	r3, #1
 8015e3e:	2300      	movle	r3, #0
 8015e40:	b2db      	uxtb	r3, r3
 8015e42:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015e44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015e4e:	6a3b      	ldr	r3, [r7, #32]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d002      	beq.n	8015e5a <ip4_frag+0x1f6>
 8015e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d003      	beq.n	8015e62 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015e5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015e5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015e60:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015e62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015e64:	4618      	mov	r0, r3
 8015e66:	f7f5 ffab 	bl	800bdc0 <lwip_htons>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	461a      	mov	r2, r3
 8015e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e70:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015e72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015e74:	3314      	adds	r3, #20
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7f5 ffa1 	bl	800bdc0 <lwip_htons>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	461a      	mov	r2, r3
 8015e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e84:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e88:	2200      	movs	r2, #0
 8015e8a:	729a      	strb	r2, [r3, #10]
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	695b      	ldr	r3, [r3, #20]
 8015e94:	687a      	ldr	r2, [r7, #4]
 8015e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015e98:	68b8      	ldr	r0, [r7, #8]
 8015e9a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e9e:	f7f7 faed 	bl	800d47c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015ea2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015ea6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015ea8:	1ad3      	subs	r3, r2, r3
 8015eaa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015eae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015eb2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015eb4:	4413      	add	r3, r2
 8015eb6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015eba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	f47f af19 	bne.w	8015cf6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	e002      	b.n	8015ece <ip4_frag+0x26a>
      goto memerr;
 8015ec8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015eca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3748      	adds	r7, #72	; 0x48
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}
 8015ed6:	bf00      	nop
 8015ed8:	08019b78 	.word	0x08019b78
 8015edc:	08019d54 	.word	0x08019d54
 8015ee0:	08019bc0 	.word	0x08019bc0
 8015ee4:	08019d70 	.word	0x08019d70
 8015ee8:	08019d90 	.word	0x08019d90
 8015eec:	08015bfd 	.word	0x08015bfd

08015ef0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b086      	sub	sp, #24
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
 8015ef8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015efa:	230e      	movs	r3, #14
 8015efc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	895b      	ldrh	r3, [r3, #10]
 8015f02:	2b0e      	cmp	r3, #14
 8015f04:	d96e      	bls.n	8015fe4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	7bdb      	ldrb	r3, [r3, #15]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d106      	bne.n	8015f1c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015f0e:	683b      	ldr	r3, [r7, #0]
 8015f10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015f14:	3301      	adds	r3, #1
 8015f16:	b2da      	uxtb	r2, r3
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015f22:	693b      	ldr	r3, [r7, #16]
 8015f24:	7b1a      	ldrb	r2, [r3, #12]
 8015f26:	7b5b      	ldrb	r3, [r3, #13]
 8015f28:	021b      	lsls	r3, r3, #8
 8015f2a:	4313      	orrs	r3, r2
 8015f2c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015f2e:	693b      	ldr	r3, [r7, #16]
 8015f30:	781b      	ldrb	r3, [r3, #0]
 8015f32:	f003 0301 	and.w	r3, r3, #1
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d023      	beq.n	8015f82 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015f3a:	693b      	ldr	r3, [r7, #16]
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	2b01      	cmp	r3, #1
 8015f40:	d10f      	bne.n	8015f62 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015f42:	693b      	ldr	r3, [r7, #16]
 8015f44:	785b      	ldrb	r3, [r3, #1]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d11b      	bne.n	8015f82 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015f4a:	693b      	ldr	r3, [r7, #16]
 8015f4c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015f4e:	2b5e      	cmp	r3, #94	; 0x5e
 8015f50:	d117      	bne.n	8015f82 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	7b5b      	ldrb	r3, [r3, #13]
 8015f56:	f043 0310 	orr.w	r3, r3, #16
 8015f5a:	b2da      	uxtb	r2, r3
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	735a      	strb	r2, [r3, #13]
 8015f60:	e00f      	b.n	8015f82 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	2206      	movs	r2, #6
 8015f66:	4928      	ldr	r1, [pc, #160]	; (8016008 <ethernet_input+0x118>)
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f000 f8bb 	bl	80160e4 <memcmp>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d106      	bne.n	8015f82 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	7b5b      	ldrb	r3, [r3, #13]
 8015f78:	f043 0308 	orr.w	r3, r3, #8
 8015f7c:	b2da      	uxtb	r2, r3
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015f82:	89fb      	ldrh	r3, [r7, #14]
 8015f84:	2b08      	cmp	r3, #8
 8015f86:	d003      	beq.n	8015f90 <ethernet_input+0xa0>
 8015f88:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015f8c:	d014      	beq.n	8015fb8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015f8e:	e032      	b.n	8015ff6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f96:	f003 0308 	and.w	r3, r3, #8
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d024      	beq.n	8015fe8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015f9e:	8afb      	ldrh	r3, [r7, #22]
 8015fa0:	4619      	mov	r1, r3
 8015fa2:	6878      	ldr	r0, [r7, #4]
 8015fa4:	f7f7 f9e4 	bl	800d370 <pbuf_remove_header>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d11e      	bne.n	8015fec <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015fae:	6839      	ldr	r1, [r7, #0]
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f7fe ff21 	bl	8014df8 <ip4_input>
      break;
 8015fb6:	e013      	b.n	8015fe0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015fb8:	683b      	ldr	r3, [r7, #0]
 8015fba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015fbe:	f003 0308 	and.w	r3, r3, #8
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d014      	beq.n	8015ff0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015fc6:	8afb      	ldrh	r3, [r7, #22]
 8015fc8:	4619      	mov	r1, r3
 8015fca:	6878      	ldr	r0, [r7, #4]
 8015fcc:	f7f7 f9d0 	bl	800d370 <pbuf_remove_header>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d10e      	bne.n	8015ff4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015fd6:	6839      	ldr	r1, [r7, #0]
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f7fe f8c1 	bl	8014160 <etharp_input>
      break;
 8015fde:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	e00c      	b.n	8015ffe <ethernet_input+0x10e>
    goto free_and_return;
 8015fe4:	bf00      	nop
 8015fe6:	e006      	b.n	8015ff6 <ethernet_input+0x106>
        goto free_and_return;
 8015fe8:	bf00      	nop
 8015fea:	e004      	b.n	8015ff6 <ethernet_input+0x106>
        goto free_and_return;
 8015fec:	bf00      	nop
 8015fee:	e002      	b.n	8015ff6 <ethernet_input+0x106>
        goto free_and_return;
 8015ff0:	bf00      	nop
 8015ff2:	e000      	b.n	8015ff6 <ethernet_input+0x106>
        goto free_and_return;
 8015ff4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015ff6:	6878      	ldr	r0, [r7, #4]
 8015ff8:	f7f7 fa40 	bl	800d47c <pbuf_free>
  return ERR_OK;
 8015ffc:	2300      	movs	r3, #0
}
 8015ffe:	4618      	mov	r0, r3
 8016000:	3718      	adds	r7, #24
 8016002:	46bd      	mov	sp, r7
 8016004:	bd80      	pop	{r7, pc}
 8016006:	bf00      	nop
 8016008:	08019f34 	.word	0x08019f34

0801600c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801600c:	b580      	push	{r7, lr}
 801600e:	b086      	sub	sp, #24
 8016010:	af00      	add	r7, sp, #0
 8016012:	60f8      	str	r0, [r7, #12]
 8016014:	60b9      	str	r1, [r7, #8]
 8016016:	607a      	str	r2, [r7, #4]
 8016018:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801601a:	8c3b      	ldrh	r3, [r7, #32]
 801601c:	4618      	mov	r0, r3
 801601e:	f7f5 fecf 	bl	800bdc0 <lwip_htons>
 8016022:	4603      	mov	r3, r0
 8016024:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016026:	210e      	movs	r1, #14
 8016028:	68b8      	ldr	r0, [r7, #8]
 801602a:	f7f7 f991 	bl	800d350 <pbuf_add_header>
 801602e:	4603      	mov	r3, r0
 8016030:	2b00      	cmp	r3, #0
 8016032:	d125      	bne.n	8016080 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016034:	68bb      	ldr	r3, [r7, #8]
 8016036:	685b      	ldr	r3, [r3, #4]
 8016038:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801603a:	693b      	ldr	r3, [r7, #16]
 801603c:	8afa      	ldrh	r2, [r7, #22]
 801603e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016040:	693b      	ldr	r3, [r7, #16]
 8016042:	2206      	movs	r2, #6
 8016044:	6839      	ldr	r1, [r7, #0]
 8016046:	4618      	mov	r0, r3
 8016048:	f000 f85c 	bl	8016104 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	3306      	adds	r3, #6
 8016050:	2206      	movs	r2, #6
 8016052:	6879      	ldr	r1, [r7, #4]
 8016054:	4618      	mov	r0, r3
 8016056:	f000 f855 	bl	8016104 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016060:	2b06      	cmp	r3, #6
 8016062:	d006      	beq.n	8016072 <ethernet_output+0x66>
 8016064:	4b0a      	ldr	r3, [pc, #40]	; (8016090 <ethernet_output+0x84>)
 8016066:	f44f 7299 	mov.w	r2, #306	; 0x132
 801606a:	490a      	ldr	r1, [pc, #40]	; (8016094 <ethernet_output+0x88>)
 801606c:	480a      	ldr	r0, [pc, #40]	; (8016098 <ethernet_output+0x8c>)
 801606e:	f000 f85f 	bl	8016130 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	699b      	ldr	r3, [r3, #24]
 8016076:	68b9      	ldr	r1, [r7, #8]
 8016078:	68f8      	ldr	r0, [r7, #12]
 801607a:	4798      	blx	r3
 801607c:	4603      	mov	r3, r0
 801607e:	e002      	b.n	8016086 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016080:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016082:	f06f 0301 	mvn.w	r3, #1
}
 8016086:	4618      	mov	r0, r3
 8016088:	3718      	adds	r7, #24
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	bf00      	nop
 8016090:	08019da0 	.word	0x08019da0
 8016094:	08019dd8 	.word	0x08019dd8
 8016098:	08019e0c 	.word	0x08019e0c

0801609c <__libc_init_array>:
 801609c:	b570      	push	{r4, r5, r6, lr}
 801609e:	4d0d      	ldr	r5, [pc, #52]	; (80160d4 <__libc_init_array+0x38>)
 80160a0:	4c0d      	ldr	r4, [pc, #52]	; (80160d8 <__libc_init_array+0x3c>)
 80160a2:	1b64      	subs	r4, r4, r5
 80160a4:	10a4      	asrs	r4, r4, #2
 80160a6:	2600      	movs	r6, #0
 80160a8:	42a6      	cmp	r6, r4
 80160aa:	d109      	bne.n	80160c0 <__libc_init_array+0x24>
 80160ac:	4d0b      	ldr	r5, [pc, #44]	; (80160dc <__libc_init_array+0x40>)
 80160ae:	4c0c      	ldr	r4, [pc, #48]	; (80160e0 <__libc_init_array+0x44>)
 80160b0:	f001 f918 	bl	80172e4 <_init>
 80160b4:	1b64      	subs	r4, r4, r5
 80160b6:	10a4      	asrs	r4, r4, #2
 80160b8:	2600      	movs	r6, #0
 80160ba:	42a6      	cmp	r6, r4
 80160bc:	d105      	bne.n	80160ca <__libc_init_array+0x2e>
 80160be:	bd70      	pop	{r4, r5, r6, pc}
 80160c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80160c4:	4798      	blx	r3
 80160c6:	3601      	adds	r6, #1
 80160c8:	e7ee      	b.n	80160a8 <__libc_init_array+0xc>
 80160ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80160ce:	4798      	blx	r3
 80160d0:	3601      	adds	r6, #1
 80160d2:	e7f2      	b.n	80160ba <__libc_init_array+0x1e>
 80160d4:	0801a094 	.word	0x0801a094
 80160d8:	0801a094 	.word	0x0801a094
 80160dc:	0801a094 	.word	0x0801a094
 80160e0:	0801a098 	.word	0x0801a098

080160e4 <memcmp>:
 80160e4:	b510      	push	{r4, lr}
 80160e6:	3901      	subs	r1, #1
 80160e8:	4402      	add	r2, r0
 80160ea:	4290      	cmp	r0, r2
 80160ec:	d101      	bne.n	80160f2 <memcmp+0xe>
 80160ee:	2000      	movs	r0, #0
 80160f0:	e005      	b.n	80160fe <memcmp+0x1a>
 80160f2:	7803      	ldrb	r3, [r0, #0]
 80160f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80160f8:	42a3      	cmp	r3, r4
 80160fa:	d001      	beq.n	8016100 <memcmp+0x1c>
 80160fc:	1b18      	subs	r0, r3, r4
 80160fe:	bd10      	pop	{r4, pc}
 8016100:	3001      	adds	r0, #1
 8016102:	e7f2      	b.n	80160ea <memcmp+0x6>

08016104 <memcpy>:
 8016104:	440a      	add	r2, r1
 8016106:	4291      	cmp	r1, r2
 8016108:	f100 33ff 	add.w	r3, r0, #4294967295
 801610c:	d100      	bne.n	8016110 <memcpy+0xc>
 801610e:	4770      	bx	lr
 8016110:	b510      	push	{r4, lr}
 8016112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016116:	f803 4f01 	strb.w	r4, [r3, #1]!
 801611a:	4291      	cmp	r1, r2
 801611c:	d1f9      	bne.n	8016112 <memcpy+0xe>
 801611e:	bd10      	pop	{r4, pc}

08016120 <memset>:
 8016120:	4402      	add	r2, r0
 8016122:	4603      	mov	r3, r0
 8016124:	4293      	cmp	r3, r2
 8016126:	d100      	bne.n	801612a <memset+0xa>
 8016128:	4770      	bx	lr
 801612a:	f803 1b01 	strb.w	r1, [r3], #1
 801612e:	e7f9      	b.n	8016124 <memset+0x4>

08016130 <iprintf>:
 8016130:	b40f      	push	{r0, r1, r2, r3}
 8016132:	4b0a      	ldr	r3, [pc, #40]	; (801615c <iprintf+0x2c>)
 8016134:	b513      	push	{r0, r1, r4, lr}
 8016136:	681c      	ldr	r4, [r3, #0]
 8016138:	b124      	cbz	r4, 8016144 <iprintf+0x14>
 801613a:	69a3      	ldr	r3, [r4, #24]
 801613c:	b913      	cbnz	r3, 8016144 <iprintf+0x14>
 801613e:	4620      	mov	r0, r4
 8016140:	f000 face 	bl	80166e0 <__sinit>
 8016144:	ab05      	add	r3, sp, #20
 8016146:	9a04      	ldr	r2, [sp, #16]
 8016148:	68a1      	ldr	r1, [r4, #8]
 801614a:	9301      	str	r3, [sp, #4]
 801614c:	4620      	mov	r0, r4
 801614e:	f000 fcf1 	bl	8016b34 <_vfiprintf_r>
 8016152:	b002      	add	sp, #8
 8016154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016158:	b004      	add	sp, #16
 801615a:	4770      	bx	lr
 801615c:	2000002c 	.word	0x2000002c

08016160 <_puts_r>:
 8016160:	b570      	push	{r4, r5, r6, lr}
 8016162:	460e      	mov	r6, r1
 8016164:	4605      	mov	r5, r0
 8016166:	b118      	cbz	r0, 8016170 <_puts_r+0x10>
 8016168:	6983      	ldr	r3, [r0, #24]
 801616a:	b90b      	cbnz	r3, 8016170 <_puts_r+0x10>
 801616c:	f000 fab8 	bl	80166e0 <__sinit>
 8016170:	69ab      	ldr	r3, [r5, #24]
 8016172:	68ac      	ldr	r4, [r5, #8]
 8016174:	b913      	cbnz	r3, 801617c <_puts_r+0x1c>
 8016176:	4628      	mov	r0, r5
 8016178:	f000 fab2 	bl	80166e0 <__sinit>
 801617c:	4b2c      	ldr	r3, [pc, #176]	; (8016230 <_puts_r+0xd0>)
 801617e:	429c      	cmp	r4, r3
 8016180:	d120      	bne.n	80161c4 <_puts_r+0x64>
 8016182:	686c      	ldr	r4, [r5, #4]
 8016184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016186:	07db      	lsls	r3, r3, #31
 8016188:	d405      	bmi.n	8016196 <_puts_r+0x36>
 801618a:	89a3      	ldrh	r3, [r4, #12]
 801618c:	0598      	lsls	r0, r3, #22
 801618e:	d402      	bmi.n	8016196 <_puts_r+0x36>
 8016190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016192:	f000 fb55 	bl	8016840 <__retarget_lock_acquire_recursive>
 8016196:	89a3      	ldrh	r3, [r4, #12]
 8016198:	0719      	lsls	r1, r3, #28
 801619a:	d51d      	bpl.n	80161d8 <_puts_r+0x78>
 801619c:	6923      	ldr	r3, [r4, #16]
 801619e:	b1db      	cbz	r3, 80161d8 <_puts_r+0x78>
 80161a0:	3e01      	subs	r6, #1
 80161a2:	68a3      	ldr	r3, [r4, #8]
 80161a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80161a8:	3b01      	subs	r3, #1
 80161aa:	60a3      	str	r3, [r4, #8]
 80161ac:	bb39      	cbnz	r1, 80161fe <_puts_r+0x9e>
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	da38      	bge.n	8016224 <_puts_r+0xc4>
 80161b2:	4622      	mov	r2, r4
 80161b4:	210a      	movs	r1, #10
 80161b6:	4628      	mov	r0, r5
 80161b8:	f000 f89a 	bl	80162f0 <__swbuf_r>
 80161bc:	3001      	adds	r0, #1
 80161be:	d011      	beq.n	80161e4 <_puts_r+0x84>
 80161c0:	250a      	movs	r5, #10
 80161c2:	e011      	b.n	80161e8 <_puts_r+0x88>
 80161c4:	4b1b      	ldr	r3, [pc, #108]	; (8016234 <_puts_r+0xd4>)
 80161c6:	429c      	cmp	r4, r3
 80161c8:	d101      	bne.n	80161ce <_puts_r+0x6e>
 80161ca:	68ac      	ldr	r4, [r5, #8]
 80161cc:	e7da      	b.n	8016184 <_puts_r+0x24>
 80161ce:	4b1a      	ldr	r3, [pc, #104]	; (8016238 <_puts_r+0xd8>)
 80161d0:	429c      	cmp	r4, r3
 80161d2:	bf08      	it	eq
 80161d4:	68ec      	ldreq	r4, [r5, #12]
 80161d6:	e7d5      	b.n	8016184 <_puts_r+0x24>
 80161d8:	4621      	mov	r1, r4
 80161da:	4628      	mov	r0, r5
 80161dc:	f000 f8da 	bl	8016394 <__swsetup_r>
 80161e0:	2800      	cmp	r0, #0
 80161e2:	d0dd      	beq.n	80161a0 <_puts_r+0x40>
 80161e4:	f04f 35ff 	mov.w	r5, #4294967295
 80161e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80161ea:	07da      	lsls	r2, r3, #31
 80161ec:	d405      	bmi.n	80161fa <_puts_r+0x9a>
 80161ee:	89a3      	ldrh	r3, [r4, #12]
 80161f0:	059b      	lsls	r3, r3, #22
 80161f2:	d402      	bmi.n	80161fa <_puts_r+0x9a>
 80161f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80161f6:	f000 fb24 	bl	8016842 <__retarget_lock_release_recursive>
 80161fa:	4628      	mov	r0, r5
 80161fc:	bd70      	pop	{r4, r5, r6, pc}
 80161fe:	2b00      	cmp	r3, #0
 8016200:	da04      	bge.n	801620c <_puts_r+0xac>
 8016202:	69a2      	ldr	r2, [r4, #24]
 8016204:	429a      	cmp	r2, r3
 8016206:	dc06      	bgt.n	8016216 <_puts_r+0xb6>
 8016208:	290a      	cmp	r1, #10
 801620a:	d004      	beq.n	8016216 <_puts_r+0xb6>
 801620c:	6823      	ldr	r3, [r4, #0]
 801620e:	1c5a      	adds	r2, r3, #1
 8016210:	6022      	str	r2, [r4, #0]
 8016212:	7019      	strb	r1, [r3, #0]
 8016214:	e7c5      	b.n	80161a2 <_puts_r+0x42>
 8016216:	4622      	mov	r2, r4
 8016218:	4628      	mov	r0, r5
 801621a:	f000 f869 	bl	80162f0 <__swbuf_r>
 801621e:	3001      	adds	r0, #1
 8016220:	d1bf      	bne.n	80161a2 <_puts_r+0x42>
 8016222:	e7df      	b.n	80161e4 <_puts_r+0x84>
 8016224:	6823      	ldr	r3, [r4, #0]
 8016226:	250a      	movs	r5, #10
 8016228:	1c5a      	adds	r2, r3, #1
 801622a:	6022      	str	r2, [r4, #0]
 801622c:	701d      	strb	r5, [r3, #0]
 801622e:	e7db      	b.n	80161e8 <_puts_r+0x88>
 8016230:	0801a018 	.word	0x0801a018
 8016234:	0801a038 	.word	0x0801a038
 8016238:	08019ff8 	.word	0x08019ff8

0801623c <puts>:
 801623c:	4b02      	ldr	r3, [pc, #8]	; (8016248 <puts+0xc>)
 801623e:	4601      	mov	r1, r0
 8016240:	6818      	ldr	r0, [r3, #0]
 8016242:	f7ff bf8d 	b.w	8016160 <_puts_r>
 8016246:	bf00      	nop
 8016248:	2000002c 	.word	0x2000002c

0801624c <rand>:
 801624c:	4b16      	ldr	r3, [pc, #88]	; (80162a8 <rand+0x5c>)
 801624e:	b510      	push	{r4, lr}
 8016250:	681c      	ldr	r4, [r3, #0]
 8016252:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016254:	b9b3      	cbnz	r3, 8016284 <rand+0x38>
 8016256:	2018      	movs	r0, #24
 8016258:	f000 fb5a 	bl	8016910 <malloc>
 801625c:	63a0      	str	r0, [r4, #56]	; 0x38
 801625e:	b928      	cbnz	r0, 801626c <rand+0x20>
 8016260:	4602      	mov	r2, r0
 8016262:	4b12      	ldr	r3, [pc, #72]	; (80162ac <rand+0x60>)
 8016264:	4812      	ldr	r0, [pc, #72]	; (80162b0 <rand+0x64>)
 8016266:	214e      	movs	r1, #78	; 0x4e
 8016268:	f000 f902 	bl	8016470 <__assert_func>
 801626c:	4a11      	ldr	r2, [pc, #68]	; (80162b4 <rand+0x68>)
 801626e:	4b12      	ldr	r3, [pc, #72]	; (80162b8 <rand+0x6c>)
 8016270:	e9c0 2300 	strd	r2, r3, [r0]
 8016274:	4b11      	ldr	r3, [pc, #68]	; (80162bc <rand+0x70>)
 8016276:	6083      	str	r3, [r0, #8]
 8016278:	230b      	movs	r3, #11
 801627a:	8183      	strh	r3, [r0, #12]
 801627c:	2201      	movs	r2, #1
 801627e:	2300      	movs	r3, #0
 8016280:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016284:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8016286:	4a0e      	ldr	r2, [pc, #56]	; (80162c0 <rand+0x74>)
 8016288:	6920      	ldr	r0, [r4, #16]
 801628a:	6963      	ldr	r3, [r4, #20]
 801628c:	490d      	ldr	r1, [pc, #52]	; (80162c4 <rand+0x78>)
 801628e:	4342      	muls	r2, r0
 8016290:	fb01 2203 	mla	r2, r1, r3, r2
 8016294:	fba0 0101 	umull	r0, r1, r0, r1
 8016298:	1c43      	adds	r3, r0, #1
 801629a:	eb42 0001 	adc.w	r0, r2, r1
 801629e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80162a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80162a6:	bd10      	pop	{r4, pc}
 80162a8:	2000002c 	.word	0x2000002c
 80162ac:	08019f48 	.word	0x08019f48
 80162b0:	08019f5f 	.word	0x08019f5f
 80162b4:	abcd330e 	.word	0xabcd330e
 80162b8:	e66d1234 	.word	0xe66d1234
 80162bc:	0005deec 	.word	0x0005deec
 80162c0:	5851f42d 	.word	0x5851f42d
 80162c4:	4c957f2d 	.word	0x4c957f2d

080162c8 <strncmp>:
 80162c8:	b510      	push	{r4, lr}
 80162ca:	b17a      	cbz	r2, 80162ec <strncmp+0x24>
 80162cc:	4603      	mov	r3, r0
 80162ce:	3901      	subs	r1, #1
 80162d0:	1884      	adds	r4, r0, r2
 80162d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80162d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80162da:	4290      	cmp	r0, r2
 80162dc:	d101      	bne.n	80162e2 <strncmp+0x1a>
 80162de:	42a3      	cmp	r3, r4
 80162e0:	d101      	bne.n	80162e6 <strncmp+0x1e>
 80162e2:	1a80      	subs	r0, r0, r2
 80162e4:	bd10      	pop	{r4, pc}
 80162e6:	2800      	cmp	r0, #0
 80162e8:	d1f3      	bne.n	80162d2 <strncmp+0xa>
 80162ea:	e7fa      	b.n	80162e2 <strncmp+0x1a>
 80162ec:	4610      	mov	r0, r2
 80162ee:	e7f9      	b.n	80162e4 <strncmp+0x1c>

080162f0 <__swbuf_r>:
 80162f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162f2:	460e      	mov	r6, r1
 80162f4:	4614      	mov	r4, r2
 80162f6:	4605      	mov	r5, r0
 80162f8:	b118      	cbz	r0, 8016302 <__swbuf_r+0x12>
 80162fa:	6983      	ldr	r3, [r0, #24]
 80162fc:	b90b      	cbnz	r3, 8016302 <__swbuf_r+0x12>
 80162fe:	f000 f9ef 	bl	80166e0 <__sinit>
 8016302:	4b21      	ldr	r3, [pc, #132]	; (8016388 <__swbuf_r+0x98>)
 8016304:	429c      	cmp	r4, r3
 8016306:	d12b      	bne.n	8016360 <__swbuf_r+0x70>
 8016308:	686c      	ldr	r4, [r5, #4]
 801630a:	69a3      	ldr	r3, [r4, #24]
 801630c:	60a3      	str	r3, [r4, #8]
 801630e:	89a3      	ldrh	r3, [r4, #12]
 8016310:	071a      	lsls	r2, r3, #28
 8016312:	d52f      	bpl.n	8016374 <__swbuf_r+0x84>
 8016314:	6923      	ldr	r3, [r4, #16]
 8016316:	b36b      	cbz	r3, 8016374 <__swbuf_r+0x84>
 8016318:	6923      	ldr	r3, [r4, #16]
 801631a:	6820      	ldr	r0, [r4, #0]
 801631c:	1ac0      	subs	r0, r0, r3
 801631e:	6963      	ldr	r3, [r4, #20]
 8016320:	b2f6      	uxtb	r6, r6
 8016322:	4283      	cmp	r3, r0
 8016324:	4637      	mov	r7, r6
 8016326:	dc04      	bgt.n	8016332 <__swbuf_r+0x42>
 8016328:	4621      	mov	r1, r4
 801632a:	4628      	mov	r0, r5
 801632c:	f000 f944 	bl	80165b8 <_fflush_r>
 8016330:	bb30      	cbnz	r0, 8016380 <__swbuf_r+0x90>
 8016332:	68a3      	ldr	r3, [r4, #8]
 8016334:	3b01      	subs	r3, #1
 8016336:	60a3      	str	r3, [r4, #8]
 8016338:	6823      	ldr	r3, [r4, #0]
 801633a:	1c5a      	adds	r2, r3, #1
 801633c:	6022      	str	r2, [r4, #0]
 801633e:	701e      	strb	r6, [r3, #0]
 8016340:	6963      	ldr	r3, [r4, #20]
 8016342:	3001      	adds	r0, #1
 8016344:	4283      	cmp	r3, r0
 8016346:	d004      	beq.n	8016352 <__swbuf_r+0x62>
 8016348:	89a3      	ldrh	r3, [r4, #12]
 801634a:	07db      	lsls	r3, r3, #31
 801634c:	d506      	bpl.n	801635c <__swbuf_r+0x6c>
 801634e:	2e0a      	cmp	r6, #10
 8016350:	d104      	bne.n	801635c <__swbuf_r+0x6c>
 8016352:	4621      	mov	r1, r4
 8016354:	4628      	mov	r0, r5
 8016356:	f000 f92f 	bl	80165b8 <_fflush_r>
 801635a:	b988      	cbnz	r0, 8016380 <__swbuf_r+0x90>
 801635c:	4638      	mov	r0, r7
 801635e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016360:	4b0a      	ldr	r3, [pc, #40]	; (801638c <__swbuf_r+0x9c>)
 8016362:	429c      	cmp	r4, r3
 8016364:	d101      	bne.n	801636a <__swbuf_r+0x7a>
 8016366:	68ac      	ldr	r4, [r5, #8]
 8016368:	e7cf      	b.n	801630a <__swbuf_r+0x1a>
 801636a:	4b09      	ldr	r3, [pc, #36]	; (8016390 <__swbuf_r+0xa0>)
 801636c:	429c      	cmp	r4, r3
 801636e:	bf08      	it	eq
 8016370:	68ec      	ldreq	r4, [r5, #12]
 8016372:	e7ca      	b.n	801630a <__swbuf_r+0x1a>
 8016374:	4621      	mov	r1, r4
 8016376:	4628      	mov	r0, r5
 8016378:	f000 f80c 	bl	8016394 <__swsetup_r>
 801637c:	2800      	cmp	r0, #0
 801637e:	d0cb      	beq.n	8016318 <__swbuf_r+0x28>
 8016380:	f04f 37ff 	mov.w	r7, #4294967295
 8016384:	e7ea      	b.n	801635c <__swbuf_r+0x6c>
 8016386:	bf00      	nop
 8016388:	0801a018 	.word	0x0801a018
 801638c:	0801a038 	.word	0x0801a038
 8016390:	08019ff8 	.word	0x08019ff8

08016394 <__swsetup_r>:
 8016394:	4b32      	ldr	r3, [pc, #200]	; (8016460 <__swsetup_r+0xcc>)
 8016396:	b570      	push	{r4, r5, r6, lr}
 8016398:	681d      	ldr	r5, [r3, #0]
 801639a:	4606      	mov	r6, r0
 801639c:	460c      	mov	r4, r1
 801639e:	b125      	cbz	r5, 80163aa <__swsetup_r+0x16>
 80163a0:	69ab      	ldr	r3, [r5, #24]
 80163a2:	b913      	cbnz	r3, 80163aa <__swsetup_r+0x16>
 80163a4:	4628      	mov	r0, r5
 80163a6:	f000 f99b 	bl	80166e0 <__sinit>
 80163aa:	4b2e      	ldr	r3, [pc, #184]	; (8016464 <__swsetup_r+0xd0>)
 80163ac:	429c      	cmp	r4, r3
 80163ae:	d10f      	bne.n	80163d0 <__swsetup_r+0x3c>
 80163b0:	686c      	ldr	r4, [r5, #4]
 80163b2:	89a3      	ldrh	r3, [r4, #12]
 80163b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80163b8:	0719      	lsls	r1, r3, #28
 80163ba:	d42c      	bmi.n	8016416 <__swsetup_r+0x82>
 80163bc:	06dd      	lsls	r5, r3, #27
 80163be:	d411      	bmi.n	80163e4 <__swsetup_r+0x50>
 80163c0:	2309      	movs	r3, #9
 80163c2:	6033      	str	r3, [r6, #0]
 80163c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80163c8:	81a3      	strh	r3, [r4, #12]
 80163ca:	f04f 30ff 	mov.w	r0, #4294967295
 80163ce:	e03e      	b.n	801644e <__swsetup_r+0xba>
 80163d0:	4b25      	ldr	r3, [pc, #148]	; (8016468 <__swsetup_r+0xd4>)
 80163d2:	429c      	cmp	r4, r3
 80163d4:	d101      	bne.n	80163da <__swsetup_r+0x46>
 80163d6:	68ac      	ldr	r4, [r5, #8]
 80163d8:	e7eb      	b.n	80163b2 <__swsetup_r+0x1e>
 80163da:	4b24      	ldr	r3, [pc, #144]	; (801646c <__swsetup_r+0xd8>)
 80163dc:	429c      	cmp	r4, r3
 80163de:	bf08      	it	eq
 80163e0:	68ec      	ldreq	r4, [r5, #12]
 80163e2:	e7e6      	b.n	80163b2 <__swsetup_r+0x1e>
 80163e4:	0758      	lsls	r0, r3, #29
 80163e6:	d512      	bpl.n	801640e <__swsetup_r+0x7a>
 80163e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80163ea:	b141      	cbz	r1, 80163fe <__swsetup_r+0x6a>
 80163ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80163f0:	4299      	cmp	r1, r3
 80163f2:	d002      	beq.n	80163fa <__swsetup_r+0x66>
 80163f4:	4630      	mov	r0, r6
 80163f6:	f000 fa93 	bl	8016920 <_free_r>
 80163fa:	2300      	movs	r3, #0
 80163fc:	6363      	str	r3, [r4, #52]	; 0x34
 80163fe:	89a3      	ldrh	r3, [r4, #12]
 8016400:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016404:	81a3      	strh	r3, [r4, #12]
 8016406:	2300      	movs	r3, #0
 8016408:	6063      	str	r3, [r4, #4]
 801640a:	6923      	ldr	r3, [r4, #16]
 801640c:	6023      	str	r3, [r4, #0]
 801640e:	89a3      	ldrh	r3, [r4, #12]
 8016410:	f043 0308 	orr.w	r3, r3, #8
 8016414:	81a3      	strh	r3, [r4, #12]
 8016416:	6923      	ldr	r3, [r4, #16]
 8016418:	b94b      	cbnz	r3, 801642e <__swsetup_r+0x9a>
 801641a:	89a3      	ldrh	r3, [r4, #12]
 801641c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016424:	d003      	beq.n	801642e <__swsetup_r+0x9a>
 8016426:	4621      	mov	r1, r4
 8016428:	4630      	mov	r0, r6
 801642a:	f000 fa31 	bl	8016890 <__smakebuf_r>
 801642e:	89a0      	ldrh	r0, [r4, #12]
 8016430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016434:	f010 0301 	ands.w	r3, r0, #1
 8016438:	d00a      	beq.n	8016450 <__swsetup_r+0xbc>
 801643a:	2300      	movs	r3, #0
 801643c:	60a3      	str	r3, [r4, #8]
 801643e:	6963      	ldr	r3, [r4, #20]
 8016440:	425b      	negs	r3, r3
 8016442:	61a3      	str	r3, [r4, #24]
 8016444:	6923      	ldr	r3, [r4, #16]
 8016446:	b943      	cbnz	r3, 801645a <__swsetup_r+0xc6>
 8016448:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801644c:	d1ba      	bne.n	80163c4 <__swsetup_r+0x30>
 801644e:	bd70      	pop	{r4, r5, r6, pc}
 8016450:	0781      	lsls	r1, r0, #30
 8016452:	bf58      	it	pl
 8016454:	6963      	ldrpl	r3, [r4, #20]
 8016456:	60a3      	str	r3, [r4, #8]
 8016458:	e7f4      	b.n	8016444 <__swsetup_r+0xb0>
 801645a:	2000      	movs	r0, #0
 801645c:	e7f7      	b.n	801644e <__swsetup_r+0xba>
 801645e:	bf00      	nop
 8016460:	2000002c 	.word	0x2000002c
 8016464:	0801a018 	.word	0x0801a018
 8016468:	0801a038 	.word	0x0801a038
 801646c:	08019ff8 	.word	0x08019ff8

08016470 <__assert_func>:
 8016470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016472:	4614      	mov	r4, r2
 8016474:	461a      	mov	r2, r3
 8016476:	4b09      	ldr	r3, [pc, #36]	; (801649c <__assert_func+0x2c>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	4605      	mov	r5, r0
 801647c:	68d8      	ldr	r0, [r3, #12]
 801647e:	b14c      	cbz	r4, 8016494 <__assert_func+0x24>
 8016480:	4b07      	ldr	r3, [pc, #28]	; (80164a0 <__assert_func+0x30>)
 8016482:	9100      	str	r1, [sp, #0]
 8016484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016488:	4906      	ldr	r1, [pc, #24]	; (80164a4 <__assert_func+0x34>)
 801648a:	462b      	mov	r3, r5
 801648c:	f000 f9a6 	bl	80167dc <fiprintf>
 8016490:	f000 fe7a 	bl	8017188 <abort>
 8016494:	4b04      	ldr	r3, [pc, #16]	; (80164a8 <__assert_func+0x38>)
 8016496:	461c      	mov	r4, r3
 8016498:	e7f3      	b.n	8016482 <__assert_func+0x12>
 801649a:	bf00      	nop
 801649c:	2000002c 	.word	0x2000002c
 80164a0:	08019fba 	.word	0x08019fba
 80164a4:	08019fc7 	.word	0x08019fc7
 80164a8:	08019ff5 	.word	0x08019ff5

080164ac <__sflush_r>:
 80164ac:	898a      	ldrh	r2, [r1, #12]
 80164ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164b2:	4605      	mov	r5, r0
 80164b4:	0710      	lsls	r0, r2, #28
 80164b6:	460c      	mov	r4, r1
 80164b8:	d458      	bmi.n	801656c <__sflush_r+0xc0>
 80164ba:	684b      	ldr	r3, [r1, #4]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	dc05      	bgt.n	80164cc <__sflush_r+0x20>
 80164c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	dc02      	bgt.n	80164cc <__sflush_r+0x20>
 80164c6:	2000      	movs	r0, #0
 80164c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80164ce:	2e00      	cmp	r6, #0
 80164d0:	d0f9      	beq.n	80164c6 <__sflush_r+0x1a>
 80164d2:	2300      	movs	r3, #0
 80164d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80164d8:	682f      	ldr	r7, [r5, #0]
 80164da:	602b      	str	r3, [r5, #0]
 80164dc:	d032      	beq.n	8016544 <__sflush_r+0x98>
 80164de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80164e0:	89a3      	ldrh	r3, [r4, #12]
 80164e2:	075a      	lsls	r2, r3, #29
 80164e4:	d505      	bpl.n	80164f2 <__sflush_r+0x46>
 80164e6:	6863      	ldr	r3, [r4, #4]
 80164e8:	1ac0      	subs	r0, r0, r3
 80164ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80164ec:	b10b      	cbz	r3, 80164f2 <__sflush_r+0x46>
 80164ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80164f0:	1ac0      	subs	r0, r0, r3
 80164f2:	2300      	movs	r3, #0
 80164f4:	4602      	mov	r2, r0
 80164f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80164f8:	6a21      	ldr	r1, [r4, #32]
 80164fa:	4628      	mov	r0, r5
 80164fc:	47b0      	blx	r6
 80164fe:	1c43      	adds	r3, r0, #1
 8016500:	89a3      	ldrh	r3, [r4, #12]
 8016502:	d106      	bne.n	8016512 <__sflush_r+0x66>
 8016504:	6829      	ldr	r1, [r5, #0]
 8016506:	291d      	cmp	r1, #29
 8016508:	d82c      	bhi.n	8016564 <__sflush_r+0xb8>
 801650a:	4a2a      	ldr	r2, [pc, #168]	; (80165b4 <__sflush_r+0x108>)
 801650c:	40ca      	lsrs	r2, r1
 801650e:	07d6      	lsls	r6, r2, #31
 8016510:	d528      	bpl.n	8016564 <__sflush_r+0xb8>
 8016512:	2200      	movs	r2, #0
 8016514:	6062      	str	r2, [r4, #4]
 8016516:	04d9      	lsls	r1, r3, #19
 8016518:	6922      	ldr	r2, [r4, #16]
 801651a:	6022      	str	r2, [r4, #0]
 801651c:	d504      	bpl.n	8016528 <__sflush_r+0x7c>
 801651e:	1c42      	adds	r2, r0, #1
 8016520:	d101      	bne.n	8016526 <__sflush_r+0x7a>
 8016522:	682b      	ldr	r3, [r5, #0]
 8016524:	b903      	cbnz	r3, 8016528 <__sflush_r+0x7c>
 8016526:	6560      	str	r0, [r4, #84]	; 0x54
 8016528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801652a:	602f      	str	r7, [r5, #0]
 801652c:	2900      	cmp	r1, #0
 801652e:	d0ca      	beq.n	80164c6 <__sflush_r+0x1a>
 8016530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016534:	4299      	cmp	r1, r3
 8016536:	d002      	beq.n	801653e <__sflush_r+0x92>
 8016538:	4628      	mov	r0, r5
 801653a:	f000 f9f1 	bl	8016920 <_free_r>
 801653e:	2000      	movs	r0, #0
 8016540:	6360      	str	r0, [r4, #52]	; 0x34
 8016542:	e7c1      	b.n	80164c8 <__sflush_r+0x1c>
 8016544:	6a21      	ldr	r1, [r4, #32]
 8016546:	2301      	movs	r3, #1
 8016548:	4628      	mov	r0, r5
 801654a:	47b0      	blx	r6
 801654c:	1c41      	adds	r1, r0, #1
 801654e:	d1c7      	bne.n	80164e0 <__sflush_r+0x34>
 8016550:	682b      	ldr	r3, [r5, #0]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d0c4      	beq.n	80164e0 <__sflush_r+0x34>
 8016556:	2b1d      	cmp	r3, #29
 8016558:	d001      	beq.n	801655e <__sflush_r+0xb2>
 801655a:	2b16      	cmp	r3, #22
 801655c:	d101      	bne.n	8016562 <__sflush_r+0xb6>
 801655e:	602f      	str	r7, [r5, #0]
 8016560:	e7b1      	b.n	80164c6 <__sflush_r+0x1a>
 8016562:	89a3      	ldrh	r3, [r4, #12]
 8016564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016568:	81a3      	strh	r3, [r4, #12]
 801656a:	e7ad      	b.n	80164c8 <__sflush_r+0x1c>
 801656c:	690f      	ldr	r7, [r1, #16]
 801656e:	2f00      	cmp	r7, #0
 8016570:	d0a9      	beq.n	80164c6 <__sflush_r+0x1a>
 8016572:	0793      	lsls	r3, r2, #30
 8016574:	680e      	ldr	r6, [r1, #0]
 8016576:	bf08      	it	eq
 8016578:	694b      	ldreq	r3, [r1, #20]
 801657a:	600f      	str	r7, [r1, #0]
 801657c:	bf18      	it	ne
 801657e:	2300      	movne	r3, #0
 8016580:	eba6 0807 	sub.w	r8, r6, r7
 8016584:	608b      	str	r3, [r1, #8]
 8016586:	f1b8 0f00 	cmp.w	r8, #0
 801658a:	dd9c      	ble.n	80164c6 <__sflush_r+0x1a>
 801658c:	6a21      	ldr	r1, [r4, #32]
 801658e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016590:	4643      	mov	r3, r8
 8016592:	463a      	mov	r2, r7
 8016594:	4628      	mov	r0, r5
 8016596:	47b0      	blx	r6
 8016598:	2800      	cmp	r0, #0
 801659a:	dc06      	bgt.n	80165aa <__sflush_r+0xfe>
 801659c:	89a3      	ldrh	r3, [r4, #12]
 801659e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165a2:	81a3      	strh	r3, [r4, #12]
 80165a4:	f04f 30ff 	mov.w	r0, #4294967295
 80165a8:	e78e      	b.n	80164c8 <__sflush_r+0x1c>
 80165aa:	4407      	add	r7, r0
 80165ac:	eba8 0800 	sub.w	r8, r8, r0
 80165b0:	e7e9      	b.n	8016586 <__sflush_r+0xda>
 80165b2:	bf00      	nop
 80165b4:	20400001 	.word	0x20400001

080165b8 <_fflush_r>:
 80165b8:	b538      	push	{r3, r4, r5, lr}
 80165ba:	690b      	ldr	r3, [r1, #16]
 80165bc:	4605      	mov	r5, r0
 80165be:	460c      	mov	r4, r1
 80165c0:	b913      	cbnz	r3, 80165c8 <_fflush_r+0x10>
 80165c2:	2500      	movs	r5, #0
 80165c4:	4628      	mov	r0, r5
 80165c6:	bd38      	pop	{r3, r4, r5, pc}
 80165c8:	b118      	cbz	r0, 80165d2 <_fflush_r+0x1a>
 80165ca:	6983      	ldr	r3, [r0, #24]
 80165cc:	b90b      	cbnz	r3, 80165d2 <_fflush_r+0x1a>
 80165ce:	f000 f887 	bl	80166e0 <__sinit>
 80165d2:	4b14      	ldr	r3, [pc, #80]	; (8016624 <_fflush_r+0x6c>)
 80165d4:	429c      	cmp	r4, r3
 80165d6:	d11b      	bne.n	8016610 <_fflush_r+0x58>
 80165d8:	686c      	ldr	r4, [r5, #4]
 80165da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d0ef      	beq.n	80165c2 <_fflush_r+0xa>
 80165e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80165e4:	07d0      	lsls	r0, r2, #31
 80165e6:	d404      	bmi.n	80165f2 <_fflush_r+0x3a>
 80165e8:	0599      	lsls	r1, r3, #22
 80165ea:	d402      	bmi.n	80165f2 <_fflush_r+0x3a>
 80165ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165ee:	f000 f927 	bl	8016840 <__retarget_lock_acquire_recursive>
 80165f2:	4628      	mov	r0, r5
 80165f4:	4621      	mov	r1, r4
 80165f6:	f7ff ff59 	bl	80164ac <__sflush_r>
 80165fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80165fc:	07da      	lsls	r2, r3, #31
 80165fe:	4605      	mov	r5, r0
 8016600:	d4e0      	bmi.n	80165c4 <_fflush_r+0xc>
 8016602:	89a3      	ldrh	r3, [r4, #12]
 8016604:	059b      	lsls	r3, r3, #22
 8016606:	d4dd      	bmi.n	80165c4 <_fflush_r+0xc>
 8016608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801660a:	f000 f91a 	bl	8016842 <__retarget_lock_release_recursive>
 801660e:	e7d9      	b.n	80165c4 <_fflush_r+0xc>
 8016610:	4b05      	ldr	r3, [pc, #20]	; (8016628 <_fflush_r+0x70>)
 8016612:	429c      	cmp	r4, r3
 8016614:	d101      	bne.n	801661a <_fflush_r+0x62>
 8016616:	68ac      	ldr	r4, [r5, #8]
 8016618:	e7df      	b.n	80165da <_fflush_r+0x22>
 801661a:	4b04      	ldr	r3, [pc, #16]	; (801662c <_fflush_r+0x74>)
 801661c:	429c      	cmp	r4, r3
 801661e:	bf08      	it	eq
 8016620:	68ec      	ldreq	r4, [r5, #12]
 8016622:	e7da      	b.n	80165da <_fflush_r+0x22>
 8016624:	0801a018 	.word	0x0801a018
 8016628:	0801a038 	.word	0x0801a038
 801662c:	08019ff8 	.word	0x08019ff8

08016630 <std>:
 8016630:	2300      	movs	r3, #0
 8016632:	b510      	push	{r4, lr}
 8016634:	4604      	mov	r4, r0
 8016636:	e9c0 3300 	strd	r3, r3, [r0]
 801663a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801663e:	6083      	str	r3, [r0, #8]
 8016640:	8181      	strh	r1, [r0, #12]
 8016642:	6643      	str	r3, [r0, #100]	; 0x64
 8016644:	81c2      	strh	r2, [r0, #14]
 8016646:	6183      	str	r3, [r0, #24]
 8016648:	4619      	mov	r1, r3
 801664a:	2208      	movs	r2, #8
 801664c:	305c      	adds	r0, #92	; 0x5c
 801664e:	f7ff fd67 	bl	8016120 <memset>
 8016652:	4b05      	ldr	r3, [pc, #20]	; (8016668 <std+0x38>)
 8016654:	6263      	str	r3, [r4, #36]	; 0x24
 8016656:	4b05      	ldr	r3, [pc, #20]	; (801666c <std+0x3c>)
 8016658:	62a3      	str	r3, [r4, #40]	; 0x28
 801665a:	4b05      	ldr	r3, [pc, #20]	; (8016670 <std+0x40>)
 801665c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801665e:	4b05      	ldr	r3, [pc, #20]	; (8016674 <std+0x44>)
 8016660:	6224      	str	r4, [r4, #32]
 8016662:	6323      	str	r3, [r4, #48]	; 0x30
 8016664:	bd10      	pop	{r4, pc}
 8016666:	bf00      	nop
 8016668:	080170dd 	.word	0x080170dd
 801666c:	080170ff 	.word	0x080170ff
 8016670:	08017137 	.word	0x08017137
 8016674:	0801715b 	.word	0x0801715b

08016678 <_cleanup_r>:
 8016678:	4901      	ldr	r1, [pc, #4]	; (8016680 <_cleanup_r+0x8>)
 801667a:	f000 b8c1 	b.w	8016800 <_fwalk_reent>
 801667e:	bf00      	nop
 8016680:	080165b9 	.word	0x080165b9

08016684 <__sfmoreglue>:
 8016684:	b570      	push	{r4, r5, r6, lr}
 8016686:	2268      	movs	r2, #104	; 0x68
 8016688:	1e4d      	subs	r5, r1, #1
 801668a:	4355      	muls	r5, r2
 801668c:	460e      	mov	r6, r1
 801668e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016692:	f000 f9b1 	bl	80169f8 <_malloc_r>
 8016696:	4604      	mov	r4, r0
 8016698:	b140      	cbz	r0, 80166ac <__sfmoreglue+0x28>
 801669a:	2100      	movs	r1, #0
 801669c:	e9c0 1600 	strd	r1, r6, [r0]
 80166a0:	300c      	adds	r0, #12
 80166a2:	60a0      	str	r0, [r4, #8]
 80166a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80166a8:	f7ff fd3a 	bl	8016120 <memset>
 80166ac:	4620      	mov	r0, r4
 80166ae:	bd70      	pop	{r4, r5, r6, pc}

080166b0 <__sfp_lock_acquire>:
 80166b0:	4801      	ldr	r0, [pc, #4]	; (80166b8 <__sfp_lock_acquire+0x8>)
 80166b2:	f000 b8c5 	b.w	8016840 <__retarget_lock_acquire_recursive>
 80166b6:	bf00      	nop
 80166b8:	20009851 	.word	0x20009851

080166bc <__sfp_lock_release>:
 80166bc:	4801      	ldr	r0, [pc, #4]	; (80166c4 <__sfp_lock_release+0x8>)
 80166be:	f000 b8c0 	b.w	8016842 <__retarget_lock_release_recursive>
 80166c2:	bf00      	nop
 80166c4:	20009851 	.word	0x20009851

080166c8 <__sinit_lock_acquire>:
 80166c8:	4801      	ldr	r0, [pc, #4]	; (80166d0 <__sinit_lock_acquire+0x8>)
 80166ca:	f000 b8b9 	b.w	8016840 <__retarget_lock_acquire_recursive>
 80166ce:	bf00      	nop
 80166d0:	20009852 	.word	0x20009852

080166d4 <__sinit_lock_release>:
 80166d4:	4801      	ldr	r0, [pc, #4]	; (80166dc <__sinit_lock_release+0x8>)
 80166d6:	f000 b8b4 	b.w	8016842 <__retarget_lock_release_recursive>
 80166da:	bf00      	nop
 80166dc:	20009852 	.word	0x20009852

080166e0 <__sinit>:
 80166e0:	b510      	push	{r4, lr}
 80166e2:	4604      	mov	r4, r0
 80166e4:	f7ff fff0 	bl	80166c8 <__sinit_lock_acquire>
 80166e8:	69a3      	ldr	r3, [r4, #24]
 80166ea:	b11b      	cbz	r3, 80166f4 <__sinit+0x14>
 80166ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166f0:	f7ff bff0 	b.w	80166d4 <__sinit_lock_release>
 80166f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80166f8:	6523      	str	r3, [r4, #80]	; 0x50
 80166fa:	4b13      	ldr	r3, [pc, #76]	; (8016748 <__sinit+0x68>)
 80166fc:	4a13      	ldr	r2, [pc, #76]	; (801674c <__sinit+0x6c>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	62a2      	str	r2, [r4, #40]	; 0x28
 8016702:	42a3      	cmp	r3, r4
 8016704:	bf04      	itt	eq
 8016706:	2301      	moveq	r3, #1
 8016708:	61a3      	streq	r3, [r4, #24]
 801670a:	4620      	mov	r0, r4
 801670c:	f000 f820 	bl	8016750 <__sfp>
 8016710:	6060      	str	r0, [r4, #4]
 8016712:	4620      	mov	r0, r4
 8016714:	f000 f81c 	bl	8016750 <__sfp>
 8016718:	60a0      	str	r0, [r4, #8]
 801671a:	4620      	mov	r0, r4
 801671c:	f000 f818 	bl	8016750 <__sfp>
 8016720:	2200      	movs	r2, #0
 8016722:	60e0      	str	r0, [r4, #12]
 8016724:	2104      	movs	r1, #4
 8016726:	6860      	ldr	r0, [r4, #4]
 8016728:	f7ff ff82 	bl	8016630 <std>
 801672c:	68a0      	ldr	r0, [r4, #8]
 801672e:	2201      	movs	r2, #1
 8016730:	2109      	movs	r1, #9
 8016732:	f7ff ff7d 	bl	8016630 <std>
 8016736:	68e0      	ldr	r0, [r4, #12]
 8016738:	2202      	movs	r2, #2
 801673a:	2112      	movs	r1, #18
 801673c:	f7ff ff78 	bl	8016630 <std>
 8016740:	2301      	movs	r3, #1
 8016742:	61a3      	str	r3, [r4, #24]
 8016744:	e7d2      	b.n	80166ec <__sinit+0xc>
 8016746:	bf00      	nop
 8016748:	08019f44 	.word	0x08019f44
 801674c:	08016679 	.word	0x08016679

08016750 <__sfp>:
 8016750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016752:	4607      	mov	r7, r0
 8016754:	f7ff ffac 	bl	80166b0 <__sfp_lock_acquire>
 8016758:	4b1e      	ldr	r3, [pc, #120]	; (80167d4 <__sfp+0x84>)
 801675a:	681e      	ldr	r6, [r3, #0]
 801675c:	69b3      	ldr	r3, [r6, #24]
 801675e:	b913      	cbnz	r3, 8016766 <__sfp+0x16>
 8016760:	4630      	mov	r0, r6
 8016762:	f7ff ffbd 	bl	80166e0 <__sinit>
 8016766:	3648      	adds	r6, #72	; 0x48
 8016768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801676c:	3b01      	subs	r3, #1
 801676e:	d503      	bpl.n	8016778 <__sfp+0x28>
 8016770:	6833      	ldr	r3, [r6, #0]
 8016772:	b30b      	cbz	r3, 80167b8 <__sfp+0x68>
 8016774:	6836      	ldr	r6, [r6, #0]
 8016776:	e7f7      	b.n	8016768 <__sfp+0x18>
 8016778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801677c:	b9d5      	cbnz	r5, 80167b4 <__sfp+0x64>
 801677e:	4b16      	ldr	r3, [pc, #88]	; (80167d8 <__sfp+0x88>)
 8016780:	60e3      	str	r3, [r4, #12]
 8016782:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016786:	6665      	str	r5, [r4, #100]	; 0x64
 8016788:	f000 f859 	bl	801683e <__retarget_lock_init_recursive>
 801678c:	f7ff ff96 	bl	80166bc <__sfp_lock_release>
 8016790:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016794:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016798:	6025      	str	r5, [r4, #0]
 801679a:	61a5      	str	r5, [r4, #24]
 801679c:	2208      	movs	r2, #8
 801679e:	4629      	mov	r1, r5
 80167a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80167a4:	f7ff fcbc 	bl	8016120 <memset>
 80167a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80167ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80167b0:	4620      	mov	r0, r4
 80167b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167b4:	3468      	adds	r4, #104	; 0x68
 80167b6:	e7d9      	b.n	801676c <__sfp+0x1c>
 80167b8:	2104      	movs	r1, #4
 80167ba:	4638      	mov	r0, r7
 80167bc:	f7ff ff62 	bl	8016684 <__sfmoreglue>
 80167c0:	4604      	mov	r4, r0
 80167c2:	6030      	str	r0, [r6, #0]
 80167c4:	2800      	cmp	r0, #0
 80167c6:	d1d5      	bne.n	8016774 <__sfp+0x24>
 80167c8:	f7ff ff78 	bl	80166bc <__sfp_lock_release>
 80167cc:	230c      	movs	r3, #12
 80167ce:	603b      	str	r3, [r7, #0]
 80167d0:	e7ee      	b.n	80167b0 <__sfp+0x60>
 80167d2:	bf00      	nop
 80167d4:	08019f44 	.word	0x08019f44
 80167d8:	ffff0001 	.word	0xffff0001

080167dc <fiprintf>:
 80167dc:	b40e      	push	{r1, r2, r3}
 80167de:	b503      	push	{r0, r1, lr}
 80167e0:	4601      	mov	r1, r0
 80167e2:	ab03      	add	r3, sp, #12
 80167e4:	4805      	ldr	r0, [pc, #20]	; (80167fc <fiprintf+0x20>)
 80167e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80167ea:	6800      	ldr	r0, [r0, #0]
 80167ec:	9301      	str	r3, [sp, #4]
 80167ee:	f000 f9a1 	bl	8016b34 <_vfiprintf_r>
 80167f2:	b002      	add	sp, #8
 80167f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80167f8:	b003      	add	sp, #12
 80167fa:	4770      	bx	lr
 80167fc:	2000002c 	.word	0x2000002c

08016800 <_fwalk_reent>:
 8016800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016804:	4606      	mov	r6, r0
 8016806:	4688      	mov	r8, r1
 8016808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801680c:	2700      	movs	r7, #0
 801680e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016812:	f1b9 0901 	subs.w	r9, r9, #1
 8016816:	d505      	bpl.n	8016824 <_fwalk_reent+0x24>
 8016818:	6824      	ldr	r4, [r4, #0]
 801681a:	2c00      	cmp	r4, #0
 801681c:	d1f7      	bne.n	801680e <_fwalk_reent+0xe>
 801681e:	4638      	mov	r0, r7
 8016820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016824:	89ab      	ldrh	r3, [r5, #12]
 8016826:	2b01      	cmp	r3, #1
 8016828:	d907      	bls.n	801683a <_fwalk_reent+0x3a>
 801682a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801682e:	3301      	adds	r3, #1
 8016830:	d003      	beq.n	801683a <_fwalk_reent+0x3a>
 8016832:	4629      	mov	r1, r5
 8016834:	4630      	mov	r0, r6
 8016836:	47c0      	blx	r8
 8016838:	4307      	orrs	r7, r0
 801683a:	3568      	adds	r5, #104	; 0x68
 801683c:	e7e9      	b.n	8016812 <_fwalk_reent+0x12>

0801683e <__retarget_lock_init_recursive>:
 801683e:	4770      	bx	lr

08016840 <__retarget_lock_acquire_recursive>:
 8016840:	4770      	bx	lr

08016842 <__retarget_lock_release_recursive>:
 8016842:	4770      	bx	lr

08016844 <__swhatbuf_r>:
 8016844:	b570      	push	{r4, r5, r6, lr}
 8016846:	460e      	mov	r6, r1
 8016848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801684c:	2900      	cmp	r1, #0
 801684e:	b096      	sub	sp, #88	; 0x58
 8016850:	4614      	mov	r4, r2
 8016852:	461d      	mov	r5, r3
 8016854:	da08      	bge.n	8016868 <__swhatbuf_r+0x24>
 8016856:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801685a:	2200      	movs	r2, #0
 801685c:	602a      	str	r2, [r5, #0]
 801685e:	061a      	lsls	r2, r3, #24
 8016860:	d410      	bmi.n	8016884 <__swhatbuf_r+0x40>
 8016862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016866:	e00e      	b.n	8016886 <__swhatbuf_r+0x42>
 8016868:	466a      	mov	r2, sp
 801686a:	f000 fca5 	bl	80171b8 <_fstat_r>
 801686e:	2800      	cmp	r0, #0
 8016870:	dbf1      	blt.n	8016856 <__swhatbuf_r+0x12>
 8016872:	9a01      	ldr	r2, [sp, #4]
 8016874:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016878:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801687c:	425a      	negs	r2, r3
 801687e:	415a      	adcs	r2, r3
 8016880:	602a      	str	r2, [r5, #0]
 8016882:	e7ee      	b.n	8016862 <__swhatbuf_r+0x1e>
 8016884:	2340      	movs	r3, #64	; 0x40
 8016886:	2000      	movs	r0, #0
 8016888:	6023      	str	r3, [r4, #0]
 801688a:	b016      	add	sp, #88	; 0x58
 801688c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016890 <__smakebuf_r>:
 8016890:	898b      	ldrh	r3, [r1, #12]
 8016892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016894:	079d      	lsls	r5, r3, #30
 8016896:	4606      	mov	r6, r0
 8016898:	460c      	mov	r4, r1
 801689a:	d507      	bpl.n	80168ac <__smakebuf_r+0x1c>
 801689c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80168a0:	6023      	str	r3, [r4, #0]
 80168a2:	6123      	str	r3, [r4, #16]
 80168a4:	2301      	movs	r3, #1
 80168a6:	6163      	str	r3, [r4, #20]
 80168a8:	b002      	add	sp, #8
 80168aa:	bd70      	pop	{r4, r5, r6, pc}
 80168ac:	ab01      	add	r3, sp, #4
 80168ae:	466a      	mov	r2, sp
 80168b0:	f7ff ffc8 	bl	8016844 <__swhatbuf_r>
 80168b4:	9900      	ldr	r1, [sp, #0]
 80168b6:	4605      	mov	r5, r0
 80168b8:	4630      	mov	r0, r6
 80168ba:	f000 f89d 	bl	80169f8 <_malloc_r>
 80168be:	b948      	cbnz	r0, 80168d4 <__smakebuf_r+0x44>
 80168c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168c4:	059a      	lsls	r2, r3, #22
 80168c6:	d4ef      	bmi.n	80168a8 <__smakebuf_r+0x18>
 80168c8:	f023 0303 	bic.w	r3, r3, #3
 80168cc:	f043 0302 	orr.w	r3, r3, #2
 80168d0:	81a3      	strh	r3, [r4, #12]
 80168d2:	e7e3      	b.n	801689c <__smakebuf_r+0xc>
 80168d4:	4b0d      	ldr	r3, [pc, #52]	; (801690c <__smakebuf_r+0x7c>)
 80168d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80168d8:	89a3      	ldrh	r3, [r4, #12]
 80168da:	6020      	str	r0, [r4, #0]
 80168dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168e0:	81a3      	strh	r3, [r4, #12]
 80168e2:	9b00      	ldr	r3, [sp, #0]
 80168e4:	6163      	str	r3, [r4, #20]
 80168e6:	9b01      	ldr	r3, [sp, #4]
 80168e8:	6120      	str	r0, [r4, #16]
 80168ea:	b15b      	cbz	r3, 8016904 <__smakebuf_r+0x74>
 80168ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80168f0:	4630      	mov	r0, r6
 80168f2:	f000 fc73 	bl	80171dc <_isatty_r>
 80168f6:	b128      	cbz	r0, 8016904 <__smakebuf_r+0x74>
 80168f8:	89a3      	ldrh	r3, [r4, #12]
 80168fa:	f023 0303 	bic.w	r3, r3, #3
 80168fe:	f043 0301 	orr.w	r3, r3, #1
 8016902:	81a3      	strh	r3, [r4, #12]
 8016904:	89a0      	ldrh	r0, [r4, #12]
 8016906:	4305      	orrs	r5, r0
 8016908:	81a5      	strh	r5, [r4, #12]
 801690a:	e7cd      	b.n	80168a8 <__smakebuf_r+0x18>
 801690c:	08016679 	.word	0x08016679

08016910 <malloc>:
 8016910:	4b02      	ldr	r3, [pc, #8]	; (801691c <malloc+0xc>)
 8016912:	4601      	mov	r1, r0
 8016914:	6818      	ldr	r0, [r3, #0]
 8016916:	f000 b86f 	b.w	80169f8 <_malloc_r>
 801691a:	bf00      	nop
 801691c:	2000002c 	.word	0x2000002c

08016920 <_free_r>:
 8016920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016922:	2900      	cmp	r1, #0
 8016924:	d044      	beq.n	80169b0 <_free_r+0x90>
 8016926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801692a:	9001      	str	r0, [sp, #4]
 801692c:	2b00      	cmp	r3, #0
 801692e:	f1a1 0404 	sub.w	r4, r1, #4
 8016932:	bfb8      	it	lt
 8016934:	18e4      	addlt	r4, r4, r3
 8016936:	f000 fc73 	bl	8017220 <__malloc_lock>
 801693a:	4a1e      	ldr	r2, [pc, #120]	; (80169b4 <_free_r+0x94>)
 801693c:	9801      	ldr	r0, [sp, #4]
 801693e:	6813      	ldr	r3, [r2, #0]
 8016940:	b933      	cbnz	r3, 8016950 <_free_r+0x30>
 8016942:	6063      	str	r3, [r4, #4]
 8016944:	6014      	str	r4, [r2, #0]
 8016946:	b003      	add	sp, #12
 8016948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801694c:	f000 bc6e 	b.w	801722c <__malloc_unlock>
 8016950:	42a3      	cmp	r3, r4
 8016952:	d908      	bls.n	8016966 <_free_r+0x46>
 8016954:	6825      	ldr	r5, [r4, #0]
 8016956:	1961      	adds	r1, r4, r5
 8016958:	428b      	cmp	r3, r1
 801695a:	bf01      	itttt	eq
 801695c:	6819      	ldreq	r1, [r3, #0]
 801695e:	685b      	ldreq	r3, [r3, #4]
 8016960:	1949      	addeq	r1, r1, r5
 8016962:	6021      	streq	r1, [r4, #0]
 8016964:	e7ed      	b.n	8016942 <_free_r+0x22>
 8016966:	461a      	mov	r2, r3
 8016968:	685b      	ldr	r3, [r3, #4]
 801696a:	b10b      	cbz	r3, 8016970 <_free_r+0x50>
 801696c:	42a3      	cmp	r3, r4
 801696e:	d9fa      	bls.n	8016966 <_free_r+0x46>
 8016970:	6811      	ldr	r1, [r2, #0]
 8016972:	1855      	adds	r5, r2, r1
 8016974:	42a5      	cmp	r5, r4
 8016976:	d10b      	bne.n	8016990 <_free_r+0x70>
 8016978:	6824      	ldr	r4, [r4, #0]
 801697a:	4421      	add	r1, r4
 801697c:	1854      	adds	r4, r2, r1
 801697e:	42a3      	cmp	r3, r4
 8016980:	6011      	str	r1, [r2, #0]
 8016982:	d1e0      	bne.n	8016946 <_free_r+0x26>
 8016984:	681c      	ldr	r4, [r3, #0]
 8016986:	685b      	ldr	r3, [r3, #4]
 8016988:	6053      	str	r3, [r2, #4]
 801698a:	4421      	add	r1, r4
 801698c:	6011      	str	r1, [r2, #0]
 801698e:	e7da      	b.n	8016946 <_free_r+0x26>
 8016990:	d902      	bls.n	8016998 <_free_r+0x78>
 8016992:	230c      	movs	r3, #12
 8016994:	6003      	str	r3, [r0, #0]
 8016996:	e7d6      	b.n	8016946 <_free_r+0x26>
 8016998:	6825      	ldr	r5, [r4, #0]
 801699a:	1961      	adds	r1, r4, r5
 801699c:	428b      	cmp	r3, r1
 801699e:	bf04      	itt	eq
 80169a0:	6819      	ldreq	r1, [r3, #0]
 80169a2:	685b      	ldreq	r3, [r3, #4]
 80169a4:	6063      	str	r3, [r4, #4]
 80169a6:	bf04      	itt	eq
 80169a8:	1949      	addeq	r1, r1, r5
 80169aa:	6021      	streq	r1, [r4, #0]
 80169ac:	6054      	str	r4, [r2, #4]
 80169ae:	e7ca      	b.n	8016946 <_free_r+0x26>
 80169b0:	b003      	add	sp, #12
 80169b2:	bd30      	pop	{r4, r5, pc}
 80169b4:	20009854 	.word	0x20009854

080169b8 <sbrk_aligned>:
 80169b8:	b570      	push	{r4, r5, r6, lr}
 80169ba:	4e0e      	ldr	r6, [pc, #56]	; (80169f4 <sbrk_aligned+0x3c>)
 80169bc:	460c      	mov	r4, r1
 80169be:	6831      	ldr	r1, [r6, #0]
 80169c0:	4605      	mov	r5, r0
 80169c2:	b911      	cbnz	r1, 80169ca <sbrk_aligned+0x12>
 80169c4:	f000 fb7a 	bl	80170bc <_sbrk_r>
 80169c8:	6030      	str	r0, [r6, #0]
 80169ca:	4621      	mov	r1, r4
 80169cc:	4628      	mov	r0, r5
 80169ce:	f000 fb75 	bl	80170bc <_sbrk_r>
 80169d2:	1c43      	adds	r3, r0, #1
 80169d4:	d00a      	beq.n	80169ec <sbrk_aligned+0x34>
 80169d6:	1cc4      	adds	r4, r0, #3
 80169d8:	f024 0403 	bic.w	r4, r4, #3
 80169dc:	42a0      	cmp	r0, r4
 80169de:	d007      	beq.n	80169f0 <sbrk_aligned+0x38>
 80169e0:	1a21      	subs	r1, r4, r0
 80169e2:	4628      	mov	r0, r5
 80169e4:	f000 fb6a 	bl	80170bc <_sbrk_r>
 80169e8:	3001      	adds	r0, #1
 80169ea:	d101      	bne.n	80169f0 <sbrk_aligned+0x38>
 80169ec:	f04f 34ff 	mov.w	r4, #4294967295
 80169f0:	4620      	mov	r0, r4
 80169f2:	bd70      	pop	{r4, r5, r6, pc}
 80169f4:	20009858 	.word	0x20009858

080169f8 <_malloc_r>:
 80169f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169fc:	1ccd      	adds	r5, r1, #3
 80169fe:	f025 0503 	bic.w	r5, r5, #3
 8016a02:	3508      	adds	r5, #8
 8016a04:	2d0c      	cmp	r5, #12
 8016a06:	bf38      	it	cc
 8016a08:	250c      	movcc	r5, #12
 8016a0a:	2d00      	cmp	r5, #0
 8016a0c:	4607      	mov	r7, r0
 8016a0e:	db01      	blt.n	8016a14 <_malloc_r+0x1c>
 8016a10:	42a9      	cmp	r1, r5
 8016a12:	d905      	bls.n	8016a20 <_malloc_r+0x28>
 8016a14:	230c      	movs	r3, #12
 8016a16:	603b      	str	r3, [r7, #0]
 8016a18:	2600      	movs	r6, #0
 8016a1a:	4630      	mov	r0, r6
 8016a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a20:	4e2e      	ldr	r6, [pc, #184]	; (8016adc <_malloc_r+0xe4>)
 8016a22:	f000 fbfd 	bl	8017220 <__malloc_lock>
 8016a26:	6833      	ldr	r3, [r6, #0]
 8016a28:	461c      	mov	r4, r3
 8016a2a:	bb34      	cbnz	r4, 8016a7a <_malloc_r+0x82>
 8016a2c:	4629      	mov	r1, r5
 8016a2e:	4638      	mov	r0, r7
 8016a30:	f7ff ffc2 	bl	80169b8 <sbrk_aligned>
 8016a34:	1c43      	adds	r3, r0, #1
 8016a36:	4604      	mov	r4, r0
 8016a38:	d14d      	bne.n	8016ad6 <_malloc_r+0xde>
 8016a3a:	6834      	ldr	r4, [r6, #0]
 8016a3c:	4626      	mov	r6, r4
 8016a3e:	2e00      	cmp	r6, #0
 8016a40:	d140      	bne.n	8016ac4 <_malloc_r+0xcc>
 8016a42:	6823      	ldr	r3, [r4, #0]
 8016a44:	4631      	mov	r1, r6
 8016a46:	4638      	mov	r0, r7
 8016a48:	eb04 0803 	add.w	r8, r4, r3
 8016a4c:	f000 fb36 	bl	80170bc <_sbrk_r>
 8016a50:	4580      	cmp	r8, r0
 8016a52:	d13a      	bne.n	8016aca <_malloc_r+0xd2>
 8016a54:	6821      	ldr	r1, [r4, #0]
 8016a56:	3503      	adds	r5, #3
 8016a58:	1a6d      	subs	r5, r5, r1
 8016a5a:	f025 0503 	bic.w	r5, r5, #3
 8016a5e:	3508      	adds	r5, #8
 8016a60:	2d0c      	cmp	r5, #12
 8016a62:	bf38      	it	cc
 8016a64:	250c      	movcc	r5, #12
 8016a66:	4629      	mov	r1, r5
 8016a68:	4638      	mov	r0, r7
 8016a6a:	f7ff ffa5 	bl	80169b8 <sbrk_aligned>
 8016a6e:	3001      	adds	r0, #1
 8016a70:	d02b      	beq.n	8016aca <_malloc_r+0xd2>
 8016a72:	6823      	ldr	r3, [r4, #0]
 8016a74:	442b      	add	r3, r5
 8016a76:	6023      	str	r3, [r4, #0]
 8016a78:	e00e      	b.n	8016a98 <_malloc_r+0xa0>
 8016a7a:	6822      	ldr	r2, [r4, #0]
 8016a7c:	1b52      	subs	r2, r2, r5
 8016a7e:	d41e      	bmi.n	8016abe <_malloc_r+0xc6>
 8016a80:	2a0b      	cmp	r2, #11
 8016a82:	d916      	bls.n	8016ab2 <_malloc_r+0xba>
 8016a84:	1961      	adds	r1, r4, r5
 8016a86:	42a3      	cmp	r3, r4
 8016a88:	6025      	str	r5, [r4, #0]
 8016a8a:	bf18      	it	ne
 8016a8c:	6059      	strne	r1, [r3, #4]
 8016a8e:	6863      	ldr	r3, [r4, #4]
 8016a90:	bf08      	it	eq
 8016a92:	6031      	streq	r1, [r6, #0]
 8016a94:	5162      	str	r2, [r4, r5]
 8016a96:	604b      	str	r3, [r1, #4]
 8016a98:	4638      	mov	r0, r7
 8016a9a:	f104 060b 	add.w	r6, r4, #11
 8016a9e:	f000 fbc5 	bl	801722c <__malloc_unlock>
 8016aa2:	f026 0607 	bic.w	r6, r6, #7
 8016aa6:	1d23      	adds	r3, r4, #4
 8016aa8:	1af2      	subs	r2, r6, r3
 8016aaa:	d0b6      	beq.n	8016a1a <_malloc_r+0x22>
 8016aac:	1b9b      	subs	r3, r3, r6
 8016aae:	50a3      	str	r3, [r4, r2]
 8016ab0:	e7b3      	b.n	8016a1a <_malloc_r+0x22>
 8016ab2:	6862      	ldr	r2, [r4, #4]
 8016ab4:	42a3      	cmp	r3, r4
 8016ab6:	bf0c      	ite	eq
 8016ab8:	6032      	streq	r2, [r6, #0]
 8016aba:	605a      	strne	r2, [r3, #4]
 8016abc:	e7ec      	b.n	8016a98 <_malloc_r+0xa0>
 8016abe:	4623      	mov	r3, r4
 8016ac0:	6864      	ldr	r4, [r4, #4]
 8016ac2:	e7b2      	b.n	8016a2a <_malloc_r+0x32>
 8016ac4:	4634      	mov	r4, r6
 8016ac6:	6876      	ldr	r6, [r6, #4]
 8016ac8:	e7b9      	b.n	8016a3e <_malloc_r+0x46>
 8016aca:	230c      	movs	r3, #12
 8016acc:	603b      	str	r3, [r7, #0]
 8016ace:	4638      	mov	r0, r7
 8016ad0:	f000 fbac 	bl	801722c <__malloc_unlock>
 8016ad4:	e7a1      	b.n	8016a1a <_malloc_r+0x22>
 8016ad6:	6025      	str	r5, [r4, #0]
 8016ad8:	e7de      	b.n	8016a98 <_malloc_r+0xa0>
 8016ada:	bf00      	nop
 8016adc:	20009854 	.word	0x20009854

08016ae0 <__sfputc_r>:
 8016ae0:	6893      	ldr	r3, [r2, #8]
 8016ae2:	3b01      	subs	r3, #1
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	b410      	push	{r4}
 8016ae8:	6093      	str	r3, [r2, #8]
 8016aea:	da08      	bge.n	8016afe <__sfputc_r+0x1e>
 8016aec:	6994      	ldr	r4, [r2, #24]
 8016aee:	42a3      	cmp	r3, r4
 8016af0:	db01      	blt.n	8016af6 <__sfputc_r+0x16>
 8016af2:	290a      	cmp	r1, #10
 8016af4:	d103      	bne.n	8016afe <__sfputc_r+0x1e>
 8016af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016afa:	f7ff bbf9 	b.w	80162f0 <__swbuf_r>
 8016afe:	6813      	ldr	r3, [r2, #0]
 8016b00:	1c58      	adds	r0, r3, #1
 8016b02:	6010      	str	r0, [r2, #0]
 8016b04:	7019      	strb	r1, [r3, #0]
 8016b06:	4608      	mov	r0, r1
 8016b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b0c:	4770      	bx	lr

08016b0e <__sfputs_r>:
 8016b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b10:	4606      	mov	r6, r0
 8016b12:	460f      	mov	r7, r1
 8016b14:	4614      	mov	r4, r2
 8016b16:	18d5      	adds	r5, r2, r3
 8016b18:	42ac      	cmp	r4, r5
 8016b1a:	d101      	bne.n	8016b20 <__sfputs_r+0x12>
 8016b1c:	2000      	movs	r0, #0
 8016b1e:	e007      	b.n	8016b30 <__sfputs_r+0x22>
 8016b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b24:	463a      	mov	r2, r7
 8016b26:	4630      	mov	r0, r6
 8016b28:	f7ff ffda 	bl	8016ae0 <__sfputc_r>
 8016b2c:	1c43      	adds	r3, r0, #1
 8016b2e:	d1f3      	bne.n	8016b18 <__sfputs_r+0xa>
 8016b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016b34 <_vfiprintf_r>:
 8016b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b38:	460d      	mov	r5, r1
 8016b3a:	b09d      	sub	sp, #116	; 0x74
 8016b3c:	4614      	mov	r4, r2
 8016b3e:	4698      	mov	r8, r3
 8016b40:	4606      	mov	r6, r0
 8016b42:	b118      	cbz	r0, 8016b4c <_vfiprintf_r+0x18>
 8016b44:	6983      	ldr	r3, [r0, #24]
 8016b46:	b90b      	cbnz	r3, 8016b4c <_vfiprintf_r+0x18>
 8016b48:	f7ff fdca 	bl	80166e0 <__sinit>
 8016b4c:	4b89      	ldr	r3, [pc, #548]	; (8016d74 <_vfiprintf_r+0x240>)
 8016b4e:	429d      	cmp	r5, r3
 8016b50:	d11b      	bne.n	8016b8a <_vfiprintf_r+0x56>
 8016b52:	6875      	ldr	r5, [r6, #4]
 8016b54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b56:	07d9      	lsls	r1, r3, #31
 8016b58:	d405      	bmi.n	8016b66 <_vfiprintf_r+0x32>
 8016b5a:	89ab      	ldrh	r3, [r5, #12]
 8016b5c:	059a      	lsls	r2, r3, #22
 8016b5e:	d402      	bmi.n	8016b66 <_vfiprintf_r+0x32>
 8016b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016b62:	f7ff fe6d 	bl	8016840 <__retarget_lock_acquire_recursive>
 8016b66:	89ab      	ldrh	r3, [r5, #12]
 8016b68:	071b      	lsls	r3, r3, #28
 8016b6a:	d501      	bpl.n	8016b70 <_vfiprintf_r+0x3c>
 8016b6c:	692b      	ldr	r3, [r5, #16]
 8016b6e:	b9eb      	cbnz	r3, 8016bac <_vfiprintf_r+0x78>
 8016b70:	4629      	mov	r1, r5
 8016b72:	4630      	mov	r0, r6
 8016b74:	f7ff fc0e 	bl	8016394 <__swsetup_r>
 8016b78:	b1c0      	cbz	r0, 8016bac <_vfiprintf_r+0x78>
 8016b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b7c:	07dc      	lsls	r4, r3, #31
 8016b7e:	d50e      	bpl.n	8016b9e <_vfiprintf_r+0x6a>
 8016b80:	f04f 30ff 	mov.w	r0, #4294967295
 8016b84:	b01d      	add	sp, #116	; 0x74
 8016b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b8a:	4b7b      	ldr	r3, [pc, #492]	; (8016d78 <_vfiprintf_r+0x244>)
 8016b8c:	429d      	cmp	r5, r3
 8016b8e:	d101      	bne.n	8016b94 <_vfiprintf_r+0x60>
 8016b90:	68b5      	ldr	r5, [r6, #8]
 8016b92:	e7df      	b.n	8016b54 <_vfiprintf_r+0x20>
 8016b94:	4b79      	ldr	r3, [pc, #484]	; (8016d7c <_vfiprintf_r+0x248>)
 8016b96:	429d      	cmp	r5, r3
 8016b98:	bf08      	it	eq
 8016b9a:	68f5      	ldreq	r5, [r6, #12]
 8016b9c:	e7da      	b.n	8016b54 <_vfiprintf_r+0x20>
 8016b9e:	89ab      	ldrh	r3, [r5, #12]
 8016ba0:	0598      	lsls	r0, r3, #22
 8016ba2:	d4ed      	bmi.n	8016b80 <_vfiprintf_r+0x4c>
 8016ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016ba6:	f7ff fe4c 	bl	8016842 <__retarget_lock_release_recursive>
 8016baa:	e7e9      	b.n	8016b80 <_vfiprintf_r+0x4c>
 8016bac:	2300      	movs	r3, #0
 8016bae:	9309      	str	r3, [sp, #36]	; 0x24
 8016bb0:	2320      	movs	r3, #32
 8016bb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016bb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8016bba:	2330      	movs	r3, #48	; 0x30
 8016bbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016d80 <_vfiprintf_r+0x24c>
 8016bc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016bc4:	f04f 0901 	mov.w	r9, #1
 8016bc8:	4623      	mov	r3, r4
 8016bca:	469a      	mov	sl, r3
 8016bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016bd0:	b10a      	cbz	r2, 8016bd6 <_vfiprintf_r+0xa2>
 8016bd2:	2a25      	cmp	r2, #37	; 0x25
 8016bd4:	d1f9      	bne.n	8016bca <_vfiprintf_r+0x96>
 8016bd6:	ebba 0b04 	subs.w	fp, sl, r4
 8016bda:	d00b      	beq.n	8016bf4 <_vfiprintf_r+0xc0>
 8016bdc:	465b      	mov	r3, fp
 8016bde:	4622      	mov	r2, r4
 8016be0:	4629      	mov	r1, r5
 8016be2:	4630      	mov	r0, r6
 8016be4:	f7ff ff93 	bl	8016b0e <__sfputs_r>
 8016be8:	3001      	adds	r0, #1
 8016bea:	f000 80aa 	beq.w	8016d42 <_vfiprintf_r+0x20e>
 8016bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016bf0:	445a      	add	r2, fp
 8016bf2:	9209      	str	r2, [sp, #36]	; 0x24
 8016bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	f000 80a2 	beq.w	8016d42 <_vfiprintf_r+0x20e>
 8016bfe:	2300      	movs	r3, #0
 8016c00:	f04f 32ff 	mov.w	r2, #4294967295
 8016c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c08:	f10a 0a01 	add.w	sl, sl, #1
 8016c0c:	9304      	str	r3, [sp, #16]
 8016c0e:	9307      	str	r3, [sp, #28]
 8016c10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016c14:	931a      	str	r3, [sp, #104]	; 0x68
 8016c16:	4654      	mov	r4, sl
 8016c18:	2205      	movs	r2, #5
 8016c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c1e:	4858      	ldr	r0, [pc, #352]	; (8016d80 <_vfiprintf_r+0x24c>)
 8016c20:	f7e9 faf6 	bl	8000210 <memchr>
 8016c24:	9a04      	ldr	r2, [sp, #16]
 8016c26:	b9d8      	cbnz	r0, 8016c60 <_vfiprintf_r+0x12c>
 8016c28:	06d1      	lsls	r1, r2, #27
 8016c2a:	bf44      	itt	mi
 8016c2c:	2320      	movmi	r3, #32
 8016c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016c32:	0713      	lsls	r3, r2, #28
 8016c34:	bf44      	itt	mi
 8016c36:	232b      	movmi	r3, #43	; 0x2b
 8016c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8016c40:	2b2a      	cmp	r3, #42	; 0x2a
 8016c42:	d015      	beq.n	8016c70 <_vfiprintf_r+0x13c>
 8016c44:	9a07      	ldr	r2, [sp, #28]
 8016c46:	4654      	mov	r4, sl
 8016c48:	2000      	movs	r0, #0
 8016c4a:	f04f 0c0a 	mov.w	ip, #10
 8016c4e:	4621      	mov	r1, r4
 8016c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c54:	3b30      	subs	r3, #48	; 0x30
 8016c56:	2b09      	cmp	r3, #9
 8016c58:	d94e      	bls.n	8016cf8 <_vfiprintf_r+0x1c4>
 8016c5a:	b1b0      	cbz	r0, 8016c8a <_vfiprintf_r+0x156>
 8016c5c:	9207      	str	r2, [sp, #28]
 8016c5e:	e014      	b.n	8016c8a <_vfiprintf_r+0x156>
 8016c60:	eba0 0308 	sub.w	r3, r0, r8
 8016c64:	fa09 f303 	lsl.w	r3, r9, r3
 8016c68:	4313      	orrs	r3, r2
 8016c6a:	9304      	str	r3, [sp, #16]
 8016c6c:	46a2      	mov	sl, r4
 8016c6e:	e7d2      	b.n	8016c16 <_vfiprintf_r+0xe2>
 8016c70:	9b03      	ldr	r3, [sp, #12]
 8016c72:	1d19      	adds	r1, r3, #4
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	9103      	str	r1, [sp, #12]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	bfbb      	ittet	lt
 8016c7c:	425b      	neglt	r3, r3
 8016c7e:	f042 0202 	orrlt.w	r2, r2, #2
 8016c82:	9307      	strge	r3, [sp, #28]
 8016c84:	9307      	strlt	r3, [sp, #28]
 8016c86:	bfb8      	it	lt
 8016c88:	9204      	strlt	r2, [sp, #16]
 8016c8a:	7823      	ldrb	r3, [r4, #0]
 8016c8c:	2b2e      	cmp	r3, #46	; 0x2e
 8016c8e:	d10c      	bne.n	8016caa <_vfiprintf_r+0x176>
 8016c90:	7863      	ldrb	r3, [r4, #1]
 8016c92:	2b2a      	cmp	r3, #42	; 0x2a
 8016c94:	d135      	bne.n	8016d02 <_vfiprintf_r+0x1ce>
 8016c96:	9b03      	ldr	r3, [sp, #12]
 8016c98:	1d1a      	adds	r2, r3, #4
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	9203      	str	r2, [sp, #12]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	bfb8      	it	lt
 8016ca2:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ca6:	3402      	adds	r4, #2
 8016ca8:	9305      	str	r3, [sp, #20]
 8016caa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016d90 <_vfiprintf_r+0x25c>
 8016cae:	7821      	ldrb	r1, [r4, #0]
 8016cb0:	2203      	movs	r2, #3
 8016cb2:	4650      	mov	r0, sl
 8016cb4:	f7e9 faac 	bl	8000210 <memchr>
 8016cb8:	b140      	cbz	r0, 8016ccc <_vfiprintf_r+0x198>
 8016cba:	2340      	movs	r3, #64	; 0x40
 8016cbc:	eba0 000a 	sub.w	r0, r0, sl
 8016cc0:	fa03 f000 	lsl.w	r0, r3, r0
 8016cc4:	9b04      	ldr	r3, [sp, #16]
 8016cc6:	4303      	orrs	r3, r0
 8016cc8:	3401      	adds	r4, #1
 8016cca:	9304      	str	r3, [sp, #16]
 8016ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cd0:	482c      	ldr	r0, [pc, #176]	; (8016d84 <_vfiprintf_r+0x250>)
 8016cd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016cd6:	2206      	movs	r2, #6
 8016cd8:	f7e9 fa9a 	bl	8000210 <memchr>
 8016cdc:	2800      	cmp	r0, #0
 8016cde:	d03f      	beq.n	8016d60 <_vfiprintf_r+0x22c>
 8016ce0:	4b29      	ldr	r3, [pc, #164]	; (8016d88 <_vfiprintf_r+0x254>)
 8016ce2:	bb1b      	cbnz	r3, 8016d2c <_vfiprintf_r+0x1f8>
 8016ce4:	9b03      	ldr	r3, [sp, #12]
 8016ce6:	3307      	adds	r3, #7
 8016ce8:	f023 0307 	bic.w	r3, r3, #7
 8016cec:	3308      	adds	r3, #8
 8016cee:	9303      	str	r3, [sp, #12]
 8016cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cf2:	443b      	add	r3, r7
 8016cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8016cf6:	e767      	b.n	8016bc8 <_vfiprintf_r+0x94>
 8016cf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8016cfc:	460c      	mov	r4, r1
 8016cfe:	2001      	movs	r0, #1
 8016d00:	e7a5      	b.n	8016c4e <_vfiprintf_r+0x11a>
 8016d02:	2300      	movs	r3, #0
 8016d04:	3401      	adds	r4, #1
 8016d06:	9305      	str	r3, [sp, #20]
 8016d08:	4619      	mov	r1, r3
 8016d0a:	f04f 0c0a 	mov.w	ip, #10
 8016d0e:	4620      	mov	r0, r4
 8016d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d14:	3a30      	subs	r2, #48	; 0x30
 8016d16:	2a09      	cmp	r2, #9
 8016d18:	d903      	bls.n	8016d22 <_vfiprintf_r+0x1ee>
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d0c5      	beq.n	8016caa <_vfiprintf_r+0x176>
 8016d1e:	9105      	str	r1, [sp, #20]
 8016d20:	e7c3      	b.n	8016caa <_vfiprintf_r+0x176>
 8016d22:	fb0c 2101 	mla	r1, ip, r1, r2
 8016d26:	4604      	mov	r4, r0
 8016d28:	2301      	movs	r3, #1
 8016d2a:	e7f0      	b.n	8016d0e <_vfiprintf_r+0x1da>
 8016d2c:	ab03      	add	r3, sp, #12
 8016d2e:	9300      	str	r3, [sp, #0]
 8016d30:	462a      	mov	r2, r5
 8016d32:	4b16      	ldr	r3, [pc, #88]	; (8016d8c <_vfiprintf_r+0x258>)
 8016d34:	a904      	add	r1, sp, #16
 8016d36:	4630      	mov	r0, r6
 8016d38:	f3af 8000 	nop.w
 8016d3c:	4607      	mov	r7, r0
 8016d3e:	1c78      	adds	r0, r7, #1
 8016d40:	d1d6      	bne.n	8016cf0 <_vfiprintf_r+0x1bc>
 8016d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d44:	07d9      	lsls	r1, r3, #31
 8016d46:	d405      	bmi.n	8016d54 <_vfiprintf_r+0x220>
 8016d48:	89ab      	ldrh	r3, [r5, #12]
 8016d4a:	059a      	lsls	r2, r3, #22
 8016d4c:	d402      	bmi.n	8016d54 <_vfiprintf_r+0x220>
 8016d4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d50:	f7ff fd77 	bl	8016842 <__retarget_lock_release_recursive>
 8016d54:	89ab      	ldrh	r3, [r5, #12]
 8016d56:	065b      	lsls	r3, r3, #25
 8016d58:	f53f af12 	bmi.w	8016b80 <_vfiprintf_r+0x4c>
 8016d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d5e:	e711      	b.n	8016b84 <_vfiprintf_r+0x50>
 8016d60:	ab03      	add	r3, sp, #12
 8016d62:	9300      	str	r3, [sp, #0]
 8016d64:	462a      	mov	r2, r5
 8016d66:	4b09      	ldr	r3, [pc, #36]	; (8016d8c <_vfiprintf_r+0x258>)
 8016d68:	a904      	add	r1, sp, #16
 8016d6a:	4630      	mov	r0, r6
 8016d6c:	f000 f880 	bl	8016e70 <_printf_i>
 8016d70:	e7e4      	b.n	8016d3c <_vfiprintf_r+0x208>
 8016d72:	bf00      	nop
 8016d74:	0801a018 	.word	0x0801a018
 8016d78:	0801a038 	.word	0x0801a038
 8016d7c:	08019ff8 	.word	0x08019ff8
 8016d80:	0801a058 	.word	0x0801a058
 8016d84:	0801a062 	.word	0x0801a062
 8016d88:	00000000 	.word	0x00000000
 8016d8c:	08016b0f 	.word	0x08016b0f
 8016d90:	0801a05e 	.word	0x0801a05e

08016d94 <_printf_common>:
 8016d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d98:	4616      	mov	r6, r2
 8016d9a:	4699      	mov	r9, r3
 8016d9c:	688a      	ldr	r2, [r1, #8]
 8016d9e:	690b      	ldr	r3, [r1, #16]
 8016da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016da4:	4293      	cmp	r3, r2
 8016da6:	bfb8      	it	lt
 8016da8:	4613      	movlt	r3, r2
 8016daa:	6033      	str	r3, [r6, #0]
 8016dac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016db0:	4607      	mov	r7, r0
 8016db2:	460c      	mov	r4, r1
 8016db4:	b10a      	cbz	r2, 8016dba <_printf_common+0x26>
 8016db6:	3301      	adds	r3, #1
 8016db8:	6033      	str	r3, [r6, #0]
 8016dba:	6823      	ldr	r3, [r4, #0]
 8016dbc:	0699      	lsls	r1, r3, #26
 8016dbe:	bf42      	ittt	mi
 8016dc0:	6833      	ldrmi	r3, [r6, #0]
 8016dc2:	3302      	addmi	r3, #2
 8016dc4:	6033      	strmi	r3, [r6, #0]
 8016dc6:	6825      	ldr	r5, [r4, #0]
 8016dc8:	f015 0506 	ands.w	r5, r5, #6
 8016dcc:	d106      	bne.n	8016ddc <_printf_common+0x48>
 8016dce:	f104 0a19 	add.w	sl, r4, #25
 8016dd2:	68e3      	ldr	r3, [r4, #12]
 8016dd4:	6832      	ldr	r2, [r6, #0]
 8016dd6:	1a9b      	subs	r3, r3, r2
 8016dd8:	42ab      	cmp	r3, r5
 8016dda:	dc26      	bgt.n	8016e2a <_printf_common+0x96>
 8016ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016de0:	1e13      	subs	r3, r2, #0
 8016de2:	6822      	ldr	r2, [r4, #0]
 8016de4:	bf18      	it	ne
 8016de6:	2301      	movne	r3, #1
 8016de8:	0692      	lsls	r2, r2, #26
 8016dea:	d42b      	bmi.n	8016e44 <_printf_common+0xb0>
 8016dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016df0:	4649      	mov	r1, r9
 8016df2:	4638      	mov	r0, r7
 8016df4:	47c0      	blx	r8
 8016df6:	3001      	adds	r0, #1
 8016df8:	d01e      	beq.n	8016e38 <_printf_common+0xa4>
 8016dfa:	6823      	ldr	r3, [r4, #0]
 8016dfc:	68e5      	ldr	r5, [r4, #12]
 8016dfe:	6832      	ldr	r2, [r6, #0]
 8016e00:	f003 0306 	and.w	r3, r3, #6
 8016e04:	2b04      	cmp	r3, #4
 8016e06:	bf08      	it	eq
 8016e08:	1aad      	subeq	r5, r5, r2
 8016e0a:	68a3      	ldr	r3, [r4, #8]
 8016e0c:	6922      	ldr	r2, [r4, #16]
 8016e0e:	bf0c      	ite	eq
 8016e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016e14:	2500      	movne	r5, #0
 8016e16:	4293      	cmp	r3, r2
 8016e18:	bfc4      	itt	gt
 8016e1a:	1a9b      	subgt	r3, r3, r2
 8016e1c:	18ed      	addgt	r5, r5, r3
 8016e1e:	2600      	movs	r6, #0
 8016e20:	341a      	adds	r4, #26
 8016e22:	42b5      	cmp	r5, r6
 8016e24:	d11a      	bne.n	8016e5c <_printf_common+0xc8>
 8016e26:	2000      	movs	r0, #0
 8016e28:	e008      	b.n	8016e3c <_printf_common+0xa8>
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	4652      	mov	r2, sl
 8016e2e:	4649      	mov	r1, r9
 8016e30:	4638      	mov	r0, r7
 8016e32:	47c0      	blx	r8
 8016e34:	3001      	adds	r0, #1
 8016e36:	d103      	bne.n	8016e40 <_printf_common+0xac>
 8016e38:	f04f 30ff 	mov.w	r0, #4294967295
 8016e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e40:	3501      	adds	r5, #1
 8016e42:	e7c6      	b.n	8016dd2 <_printf_common+0x3e>
 8016e44:	18e1      	adds	r1, r4, r3
 8016e46:	1c5a      	adds	r2, r3, #1
 8016e48:	2030      	movs	r0, #48	; 0x30
 8016e4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016e4e:	4422      	add	r2, r4
 8016e50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016e54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016e58:	3302      	adds	r3, #2
 8016e5a:	e7c7      	b.n	8016dec <_printf_common+0x58>
 8016e5c:	2301      	movs	r3, #1
 8016e5e:	4622      	mov	r2, r4
 8016e60:	4649      	mov	r1, r9
 8016e62:	4638      	mov	r0, r7
 8016e64:	47c0      	blx	r8
 8016e66:	3001      	adds	r0, #1
 8016e68:	d0e6      	beq.n	8016e38 <_printf_common+0xa4>
 8016e6a:	3601      	adds	r6, #1
 8016e6c:	e7d9      	b.n	8016e22 <_printf_common+0x8e>
	...

08016e70 <_printf_i>:
 8016e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016e74:	7e0f      	ldrb	r7, [r1, #24]
 8016e76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016e78:	2f78      	cmp	r7, #120	; 0x78
 8016e7a:	4691      	mov	r9, r2
 8016e7c:	4680      	mov	r8, r0
 8016e7e:	460c      	mov	r4, r1
 8016e80:	469a      	mov	sl, r3
 8016e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016e86:	d807      	bhi.n	8016e98 <_printf_i+0x28>
 8016e88:	2f62      	cmp	r7, #98	; 0x62
 8016e8a:	d80a      	bhi.n	8016ea2 <_printf_i+0x32>
 8016e8c:	2f00      	cmp	r7, #0
 8016e8e:	f000 80d8 	beq.w	8017042 <_printf_i+0x1d2>
 8016e92:	2f58      	cmp	r7, #88	; 0x58
 8016e94:	f000 80a3 	beq.w	8016fde <_printf_i+0x16e>
 8016e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016ea0:	e03a      	b.n	8016f18 <_printf_i+0xa8>
 8016ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016ea6:	2b15      	cmp	r3, #21
 8016ea8:	d8f6      	bhi.n	8016e98 <_printf_i+0x28>
 8016eaa:	a101      	add	r1, pc, #4	; (adr r1, 8016eb0 <_printf_i+0x40>)
 8016eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016eb0:	08016f09 	.word	0x08016f09
 8016eb4:	08016f1d 	.word	0x08016f1d
 8016eb8:	08016e99 	.word	0x08016e99
 8016ebc:	08016e99 	.word	0x08016e99
 8016ec0:	08016e99 	.word	0x08016e99
 8016ec4:	08016e99 	.word	0x08016e99
 8016ec8:	08016f1d 	.word	0x08016f1d
 8016ecc:	08016e99 	.word	0x08016e99
 8016ed0:	08016e99 	.word	0x08016e99
 8016ed4:	08016e99 	.word	0x08016e99
 8016ed8:	08016e99 	.word	0x08016e99
 8016edc:	08017029 	.word	0x08017029
 8016ee0:	08016f4d 	.word	0x08016f4d
 8016ee4:	0801700b 	.word	0x0801700b
 8016ee8:	08016e99 	.word	0x08016e99
 8016eec:	08016e99 	.word	0x08016e99
 8016ef0:	0801704b 	.word	0x0801704b
 8016ef4:	08016e99 	.word	0x08016e99
 8016ef8:	08016f4d 	.word	0x08016f4d
 8016efc:	08016e99 	.word	0x08016e99
 8016f00:	08016e99 	.word	0x08016e99
 8016f04:	08017013 	.word	0x08017013
 8016f08:	682b      	ldr	r3, [r5, #0]
 8016f0a:	1d1a      	adds	r2, r3, #4
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	602a      	str	r2, [r5, #0]
 8016f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016f18:	2301      	movs	r3, #1
 8016f1a:	e0a3      	b.n	8017064 <_printf_i+0x1f4>
 8016f1c:	6820      	ldr	r0, [r4, #0]
 8016f1e:	6829      	ldr	r1, [r5, #0]
 8016f20:	0606      	lsls	r6, r0, #24
 8016f22:	f101 0304 	add.w	r3, r1, #4
 8016f26:	d50a      	bpl.n	8016f3e <_printf_i+0xce>
 8016f28:	680e      	ldr	r6, [r1, #0]
 8016f2a:	602b      	str	r3, [r5, #0]
 8016f2c:	2e00      	cmp	r6, #0
 8016f2e:	da03      	bge.n	8016f38 <_printf_i+0xc8>
 8016f30:	232d      	movs	r3, #45	; 0x2d
 8016f32:	4276      	negs	r6, r6
 8016f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f38:	485e      	ldr	r0, [pc, #376]	; (80170b4 <_printf_i+0x244>)
 8016f3a:	230a      	movs	r3, #10
 8016f3c:	e019      	b.n	8016f72 <_printf_i+0x102>
 8016f3e:	680e      	ldr	r6, [r1, #0]
 8016f40:	602b      	str	r3, [r5, #0]
 8016f42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016f46:	bf18      	it	ne
 8016f48:	b236      	sxthne	r6, r6
 8016f4a:	e7ef      	b.n	8016f2c <_printf_i+0xbc>
 8016f4c:	682b      	ldr	r3, [r5, #0]
 8016f4e:	6820      	ldr	r0, [r4, #0]
 8016f50:	1d19      	adds	r1, r3, #4
 8016f52:	6029      	str	r1, [r5, #0]
 8016f54:	0601      	lsls	r1, r0, #24
 8016f56:	d501      	bpl.n	8016f5c <_printf_i+0xec>
 8016f58:	681e      	ldr	r6, [r3, #0]
 8016f5a:	e002      	b.n	8016f62 <_printf_i+0xf2>
 8016f5c:	0646      	lsls	r6, r0, #25
 8016f5e:	d5fb      	bpl.n	8016f58 <_printf_i+0xe8>
 8016f60:	881e      	ldrh	r6, [r3, #0]
 8016f62:	4854      	ldr	r0, [pc, #336]	; (80170b4 <_printf_i+0x244>)
 8016f64:	2f6f      	cmp	r7, #111	; 0x6f
 8016f66:	bf0c      	ite	eq
 8016f68:	2308      	moveq	r3, #8
 8016f6a:	230a      	movne	r3, #10
 8016f6c:	2100      	movs	r1, #0
 8016f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016f72:	6865      	ldr	r5, [r4, #4]
 8016f74:	60a5      	str	r5, [r4, #8]
 8016f76:	2d00      	cmp	r5, #0
 8016f78:	bfa2      	ittt	ge
 8016f7a:	6821      	ldrge	r1, [r4, #0]
 8016f7c:	f021 0104 	bicge.w	r1, r1, #4
 8016f80:	6021      	strge	r1, [r4, #0]
 8016f82:	b90e      	cbnz	r6, 8016f88 <_printf_i+0x118>
 8016f84:	2d00      	cmp	r5, #0
 8016f86:	d04d      	beq.n	8017024 <_printf_i+0x1b4>
 8016f88:	4615      	mov	r5, r2
 8016f8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8016f8e:	fb03 6711 	mls	r7, r3, r1, r6
 8016f92:	5dc7      	ldrb	r7, [r0, r7]
 8016f94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016f98:	4637      	mov	r7, r6
 8016f9a:	42bb      	cmp	r3, r7
 8016f9c:	460e      	mov	r6, r1
 8016f9e:	d9f4      	bls.n	8016f8a <_printf_i+0x11a>
 8016fa0:	2b08      	cmp	r3, #8
 8016fa2:	d10b      	bne.n	8016fbc <_printf_i+0x14c>
 8016fa4:	6823      	ldr	r3, [r4, #0]
 8016fa6:	07de      	lsls	r6, r3, #31
 8016fa8:	d508      	bpl.n	8016fbc <_printf_i+0x14c>
 8016faa:	6923      	ldr	r3, [r4, #16]
 8016fac:	6861      	ldr	r1, [r4, #4]
 8016fae:	4299      	cmp	r1, r3
 8016fb0:	bfde      	ittt	le
 8016fb2:	2330      	movle	r3, #48	; 0x30
 8016fb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016fb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016fbc:	1b52      	subs	r2, r2, r5
 8016fbe:	6122      	str	r2, [r4, #16]
 8016fc0:	f8cd a000 	str.w	sl, [sp]
 8016fc4:	464b      	mov	r3, r9
 8016fc6:	aa03      	add	r2, sp, #12
 8016fc8:	4621      	mov	r1, r4
 8016fca:	4640      	mov	r0, r8
 8016fcc:	f7ff fee2 	bl	8016d94 <_printf_common>
 8016fd0:	3001      	adds	r0, #1
 8016fd2:	d14c      	bne.n	801706e <_printf_i+0x1fe>
 8016fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8016fd8:	b004      	add	sp, #16
 8016fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fde:	4835      	ldr	r0, [pc, #212]	; (80170b4 <_printf_i+0x244>)
 8016fe0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016fe4:	6829      	ldr	r1, [r5, #0]
 8016fe6:	6823      	ldr	r3, [r4, #0]
 8016fe8:	f851 6b04 	ldr.w	r6, [r1], #4
 8016fec:	6029      	str	r1, [r5, #0]
 8016fee:	061d      	lsls	r5, r3, #24
 8016ff0:	d514      	bpl.n	801701c <_printf_i+0x1ac>
 8016ff2:	07df      	lsls	r7, r3, #31
 8016ff4:	bf44      	itt	mi
 8016ff6:	f043 0320 	orrmi.w	r3, r3, #32
 8016ffa:	6023      	strmi	r3, [r4, #0]
 8016ffc:	b91e      	cbnz	r6, 8017006 <_printf_i+0x196>
 8016ffe:	6823      	ldr	r3, [r4, #0]
 8017000:	f023 0320 	bic.w	r3, r3, #32
 8017004:	6023      	str	r3, [r4, #0]
 8017006:	2310      	movs	r3, #16
 8017008:	e7b0      	b.n	8016f6c <_printf_i+0xfc>
 801700a:	6823      	ldr	r3, [r4, #0]
 801700c:	f043 0320 	orr.w	r3, r3, #32
 8017010:	6023      	str	r3, [r4, #0]
 8017012:	2378      	movs	r3, #120	; 0x78
 8017014:	4828      	ldr	r0, [pc, #160]	; (80170b8 <_printf_i+0x248>)
 8017016:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801701a:	e7e3      	b.n	8016fe4 <_printf_i+0x174>
 801701c:	0659      	lsls	r1, r3, #25
 801701e:	bf48      	it	mi
 8017020:	b2b6      	uxthmi	r6, r6
 8017022:	e7e6      	b.n	8016ff2 <_printf_i+0x182>
 8017024:	4615      	mov	r5, r2
 8017026:	e7bb      	b.n	8016fa0 <_printf_i+0x130>
 8017028:	682b      	ldr	r3, [r5, #0]
 801702a:	6826      	ldr	r6, [r4, #0]
 801702c:	6961      	ldr	r1, [r4, #20]
 801702e:	1d18      	adds	r0, r3, #4
 8017030:	6028      	str	r0, [r5, #0]
 8017032:	0635      	lsls	r5, r6, #24
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	d501      	bpl.n	801703c <_printf_i+0x1cc>
 8017038:	6019      	str	r1, [r3, #0]
 801703a:	e002      	b.n	8017042 <_printf_i+0x1d2>
 801703c:	0670      	lsls	r0, r6, #25
 801703e:	d5fb      	bpl.n	8017038 <_printf_i+0x1c8>
 8017040:	8019      	strh	r1, [r3, #0]
 8017042:	2300      	movs	r3, #0
 8017044:	6123      	str	r3, [r4, #16]
 8017046:	4615      	mov	r5, r2
 8017048:	e7ba      	b.n	8016fc0 <_printf_i+0x150>
 801704a:	682b      	ldr	r3, [r5, #0]
 801704c:	1d1a      	adds	r2, r3, #4
 801704e:	602a      	str	r2, [r5, #0]
 8017050:	681d      	ldr	r5, [r3, #0]
 8017052:	6862      	ldr	r2, [r4, #4]
 8017054:	2100      	movs	r1, #0
 8017056:	4628      	mov	r0, r5
 8017058:	f7e9 f8da 	bl	8000210 <memchr>
 801705c:	b108      	cbz	r0, 8017062 <_printf_i+0x1f2>
 801705e:	1b40      	subs	r0, r0, r5
 8017060:	6060      	str	r0, [r4, #4]
 8017062:	6863      	ldr	r3, [r4, #4]
 8017064:	6123      	str	r3, [r4, #16]
 8017066:	2300      	movs	r3, #0
 8017068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801706c:	e7a8      	b.n	8016fc0 <_printf_i+0x150>
 801706e:	6923      	ldr	r3, [r4, #16]
 8017070:	462a      	mov	r2, r5
 8017072:	4649      	mov	r1, r9
 8017074:	4640      	mov	r0, r8
 8017076:	47d0      	blx	sl
 8017078:	3001      	adds	r0, #1
 801707a:	d0ab      	beq.n	8016fd4 <_printf_i+0x164>
 801707c:	6823      	ldr	r3, [r4, #0]
 801707e:	079b      	lsls	r3, r3, #30
 8017080:	d413      	bmi.n	80170aa <_printf_i+0x23a>
 8017082:	68e0      	ldr	r0, [r4, #12]
 8017084:	9b03      	ldr	r3, [sp, #12]
 8017086:	4298      	cmp	r0, r3
 8017088:	bfb8      	it	lt
 801708a:	4618      	movlt	r0, r3
 801708c:	e7a4      	b.n	8016fd8 <_printf_i+0x168>
 801708e:	2301      	movs	r3, #1
 8017090:	4632      	mov	r2, r6
 8017092:	4649      	mov	r1, r9
 8017094:	4640      	mov	r0, r8
 8017096:	47d0      	blx	sl
 8017098:	3001      	adds	r0, #1
 801709a:	d09b      	beq.n	8016fd4 <_printf_i+0x164>
 801709c:	3501      	adds	r5, #1
 801709e:	68e3      	ldr	r3, [r4, #12]
 80170a0:	9903      	ldr	r1, [sp, #12]
 80170a2:	1a5b      	subs	r3, r3, r1
 80170a4:	42ab      	cmp	r3, r5
 80170a6:	dcf2      	bgt.n	801708e <_printf_i+0x21e>
 80170a8:	e7eb      	b.n	8017082 <_printf_i+0x212>
 80170aa:	2500      	movs	r5, #0
 80170ac:	f104 0619 	add.w	r6, r4, #25
 80170b0:	e7f5      	b.n	801709e <_printf_i+0x22e>
 80170b2:	bf00      	nop
 80170b4:	0801a069 	.word	0x0801a069
 80170b8:	0801a07a 	.word	0x0801a07a

080170bc <_sbrk_r>:
 80170bc:	b538      	push	{r3, r4, r5, lr}
 80170be:	4d06      	ldr	r5, [pc, #24]	; (80170d8 <_sbrk_r+0x1c>)
 80170c0:	2300      	movs	r3, #0
 80170c2:	4604      	mov	r4, r0
 80170c4:	4608      	mov	r0, r1
 80170c6:	602b      	str	r3, [r5, #0]
 80170c8:	f7ea fafa 	bl	80016c0 <_sbrk>
 80170cc:	1c43      	adds	r3, r0, #1
 80170ce:	d102      	bne.n	80170d6 <_sbrk_r+0x1a>
 80170d0:	682b      	ldr	r3, [r5, #0]
 80170d2:	b103      	cbz	r3, 80170d6 <_sbrk_r+0x1a>
 80170d4:	6023      	str	r3, [r4, #0]
 80170d6:	bd38      	pop	{r3, r4, r5, pc}
 80170d8:	2000984c 	.word	0x2000984c

080170dc <__sread>:
 80170dc:	b510      	push	{r4, lr}
 80170de:	460c      	mov	r4, r1
 80170e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170e4:	f000 f8a8 	bl	8017238 <_read_r>
 80170e8:	2800      	cmp	r0, #0
 80170ea:	bfab      	itete	ge
 80170ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80170ee:	89a3      	ldrhlt	r3, [r4, #12]
 80170f0:	181b      	addge	r3, r3, r0
 80170f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80170f6:	bfac      	ite	ge
 80170f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80170fa:	81a3      	strhlt	r3, [r4, #12]
 80170fc:	bd10      	pop	{r4, pc}

080170fe <__swrite>:
 80170fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017102:	461f      	mov	r7, r3
 8017104:	898b      	ldrh	r3, [r1, #12]
 8017106:	05db      	lsls	r3, r3, #23
 8017108:	4605      	mov	r5, r0
 801710a:	460c      	mov	r4, r1
 801710c:	4616      	mov	r6, r2
 801710e:	d505      	bpl.n	801711c <__swrite+0x1e>
 8017110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017114:	2302      	movs	r3, #2
 8017116:	2200      	movs	r2, #0
 8017118:	f000 f870 	bl	80171fc <_lseek_r>
 801711c:	89a3      	ldrh	r3, [r4, #12]
 801711e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017126:	81a3      	strh	r3, [r4, #12]
 8017128:	4632      	mov	r2, r6
 801712a:	463b      	mov	r3, r7
 801712c:	4628      	mov	r0, r5
 801712e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017132:	f000 b817 	b.w	8017164 <_write_r>

08017136 <__sseek>:
 8017136:	b510      	push	{r4, lr}
 8017138:	460c      	mov	r4, r1
 801713a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801713e:	f000 f85d 	bl	80171fc <_lseek_r>
 8017142:	1c43      	adds	r3, r0, #1
 8017144:	89a3      	ldrh	r3, [r4, #12]
 8017146:	bf15      	itete	ne
 8017148:	6560      	strne	r0, [r4, #84]	; 0x54
 801714a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801714e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017152:	81a3      	strheq	r3, [r4, #12]
 8017154:	bf18      	it	ne
 8017156:	81a3      	strhne	r3, [r4, #12]
 8017158:	bd10      	pop	{r4, pc}

0801715a <__sclose>:
 801715a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801715e:	f000 b81b 	b.w	8017198 <_close_r>
	...

08017164 <_write_r>:
 8017164:	b538      	push	{r3, r4, r5, lr}
 8017166:	4d07      	ldr	r5, [pc, #28]	; (8017184 <_write_r+0x20>)
 8017168:	4604      	mov	r4, r0
 801716a:	4608      	mov	r0, r1
 801716c:	4611      	mov	r1, r2
 801716e:	2200      	movs	r2, #0
 8017170:	602a      	str	r2, [r5, #0]
 8017172:	461a      	mov	r2, r3
 8017174:	f7eb f8d6 	bl	8002324 <_write>
 8017178:	1c43      	adds	r3, r0, #1
 801717a:	d102      	bne.n	8017182 <_write_r+0x1e>
 801717c:	682b      	ldr	r3, [r5, #0]
 801717e:	b103      	cbz	r3, 8017182 <_write_r+0x1e>
 8017180:	6023      	str	r3, [r4, #0]
 8017182:	bd38      	pop	{r3, r4, r5, pc}
 8017184:	2000984c 	.word	0x2000984c

08017188 <abort>:
 8017188:	b508      	push	{r3, lr}
 801718a:	2006      	movs	r0, #6
 801718c:	f000 f88e 	bl	80172ac <raise>
 8017190:	2001      	movs	r0, #1
 8017192:	f7ea fa57 	bl	8001644 <_exit>
	...

08017198 <_close_r>:
 8017198:	b538      	push	{r3, r4, r5, lr}
 801719a:	4d06      	ldr	r5, [pc, #24]	; (80171b4 <_close_r+0x1c>)
 801719c:	2300      	movs	r3, #0
 801719e:	4604      	mov	r4, r0
 80171a0:	4608      	mov	r0, r1
 80171a2:	602b      	str	r3, [r5, #0]
 80171a4:	f7ea fa58 	bl	8001658 <_close>
 80171a8:	1c43      	adds	r3, r0, #1
 80171aa:	d102      	bne.n	80171b2 <_close_r+0x1a>
 80171ac:	682b      	ldr	r3, [r5, #0]
 80171ae:	b103      	cbz	r3, 80171b2 <_close_r+0x1a>
 80171b0:	6023      	str	r3, [r4, #0]
 80171b2:	bd38      	pop	{r3, r4, r5, pc}
 80171b4:	2000984c 	.word	0x2000984c

080171b8 <_fstat_r>:
 80171b8:	b538      	push	{r3, r4, r5, lr}
 80171ba:	4d07      	ldr	r5, [pc, #28]	; (80171d8 <_fstat_r+0x20>)
 80171bc:	2300      	movs	r3, #0
 80171be:	4604      	mov	r4, r0
 80171c0:	4608      	mov	r0, r1
 80171c2:	4611      	mov	r1, r2
 80171c4:	602b      	str	r3, [r5, #0]
 80171c6:	f7ea fa53 	bl	8001670 <_fstat>
 80171ca:	1c43      	adds	r3, r0, #1
 80171cc:	d102      	bne.n	80171d4 <_fstat_r+0x1c>
 80171ce:	682b      	ldr	r3, [r5, #0]
 80171d0:	b103      	cbz	r3, 80171d4 <_fstat_r+0x1c>
 80171d2:	6023      	str	r3, [r4, #0]
 80171d4:	bd38      	pop	{r3, r4, r5, pc}
 80171d6:	bf00      	nop
 80171d8:	2000984c 	.word	0x2000984c

080171dc <_isatty_r>:
 80171dc:	b538      	push	{r3, r4, r5, lr}
 80171de:	4d06      	ldr	r5, [pc, #24]	; (80171f8 <_isatty_r+0x1c>)
 80171e0:	2300      	movs	r3, #0
 80171e2:	4604      	mov	r4, r0
 80171e4:	4608      	mov	r0, r1
 80171e6:	602b      	str	r3, [r5, #0]
 80171e8:	f7ea fa52 	bl	8001690 <_isatty>
 80171ec:	1c43      	adds	r3, r0, #1
 80171ee:	d102      	bne.n	80171f6 <_isatty_r+0x1a>
 80171f0:	682b      	ldr	r3, [r5, #0]
 80171f2:	b103      	cbz	r3, 80171f6 <_isatty_r+0x1a>
 80171f4:	6023      	str	r3, [r4, #0]
 80171f6:	bd38      	pop	{r3, r4, r5, pc}
 80171f8:	2000984c 	.word	0x2000984c

080171fc <_lseek_r>:
 80171fc:	b538      	push	{r3, r4, r5, lr}
 80171fe:	4d07      	ldr	r5, [pc, #28]	; (801721c <_lseek_r+0x20>)
 8017200:	4604      	mov	r4, r0
 8017202:	4608      	mov	r0, r1
 8017204:	4611      	mov	r1, r2
 8017206:	2200      	movs	r2, #0
 8017208:	602a      	str	r2, [r5, #0]
 801720a:	461a      	mov	r2, r3
 801720c:	f7ea fa4b 	bl	80016a6 <_lseek>
 8017210:	1c43      	adds	r3, r0, #1
 8017212:	d102      	bne.n	801721a <_lseek_r+0x1e>
 8017214:	682b      	ldr	r3, [r5, #0]
 8017216:	b103      	cbz	r3, 801721a <_lseek_r+0x1e>
 8017218:	6023      	str	r3, [r4, #0]
 801721a:	bd38      	pop	{r3, r4, r5, pc}
 801721c:	2000984c 	.word	0x2000984c

08017220 <__malloc_lock>:
 8017220:	4801      	ldr	r0, [pc, #4]	; (8017228 <__malloc_lock+0x8>)
 8017222:	f7ff bb0d 	b.w	8016840 <__retarget_lock_acquire_recursive>
 8017226:	bf00      	nop
 8017228:	20009850 	.word	0x20009850

0801722c <__malloc_unlock>:
 801722c:	4801      	ldr	r0, [pc, #4]	; (8017234 <__malloc_unlock+0x8>)
 801722e:	f7ff bb08 	b.w	8016842 <__retarget_lock_release_recursive>
 8017232:	bf00      	nop
 8017234:	20009850 	.word	0x20009850

08017238 <_read_r>:
 8017238:	b538      	push	{r3, r4, r5, lr}
 801723a:	4d07      	ldr	r5, [pc, #28]	; (8017258 <_read_r+0x20>)
 801723c:	4604      	mov	r4, r0
 801723e:	4608      	mov	r0, r1
 8017240:	4611      	mov	r1, r2
 8017242:	2200      	movs	r2, #0
 8017244:	602a      	str	r2, [r5, #0]
 8017246:	461a      	mov	r2, r3
 8017248:	f7eb f882 	bl	8002350 <_read>
 801724c:	1c43      	adds	r3, r0, #1
 801724e:	d102      	bne.n	8017256 <_read_r+0x1e>
 8017250:	682b      	ldr	r3, [r5, #0]
 8017252:	b103      	cbz	r3, 8017256 <_read_r+0x1e>
 8017254:	6023      	str	r3, [r4, #0]
 8017256:	bd38      	pop	{r3, r4, r5, pc}
 8017258:	2000984c 	.word	0x2000984c

0801725c <_raise_r>:
 801725c:	291f      	cmp	r1, #31
 801725e:	b538      	push	{r3, r4, r5, lr}
 8017260:	4604      	mov	r4, r0
 8017262:	460d      	mov	r5, r1
 8017264:	d904      	bls.n	8017270 <_raise_r+0x14>
 8017266:	2316      	movs	r3, #22
 8017268:	6003      	str	r3, [r0, #0]
 801726a:	f04f 30ff 	mov.w	r0, #4294967295
 801726e:	bd38      	pop	{r3, r4, r5, pc}
 8017270:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017272:	b112      	cbz	r2, 801727a <_raise_r+0x1e>
 8017274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017278:	b94b      	cbnz	r3, 801728e <_raise_r+0x32>
 801727a:	4620      	mov	r0, r4
 801727c:	f000 f830 	bl	80172e0 <_getpid_r>
 8017280:	462a      	mov	r2, r5
 8017282:	4601      	mov	r1, r0
 8017284:	4620      	mov	r0, r4
 8017286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801728a:	f000 b817 	b.w	80172bc <_kill_r>
 801728e:	2b01      	cmp	r3, #1
 8017290:	d00a      	beq.n	80172a8 <_raise_r+0x4c>
 8017292:	1c59      	adds	r1, r3, #1
 8017294:	d103      	bne.n	801729e <_raise_r+0x42>
 8017296:	2316      	movs	r3, #22
 8017298:	6003      	str	r3, [r0, #0]
 801729a:	2001      	movs	r0, #1
 801729c:	e7e7      	b.n	801726e <_raise_r+0x12>
 801729e:	2400      	movs	r4, #0
 80172a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80172a4:	4628      	mov	r0, r5
 80172a6:	4798      	blx	r3
 80172a8:	2000      	movs	r0, #0
 80172aa:	e7e0      	b.n	801726e <_raise_r+0x12>

080172ac <raise>:
 80172ac:	4b02      	ldr	r3, [pc, #8]	; (80172b8 <raise+0xc>)
 80172ae:	4601      	mov	r1, r0
 80172b0:	6818      	ldr	r0, [r3, #0]
 80172b2:	f7ff bfd3 	b.w	801725c <_raise_r>
 80172b6:	bf00      	nop
 80172b8:	2000002c 	.word	0x2000002c

080172bc <_kill_r>:
 80172bc:	b538      	push	{r3, r4, r5, lr}
 80172be:	4d07      	ldr	r5, [pc, #28]	; (80172dc <_kill_r+0x20>)
 80172c0:	2300      	movs	r3, #0
 80172c2:	4604      	mov	r4, r0
 80172c4:	4608      	mov	r0, r1
 80172c6:	4611      	mov	r1, r2
 80172c8:	602b      	str	r3, [r5, #0]
 80172ca:	f7ea f9a9 	bl	8001620 <_kill>
 80172ce:	1c43      	adds	r3, r0, #1
 80172d0:	d102      	bne.n	80172d8 <_kill_r+0x1c>
 80172d2:	682b      	ldr	r3, [r5, #0]
 80172d4:	b103      	cbz	r3, 80172d8 <_kill_r+0x1c>
 80172d6:	6023      	str	r3, [r4, #0]
 80172d8:	bd38      	pop	{r3, r4, r5, pc}
 80172da:	bf00      	nop
 80172dc:	2000984c 	.word	0x2000984c

080172e0 <_getpid_r>:
 80172e0:	f7ea b996 	b.w	8001610 <_getpid>

080172e4 <_init>:
 80172e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172e6:	bf00      	nop
 80172e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172ea:	bc08      	pop	{r3}
 80172ec:	469e      	mov	lr, r3
 80172ee:	4770      	bx	lr

080172f0 <_fini>:
 80172f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172f2:	bf00      	nop
 80172f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172f6:	bc08      	pop	{r3}
 80172f8:	469e      	mov	lr, r3
 80172fa:	4770      	bx	lr
